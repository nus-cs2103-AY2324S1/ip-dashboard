[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rionshocker":1,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":" * Shows the chat bot, Rion.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"    /** Storage object that deals with loading and saving tasks. */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    /** The unique task list containing all tasks inputted. */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    /** The Ui that deals with interactions with the users. */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * Creates the chatbot with a specific file path.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * It checks whether there is a cached version of the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * The resulting task list will then be saved at the path.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"     * @param filePath Path for the task list to be stored in.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"            taskList \u003d new TaskList(storage.loadList());","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"            ui.showLoadingError(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"     * Runs the chatbot, Rion.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"     * It receives commands and executes them accordingly.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"    private void runRion() {","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"                String fullCommand \u003d ui.nextCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"                ui.printError(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"        Duke rion \u003d new Duke(\"./data/tasks.txt\");","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"        rion.runRion();","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"rionshocker":55,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":" * An Exception class that handles exceptions from the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"        super(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rionshocker":10}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.command.AddToDoCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"import duke.command.UnMarkCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":" * Represents the part of the chatbot that deals with making sense of the command.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"     * Returns a command that is specified in the user input.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * @param command Command that the user keys in.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     * @return the specified command in the user\u0027s input.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException  If input is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"    public static Command parse(String command) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        if (isExitCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"        } else if (isListCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"        } else if (isMarkCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"            String input \u003d command.replaceFirst(\"mark\", \"\").trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"            int index \u003d validateMarkIndex(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"            return new MarkCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"        } else if (isUnMarkCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"            String input \u003d command.replaceFirst(\"unmark\", \"\").trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"            int index \u003d validateMarkIndex(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"            return new UnMarkCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"        } else if (isAddToDoCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"            String todo \u003d command.replaceFirst(\"todo\", \"\").trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"            validateToDo(todo);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"            return new AddToDoCommand(todo);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"        } else if (isAddDeadlineCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"            String[] deadline \u003d validateDeadline(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"            if (isDate(deadline[1])) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"                LocalDateTime deadlineDate \u003d parseDate(deadline[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"                return new AddDeadlineCommand(deadline[0], deadlineDate);","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"                return new AddDeadlineCommand(deadline[0], deadline[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"        } else if (isAddEventCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"            String[] event \u003d validateEvent(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"            if (isDate(event[1])) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"                LocalDateTime eventDate \u003d parseDate(event[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"                LocalDateTime endTime \u003d parseDate(event[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"                return new AddEventCommand(event[0], eventDate, endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"                return new AddEventCommand(event[0], event[1], event[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"        } else if (isDeleteCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"            String input \u003d command.replaceFirst(\"delete\", \"\").trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"            int index \u003d validateDeleteIndex(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"        } else if (isFindCommand(command)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"            String keyword \u003d command.replace(\"find\", \"\").trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"            validateFindInput(keyword);","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"     * Returns the date in the form of a LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"     * @param date Date of the specific Event or Deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"     * @return Date in the form of LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If date is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"    private static LocalDateTime parseDate(String date) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"            return LocalDateTime.parse(date, formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"An error occurred while parsing date: \" + e);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents if the input is a date.","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"rionshocker"},"content":"     * @param input Date that user keyed in.","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a date, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"rionshocker"},"content":"    private static boolean isDate(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"rionshocker"},"content":"        String[] splitInput \u003d input.split(\"-\");","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"rionshocker"},"content":"        if (splitInput.length !\u003d 3 || isNotNumeric(splitInput[0]) || isNotNumeric(splitInput[1])) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"rionshocker"},"content":"            return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"rionshocker"},"content":"        String[] yearAndTime \u003d splitInput[2].split(\" \");","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"rionshocker"},"content":"        if (yearAndTime.length !\u003d 2 || isNotNumeric(yearAndTime[0]) || isNotNumeric(yearAndTime[1])) {","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"rionshocker"},"content":"            return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"rionshocker"},"content":"        return true;","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"rionshocker"},"content":"     * Returns the index to be marked.","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"rionshocker"},"content":"     * @param markInput The index to be checked if it is valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"rionshocker"},"content":"     * @return The index to be marked.","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If index is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"rionshocker"},"content":"    private static int validateMarkIndex(String markInput) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"rionshocker"},"content":"        return validateMarkOrDeleteIndex(markInput);","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"rionshocker"},"content":"     * Return the index to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"rionshocker"},"content":"     * @param deleteInput The index to be checked if it is valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"rionshocker"},"content":"     * @return The index to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If index is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"rionshocker"},"content":"    private static int validateDeleteIndex(String deleteInput) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"rionshocker"},"content":"        return validateMarkOrDeleteIndex(deleteInput);","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"rionshocker"},"content":"     * Returns the index in the form of an integer.","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"rionshocker"},"content":"     * @param input The index to be changed into an integer.","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"rionshocker"},"content":"     * @return Integer that represents the index.","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If input is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"rionshocker"},"content":"    private static int validateMarkOrDeleteIndex(String input) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"rionshocker"},"content":"        if (input.isEmpty() || isNotNumeric(input)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! The index to edit is not valid!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"rionshocker"},"content":"        return Integer.parseInt(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean representing if the input is a number.","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"rionshocker"},"content":"     * @param input Input to check if it is a number.","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"rionshocker"},"content":"     * @return True if input is not a number, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"rionshocker"},"content":"    private static boolean isNotNumeric(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"rionshocker"},"content":"        return !input.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"rionshocker"},"content":"     * Checks if ToDo task is valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"rionshocker"},"content":"     * @param todoString Description of the ToDo.","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If Description is incomplete.","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"rionshocker"},"content":"    private static void validateToDo(String todoString) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"rionshocker"},"content":"        if (todoString.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! The description of a ToDo cannot be empty!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"rionshocker"},"content":"     * Returns an array of String representing the various components of an Event.","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"rionshocker"},"content":"     * @param input String input of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"rionshocker"},"content":"     * @return an array of String objects that represent an Event.","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If input is invalid or missing details.","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"rionshocker"},"content":"    private static String[] validateEvent(String input) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"rionshocker"},"content":"        String description \u003d input.replace(\"event \", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"rionshocker"},"content":"        String[] details \u003d description.split(\" /\");","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"rionshocker"},"content":"        if (details.length !\u003d 3) {","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! You need to include the details!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"rionshocker"},"content":"        details[1] \u003d details[1].replace(\"from \", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"rionshocker"},"content":"        details[2] \u003d details[2].replace(\"to \", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"rionshocker"},"content":"        if (details[1].isEmpty() || details[2].isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! Please make sure the dates are not empty!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"rionshocker"},"content":"        return details;","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"rionshocker"},"content":"     * Returns an array of String objects that represents a Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"rionshocker"},"content":"     * @param input Input for a Deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"rionshocker"},"content":"     * @return an array of String objects that represents a Deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If input is invalid or incomplete.","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"rionshocker"},"content":"    private static String[] validateDeadline(String input) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"rionshocker"},"content":"        if (input.equals(\"deadline\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! You need to include the deadline!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"rionshocker"},"content":"        String description \u003d input.replace(\"deadline \", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"rionshocker"},"content":"        String[] details \u003d description.split(\" /by \");","lastModifiedDate":"2023-08-29"},{"lineNumber":204,"author":{"gitId":"rionshocker"},"content":"        if (details.length !\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! You need to include the deadline!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":206,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"rionshocker"},"content":"        return details;","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":209,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":210,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":211,"author":{"gitId":"rionshocker"},"content":"     * Checks if the input is valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":213,"author":{"gitId":"rionshocker"},"content":"     * @param input The keyword to be found.","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If there is no keyword.","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"rionshocker"},"content":"    private static void validateFindInput(String input) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"rionshocker"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS!! The filter is not supposed to be empty!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":219,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":220,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":223,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is an exit command.","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is an exit command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":227,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":228,"author":{"gitId":"rionshocker"},"content":"    private static boolean isExitCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"rionshocker"},"content":"        return input.equals(\"bye\");","lastModifiedDate":"2023-08-29"},{"lineNumber":230,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":231,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":232,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":233,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is a list command.","lastModifiedDate":"2023-08-29"},{"lineNumber":234,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":235,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":236,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a list command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":237,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":238,"author":{"gitId":"rionshocker"},"content":"    private static boolean isListCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":239,"author":{"gitId":"rionshocker"},"content":"        return input.equals(\"list\");","lastModifiedDate":"2023-08-29"},{"lineNumber":240,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":241,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":242,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":243,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is a mark command.","lastModifiedDate":"2023-08-29"},{"lineNumber":244,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":245,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":246,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a mark command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":247,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":248,"author":{"gitId":"rionshocker"},"content":"    private static boolean isMarkCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":249,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"mark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":250,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":251,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":252,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":253,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is a add ToDo command.","lastModifiedDate":"2023-08-29"},{"lineNumber":254,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":255,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":256,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a add ToDo command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":257,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":258,"author":{"gitId":"rionshocker"},"content":"    private static boolean isAddToDoCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":259,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"todo\");","lastModifiedDate":"2023-08-29"},{"lineNumber":260,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":261,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":262,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":263,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is an add deadline command.","lastModifiedDate":"2023-08-29"},{"lineNumber":264,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":265,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":266,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is an add deadline command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":267,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":268,"author":{"gitId":"rionshocker"},"content":"    private static boolean isAddDeadlineCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":269,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"deadline\");","lastModifiedDate":"2023-08-29"},{"lineNumber":270,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":271,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":272,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":273,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is an add event command.","lastModifiedDate":"2023-08-29"},{"lineNumber":274,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":275,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":276,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is an add event command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":277,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":278,"author":{"gitId":"rionshocker"},"content":"    private static boolean isAddEventCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":279,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"event\");","lastModifiedDate":"2023-08-29"},{"lineNumber":280,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":281,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":282,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":283,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is a delete command.","lastModifiedDate":"2023-08-29"},{"lineNumber":284,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":285,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":286,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a delete command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":287,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":288,"author":{"gitId":"rionshocker"},"content":"    private static boolean isDeleteCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":289,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"delete\");","lastModifiedDate":"2023-08-29"},{"lineNumber":290,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":291,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":292,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":293,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is an unmark command.","lastModifiedDate":"2023-08-29"},{"lineNumber":294,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":295,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":296,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is an unmark command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":297,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":298,"author":{"gitId":"rionshocker"},"content":"    private static boolean isUnMarkCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":299,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"unmark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":300,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":301,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":302,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":303,"author":{"gitId":"rionshocker"},"content":"     * Returns a boolean that represents whether the command is a find command.","lastModifiedDate":"2023-08-29"},{"lineNumber":304,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":305,"author":{"gitId":"rionshocker"},"content":"     * @param input Command to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":306,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is a find command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":307,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":308,"author":{"gitId":"rionshocker"},"content":"    private static boolean isFindCommand(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":309,"author":{"gitId":"rionshocker"},"content":"        return input.startsWith(\"find\");","lastModifiedDate":"2023-08-29"},{"lineNumber":310,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":311,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":311}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":" * Represents the storage class that handles loading and saving the tasks in a list.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    /** The specified file path to be checked and stored in. */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    private String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"     * Constructor for a Storage object.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     * @param filePath Specified file path to check and store tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"     * Returns an array list of tasks after loading the cached list.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"     * Otherwise, returns an empty array list.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"     * @return Array list of tasks from reading the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If the cached list is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"    public ArrayList\u003cTask\u003e loadList() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"            File listFile \u003d new File(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"            if (!listFile.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"                return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(listFile));","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"            String input;","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"            while ((input \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"                String[] splitInput \u003d input.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"                switch (splitInput[0]) {","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"                case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"                    ToDo newToDo \u003d new ToDo(splitInput[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"                    if (Integer.parseInt(splitInput[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"                        newToDo.changeStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"                    taskList.add(newToDo);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"                case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"                    Deadline newDeadline \u003d new Deadline(splitInput[2], splitInput[3]);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"                    if (Integer.parseInt(splitInput[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"                        newDeadline.changeStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"                    taskList.add(newDeadline);","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"                ","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"                case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"                    String[] timeInput \u003d splitInput[3].split(\" to \");","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"                    Event newEvent \u003d new Event(splitInput[2], timeInput[0], timeInput[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"                    if (Integer.parseInt(splitInput[1]) \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"                        newEvent.changeStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"                    taskList.add(newEvent);","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"                    throw new DukeException(\"OOPS! Unexpected type of task found!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"An IOException has occurred!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! Unexpected done value occurred!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"rionshocker"},"content":"     * Saves the list in the memory after inputting into the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"rionshocker"},"content":"     * @param taskList Task List to be saved in the memory.","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If IOException has occurred.","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"rionshocker"},"content":"    public void saveList(ArrayList\u003cTask\u003e taskList) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"rionshocker"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"rionshocker"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"rionshocker"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"rionshocker"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"rionshocker"},"content":"            for (Task t : taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"rionshocker"},"content":"                bw.append(t.getOutputString());","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"rionshocker"},"content":"                bw.append(\"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"rionshocker"},"content":"            bw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"rionshocker"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"An IOException has occurred!\"","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"rionshocker"},"content":"            + e);","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":110}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":" * Represents the task list object that contains an array list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"public class TaskList {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    /** Array List that represents the task list. */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"     * Constructor for creating an empty task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"     * Constructor for when there is successful loading of cached task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"     * @param tasks Task List to be loaded into the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"        this.taskList \u003d tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"     * Returns an array list containing all the tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"     * @return Array list that contains all the tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"     * Returns the task at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"     * @param index Index of the specified task.","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"     * @return The specified task at the index.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"     * Marks the task at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"     * @param index The index of the task to be marked.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"    public void markTask(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"        taskList.get(index).changeStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"     * Adds the task to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"     * Deletes a task at the specified index in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException If index is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"    public void delete(int index) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! The index to remove is invalid!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"        taskList.remove(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"     * Returns the size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"     * @return Size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"    public int size() {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"        return taskList.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"rionshocker"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"rionshocker"},"content":"        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"rionshocker"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"rionshocker"},"content":"            if (t.getDescription().contains(keyword)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"rionshocker"},"content":"                filteredTaskList.add(t);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"rionshocker"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"rionshocker"},"content":"        return filteredTaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":101}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" * Represents the part of the chatbot that deals with interactions with users.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    /** Scanner object to scan user\u0027s input. */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    private Scanner sc;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    /** Constant to represent the partition between commands and outputs. */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    private static String partition \u003d \"--------------------------------------\";","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * Constructor to create an Ui object.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * Starts the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    public Ui() {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition + \"\\n\" + \"Hello! I\u0027m Rion\");","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"        System.out.println(\"What can I do for you?\\n\" + partition);","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"     * Represents the output after successfully adding a task to the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"     * @param task The task that got added into the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"     * @param size The changed size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"    public void addToListSuccess(Task task, int size) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition + \"\\nadded:\\n\" + task + \"\\n\" +","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"        \"You have \" + size + \" tasks in the list.\\n\" + partition);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"     * Represents the output after successfully deleting a task from the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"     * @param task The task that got deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"     * @param size The changed size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"    public void deleteFromListSuccess(Task task, int size) {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition + \"\\nOK, I\u0027ve deleted the task:\\n\" ","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"        + task + \"\\nNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"     * Represents the output that outputs the list stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"     * @param taskList Task list saved within the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"    public void printList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition + \"\\nHere are the tasks in your list:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"            System.out.println(index + \". \" + taskList.get(i));","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition);","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"     * Represents the output that is printed when exiting the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"    public void printExitMessage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"        String exitMsg \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"        printMessage(exitMsg);","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"     * Represents the output after an error has occurred.","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"     * @param message The error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"    public void printError(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"        printMessage(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"     * Represents the output after an error occurred during file loading.","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"     * @param error The error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"    public void showLoadingError(String error) {","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"        printMessage(\"OOPS! An error occurred during file loading \" + error);","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"rionshocker"},"content":"     * Represents the output for every command.","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"rionshocker"},"content":"     * @param message The command message.","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"rionshocker"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"rionshocker"},"content":"        System.out.println(partition + \"\\n\" + message + \"\\n\" + partition);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"rionshocker"},"content":"     * Gets the next command inputted.","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"rionshocker"},"content":"     * @return The next command.","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"rionshocker"},"content":"    public String nextCommand() {","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"rionshocker"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":107}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":" * Represents the command to add deadlines.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    /** Description of the deadline task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    /** String that represents the deadline due date. */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"    private String deadlineString;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    /** Deadline date of the task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    private LocalDateTime deadlineDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"     * Constructor used when the date is still a String.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     * @param deadline String representation of the deadline date.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"    public AddDeadlineCommand(String description, String deadline) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        this.deadlineString \u003d deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"     * Constructor used when the date is represented in LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"     * @param deadlineDate Date for the deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"    public AddDeadlineCommand(String description, LocalDateTime deadlineDate) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"        this.deadlineDate \u003d deadlineDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"        Deadline deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"        if (deadlineDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"            deadline \u003d new Deadline(description, deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"            deadline \u003d new Deadline(description, deadlineDate);","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"        taskList.add(deadline);","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"        ui.addToListSuccess(deadline, taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":56}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":" * Represents the command of adding an event to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    /** Description of the event task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    /** Start Time of the event in LocalDateTime. */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    /** End Time of the event in LocalDateTime. */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    /** Start time of the event represented by a String. */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    private String start;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"    /** String representation of the end time for the event. */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    private String end;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     * Constructor when the start time and end time are represented in the proper LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the Event.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"     * @param startTime Start time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"     * @param endTime End time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"    public AddEventCommand(String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"     * Constructor when the start time and end time are represented in Strings.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"     * @param start Start time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"     * @param end End time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"    public AddEventCommand(String description, String start, String end) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"        Event event;","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"        if (startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"            event \u003d new Event(description, start, end);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"            event \u003d new Event(description, startTime, endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"        taskList.add(event);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"        ui.addToListSuccess(event, taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":64}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" * Represents the command to add a todo task in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    /** Description of the todo task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the command.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the ToDo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    public AddToDoCommand(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"        ToDo todo \u003d new ToDo(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        taskList.add(todo);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        ui.addToListSuccess(todo, taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" * Represents commands inputted into the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"public class Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"     * Converts the task to its appropriate form and completes the command.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"     * @param taskList The task list to be stored or deleted in.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * @param ui The Ui that deals with the interaction with the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * @param storage The storage object that helps in loading and storing of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * @throws DukeException if the inputs are invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {};","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"     * Represents whether the command is an exit command or not.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * @return True if it is an exit command, false if otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":30}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" * Represents the command to delete tasks from the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    /** Index of the task to be deleted. */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    private int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the delete command.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * @param index Index to be zero based to fit Array List indexing.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! The index to delete is invalid!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        Task deletedTask \u003d taskList.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"        taskList.delete(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"        ui.deleteFromListSuccess(deletedTask, taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":35}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":" * Represents the exit command to exit the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"        ui.printExitMessage();","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"        return true;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":21}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":" * Represents the command to find keywords in tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    /** Keyword to be searched through task list. */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    private String keyword;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the command to find.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     * @param keyword Keyword to be searched.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        ArrayList\u003cTask\u003e filteredTaskList \u003d taskList.find(keyword);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        ui.printList(filteredTaskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":31}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":" * Represents the command to list out the tasks in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"        ui.printList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":16}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" * Represents the command to mark tasks in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    /** Index of the task to be marked. */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    private int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the mark command.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * @param index Index to be zero based to fit the Array List indexing.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! The index to mark is invalid!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        taskList.markTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        ui.printMessage(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(index));","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":33}},{"path":"src/main/java/duke/command/UnMarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":" * Represents the command to unmark a task in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"public class UnMarkCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    /** Index of the task to be unmarked. */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"    private int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * Constructor for creating the unmark command.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * @param index Index of the task to be zero based.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    public UnMarkCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"        if (index \u003c 0 || index \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"            throw new DukeException(\"OOPS! The index to unmark is invalid!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"        taskList.markTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        ui.printMessage(\"Nice! I\u0027ve marked this task as not completed:\\n\" + taskList.get(index));","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"        storage.saveList(taskList.getAllTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":33}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":" * Represents the deadline tasks and its methods.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"    /** Deadline due date. */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"     * Constructor for a deadline when the due date is represented in a String.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"     * It then converts the string into a LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * @param by String representation of the deadline date.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"        this.deadline \u003d this.convertToDateTime(by);","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * Constructor for a deadline when the due date is in LocalDateTime type.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"     * @param deadline Deadline due date.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of the date.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"     * @return Deadline date.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"    public String displayDeadline() {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"        return this.displayTime(this.deadline);","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of the date to be saved.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"     * @return The saveable form of the date.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"    public String saveDeadline() {","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"        return this.saveTime(this.deadline);","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"    public String getOutputString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, this.saveDeadline());","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.displayDeadline() + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rionshocker":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":" * Represents the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"    /** Start date and time of the event. */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"    protected LocalDateTime startTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    /** End date and time of the event.  */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    protected LocalDateTime endTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the event task if the start and end times are represented in a string.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     * @param startTime Start date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"     * @param endTime End date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"        this.startTime \u003d this.convertToDateTime(startTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"        this.endTime \u003d this.convertToDateTime(endTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"     * Constructor for the event task when start and end times are properly represented.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"     * @param startTime Start date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"     * @param endTime End date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of the start date and time. ","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"     * @return Start date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"    public String displayStartTime() {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"        return this.displayTime(startTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"     *  Returns a string representation of the start date and time to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"     * @return Start date and time of the event in a storeable format.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"    public String saveStartTime() {","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"        return this.saveTime(this.startTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of the end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"     * @return End date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"    public String displayEndTime() {","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"        return this.displayTime(this.endTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of the end date and time to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"     * @return End date and time of the event in a storeable format.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"    public String saveEndTime() {","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"        return this.saveTime(this.endTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"    public String getOutputString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, ","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"        this.saveStartTime().concat(\" to \" + this.saveEndTime()));","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.displayStartTime() + \" to: \" ","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"        + this.displayEndTime() + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rionshocker":87}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":" * Represents a task in the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"    /** Description of the task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    /** Boolean that represents whether the task has been completed. */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"     * Constructor for a task.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"     * Returns a string representation of whether the task is completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"     * @return X if completed, empty if not completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"rionshocker"},"content":"     * Changes the status of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"rionshocker"},"content":"    public void changeStatus() {","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"rionshocker"},"content":"        this.isDone \u003d !this.isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"rionshocker"},"content":"     * Returns the DateTime of a task from parsing a String representation.","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"rionshocker"},"content":"     * @param str The date and time to be converted to LocalDateTime.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"rionshocker"},"content":"     * @return The date and time in LocalDateTime type.","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"rionshocker"},"content":"    public LocalDateTime convertToDateTime(String str) {","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"rionshocker"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"rionshocker"},"content":"        return LocalDateTime.parse(str, formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"rionshocker"},"content":"     * Returns the date and time of a task in a saveable format.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"rionshocker"},"content":"     * @param time Date and time to be converted.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"rionshocker"},"content":"     * @return String representation of the date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"rionshocker"},"content":"    public String saveTime(LocalDateTime time) {","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"rionshocker"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"rionshocker"},"content":"        return time.format(formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"rionshocker"},"content":"     * Returns the date and time of a task to be outputted.","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"rionshocker"},"content":"     * @param time Date and time of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"rionshocker"},"content":"     * @return Date and time of a task in the display format.","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"rionshocker"},"content":"    public String displayTime(LocalDateTime time) {","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"rionshocker"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"rionshocker"},"content":"        return time.format(formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"rionshocker"},"content":"     * Returns the output to be printed after executing commands.","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"rionshocker"},"content":"     * @return Details of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"rionshocker"},"content":"    public String getOutputString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"rionshocker"},"content":"        return String.format(\"X | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"rionshocker"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"rionshocker"},"content":"     * @return Description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"rionshocker"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"rionshocker"},"content":"        return this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"rionshocker"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"rionshocker"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description; ","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rionshocker":95}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":" * Represents a todo task in the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"     * Constructor for a todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"     * ","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    public String getOutputString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"    ","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rionshocker":25}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"    public void TaskListConstructorTest() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"        assertEquals(0, test.size(), \"Initial size of the task list should be zero\");","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"rionshocker"},"content":"        ToDo toDo \u003d new ToDo(\"todo\");","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"rionshocker"},"content":"        test.add(toDo);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"rionshocker"},"content":"        assertEquals(toDo, test.get(0), \"Test insert todo task into list\");","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"rionshocker"},"content":"        assertEquals(1, test.size(), \"Test insert todo task into list\");","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"rionshocker"},"content":"        test.delete(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"rionshocker"},"content":"        assertEquals(0, test.size(), \"Test deleting of task from list\");","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":30}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"    @Test ","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"    public void deadlineTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"        Deadline testDeadline \u003d new Deadline(\"deadline\", \"2019-10-15 1800\");","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"rionshocker"},"content":"        assertEquals(\"[D][ ] deadline (by: Oct 15 2019 18:00)\", ","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"rionshocker"},"content":"        testDeadline.toString(), \"toString() method works\");","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"rionshocker"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"rionshocker"},"content":"        testDeadline.changeStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"rionshocker"},"content":"        assertEquals(\"[D][X] deadline (by: Oct 15 2019 18:00)\", ","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"rionshocker"},"content":"        testDeadline.toString(), \"changeStatus() method works\");","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"rionshocker"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"rionshocker"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"rionshocker":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rionshocker"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"rionshocker"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"rionshocker"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"rionshocker"},"content":"todo join sports club","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"rionshocker"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"rionshocker"},"content":"mark 4","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"rionshocker"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"rionshocker"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"rionshocker"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"rionshocker"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"rionshocker"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"rionshocker"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rionshocker":12}}]
