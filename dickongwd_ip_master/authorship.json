[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public enum Command {","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    TODO,","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"    EVENT,","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"    LIST,","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"    MARK,","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"    UNMARK,","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"    DELETE,","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"    BYE,","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"    INVALID","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":11}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    String by;","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"    public Deadline(String desc, String by) {","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"        super(desc);","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), by);","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":13}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-18"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"import java.util.List;","lastModifiedDate":"2023-08-18"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-18"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"    public static final String NAME \u003d \"Buzu\";","lastModifiedDate":"2023-08-18"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"    private static final String DIVIDER \u003d \"__________________________________________________\";","lastModifiedDate":"2023-08-18"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"    private static final String INDENT \u003d \"    \";","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"    private static final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-18"},{"lineNumber":12,"author":{"gitId":"dickongwd"},"content":"     * Utility function to add indentation when printing line.","lastModifiedDate":"2023-08-18"},{"lineNumber":13,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-18"},{"lineNumber":14,"author":{"gitId":"dickongwd"},"content":"     * @param line The line to be indented","lastModifiedDate":"2023-08-18"},{"lineNumber":15,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-18"},{"lineNumber":16,"author":{"gitId":"dickongwd"},"content":"    private static void printLine(String line) {","lastModifiedDate":"2023-08-18"},{"lineNumber":17,"author":{"gitId":"dickongwd"},"content":"        System.out.println(INDENT + line);","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-18"},{"lineNumber":19,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-18"},{"lineNumber":20,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-18"},{"lineNumber":21,"author":{"gitId":"dickongwd"},"content":"     * Utility function for chatbot to send a formatted response to the user.","lastModifiedDate":"2023-08-18"},{"lineNumber":22,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-18"},{"lineNumber":23,"author":{"gitId":"dickongwd"},"content":"     * @param text The text to respond with","lastModifiedDate":"2023-08-18"},{"lineNumber":24,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-18"},{"lineNumber":25,"author":{"gitId":"dickongwd"},"content":"    private static void say(String... text) {","lastModifiedDate":"2023-08-18"},{"lineNumber":26,"author":{"gitId":"dickongwd"},"content":"        printLine(DIVIDER);","lastModifiedDate":"2023-08-18"},{"lineNumber":27,"author":{"gitId":"dickongwd"},"content":"        for (String line : text) {","lastModifiedDate":"2023-08-18"},{"lineNumber":28,"author":{"gitId":"dickongwd"},"content":"            printLine(line);","lastModifiedDate":"2023-08-18"},{"lineNumber":29,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-18"},{"lineNumber":30,"author":{"gitId":"dickongwd"},"content":"        printLine(DIVIDER);","lastModifiedDate":"2023-08-18"},{"lineNumber":31,"author":{"gitId":"dickongwd"},"content":"        System.out.println();","lastModifiedDate":"2023-08-18"},{"lineNumber":32,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-18"},{"lineNumber":33,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-18"},{"lineNumber":34,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":35,"author":{"gitId":"dickongwd"},"content":"     * Utility function to return the command type of a given command string.","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"dickongwd"},"content":"     * @param command The command string to parse","lastModifiedDate":"2023-08-19"},{"lineNumber":38,"author":{"gitId":"dickongwd"},"content":"     * @return The Command type of the parsed string","lastModifiedDate":"2023-08-19"},{"lineNumber":39,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":40,"author":{"gitId":"dickongwd"},"content":"    private static Command getCommandType(String command) {","lastModifiedDate":"2023-08-19"},{"lineNumber":41,"author":{"gitId":"dickongwd"},"content":"        try {","lastModifiedDate":"2023-08-19"},{"lineNumber":42,"author":{"gitId":"dickongwd"},"content":"            return Command.valueOf(command.toUpperCase());","lastModifiedDate":"2023-08-19"},{"lineNumber":43,"author":{"gitId":"dickongwd"},"content":"        } catch (IllegalArgumentException err) {","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"dickongwd"},"content":"            return Command.INVALID;","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":46,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":47,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":48,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":49,"author":{"gitId":"dickongwd"},"content":"     * Handler for the todo command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":51,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the todo command","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":54,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleTodo(String input) {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[3];","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"dickongwd"},"content":"        Todo task \u003d new Todo(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"dickongwd"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":59,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"dickongwd"},"content":"        response[2] \u003d String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"dickongwd"},"content":"                tasks.size(),","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"dickongwd"},"content":"                tasks.size() \u003d\u003d 1 ? \"\" : \"s\");","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":66,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":67,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"dickongwd"},"content":"     * Handler for the deadline command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the deadline command","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"dickongwd"},"content":"     * @throws DukeException if input for deadline is missing the \"/by\" keyword","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleDeadline(String input) throws DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[3];","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"dickongwd"},"content":"        String[] tokens \u003d input.split(\" /by \", 2);","lastModifiedDate":"2023-08-19"},{"lineNumber":77,"author":{"gitId":"dickongwd"},"content":"        if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Deadline is missing the /by keyword\");","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":81,"author":{"gitId":"dickongwd"},"content":"        Deadline task \u003d new Deadline(tokens[0], tokens[1]);","lastModifiedDate":"2023-08-19"},{"lineNumber":82,"author":{"gitId":"dickongwd"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-21"},{"lineNumber":83,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":84,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":85,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":86,"author":{"gitId":"dickongwd"},"content":"        response[2] \u003d String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"dickongwd"},"content":"                tasks.size(),","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"dickongwd"},"content":"                tasks.size() \u003d\u003d 1 ? \"\" : \"s\");","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":91,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":92,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"dickongwd"},"content":"     * Handler for the event command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the event command","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"dickongwd"},"content":"     * @throws DukeException if input for event is missing the \"/from\" or \"/to\" keyword","lastModifiedDate":"2023-08-21"},{"lineNumber":98,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":99,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleEvent(String input) throws DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":100,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[3];","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"dickongwd"},"content":"        String[] tokens \u003d input.split(\" /from \", 2);","lastModifiedDate":"2023-08-19"},{"lineNumber":102,"author":{"gitId":"dickongwd"},"content":"        if (tokens.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":103,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Event is missing the /from keyword\");","lastModifiedDate":"2023-08-21"},{"lineNumber":104,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"dickongwd"},"content":"        String[] tokens2 \u003d tokens[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-19"},{"lineNumber":106,"author":{"gitId":"dickongwd"},"content":"        if (tokens2.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Event is missing the /to keyword\");","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"dickongwd"},"content":"        Event task \u003d new Event(tokens[0], tokens2[0], tokens2[1]);","lastModifiedDate":"2023-08-19"},{"lineNumber":111,"author":{"gitId":"dickongwd"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Got it. I\u0027ve added this task:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"dickongwd"},"content":"        response[2] \u003d String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"dickongwd"},"content":"                tasks.size(),","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"dickongwd"},"content":"                tasks.size() \u003d\u003d 1 ? \"\" : \"s\");","lastModifiedDate":"2023-08-21"},{"lineNumber":118,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":120,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":121,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":122,"author":{"gitId":"dickongwd"},"content":"     * Handler for the list command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":123,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":124,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":125,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":126,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleList() {","lastModifiedDate":"2023-08-21"},{"lineNumber":127,"author":{"gitId":"dickongwd"},"content":"        String[] response;","lastModifiedDate":"2023-08-21"},{"lineNumber":128,"author":{"gitId":"dickongwd"},"content":"        int numTasks \u003d tasks.size();","lastModifiedDate":"2023-08-19"},{"lineNumber":129,"author":{"gitId":"dickongwd"},"content":"        if (numTasks \u003d\u003d 0) {","lastModifiedDate":"2023-08-19"},{"lineNumber":130,"author":{"gitId":"dickongwd"},"content":"            response \u003d new String[1];","lastModifiedDate":"2023-08-21"},{"lineNumber":131,"author":{"gitId":"dickongwd"},"content":"            response[0] \u003d \"There are no items in your list.\";","lastModifiedDate":"2023-08-21"},{"lineNumber":132,"author":{"gitId":"dickongwd"},"content":"        } else {","lastModifiedDate":"2023-08-19"},{"lineNumber":133,"author":{"gitId":"dickongwd"},"content":"            response \u003d new String[numTasks + 1];","lastModifiedDate":"2023-08-21"},{"lineNumber":134,"author":{"gitId":"dickongwd"},"content":"            response[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2023-08-19"},{"lineNumber":135,"author":{"gitId":"dickongwd"},"content":"            for (int i \u003d 0; i \u003c numTasks; i++) {","lastModifiedDate":"2023-08-19"},{"lineNumber":136,"author":{"gitId":"dickongwd"},"content":"                response[i + 1] \u003d (i + 1 + \". \" + tasks.get(i));","lastModifiedDate":"2023-08-19"},{"lineNumber":137,"author":{"gitId":"dickongwd"},"content":"            }","lastModifiedDate":"2023-08-19"},{"lineNumber":138,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":139,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":140,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":141,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":142,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":143,"author":{"gitId":"dickongwd"},"content":"     * Handler for the mark command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":144,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":145,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the mark command","lastModifiedDate":"2023-08-21"},{"lineNumber":146,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":147,"author":{"gitId":"dickongwd"},"content":"     * @throws DukeException if input for mark is not an integer or","lastModifiedDate":"2023-08-21"},{"lineNumber":148,"author":{"gitId":"dickongwd"},"content":"     *                       if the integer is out of bounds","lastModifiedDate":"2023-08-21"},{"lineNumber":149,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":150,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleMark(String input) throws DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":151,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[2];","lastModifiedDate":"2023-08-21"},{"lineNumber":152,"author":{"gitId":"dickongwd"},"content":"        int taskNum;","lastModifiedDate":"2023-08-21"},{"lineNumber":153,"author":{"gitId":"dickongwd"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":154,"author":{"gitId":"dickongwd"},"content":"            taskNum \u003d Integer.parseInt(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"dickongwd"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":156,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Mark can only take an integer task number\");","lastModifiedDate":"2023-08-21"},{"lineNumber":157,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":158,"author":{"gitId":"dickongwd"},"content":"        if (taskNum \u003c 0 || taskNum \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Task number does not exist\");","lastModifiedDate":"2023-08-21"},{"lineNumber":160,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":161,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":162,"author":{"gitId":"dickongwd"},"content":"        Task task \u003d tasks.get(taskNum - 1);","lastModifiedDate":"2023-08-19"},{"lineNumber":163,"author":{"gitId":"dickongwd"},"content":"        task.mark();","lastModifiedDate":"2023-08-19"},{"lineNumber":164,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":167,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":168,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":169,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":170,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":171,"author":{"gitId":"dickongwd"},"content":"     * Handler for the unmark command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":172,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":173,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the unmark command","lastModifiedDate":"2023-08-21"},{"lineNumber":174,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":175,"author":{"gitId":"dickongwd"},"content":"     * @throws DukeException if input for unmark is not an integer or","lastModifiedDate":"2023-08-21"},{"lineNumber":176,"author":{"gitId":"dickongwd"},"content":"     *                       if the integer is out of bounds","lastModifiedDate":"2023-08-21"},{"lineNumber":177,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":178,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleUnmark(String input) throws DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":179,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[2];","lastModifiedDate":"2023-08-21"},{"lineNumber":180,"author":{"gitId":"dickongwd"},"content":"        int taskNum;","lastModifiedDate":"2023-08-21"},{"lineNumber":181,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":182,"author":{"gitId":"dickongwd"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":183,"author":{"gitId":"dickongwd"},"content":"            taskNum \u003d Integer.parseInt(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":184,"author":{"gitId":"dickongwd"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":185,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Unmark can only take an integer task number\");","lastModifiedDate":"2023-08-21"},{"lineNumber":186,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":187,"author":{"gitId":"dickongwd"},"content":"        if (taskNum \u003c 0 || taskNum \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":188,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Task number does not exist\");","lastModifiedDate":"2023-08-21"},{"lineNumber":189,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":190,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":191,"author":{"gitId":"dickongwd"},"content":"        Task task \u003d tasks.get(taskNum - 1);","lastModifiedDate":"2023-08-19"},{"lineNumber":192,"author":{"gitId":"dickongwd"},"content":"        task.unmark();","lastModifiedDate":"2023-08-19"},{"lineNumber":193,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":194,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Ok, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":195,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":196,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":197,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":198,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":199,"author":{"gitId":"dickongwd"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":200,"author":{"gitId":"dickongwd"},"content":"     * Handler for the delete command. Generates the required response.","lastModifiedDate":"2023-08-21"},{"lineNumber":201,"author":{"gitId":"dickongwd"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":202,"author":{"gitId":"dickongwd"},"content":"     * @param input The parameters for the delete command","lastModifiedDate":"2023-08-21"},{"lineNumber":203,"author":{"gitId":"dickongwd"},"content":"     * @return The response string to the user","lastModifiedDate":"2023-08-21"},{"lineNumber":204,"author":{"gitId":"dickongwd"},"content":"     * @throws DukeException if input for delete is not an integer or","lastModifiedDate":"2023-08-21"},{"lineNumber":205,"author":{"gitId":"dickongwd"},"content":"     *                       if the integer is out of bounds","lastModifiedDate":"2023-08-21"},{"lineNumber":206,"author":{"gitId":"dickongwd"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":207,"author":{"gitId":"dickongwd"},"content":"    private static String[] handleDelete(String input) throws DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":208,"author":{"gitId":"dickongwd"},"content":"        String[] response \u003d new String[3];","lastModifiedDate":"2023-08-21"},{"lineNumber":209,"author":{"gitId":"dickongwd"},"content":"        int taskNum;","lastModifiedDate":"2023-08-21"},{"lineNumber":210,"author":{"gitId":"dickongwd"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":211,"author":{"gitId":"dickongwd"},"content":"            taskNum \u003d Integer.parseInt(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":212,"author":{"gitId":"dickongwd"},"content":"        } catch (NumberFormatException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":213,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Delete can only take an integer task number\");","lastModifiedDate":"2023-08-21"},{"lineNumber":214,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":215,"author":{"gitId":"dickongwd"},"content":"        if (taskNum \u003c 0 || taskNum \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":216,"author":{"gitId":"dickongwd"},"content":"            throw new DukeException(\"Task number does not exist\");","lastModifiedDate":"2023-08-21"},{"lineNumber":217,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":218,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":219,"author":{"gitId":"dickongwd"},"content":"        Task task \u003d tasks.get(taskNum - 1);","lastModifiedDate":"2023-08-21"},{"lineNumber":220,"author":{"gitId":"dickongwd"},"content":"        tasks.remove(taskNum - 1);","lastModifiedDate":"2023-08-21"},{"lineNumber":221,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":222,"author":{"gitId":"dickongwd"},"content":"        response[0] \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2023-08-21"},{"lineNumber":223,"author":{"gitId":"dickongwd"},"content":"        response[1] \u003d INDENT + task;","lastModifiedDate":"2023-08-21"},{"lineNumber":224,"author":{"gitId":"dickongwd"},"content":"        response[2] \u003d String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2023-08-21"},{"lineNumber":225,"author":{"gitId":"dickongwd"},"content":"                tasks.size(),","lastModifiedDate":"2023-08-21"},{"lineNumber":226,"author":{"gitId":"dickongwd"},"content":"                tasks.size() \u003d\u003d 1 ? \"\" : \"s\");","lastModifiedDate":"2023-08-21"},{"lineNumber":227,"author":{"gitId":"dickongwd"},"content":"        return response;","lastModifiedDate":"2023-08-21"},{"lineNumber":228,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":229,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":231,"author":{"gitId":"dickongwd"},"content":"        say(\"Hello! I\u0027m \" + NAME + \".\", \"What can I do for you?\");","lastModifiedDate":"2023-08-18"},{"lineNumber":232,"author":{"gitId":"dickongwd"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-18"},{"lineNumber":233,"author":{"gitId":"dickongwd"},"content":"        boolean stopped \u003d false;","lastModifiedDate":"2023-08-18"},{"lineNumber":234,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":235,"author":{"gitId":"dickongwd"},"content":"        while (!stopped \u0026\u0026 scanner.hasNextLine()) {","lastModifiedDate":"2023-08-18"},{"lineNumber":236,"author":{"gitId":"dickongwd"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-19"},{"lineNumber":237,"author":{"gitId":"dickongwd"},"content":"            String[] params \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-19"},{"lineNumber":238,"author":{"gitId":"dickongwd"},"content":"            Command command \u003d getCommandType(params[0]);","lastModifiedDate":"2023-08-19"},{"lineNumber":239,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":240,"author":{"gitId":"dickongwd"},"content":"            switch (command) {","lastModifiedDate":"2023-08-18"},{"lineNumber":241,"author":{"gitId":"dickongwd"},"content":"                case TODO: {","lastModifiedDate":"2023-08-21"},{"lineNumber":242,"author":{"gitId":"dickongwd"},"content":"                    if (params.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":243,"author":{"gitId":"dickongwd"},"content":"                        say(\"Sorry, but the description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":244,"author":{"gitId":"dickongwd"},"content":"                    } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":245,"author":{"gitId":"dickongwd"},"content":"                        String[] response \u003d handleTodo(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":246,"author":{"gitId":"dickongwd"},"content":"                        say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":247,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":248,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":249,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":250,"author":{"gitId":"dickongwd"},"content":"                case DEADLINE: {","lastModifiedDate":"2023-08-21"},{"lineNumber":251,"author":{"gitId":"dickongwd"},"content":"                    if (params.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":252,"author":{"gitId":"dickongwd"},"content":"                        say(\"Sorry, but the description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":253,"author":{"gitId":"dickongwd"},"content":"                    } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":254,"author":{"gitId":"dickongwd"},"content":"                        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":255,"author":{"gitId":"dickongwd"},"content":"                            String[] response \u003d handleDeadline(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":256,"author":{"gitId":"dickongwd"},"content":"                            say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":257,"author":{"gitId":"dickongwd"},"content":"                        } catch (DukeException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":258,"author":{"gitId":"dickongwd"},"content":"                            say(err.getMessage() + \".\");","lastModifiedDate":"2023-08-21"},{"lineNumber":259,"author":{"gitId":"dickongwd"},"content":"                        }","lastModifiedDate":"2023-08-21"},{"lineNumber":260,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":261,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":262,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":263,"author":{"gitId":"dickongwd"},"content":"                case EVENT: {","lastModifiedDate":"2023-08-21"},{"lineNumber":264,"author":{"gitId":"dickongwd"},"content":"                    if (params.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":265,"author":{"gitId":"dickongwd"},"content":"                        say(\"Sorry, but the description of a event cannot be empty.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":266,"author":{"gitId":"dickongwd"},"content":"                    } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":267,"author":{"gitId":"dickongwd"},"content":"                        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":268,"author":{"gitId":"dickongwd"},"content":"                            String[] response \u003d handleEvent(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":269,"author":{"gitId":"dickongwd"},"content":"                            say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":270,"author":{"gitId":"dickongwd"},"content":"                        } catch (DukeException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":271,"author":{"gitId":"dickongwd"},"content":"                            say(err.getMessage() + \".\");","lastModifiedDate":"2023-08-21"},{"lineNumber":272,"author":{"gitId":"dickongwd"},"content":"                        }","lastModifiedDate":"2023-08-21"},{"lineNumber":273,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":274,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":275,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":276,"author":{"gitId":"dickongwd"},"content":"                case LIST: {","lastModifiedDate":"2023-08-21"},{"lineNumber":277,"author":{"gitId":"dickongwd"},"content":"                    String[] response \u003d handleList();","lastModifiedDate":"2023-08-21"},{"lineNumber":278,"author":{"gitId":"dickongwd"},"content":"                    say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":279,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-18"},{"lineNumber":280,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":281,"author":{"gitId":"dickongwd"},"content":"                case MARK: {","lastModifiedDate":"2023-08-21"},{"lineNumber":282,"author":{"gitId":"dickongwd"},"content":"                    try {","lastModifiedDate":"2023-08-21"},{"lineNumber":283,"author":{"gitId":"dickongwd"},"content":"                        String[] response \u003d handleMark(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":284,"author":{"gitId":"dickongwd"},"content":"                        say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":285,"author":{"gitId":"dickongwd"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":286,"author":{"gitId":"dickongwd"},"content":"                        say(err.getMessage() + \".\");","lastModifiedDate":"2023-08-21"},{"lineNumber":287,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":288,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":289,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":290,"author":{"gitId":"dickongwd"},"content":"                case UNMARK: {","lastModifiedDate":"2023-08-21"},{"lineNumber":291,"author":{"gitId":"dickongwd"},"content":"                    try {","lastModifiedDate":"2023-08-21"},{"lineNumber":292,"author":{"gitId":"dickongwd"},"content":"                        String[] response \u003d handleUnmark(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":293,"author":{"gitId":"dickongwd"},"content":"                        say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":294,"author":{"gitId":"dickongwd"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":295,"author":{"gitId":"dickongwd"},"content":"                        say(err.getMessage() + \".\");","lastModifiedDate":"2023-08-21"},{"lineNumber":296,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":297,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":298,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":299,"author":{"gitId":"dickongwd"},"content":"                case DELETE: {","lastModifiedDate":"2023-08-21"},{"lineNumber":300,"author":{"gitId":"dickongwd"},"content":"                    try {","lastModifiedDate":"2023-08-21"},{"lineNumber":301,"author":{"gitId":"dickongwd"},"content":"                        String[] response \u003d handleDelete(params[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":302,"author":{"gitId":"dickongwd"},"content":"                        say(response);","lastModifiedDate":"2023-08-21"},{"lineNumber":303,"author":{"gitId":"dickongwd"},"content":"                    } catch (DukeException err) {","lastModifiedDate":"2023-08-21"},{"lineNumber":304,"author":{"gitId":"dickongwd"},"content":"                        say(err.getMessage() + \".\");","lastModifiedDate":"2023-08-21"},{"lineNumber":305,"author":{"gitId":"dickongwd"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":306,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":307,"author":{"gitId":"dickongwd"},"content":"                break;","lastModifiedDate":"2023-08-21"},{"lineNumber":308,"author":{"gitId":"dickongwd"},"content":"                case BYE: {","lastModifiedDate":"2023-08-21"},{"lineNumber":309,"author":{"gitId":"dickongwd"},"content":"                    stopped \u003d true;","lastModifiedDate":"2023-08-18"},{"lineNumber":310,"author":{"gitId":"dickongwd"},"content":"                    say(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2023-08-18"},{"lineNumber":311,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-18"},{"lineNumber":312,"author":{"gitId":"dickongwd"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":313,"author":{"gitId":"dickongwd"},"content":"                default:","lastModifiedDate":"2023-08-18"},{"lineNumber":314,"author":{"gitId":"dickongwd"},"content":"                    say(\"Sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2023-08-21"},{"lineNumber":315,"author":{"gitId":"dickongwd"},"content":"                    break;","lastModifiedDate":"2023-08-19"},{"lineNumber":316,"author":{"gitId":"dickongwd"},"content":"            }","lastModifiedDate":"2023-08-18"},{"lineNumber":317,"author":{"gitId":"dickongwd"},"content":"        }","lastModifiedDate":"2023-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"dickongwd":315,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"dickongwd":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    String from;","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"    String to;","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"    public Event(String desc, String from, String to) {","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"        super(desc);","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"dickongwd"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"dickongwd"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), from, to);","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":15}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public class Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    private String desc;","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"    private boolean marked;","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"    public Task(String desc) {","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"        marked \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"    public void mark() {","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"        marked \u003d true;","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"dickongwd"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"dickongwd"},"content":"        marked \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"dickongwd"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"dickongwd"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"dickongwd"},"content":"        return String.format(\"[%s] %s\", marked ? \"X\" : \" \", desc);","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":22}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"    public Todo(String desc) {","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"        super(desc);","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dickongwd"},"content":"todo borrow book","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"dickongwd"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"dickongwd"},"content":"mark 1","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"dickongwd"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"dickongwd"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"dickongwd"},"content":"what","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"dickongwd"},"content":"unmark me","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"dickongwd"},"content":"deadline buy food /at 7pm","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"dickongwd"},"content":"delete 1","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"dickongwd"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"dickongwd"},"content":"bye","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"dickongwd":11}}]
