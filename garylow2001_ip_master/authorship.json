[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"    mainClass.set(\"Duke\")","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"garylow2001":2,"-":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    private final Ui _ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"    private TaskList _taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    private final Storage _storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"    public static final String DATA_FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"    public Duke(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"        _ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"        _storage \u003d new Storage(filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"            _taskList \u003d new TaskList(_storage.load());","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"            _ui.showDukeError(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"            _taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"        _ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"        // Create a scanner object to read commands entered by the user","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"        // Start command loop","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"        while (true) {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"            // Read the next line of input","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"                if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"                    System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"                    break;","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.equals(\"help\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"                    _ui.displayHelpMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"                    _taskList.listTasks();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"                    _taskList.markTaskAsDone(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"                    _taskList.saveTask(_storage.filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"                    _taskList.unmarkTaskAsDone(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"                    _taskList.saveTask(_storage.filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"                    _taskList.deleteTask(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"                    _taskList.saveTask(_storage.filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"                } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"garylow2001"},"content":"                    _taskList.findTasks(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"garylow2001"},"content":"                } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"garylow2001"},"content":"                    _taskList.addTask(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"garylow2001"},"content":"                    _taskList.saveTask(_storage.filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"garylow2001"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"garylow2001"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"garylow2001"},"content":"                _ui.showDukeError(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"garylow2001"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"garylow2001"},"content":"                _ui.showException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"garylow2001"},"content":"        new Duke(DATA_FILE_PATH).run();","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":61,"-":3}},{"path":"src/main/java/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Exceptions/FileNotLoadedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class FileNotLoadedException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public FileNotLoadedException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"No file data. Creating data file and starting new task list...\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"Invalid command entered. See \u0027help\u0027 for a list of commands you can enter\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Exceptions/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class InvalidDateFormatException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public InvalidDateFormatException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"Invalid Date format. Here are some example dates:\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"                + \"6/3/2023, 16/12/2024\");","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":8}},{"path":"src/main/java/Exceptions/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class InvalidDateTimeFormatException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public InvalidDateTimeFormatException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"Invalid DateTime format. Here are some example dates:\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"                + \"6/3/2023 5:30 AM, 16/12/2024 6:30PM\");","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":8}},{"path":"src/main/java/Exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class InvalidTaskException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public InvalidTaskException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"Invalid Tasks.Task Id entered, see \u0027list\u0027 for the list of tasks\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Exceptions/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class NoDescriptionException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public NoDescriptionException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"No description found. Please enter a description after your command.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Exceptions/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"public class NoTaskFoundException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"    public NoTaskFoundException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"        super(\"No Tasks.Task Id found. Please enter a Tasks.Task Id after your command\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":7}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidCommandException; // warning is shown in javadocs if not imported","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidTaskException; // warning is shown in javadocs if not imported","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import Exceptions.NoDescriptionException; // warning is shown in javadocs if not imported","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import Tasks.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"import Tasks.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"import Tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"import Tasks.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":" * Parser that helps with parsing user inputs as Strings to various","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":" * Objects and types.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"     * Parses the given line from file as a String and","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"     * returns a Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"     * @param lineFromFile The given line from the file.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"     * @return task The Task object created by the line after parsing.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"     * @throws IllegalArgumentException If the line is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"    public static Task parseTaskFromFileString(String lineFromFile) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"        Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"        String[] lineParts \u003d lineFromFile.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"        String taskType \u003d lineParts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"        boolean isDone \u003d lineParts[1].equals(\"X\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"        String description \u003d lineParts[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"            case \"T\":","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"            case \"D\":","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"                String by;","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"                if (lineParts.length \u003d\u003d 4) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"                    by \u003d lineParts[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"                    task \u003d new Deadline(description, by); // add by","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"                    task \u003d new Deadline(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"            case \"E\":","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"                String from;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"                String to;","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"                if (lineParts.length \u003d\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"                    from \u003d lineParts[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"garylow2001"},"content":"                    to \u003d lineParts[4];","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"garylow2001"},"content":"                    task \u003d new Event(description, from, to); // add from and to","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"garylow2001"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"garylow2001"},"content":"                    task \u003d new Event(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"garylow2001"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"garylow2001"},"content":"            default:","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"garylow2001"},"content":"                // Line does not start with a task value (T,D,E), file corrupted, throw error","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"garylow2001"},"content":"                throw new IllegalArgumentException(\"Invalid Tasks.Task Type\");","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"garylow2001"},"content":"        if (isDone) task.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"garylow2001"},"content":"        return task;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"garylow2001"},"content":"     * Parses the user input and returns the command specified by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"garylow2001"},"content":"     * @return inputCommand The command that the user has entered.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"garylow2001"},"content":"     * @throws InvalidCommandException If the command is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"garylow2001"},"content":"    public static String getCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"garylow2001"},"content":"        String[] inputParts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"garylow2001"},"content":"        // Check if a valid addTask command is entered","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"garylow2001"},"content":"        String inputCommand \u003d inputParts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"garylow2001"},"content":"        if (!(inputCommand.equals(\"todo\") || inputCommand.equals(\"deadline\") || inputCommand.equals(\"event\"))) {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"garylow2001"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"garylow2001"},"content":"        return inputCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"garylow2001"},"content":"     * Parses the input given by the user and returns the task description.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"garylow2001"},"content":"     * @return The description of the task entered by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"garylow2001"},"content":"     * @throws NoDescriptionException If no description is found.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"garylow2001"},"content":"    public static String getTaskDesc(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"garylow2001"},"content":"        String[] inputParts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"garylow2001"},"content":"        // Check if a valid addTask command is entered","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"garylow2001"},"content":"        if (inputParts.length \u003c 2) throw new NoDescriptionException();","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"garylow2001"},"content":"        // Check if description is empty","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"garylow2001"},"content":"        if (inputParts[1].trim().equals(\"\")) throw new NoDescriptionException();","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"garylow2001"},"content":"        return inputParts[1].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"garylow2001"},"content":"     * Parses the input given by the user and returns the task id.","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"garylow2001"},"content":"     * @param inputString The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"garylow2001"},"content":"     * @return The id of the task (1-indexed).","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"garylow2001"},"content":"     * @throws InvalidTaskException If the task id is in an invalid format e.g a String.","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"garylow2001"},"content":"    public static int getTaskId(String inputString) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"garylow2001"},"content":"        String[] inputParts \u003d inputString.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"garylow2001"},"content":"        if (inputParts.length !\u003d 2) throw new NoTaskFoundException();","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"garylow2001"},"content":"            int taskId \u003d Integer.parseInt(inputParts[1].trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"garylow2001"},"content":"            return taskId - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"garylow2001"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"garylow2001"},"content":"            throw new InvalidTaskException();","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":114}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidTaskException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import Exceptions.NoTaskFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import Tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":" * Represents the Storage system of the Duke App. A \u003ccode\u003eStorage\u003c/code\u003e object stores","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":" * the location where the data is loaded from","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"    String filepath;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"     * Loads the tasks in the file specified by filepath.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"     * @return tasks List of Tasks from the loaded file.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"     * @throws NoTaskFoundException If no tasks are found in the filepath or","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"     * the filepath is not specified or does not exist.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"    public List\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Loading tasks...\");","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(filepath))) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"            String line;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"                Task task \u003d Parser.parseTaskFromFileString(line);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"Tasks loaded successfully!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"            return tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"Tasks failed to load\");","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"            throw new NoTaskFoundException();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":45}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidTaskException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import Tasks.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import Tasks.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import Tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"import Tasks.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":" * Represents the list of tasks in the Duke App. A \u003ccode\u003eTaskList\u003c/code\u003e object contains","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":" * the list of tasks and task operations.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"    List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"     * Saves all the tasks in TaskList to the output file.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"     * @param filepath the path to the file to save tasks in.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"    public void saveTask(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Saving tasks...\");","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"        try (PrintWriter writer \u003d new PrintWriter(filepath)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"            for (Task task: taskList) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"                writer.println(task.toFileString());","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"Error saving tasks to file\" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Tasks.Task saved successfully\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"     * Adds a task to TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"     * Displays the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"garylow2001"},"content":"     * @throws DukeException If the command is not a valid addTask command.","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"garylow2001"},"content":"    public void addTask(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"garylow2001"},"content":"        String inputCommand \u003d Parser.getCommand(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"garylow2001"},"content":"        String taskDesc \u003d Parser.getTaskDesc(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"garylow2001"},"content":"        Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"garylow2001"},"content":"        switch (inputCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"garylow2001"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"garylow2001"},"content":"                task \u003d new Todo(taskDesc);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"garylow2001"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"garylow2001"},"content":"                task \u003d new Deadline(taskDesc);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"garylow2001"},"content":"            case \"event\":","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"garylow2001"},"content":"                task \u003d new Event(taskDesc);","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"garylow2001"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"garylow2001"},"content":"            default:","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"garylow2001"},"content":"                throw new DukeException(\"Error, see \u0027help\u0027 for a list of commands\");","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"garylow2001"},"content":"        // Add task to task list","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"garylow2001"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\\t\" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"garylow2001"},"content":"        System.out.printf(\"Now you have %d tasks in the list%n\", taskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"garylow2001"},"content":"     * Removes a task from the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"garylow2001"},"content":"     * Displays the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"garylow2001"},"content":"     * @throws InvalidTaskException If the task id entered does not correspond to any task","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"garylow2001"},"content":"    public void deleteTask(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"garylow2001"},"content":"        int taskId \u003d Parser.getTaskId(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"garylow2001"},"content":"        if (taskId \u003c 0 || taskId \u003e taskList.size() - 1) throw new InvalidTaskException();","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"garylow2001"},"content":"        Task deletedTask \u003d taskList.remove(taskId);","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\\t\" + deletedTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"garylow2001"},"content":"        System.out.printf(\"Now you have %d tasks in the list%n\", taskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"garylow2001"},"content":"     * Unmarks a task in the TaskList as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"garylow2001"},"content":"     * @throws InvalidTaskException If the task id entered does not correspond to any task","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"garylow2001"},"content":"    public void unmarkTaskAsDone(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"garylow2001"},"content":"        int taskId \u003d Parser.getTaskId(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"garylow2001"},"content":"        if (taskId \u003c 0 || taskId \u003e taskList.size() - 1) throw new InvalidTaskException();","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"garylow2001"},"content":"        Task selectedTask \u003d taskList.get(taskId);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"garylow2001"},"content":"        selectedTask.unmarkAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"garylow2001"},"content":"                + selectedTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"garylow2001"},"content":"     * Marks a task in the TaskList as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"garylow2001"},"content":"     * @param userInput The String which the user has typed.","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"garylow2001"},"content":"     * @throws InvalidTaskException If the task id entered does not correspond to any task","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"garylow2001"},"content":"    public void markTaskAsDone(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"garylow2001"},"content":"        int taskId \u003d Parser.getTaskId(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"garylow2001"},"content":"        if (taskId \u003c 0 || taskId \u003e taskList.size() - 1) throw new InvalidTaskException();","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"garylow2001"},"content":"        // Mark the selected task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"garylow2001"},"content":"        Task selectedTask \u003d taskList.get(taskId);","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"garylow2001"},"content":"        selectedTask.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"garylow2001"},"content":"                + selectedTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"garylow2001"},"content":"     * Lists all the tasks in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"garylow2001"},"content":"    public void listTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"garylow2001"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"Chewy detected no task for you!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"garylow2001"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"garylow2001"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"garylow2001"},"content":"                Task task \u003d taskList.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"garylow2001"},"content":"                String taskLine \u003d String.format(\"%d.%s\",","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"garylow2001"},"content":"                        i + 1,","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"garylow2001"},"content":"                        task.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"garylow2001"},"content":"                System.out.println(taskLine);","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"garylow2001"},"content":"     * Displays all the tasks that matches the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"garylow2001"},"content":"     * @param userInput the input String that the user has entered.","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"garylow2001"},"content":"     * @throws DukeException If an invalid keyword or no keyword is entered.","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"garylow2001"},"content":"    public void findTasks(String userInput) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"garylow2001"},"content":"        String keyword \u003d Parser.getTaskDesc(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"garylow2001"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"garylow2001"},"content":"        for (Task task: taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"garylow2001"},"content":"            if (!task.containsKeyword(keyword)) continue;","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"garylow2001"},"content":"            if (task.containsKeyword(keyword) \u0026\u0026 count \u003d\u003d 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"garylow2001"},"content":"                System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"garylow2001"},"content":"            count++;","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"garylow2001"},"content":"            System.out.println(count + \".\" + task);","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"garylow2001"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"garylow2001"},"content":"            System.out.println(\"No matching tasks found!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":158}},{"path":"src/main/java/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":" * Represents a task with a deadline. A \u003ccode\u003eDeadline\u003c/code\u003e object","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":" * has a \u003ccode\u003eLocalDate\u003c/code\u003e deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"    public Deadline(String description) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"        // TODO: Date.now() when \"today\" is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"        // Split the input string by \"/by\" to separate description and deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"        String[] splitString \u003d description.split(\"/by\", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"        // Should throw error if there are multiple \"/by\" or no \"/by\"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"        if (splitString.length \u003e\u003d2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"            this.description \u003d splitString[0].trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"            String deadlineString \u003d splitString[1].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"            this.deadline \u003d super.parseDate(deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"    public Deadline(String description, String deadlineString) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"        // deadline will be in default yyyy-MM-dd format which can be parsed by LocalDate","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"        this.deadline \u003d LocalDate.parse(deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"        return \"[D]\" + super.getStatusIcon();","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"        if (deadline \u003d\u003d null) return super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"        return super.toString() + String.format(\" (by: %s)\",deadline.format(formatter));","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"        return \"D | \" + super.toFileString() + (deadline \u003d\u003d null ? \"\" : \" | \" + deadline.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":47}},{"path":"src/main/java/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":" * Represents an Event that will happen. An \u003ccode\u003eEvent\u003c/code\u003e object","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":" * has a \u003ccode\u003eLocalDateTime\u003c/code\u003e start and end time.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"    public Event(String description) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"        // TODO: Check if /from is before /to","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"        // TODO: Date.now() when \"today\" is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"        String[] fromParts \u003d description.split(\"/from\");","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"        String[] toParts \u003d description.split(\"/to\");","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"        if (fromParts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"            this.description \u003d fromParts[0].split(\"/to\")[0].trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"            String[] partAfterFrom \u003d fromParts[1].split(\"/to\");","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"            String startTimeString \u003d partAfterFrom[0].trim(); // it should be in (d/M/yyyy h:m a) eg (15/3/2023 6:40 PM)","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"            // Format the string and parse it into startTime","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"            this.startTime \u003d super.parseDateTime(startTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"            if (partAfterFrom.length \u003e\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"                // \u0027/to\u0027 is after \u0027/from\u0027","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"                String endTimeString \u003d partAfterFrom[1].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"                // Format the string and parse it into endTime","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"                this.endTime \u003d super.parseDateTime(endTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"                // \u0027/to\u0027 is before \u0027/from\u0027","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"                String endTimeString \u003d fromParts[0].split(\"/to\")[1].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"                // Format the string and parse it into endTime","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"                this.endTime \u003d super.parseDateTime(endTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"        } else if (toParts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"            String[] parts \u003d toParts[1].split(\"/from\");","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"            this.description \u003d toParts[0].trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"            String endTimeString \u003d parts[0].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"            // Format the string and parse it into endTime","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"            this.endTime \u003d super.parseDateTime(endTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"            if (parts.length \u003e 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"                String startTimeString \u003d parts[1].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"                // Format the string and parse it into endTime","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"garylow2001"},"content":"                this.startTime \u003d super.parseDateTime(startTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"garylow2001"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"garylow2001"},"content":"    public Event(String description, String startTimeString, String endTimeString) {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"garylow2001"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"garylow2001"},"content":"        this.startTime \u003d LocalDateTime.parse(startTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"garylow2001"},"content":"        this.endTime \u003d LocalDateTime.parse(endTimeString);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"garylow2001"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"garylow2001"},"content":"        return \"[E]\" + super.getStatusIcon();","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"garylow2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"garylow2001"},"content":"        if (startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null) return super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"garylow2001"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy h:m a\");","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"garylow2001"},"content":"        return super.toString() + String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"garylow2001"},"content":"                \" (from %s to %s)\",","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"garylow2001"},"content":"                startTime.format(formatter),","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"garylow2001"},"content":"                endTime.format(formatter)","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"garylow2001"},"content":"                );","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"garylow2001"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"garylow2001"},"content":"        return \"E | \"","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"garylow2001"},"content":"                + super.toFileString()","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"garylow2001"},"content":"                + (startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"garylow2001"},"content":"                        ? \"\"","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"garylow2001"},"content":"                        : String.format(\" | %s | %s\", startTime, endTime));","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":83}},{"path":"src/main/java/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidDateFormatException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import Exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":" * Represents a task the user has created.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"    // TODO: Make this class abstract?","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"    public static final String DATE_FORMAT \u003d\"d/M/yyyy\";","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"    public static final String DATETIME_FORMAT \u003d \"d/M/yyyy h:m a\";","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"     * Retrieves the status of the Task.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"     * An \"X\" represents that the Task is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"     * @return The status of the Task as a String.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"garylow2001"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"garylow2001"},"content":"     * Marks the Task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"garylow2001"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"garylow2001"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"garylow2001"},"content":"     * Unmarks the Task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"garylow2001"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"garylow2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"garylow2001"},"content":"     * Returns the String representation of the Task to be displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"garylow2001"},"content":"     * It contains the status and description of the Task.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"garylow2001"},"content":"     * @return The String to be displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"garylow2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"garylow2001"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"garylow2001"},"content":"     * Returns the String representation of the Task to be saved in a data file.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"garylow2001"},"content":"     * It contains the status and description of the Task with \"|\" as a divider.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"garylow2001"},"content":"     * @return The String to be saved as a line in the file.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"garylow2001"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"garylow2001"},"content":"        return isDone","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"garylow2001"},"content":"                ? \"X | \" + description","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"garylow2001"},"content":"                : \"0 | \" + description;","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"garylow2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"garylow2001"},"content":"     * Checks if the description contains the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"garylow2001"},"content":"     * The check is non-case-sensitive.","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"garylow2001"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"garylow2001"},"content":"     * @param keyword The keyword that the user has entered.","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"garylow2001"},"content":"     * @return Returns true if the description contains the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"garylow2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"garylow2001"},"content":"    public boolean containsKeyword(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"garylow2001"},"content":"        return this.description.toLowerCase().contains(keyword.toLowerCase());","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"garylow2001"},"content":"    public LocalDateTime parseDateTime(String dateTimeString) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"garylow2001"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATETIME_FORMAT);","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"garylow2001"},"content":"            return LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"garylow2001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"garylow2001"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"garylow2001"},"content":"    public LocalDate parseDate(String dateString) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"garylow2001"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"garylow2001"},"content":"            return LocalDate.parse(dateString, formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"garylow2001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"garylow2001"},"content":"            throw new InvalidDateFormatException(); // Rethrow the exception if needed for higher-level error handling","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":102}},{"path":"src/main/java/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":" * Represents a task that the user has to do.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"        return \"[T]\" + super.getStatusIcon();","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"        return \"T | \" + super.toFileString();","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":20}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":" * Represents the User Interface of the Duke App.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":" * Each \u003cCode\u003eUi\u003c/Code\u003e method displays a message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"        String logo \u003d \"I\u0027m Chewy,\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"                \"What can I do for you?\\n\";","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Hello!\\n\" + logo);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"    public void showDukeError(DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\":( Chewy can\u0027t understand! \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"    public void displayHelpMessage() {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"List of available commands:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - todo \u003cdescription\u003e: Add a new todo task\");","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - deadline \u003cdescription\u003e /by \u003cdate\u003e: Add a new deadline task\");","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e: Add a new event task with start and end time\");","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - list: Display the list of tasks\");","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - mark \u003ctaskNumber\u003e: Mark a task as done\");","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - unmark \u003ctaskNumber\u003e: Unmark a task as done\");","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\" - bye: Exit Chewy\");","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"        // Add more commands in the future","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"    public void showException(Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"garylow2001"},"content":"        System.out.println(\"Something unexpected happened. try \u0027help\u0027 to see a list of commands\");","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":33}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Tasks.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"    public void printString_markAndUnmark_success() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"        Deadline deadline \u003d new Deadline(\"xxx /by 2/4/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[D][ ] xxx (by: 2 Apr 2023)\", deadline.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"        deadline.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[D][X] xxx (by: 2 Apr 2023)\", deadline.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"        deadline.unmarkAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[D][ ] xxx (by: 2 Apr 2023)\", deadline.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"    public void createDeadline_invalidDeadline_exceptionThrown(){","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"            Deadline deadline \u003d new Deadline(\"xxx /by yyy\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"            assertEquals(\"[D][ ] xxx (by: yyy)\", deadline.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"            assertEquals(\"Invalid Date format. Here are some example dates:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"                    \"6/3/2023, 16/12/2024\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":30}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import Tasks.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"    public void printString_markAndUnmark_success() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"        Event event \u003d new Event(\"xxx /from 16/12/2024 6:30 PM /to 16/12/2024 8:30 PM\");","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[E][ ] xxx (from 16 Dec 2024 6:30 PM to 16 Dec 2024 8:30 PM)\", event.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"        event.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[E][X] xxx (from 16 Dec 2024 6:30 PM to 16 Dec 2024 8:30 PM)\", event.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"        event.unmarkAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[E][ ] xxx (from 16 Dec 2024 6:30 PM to 16 Dec 2024 8:30 PM)\", event.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"garylow2001"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"garylow2001"},"content":"    public void createEvent_invalidEvent_exceptionThrown(){","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"garylow2001"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"garylow2001"},"content":"            Event event \u003d new Event(\"xxx /from yy /to zz\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"garylow2001"},"content":"            assertEquals(\"[D][ ] xxx (from yy to zz)\", event.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"garylow2001"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"garylow2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"garylow2001"},"content":"            assertEquals(\"Invalid DateTime format. Here are some example dates:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"garylow2001"},"content":"                    \"6/3/2023 5:30 AM, 16/12/2024 6:30PM\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"garylow2001"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":30}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"import Tasks.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"    public void printString_markAndUnmark_success(){","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"        Todo todo \u003d new Todo(\"xxx\");","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[T][ ] xxx\", todo.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"        todo.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[T][X] xxx\", todo.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"        todo.unmarkAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"        assertEquals(\"[T][ ] xxx\", todo.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"garylow2001":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"garylow2001"},"content":"fakecommand","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"garylow2001"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"garylow2001"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"garylow2001"},"content":"todo run script","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"garylow2001"},"content":"deadline do something","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"garylow2001"},"content":"deadline do something /by 24/10/2023","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"garylow2001"},"content":"event some lecture /from 31/8/2023 6:30 PM 4pm /to 31/8/2023 8:30PM","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"garylow2001"},"content":"event some recitation /to xx pm /from tomorrow 12pm","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"garylow2001"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"garylow2001"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"garylow2001"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"garylow2001"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"garylow2001"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"garylow2001"},"content":"delete","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"garylow2001"},"content":"delete 3","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"garylow2001"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"garylow2001"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"garylow2001":17}}]
