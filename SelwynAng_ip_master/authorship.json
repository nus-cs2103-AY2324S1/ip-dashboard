[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SelwynAng":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SelwynAng":6,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" * The Duke class represents a task management application. It provides functionality","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" * to interact with the user, manage tasks, and store task information.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    /** Name of chatbot */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    private static final String NAME \u003d \"Duke Prince\";","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    /** Task list associated with this duke.Duke object */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"    /** Storage associated with this Duke object */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    /** UI associated with this Duke object */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    /** Parser associated with this Duke object */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"    private Parser parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a Duke object with the specified file path to initialize the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"        ui \u003d new Ui(NAME);","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"        String[] dirAndFilePathArr \u003d filePath.split(\"/\");","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"        String dirPath \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"        for (int i \u003d 0; i \u003c dirAndFilePathArr.length - 1; i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"            dirPath +\u003d dirAndFilePathArr[i];","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"            dirPath +\u003d \"/\";","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(dirPath);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"        storage \u003d new Storage(dirPath, dirAndFilePathArr[dirAndFilePathArr.length - 1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"            taskList \u003d new TaskList(storage.retrieveTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"            ui.printError(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"     * Starts the Duke application by displaying a greeting and processing user commands.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"    public void run() {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"SelwynAng"},"content":"        ui.greet();","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"SelwynAng"},"content":"        boolean exitProgram \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"SelwynAng"},"content":"        String userInput;","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"SelwynAng"},"content":"        while (!exitProgram) {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"SelwynAng"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"SelwynAng"},"content":"                userInput \u003d ui.readCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"SelwynAng"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"SelwynAng"},"content":"                Command c \u003d this.parser.parseCommand(userInput);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"SelwynAng"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"SelwynAng"},"content":"                exitProgram \u003d c.isExit();","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"SelwynAng"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"SelwynAng"},"content":"                ui.printError(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"SelwynAng"},"content":"            } finally {","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"SelwynAng"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"SelwynAng"},"content":"     * The main method to launch the Duke application.","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"SelwynAng"},"content":"     * @param args Command-line arguments (not used in this context).","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":81,"author":{"gitId":"SelwynAng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"SelwynAng"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"SelwynAng":81,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":" * The DukeException class represents an exception specific to the Duke application.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a DukeException object with the specified error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"     * @param message The error message to be associated with the exception.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":17}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" * The Parser class is responsible for parsing user input and generating the corresponding commands.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Parses the user input to generate the appropriate command.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param userInput The input provided by the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     * @return A Command object representing the parsed command.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the input cannot be parsed into a valid command.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    public Command parseCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"        String userCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"        String args;","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        String[] parsedCommand \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"        userCommand \u003d parsedCommand[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"        args \u003d parsedCommand.length \u003e 1 ? parsedCommand[1] : \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"        switch (userCommand) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"        case \"list\":","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"            return new AddCommand(TaskType.TODO, args);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"            return new AddCommand(TaskType.DEADLINE, args);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"        case \"event\":","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"            return new AddCommand(TaskType.EVENT, args);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"            return new MarkCommand(args, true);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"            return new MarkCommand(args, false);","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"            return new DeleteCommand(args);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"        case \"find\":","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"            return new FindCommand(args);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"I don\u0027t understand what you are saying!\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"                    + \"Available commands are list, todo, deadline, event, mark, unmark, delete, bye.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":56}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":" * The Storage class handles file operations for saving and retrieving tasks to/from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":" * @author Selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    /** The file used for storage. */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"    private File file;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"    /** The full path of the file. */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    private String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a Storage object with the specified directory path and file name.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     * @param directoryPath The directory path where the file should be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     * @param fileName The name of the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"    public Storage(String directoryPath, String fileName) {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"        this.filePath \u003d directoryPath + fileName;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"            if (new File(directoryPath).mkdirs()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Directories are created.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Directories already exist.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"            this.file \u003d new File(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"            if (this.file.createNewFile()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"File is created: \" + this.file.getName());","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"File already exists.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"SelwynAng"},"content":"     * Saves the given list of tasks to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"SelwynAng"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"SelwynAng"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"SelwynAng"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.file);","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"SelwynAng"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"SelwynAng"},"content":"                fileWriter.write(tasks.get(i).toString() + \"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"SelwynAng"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"SelwynAng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"SelwynAng"},"content":"     * Retrieves tasks from the file and returns them as an ArrayList.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"SelwynAng"},"content":"     * @return An ArrayList of Task objects retrieved from the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue with file retrieval or if the file is corrupted.","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"SelwynAng"},"content":"    public ArrayList\u003cTask\u003e retrieveTasks() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"SelwynAng"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"SelwynAng"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"SelwynAng"},"content":"            Scanner scanner \u003d new Scanner(this.file);","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"SelwynAng"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"SelwynAng"},"content":"                String taskDesc \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"SelwynAng"},"content":"                String[] taskDescArr \u003d taskDesc.split(\" \", 3);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"SelwynAng"},"content":"                String taskTitle \u003d taskDescArr[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"SelwynAng"},"content":"                String taskDoneStatus \u003d taskDescArr[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"SelwynAng"},"content":"                String taskDetails \u003d taskDescArr[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"SelwynAng"},"content":"                Task taskToAdd;","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"SelwynAng"},"content":"                switch(taskTitle) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"SelwynAng"},"content":"                case(\"[T]\"):","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"SelwynAng"},"content":"                    taskToAdd \u003d new Todo(taskDetails);","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"SelwynAng"},"content":"                    if (taskDoneStatus.equals(\"[X]\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"SelwynAng"},"content":"                        taskToAdd.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"SelwynAng"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"SelwynAng"},"content":"                    taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"SelwynAng"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"SelwynAng"},"content":"                case(\"[D]\"):","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"SelwynAng"},"content":"                    String[] taskDetailsArr \u003d taskDetails.split(\"\\\\(by:\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"SelwynAng"},"content":"                    taskToAdd \u003d new Deadline(taskDetailsArr[0].trim(),","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"SelwynAng"},"content":"                            LocalDateTime.parse(taskDetailsArr[1].split(\"\\\\)\")[0].trim(),","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"SelwynAng"},"content":"                                    dateTimeFormat));","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"SelwynAng"},"content":"                    if (taskDoneStatus.equals(\"[X]\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"SelwynAng"},"content":"                        taskToAdd.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"SelwynAng"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"SelwynAng"},"content":"                    taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"SelwynAng"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"SelwynAng"},"content":"                case(\"[E]\"):","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"SelwynAng"},"content":"                    String[] taskDetailsArrOne \u003d taskDetails.split(\"\\\\(from:\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"SelwynAng"},"content":"                    String taskDetailsForEvent \u003d taskDetailsArrOne[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"SelwynAng"},"content":"                    String[] taskDetailsArrTwo \u003d taskDetailsArrOne[1].split(\"to:\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"SelwynAng"},"content":"                    taskToAdd \u003d new Event(taskDetailsForEvent.trim(),","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"SelwynAng"},"content":"                            LocalDateTime.parse(taskDetailsArrTwo[0].trim(), dateTimeFormat),","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"SelwynAng"},"content":"                            LocalDateTime.parse(taskDetailsArrTwo[1].split(\"\\\\)\")[0].trim(),","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"SelwynAng"},"content":"                                    dateTimeFormat));","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"SelwynAng"},"content":"                    if (taskDoneStatus.equals(\"[X]\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"SelwynAng"},"content":"                        taskToAdd.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"SelwynAng"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"SelwynAng"},"content":"                    taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"SelwynAng"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"SelwynAng"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"SelwynAng"},"content":"                    throw new DukeException(\"File is corrupted!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"SelwynAng"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"SelwynAng"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"File cannot be found!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"SelwynAng"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":139}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" * The Ui class handles interactions with the user interface, providing methods to read input,","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * display messages, and print various types of information.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    /** Name of the chatbot */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    private static String name;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Constructs an Ui object with the specified name to be used in greetings and messages.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param name The name of the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    public Ui(String name) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"     * Reads a command input from the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     * @return The command input provided by the user as a string.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"        return userInput;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"     * Prints the task list to the console.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The task list to be displayed.","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"     * @param isMatching Determines which statements to print (true for matching tasks, false for all tasks)","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"    public void printTaskList(TaskList taskList, boolean isMatching) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"        taskList.displayTaskList(isMatching);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"     * Prints a message indicating that a task has been added, along with the new task\u0027s details.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"     * @param addedTask The task that was added.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"     * @param noOfTasksAfterAdding The number of tasks after adding the new task.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"    public void printAddedTask(Task addedTask, int noOfTasksAfterAdding) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"        System.out.print(\"   \");","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(addedTask.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"SelwynAng"},"content":"        if (noOfTasksAfterAdding \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"Now you have \" + noOfTasksAfterAdding + \" task in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"SelwynAng"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"Now you have \" + noOfTasksAfterAdding + \" tasks in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"SelwynAng"},"content":"     * Prints a message indicating the change in task done status.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"SelwynAng"},"content":"     * @param taskToChange The task for which the status changed.","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"SelwynAng"},"content":"     * @param isDone Whether the task is marked as done or not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"SelwynAng"},"content":"    public void printChangeTaskDoneStatus(Task taskToChange, boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"SelwynAng"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task done:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"SelwynAng"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(taskToChange.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"SelwynAng"},"content":"     * Prints a message indicating that a task has been deleted, along with the remaining tasks count.","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"SelwynAng"},"content":"     * @param deletedTask The task that was deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"SelwynAng"},"content":"     * @param numOfTasksLeft The number of tasks remaining after deletion.","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"SelwynAng"},"content":"    public void printDeletedTask(Task deletedTask, int numOfTasksLeft) {","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"SelwynAng"},"content":"        System.out.print(\"   \");","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(deletedTask.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"SelwynAng"},"content":"        if (numOfTasksLeft \u003d\u003d 1 || numOfTasksLeft \u003d\u003d 0) {","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"Now you have \" + numOfTasksLeft + \" task in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"SelwynAng"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(\"Now you have \" + numOfTasksLeft + \" tasks in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"SelwynAng"},"content":"     * Prints a greeting message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"SelwynAng"},"content":"    public void greet() {","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"SelwynAng"},"content":"        this.printHorizontalLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"Hello! I\u0027m \" + name);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"SelwynAng"},"content":"        this.printHorizontalLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"SelwynAng"},"content":"     * Prints a farewell message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"SelwynAng"},"content":"    public void printExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"SelwynAng"},"content":"     * Prints a horizontal line for visual separation.","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"SelwynAng"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"SelwynAng"},"content":"        int width \u003d 50;","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"SelwynAng"},"content":"        for (int i \u003d 0; i \u003c width; i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"SelwynAng"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"SelwynAng"},"content":"     * Prints an error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"SelwynAng"},"content":"     * @param errorMsg The error message to be displayed.","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"SelwynAng"},"content":"    public void printError(String errorMsg) {","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"SelwynAng"},"content":"        System.out.println(\"OOPS! \" + errorMsg);","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":136}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" * The AddCommand class represents a command to add a new task to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    /** The type of task to be added. */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"    private TaskType taskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"    /** The details for creating the duke.task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    private String addCommandDetails;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * Constructs an AddCommand object with the specified task type and details.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"     * @param taskType The type of task to be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"     * @param args The arguments for creating the duke.task.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"    public AddCommand(TaskType taskType, String args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"        this.addCommandDetails \u003d args;","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     * Executes the AddCommand by adding a new task to the task list and updating the storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue adding the task or updating storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"            Task addedTask \u003d taskList.addTask(this.taskType, this.addCommandDetails);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"            ui.printAddedTask(addedTask, taskList.getNumTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"            storage.saveTasks(taskList.getTaskList());","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":51}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" * The Command class represents a command that can be executed in the Duke application.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    /** Indicates whether the command triggers an exit from the application. */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"     * Executes the command using the provided TaskList, Ui, and Storage objects.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue executing the duke.command.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"     * Toggles the exit status of the duke.command.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"    public void changeExitStatus() {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"        this.isExit \u003d !this.isExit;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     * Checks whether the command triggers an exit from the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"     * @return True if the command triggers an exit, false otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":42}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * The DeleteCommand class represents a command to delete a task from the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    /** The details of the task to be deleted. */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    private String taskToDeleteDetails;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a DeleteCommand object with the specified details of the task to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param args The arguments specifying the task to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    public DeleteCommand(String args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"        this.taskToDeleteDetails \u003d args;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"     * Executes the DeleteCommand by removing a task from the task list and updating the storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue deleting the task or updating storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"            Task deletedTask \u003d taskList.deleteTask(taskToDeleteDetails);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"            int numOfTasksLeft \u003d taskList.getNumTasks();","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"            ui.printDeletedTask(deletedTask, numOfTasksLeft);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"            storage.saveTasks(taskList.getTaskList());","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":46}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" * The ExitCommand class represents a command to exit the Duke application.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"     * Executes the ExitCommand by changing the exit status and displaying an exit message.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"        super.changeExitStatus();","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"        ui.printExit();","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":25}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" * The FindCommand class represents a command for searching and finding tasks","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" * based on user-defined criteria in a task management application.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"    /** The search criteria provided by the user for finding tasks. */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    private String taskToFindDetails;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a new FindCommand object with the specified search criteria.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"     * @param args The search criteria provided by the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    public FindCommand(String args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        this.taskToFindDetails \u003d args;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     * Executes the find command, searching for tasks in the given task list","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     * that match the provided search criteria and displays the results.","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The list of tasks to search within.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"     * @param ui       The user interface for displaying the results.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"     * @param storage  The storage for data retrieval and persistence.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue executing the command.","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d taskList.findTasks(taskToFindDetails);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"        TaskList taskListWithFoundTasks \u003d new TaskList(foundTasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"        ui.printTaskList(taskListWithFoundTasks, true);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"SelwynAng":46}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" * The ListCommand class represents a command to list all tasks in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"     * Executes the ListCommand by displaying the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"        ui.printTaskList(taskList, false);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":25}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" * The MarkCommand class represents a command to mark or unmark a task as done in the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    /** Indicates whether to mark the task as done or not. */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    private boolean toMark;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /** The details of the task to be marked. */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"    private String taskToMarkDetails;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a MarkCommand object with the specified details of the task to be marked and the marking status.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     * @param args The arguments specifying the task to be marked.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"     * @param toMark True if the task should be marked as done, false if it should be marked as not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    public MarkCommand(String args, boolean toMark) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        this.taskToMarkDetails \u003d args;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"        this.toMark \u003d toMark;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     * Executes the MarkCommand by marking or unmarking a task as done and updating the storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     * @param taskList The TaskList object containing the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"     * @param ui The Ui object handling user interface interactions.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"     * @param storage The Storage object handling storage-related operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue marking or unmarking the task or updating storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"            Task taskToChange \u003d taskList.changeTaskDoneStatus(this.taskToMarkDetails, this.toMark);","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"            ui.printChangeTaskDoneStatus(taskToChange, this.toMark);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"            storage.saveTasks(taskList.getTaskList());","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":50}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":" * The Deadline class represents a task with a specific end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"    /** The end date and time of the deadline. */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a Deadline object with the specified description and end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"     * @param detail The description of the deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"     * @param endDateTime The end date and time of the deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    public Deadline(String detail, LocalDateTime endDateTime) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"        super(detail);","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"     * Returns a string representation of the Deadline object, including its completion status, description,","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"     * and end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     * @return A string representation of the Deadline object.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + super.getDisplayDateTime(this.endDateTime) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":35}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":" * The Event class represents a task that occurs during a specified time range.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" * It extends the Task class and includes information about the start and end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"    /** Start date and time of the event */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    /** End date and time of the event */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Constructs an Event object with the specified details, start date and time, and end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param detail The details of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     * @param startDateTime The start date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * @param endDateTime The end date and time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    public Event(String detail, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"        super(detail);","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     * Returns a string representation of the Event object, including its details and time range.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     * @return A string representation of the Event object.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"        return \"[E] \" + super.toString() + \" (from: \" + super.getDisplayDateTime(this.startDateTime)","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"                + \" to: \" + super.getDisplayDateTime(this.endDateTime) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":41}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" * The Task class represents a task with a description and completion status.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    private String detail;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"    /** The completion status of the task. */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a Task object with the specified description and sets its completion status to false.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @param detail The description of the duke.task.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    public Task(String detail) {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"        this.detail \u003d detail;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"     * Returns a formatted display string of the provided LocalDateTime object.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"     * @param dateTime The LocalDateTime object to be formatted.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"     * @return A formatted date and time string.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"    public String getDisplayDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"        DateTimeFormatter displayFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"        return dateTime.format(displayFormat);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"     * Returns a string representation of the Task object, including its completion status and description.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"     * @return A string representation of the Task object.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"            return \"[X] \" + this.detail;","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"            return \"[-] \" + this.detail;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"     * Marks the task as done by setting its completion status to true.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"SelwynAng"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"SelwynAng"},"content":"     * Marks the task as undone by setting its completion status to false.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"SelwynAng"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"SelwynAng"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"SelwynAng"},"content":"     * Returns the done status of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"SelwynAng"},"content":"     * @return A boolean value that corresponds to whether the task is done or not.","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"SelwynAng"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"SelwynAng"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":75}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":" * The TaskList class manages a list of tasks and provides methods for adding, creating, deleting, and modifying tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"public class TaskList {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    /** The list of tasks. */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"    /** The number of tasks in the list. */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"    private int numTasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a TaskList object with the specified list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"     * @param tasks The list of tasks to be managed.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"        this.numTasks \u003d tasks.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"     * Adds a new task of the specified type with the given arguments to the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"     * @param taskType The type of task to be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"     * @param args The arguments for creating the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"SelwynAng"},"content":"     * @return The added Task object.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If there is an issue with task creation or task type is unsupported.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"SelwynAng"},"content":"    public Task addTask(TaskType taskType, String args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"SelwynAng"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"SelwynAng"},"content":"            switch (taskType) {","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"SelwynAng"},"content":"            case TODO:","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"SelwynAng"},"content":"                newTask \u003d createTodo(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"SelwynAng"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"SelwynAng"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"SelwynAng"},"content":"                newTask \u003d createDeadline(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"SelwynAng"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"SelwynAng"},"content":"            case EVENT:","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"SelwynAng"},"content":"                newTask \u003d createEvent(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"SelwynAng"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"SelwynAng"},"content":"            default:","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"I can\u0027t create this task type!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"SelwynAng"},"content":"            this.tasks.add(newTask);","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"SelwynAng"},"content":"            this.numTasks++;","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"SelwynAng"},"content":"        return newTask;","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"SelwynAng"},"content":"     * Creates a new Todo task with the given description.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"SelwynAng"},"content":"     * @param args The description for the Todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"SelwynAng"},"content":"     * @return The created Todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the description is missing.","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"SelwynAng"},"content":"    public Todo createTodo(String args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"SelwynAng"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"Todo tasks should be created in this format: todo [name]\");","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"SelwynAng"},"content":"        return new Todo(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"SelwynAng"},"content":"     * Creates a new Deadline task with the given description and end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"SelwynAng"},"content":"     * @param args The description and end date/time for the Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"SelwynAng"},"content":"     * @return The created Deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the format is incorrect or the end date/time is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"SelwynAng"},"content":"    public Deadline createDeadline(String args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"SelwynAng"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"SelwynAng"},"content":"            String[] detailsAndDeadline \u003d args.split(\"/by\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"SelwynAng"},"content":"            if (detailsAndDeadline.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"Deadline tasks should be created in this format: deadline [name] /by [date]\");","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"SelwynAng"},"content":"            String details \u003d detailsAndDeadline[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"SelwynAng"},"content":"            String endDateTime \u003d detailsAndDeadline[1].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"SelwynAng"},"content":"            LocalDateTime formattedEndDateTime \u003d LocalDateTime.parse(endDateTime, dateTimeFormat);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"SelwynAng"},"content":"            return new Deadline(details, formattedEndDateTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"SelwynAng"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"Invalid deadline time format. Please use dd-MM-yyyy HHmm format!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"SelwynAng"},"content":"     * Creates a new Event task with the given description and start/end date and time.","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"SelwynAng"},"content":"     * @param args The description and start/end date/time for the Event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"SelwynAng"},"content":"     * @return The created Event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the format is incorrect or the date/time is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"SelwynAng"},"content":"    public Event createEvent(String args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"SelwynAng"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"SelwynAng"},"content":"            String eventMsg \u003d \"Event tasks should be created in this format: \"","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"SelwynAng"},"content":"                    + \"event [name] /from [start time] /to [end time]\";","lastModifiedDate":"2023-09-05"},{"lineNumber":116,"author":{"gitId":"SelwynAng"},"content":"            String[] detailsAndStartEnd \u003d args.split(\"/from\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"SelwynAng"},"content":"            if (detailsAndStartEnd.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(eventMsg);","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"SelwynAng"},"content":"            String details \u003d detailsAndStartEnd[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"SelwynAng"},"content":"            String[] startAndEnd \u003d detailsAndStartEnd[1].split(\"/to\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"SelwynAng"},"content":"            if (startAndEnd.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(eventMsg);","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":127,"author":{"gitId":"SelwynAng"},"content":"            String start \u003d startAndEnd[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":128,"author":{"gitId":"SelwynAng"},"content":"            String end \u003d startAndEnd[1].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":129,"author":{"gitId":"SelwynAng"},"content":"            LocalDateTime formattedStartDateTime \u003d LocalDateTime.parse(start, dateTimeFormat);","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"SelwynAng"},"content":"            LocalDateTime formattedEndDateTime \u003d LocalDateTime.parse(end, dateTimeFormat);","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"SelwynAng"},"content":"            return new Event(details, formattedStartDateTime, formattedEndDateTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"SelwynAng"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"Invalid event time format. Please use dd-MM-yyyy HHmm format!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":136,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":137,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":138,"author":{"gitId":"SelwynAng"},"content":"     * Deletes a task from the list based on the given task number.","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"SelwynAng"},"content":"     * @param args The task number to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"SelwynAng"},"content":"     * @return The deleted Task object.","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the task number is invalid or in an incorrect format.","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":144,"author":{"gitId":"SelwynAng"},"content":"    public Task deleteTask(String args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"SelwynAng"},"content":"        int taskNumber;","lastModifiedDate":"2023-08-22"},{"lineNumber":146,"author":{"gitId":"SelwynAng"},"content":"        Task deletedTask;","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":149,"author":{"gitId":"SelwynAng"},"content":"            taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":150,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"SelwynAng"},"content":"            if (taskNumber \u003c\u003d 0) {","lastModifiedDate":"2023-08-22"},{"lineNumber":152,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"Number must be more 1 or more!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"SelwynAng"},"content":"            } else if (this.exceedsSizeOfTaskList(taskNumber)) {","lastModifiedDate":"2023-08-22"},{"lineNumber":154,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"Number is higher than current size of task list!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":157,"author":{"gitId":"SelwynAng"},"content":"            deletedTask \u003d this.tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"SelwynAng"},"content":"            this.numTasks--;","lastModifiedDate":"2023-08-22"},{"lineNumber":159,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":160,"author":{"gitId":"SelwynAng"},"content":"            return deletedTask;","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"SelwynAng"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":162,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"Deleting task should be in this format: delete [task number]\");","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":167,"author":{"gitId":"SelwynAng"},"content":"     * Changes the done status of a task based on the given task number and state.","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"SelwynAng"},"content":"     * @param args The task number to be marked/unmarked and the state.","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"SelwynAng"},"content":"     * @param toBeDone The desired state (true for done, false for undone).","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"SelwynAng"},"content":"     * @return The Task object with the modified done status.","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"SelwynAng"},"content":"     * @throws DukeException If the task number is invalid or in an incorrect format.","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":174,"author":{"gitId":"SelwynAng"},"content":"    public Task changeTaskDoneStatus(String args, boolean toBeDone) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":175,"author":{"gitId":"SelwynAng"},"content":"        int taskNumber;","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":177,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"SelwynAng"},"content":"            taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-22"},{"lineNumber":179,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":180,"author":{"gitId":"SelwynAng"},"content":"            if (taskNumber \u003c\u003d 0) {","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"Number must be more 1 or more!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":182,"author":{"gitId":"SelwynAng"},"content":"            } else if (this.exceedsSizeOfTaskList(taskNumber)) {","lastModifiedDate":"2023-08-22"},{"lineNumber":183,"author":{"gitId":"SelwynAng"},"content":"                throw new DukeException(\"Number is higher than current size of task list!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":185,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":186,"author":{"gitId":"SelwynAng"},"content":"            Task taskToChange \u003d this.tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"SelwynAng"},"content":"            if (toBeDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"SelwynAng"},"content":"                taskToChange.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"SelwynAng"},"content":"            } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":191,"author":{"gitId":"SelwynAng"},"content":"                taskToChange.markUndone();","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":193,"author":{"gitId":"SelwynAng"},"content":"            return taskToChange;","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"SelwynAng"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":195,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(\"Marking/unmarking tasks should be in this format: mark/unmark [task number]\");","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"SelwynAng"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":199,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":200,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":201,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":202,"author":{"gitId":"SelwynAng"},"content":"     * Displays the list of tasks to the console.","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"SelwynAng"},"content":"     * @param isMatching Determine which statements to print (true for matching tasks, false for all tasks)","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":206,"author":{"gitId":"SelwynAng"},"content":"    public void displayTaskList(boolean isMatching) {","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"SelwynAng"},"content":"        if (isMatching) {","lastModifiedDate":"2023-08-31"},{"lineNumber":208,"author":{"gitId":"SelwynAng"},"content":"            if (this.numTasks \u003d\u003d 0 || this.numTasks \u003d\u003d 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Here is the matching task in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":210,"author":{"gitId":"SelwynAng"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":211,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":212,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":213,"author":{"gitId":"SelwynAng"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":214,"author":{"gitId":"SelwynAng"},"content":"            if (this.numTasks \u003d\u003d 0 || this.numTasks \u003d\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":215,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Here is the task in your list:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"SelwynAng"},"content":"            } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":217,"author":{"gitId":"SelwynAng"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":218,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":219,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":221,"author":{"gitId":"SelwynAng"},"content":"        for (int i \u003d 0; i \u003c this.numTasks; i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":222,"author":{"gitId":"SelwynAng"},"content":"            int bullet \u003d i + 1;","lastModifiedDate":"2023-08-21"},{"lineNumber":223,"author":{"gitId":"SelwynAng"},"content":"            System.out.print(bullet + \". \");","lastModifiedDate":"2023-08-21"},{"lineNumber":224,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(this.tasks.get(i).toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":225,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":226,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":227,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":228,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":229,"author":{"gitId":"SelwynAng"},"content":"     * Finds the tasks which details contains the given string parameter","lastModifiedDate":"2023-08-31"},{"lineNumber":230,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":231,"author":{"gitId":"SelwynAng"},"content":"     * @param taskToFindDetails The details of the task to find","lastModifiedDate":"2023-08-31"},{"lineNumber":232,"author":{"gitId":"SelwynAng"},"content":"     * @return The ArrayList of tasks that match the string parameter","lastModifiedDate":"2023-08-31"},{"lineNumber":233,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":234,"author":{"gitId":"SelwynAng"},"content":"    public ArrayList\u003cTask\u003e findTasks(String taskToFindDetails) {","lastModifiedDate":"2023-08-31"},{"lineNumber":235,"author":{"gitId":"SelwynAng"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":236,"author":{"gitId":"SelwynAng"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":237,"author":{"gitId":"SelwynAng"},"content":"            Task taskInFocus \u003d this.tasks.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":238,"author":{"gitId":"SelwynAng"},"content":"            if (taskInFocus.toString().contains(taskToFindDetails)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":239,"author":{"gitId":"SelwynAng"},"content":"                foundTasks.add(taskInFocus);","lastModifiedDate":"2023-08-31"},{"lineNumber":240,"author":{"gitId":"SelwynAng"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":241,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":242,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":243,"author":{"gitId":"SelwynAng"},"content":"        return foundTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":244,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":245,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":246,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":247,"author":{"gitId":"SelwynAng"},"content":"     * Checks if the given index exceeds the size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":248,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":249,"author":{"gitId":"SelwynAng"},"content":"     * @param index The index to be checked.","lastModifiedDate":"2023-08-29"},{"lineNumber":250,"author":{"gitId":"SelwynAng"},"content":"     * @return True if the index exceeds the task list size, false otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":251,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":252,"author":{"gitId":"SelwynAng"},"content":"    public boolean exceedsSizeOfTaskList(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":253,"author":{"gitId":"SelwynAng"},"content":"        return index \u003e numTasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":254,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":255,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":256,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":257,"author":{"gitId":"SelwynAng"},"content":"     * Retrieves the list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":258,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":259,"author":{"gitId":"SelwynAng"},"content":"     * @return The ArrayList of Task objects.","lastModifiedDate":"2023-08-29"},{"lineNumber":260,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":261,"author":{"gitId":"SelwynAng"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":262,"author":{"gitId":"SelwynAng"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":263,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":264,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":265,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":266,"author":{"gitId":"SelwynAng"},"content":"     * Retrieves the number of tasks in the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":267,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":268,"author":{"gitId":"SelwynAng"},"content":"     * @return The number of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":269,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":270,"author":{"gitId":"SelwynAng"},"content":"    public int getNumTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":271,"author":{"gitId":"SelwynAng"},"content":"        return this.numTasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":272,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":273,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":273}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":" * This is the TaskType enum","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":" * @author Selwyn","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"SelwynAng":9}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":" * The Todo class represents a task without a specific due date or time.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":" * @author selwyn","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"     * Constructs a Todo object with the specified description.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"     * @param detail The description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    public Todo(String detail) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"        super(detail);","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"     * Returns a string representation of the Todo object, including its completion status and description.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"     * @return A string representation of the Todo object.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":27}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"public class DukeTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"SelwynAng":17}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    public void testParseCommandForExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"        Command c \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"            c \u003d parser.parseCommand(\"bye\");","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"        assertEquals(c.getClass(), new ExitCommand().getClass());","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"SelwynAng"},"content":"    public void testParseCommandForList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"SelwynAng"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"SelwynAng"},"content":"        Command c \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"SelwynAng"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"SelwynAng"},"content":"            c \u003d parser.parseCommand(\"list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"SelwynAng"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"SelwynAng"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"SelwynAng"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"SelwynAng"},"content":"        assertEquals(c.getClass(), new ListCommand().getClass());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"SelwynAng":36}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"SelwynAng"},"content":"public class TaskTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"SelwynAng"},"content":"    public void testMarkDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"SelwynAng"},"content":"        Task testTask \u003d new Task(\"testTask\");","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"SelwynAng"},"content":"        testTask.markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"SelwynAng"},"content":"        assertTrue(testTask.getIsDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"SelwynAng"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"SelwynAng"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"SelwynAng"},"content":"    public void testMarkUndone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"        Task testTask \u003d new Task(\"testTask\");","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"SelwynAng"},"content":"        testTask.markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"SelwynAng"},"content":"        testTask.markUndone();","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"SelwynAng"},"content":"        assertFalse(testTask.getIsDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"SelwynAng"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"SelwynAng"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"SelwynAng":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SelwynAng"},"content":"todo drink tea","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"SelwynAng"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"SelwynAng"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"SelwynAng"},"content":"event project meeting /from Tues 2pm /to 4pm","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"SelwynAng"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"SelwynAng"},"content":"mark 3","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"SelwynAng"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"SelwynAng":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"SelwynAng"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"SelwynAng":1,"-":20}}]
