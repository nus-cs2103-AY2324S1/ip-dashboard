[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jannnice":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"javafx {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    version \u003d \"11.0.2\"","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 ]","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"checkstyle {","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"    mainClass.set(\"seedu.duke.Main\")","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jannnice":28,"-":41}},{"path":"src/main/java/Exceptions/DukeArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package Exceptions;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":" * This class represents the exception which is thrown when there is an incorrect argument","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"public class DukeArgumentException extends Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"    public DukeArgumentException(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"        super(message);","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":9}},{"path":"src/main/java/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package Exceptions;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":" * This class represents the exception which is thrown when an invalid command is given or faced.","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"jannnice":9}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":" * A Deadline is a task with an end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"     * Constructor method for Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"     * @param description Description of the Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"     * @param by Due date of the Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"        this.by \u003d LocalDateTime.parse(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"    public String printDesc() {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"            String byString \u003d this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy H:mm\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"            return \"[D]\" + super.printDesc() + \" (by: \" + byString + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"            return \"Please key in the dates in the format of YYYY-MM-ddThh:mm:ss\";","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"        return \"D~\" + super.getDescription() + \"~\" + this.by;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"jannnice":37}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"        dialog.getStylesheets().add(\"/stylesheets/DialogBox.css\");","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"        displayPicture.setClip(new Circle(50, 50, 45));","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"    private void flip() {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"jannnice"},"content":"    public static DialogBox getPopoohDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"jannnice"},"content":"        db.flip();","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"jannnice"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jannnice":65}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import Exceptions.DukeArgumentException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":" * This class represents the main program.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"public class Duke {","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"    private static Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"    private static Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"    private static Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    private static TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"    private static String DIR_PATH \u003d \"./data\";","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    private static String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"    enum Command { MARK, UNMARK, DELETE, TODO, EVENT, DEADLINE, BYE, LIST, INVALID, FIND, REMINDER }","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"     * Checks if the command is valid or invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"     * @param command Command word to be identified.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"     * @return The command word in type Command.","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"    public static Command commandCheck(String command) {","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"        switch(command) {","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"            return Command.BYE;","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"            return Command.UNMARK;","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"            return Command.MARK;","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"            return Command.DELETE;","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"        case \"list\":","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"            return Command.LIST;","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"            return Command.TODO;","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"        case \"event\":","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"        case \"find\":","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"            return Command.FIND;","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"jannnice"},"content":"        case \"reminder\":","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"jannnice"},"content":"            return Command.REMINDER;","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"        default:","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"jannnice"},"content":"            return Command.INVALID;","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"jannnice"},"content":"     * Implements the action of the command.","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"jannnice"},"content":"     * @param command Command word of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"jannnice"},"content":"     * @param info Details of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"jannnice"},"content":"     * @return The message to acknowledge the success of the implementation of task.","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"jannnice"},"content":"    public static String printCommand(Command command, String info)","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"jannnice"},"content":"            throws DukeException, IOException, DukeArgumentException {","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"jannnice"},"content":"        switch(command) {","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"jannnice"},"content":"        case BYE:","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"jannnice"},"content":"            return ui.exit();","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"jannnice"},"content":"            case UNMARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"jannnice"},"content":"            return tasks.unmark(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"jannnice"},"content":"        case MARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"jannnice"},"content":"            return tasks.mark(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"jannnice"},"content":"        case DELETE:","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"jannnice"},"content":"            return tasks.deleteTask(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"jannnice"},"content":"        case LIST:","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"jannnice"},"content":"            return tasks.listTask();","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"jannnice"},"content":"        case TODO:","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"jannnice"},"content":"            return tasks.todoTask(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"jannnice"},"content":"        case EVENT:","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"jannnice"},"content":"            return tasks.eventTask(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"jannnice"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"jannnice"},"content":"            return tasks.deadlineTask(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"jannnice"},"content":"        case FIND:","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"jannnice"},"content":"            return tasks.findTask(info);","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"jannnice"},"content":"        case REMINDER:","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"jannnice"},"content":"            return tasks.setReminder(info);","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"jannnice"},"content":"        default:","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"jannnice"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"jannnice"},"content":"     * Empty constructor method for Duke.","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"jannnice"},"content":"    public Duke() {","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"jannnice"},"content":"        this.storage \u003d new Storage(DIR_PATH, FILE_PATH);","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"jannnice"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"jannnice"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"jannnice"},"content":"        tasks \u003d new TaskList(storage.loadTask(), storage);","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":107,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"jannnice"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"jannnice"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"jannnice"},"content":"    String getResponse(String input) {","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"jannnice"},"content":"        String[] findCommand \u003d parser.commandSplit(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"jannnice"},"content":"        Command order \u003d commandCheck(findCommand[0]);","lastModifiedDate":"2023-09-06"},{"lineNumber":116,"author":{"gitId":"jannnice"},"content":"        String response;","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":118,"author":{"gitId":"jannnice"},"content":"            response \u003d printCommand(order, input);","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"jannnice"},"content":"            storage.saveTask(tasks);","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"jannnice"},"content":"        } catch (DukeException | DukeArgumentException message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"jannnice"},"content":"            response \u003d message.getMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"jannnice"},"content":"            response \u003d \"Oh no, seems like something is not working.. We can\u0027t save your data.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"jannnice"},"content":"        return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jannnice":126,"-":1}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":" * An Event is a task with a start and end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"     * Constructor method for Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"     * @param from Start date and time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"     * @param to End date and time of the event","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"        this.from \u003d LocalDateTime.parse(from);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"        this.to \u003d LocalDateTime.parse(to);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    public String printDesc() {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"        String fromMessage \u003d this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy H:mm\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"        String toMessage \u003d this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy H:mm\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"        return \"[E]\" + super.printDesc() + \" (from: \" + fromMessage + \" to: \" + toMessage + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"        return \"E~\" + super.getDescription() + \"~\" + this.from + \" - \" + this.to;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"jannnice":36}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"public class Launcher {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"jannnice":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"            stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jannnice":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Piglet.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    private Image popoohImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pooh.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"     * Initialises the main window with the \"greet\" message and \"reminders\" if applicable.","lastModifiedDate":"2023-09-19"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"        String openingMessage \u003d ui.greet() + TaskList.printReminders();","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"        dialogContainer.getStylesheets().add(\"/stylesheets/MainWindow.css\");","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"        dialogContainer.getChildren().add(DialogBox.getPopoohDialog(openingMessage, popoohImage));","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"                DialogBox.getPopoohDialog(response, popoohImage)","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jannnice":58}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" * The duke.Parser class processes commands by breaking it up to words.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"    public String[] commandSplit(String command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"        return command.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    public String[] deadlineDetails(String task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"        return task.split(\"/by \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    public String[] eventDetails(String task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"        return task.split(\" /\", 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    public String[] storageSplit(String task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"        return task.split(\"~\", 6);","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    public String[] storageTimeSplit(String time) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"        return time.split(\" - \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":23}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import Exceptions.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"import java.io.File;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":" * This class deals with loading tasks from ./data/duke.txt and saving tasks in one file.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    protected String directoryPath;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    protected String filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    private static File hardDisk;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    private static Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"     * Constructor method for the duke.Storage class.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"     * @param filePath The relative path of duke.txt.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"     * @param dirPath the relative path to the data directory.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    public Storage(String dirPath, String filePath) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"        this.directoryPath \u003d dirPath;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"        hardDisk \u003d new File(this.filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    protected void checkHardDisk() {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"        File dataDirectory \u003d new File(this.directoryPath);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"        if (!dataDirectory.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"            System.out.println(\"OOPS! The data directory doesn\u0027t exist. I\u0027ll create one for you!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"            dataDirectory.mkdir();","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"        if (!hardDisk.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"            System.out.println(\"OOPS! The hard disk doesn\u0027t exist. I\u0027ll create one for you!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"                hardDisk.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"                hardDisk.setReadable(true);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"                hardDisk.setWritable(true);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"                System.out.println(\"Something went wrong, we couldn\u0027t create duke.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"    // retrieves past tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"    protected ArrayList\u003cTask\u003e loadTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"        ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"        checkHardDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"            Scanner fileScanner \u003d new Scanner(hardDisk);","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"            while (fileScanner.hasNext()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"                String task \u003d fileScanner.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"                String[] taskDetails \u003d parser.storageSplit(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"                String taskType \u003d taskDetails[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"jannnice"},"content":"                String taskStatus \u003d taskDetails[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"jannnice"},"content":"                String taskReminder \u003d taskDetails[2];","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"                String taskDescription \u003d taskDetails[3];","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"jannnice"},"content":"                switch (taskType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"jannnice"},"content":"                case \"T\":","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"jannnice"},"content":"                    Todo addTodo \u003d new Todo(taskDescription);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskStatus, \"done\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"jannnice"},"content":"                        addTodo.updateAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskReminder, \"reminder\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"jannnice"},"content":"                        addTodo.updateReminder();","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"jannnice"},"content":"                    taskArray.add(addTodo);","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"jannnice"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"jannnice"},"content":"                case \"D\":","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"jannnice"},"content":"                    Deadline addDeadline \u003d new Deadline(taskDescription, taskDetails[4]);","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskStatus, \"Y\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"jannnice"},"content":"                        addDeadline.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskReminder, \"reminder\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"jannnice"},"content":"                        addDeadline.updateReminder();","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"jannnice"},"content":"                    taskArray.add(addDeadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"jannnice"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"jannnice"},"content":"                case \"E\":","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"jannnice"},"content":"                    String[] timeDetails \u003d parser.storageTimeSplit(taskDetails[4]);","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"jannnice"},"content":"                    Event addEvent \u003d new Event(taskDescription, timeDetails[0], timeDetails[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskStatus, \"Y\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"jannnice"},"content":"                        addEvent.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"jannnice"},"content":"                    if (Objects.equals(taskReminder, \"reminder\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"jannnice"},"content":"                        addEvent.updateReminder();","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"jannnice"},"content":"                    }","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"jannnice"},"content":"                    taskArray.add(addEvent);","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"jannnice"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"jannnice"},"content":"                default:","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"jannnice"},"content":"                    throw new DukeException(\"Invalid task in the hard disk\");","lastModifiedDate":"2023-09-19"},{"lineNumber":96,"author":{"gitId":"jannnice"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"jannnice"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"jannnice"},"content":"            System.out.println(\"There is no saved duke.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"jannnice"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"jannnice"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"jannnice"},"content":"        return taskArray;","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"jannnice"},"content":"    // saves new tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"jannnice"},"content":"    protected void saveTask(TaskList taskList) throws IOException {","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"jannnice"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-09-08"},{"lineNumber":109,"author":{"gitId":"jannnice"},"content":"        ArrayList\u003cTask\u003e taskArray \u003d taskList.getTaskArray();","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"jannnice"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"jannnice"},"content":"            String writeTask \u003d task.getDescription() + \"\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"jannnice"},"content":"            fw.write(writeTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"jannnice"},"content":"        fw.close();","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"jannnice"},"content":"    protected void saveTask(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"jannnice"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"jannnice"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"jannnice"},"content":"            String writeTask \u003d task.getDescription() + \"\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"jannnice"},"content":"            fw.write(writeTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"jannnice"},"content":"        fw.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":125}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" * duke.Task represents a task created by a user.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"    protected boolean isReminder;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"     * Constructor method for duke.Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"     * @param description A brief description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"        this.isReminder \u003d false;","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"     * Retrieves the task status.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"     * @return The task status.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"     * Updates the status of the task as done.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"    public void updateAsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"     * Updates the status of the task as not done.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"     * @return Message for the progress of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"    public String markAsDone() {","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"        return \"Yummy honey! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"                + this.printDesc();","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"     * Updates the status of the task as done.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"     * @return Message for the progress of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"    public String markAsUndone() {","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"        return \"OK, I\u0027ve marked this task as not done:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"                + this.printDesc();","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"     * Gets the status of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"     * @return Message for the status of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"    public String printDesc() {","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"jannnice"},"content":"     * Get the message after creating the new task.","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"jannnice"},"content":"     * @return Message for the new creation of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"jannnice"},"content":"    public String printMessage(int numTask) {","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"jannnice"},"content":"        return \"More things to do? Oh dear :( I\u0027ve added the task:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":64,"author":{"gitId":"jannnice"},"content":"                + this.printDesc() + \"\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":65,"author":{"gitId":"jannnice"},"content":"                + \"Now you have \" + (numTask + 1) + \" tasks in the list.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"jannnice"},"content":"     * Gets the description and status of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"jannnice"},"content":"     * @return Message for the description and status of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"jannnice"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"jannnice"},"content":"        String reminder;","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"jannnice"},"content":"        if (this.isReminder) {","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"jannnice"},"content":"            reminder \u003d \"reminder\";","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"jannnice"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"jannnice"},"content":"            reminder \u003d \"NA\";","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"jannnice"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"jannnice"},"content":"            return \"done~\" + reminder + \"~\" + this.description;","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"jannnice"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"jannnice"},"content":"            return \"notDone~\" + reminder + \"~\" + this.description;","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"jannnice"},"content":"     * Gets the description of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"jannnice"},"content":"     * @return Message for the description of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"jannnice"},"content":"    public String getDesc() {","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"jannnice"},"content":"        return this.description;","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"jannnice"},"content":"    public String makeReminder() {","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"jannnice"},"content":"        this.isReminder \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"jannnice"},"content":"        return \"OK, I will remind you of this task the next time I see you!\\n\";","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"jannnice"},"content":"    public void updateReminder() {","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"jannnice"},"content":"        this.isReminder \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jannnice":98}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import Exceptions.DukeArgumentException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":" * This class encapsulates the current tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"public class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"    protected static ArrayList\u003cTask\u003e taskArray;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"    protected static Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    protected static int numTask;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    protected static Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"    private static final String INVALID_TASK_NUMBER_MESSAGE \u003d \"I think you keyed in the wrong task number..\";","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    private static final String EMPTY_DESCRIPTION_MESSAGE \u003d \"OOPS!!! The description of todo cannot be empty :(\";","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"     * Constructor method for the duke.TaskList class.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"     * @param loadTask The list of tasks to be used.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"     * @param store The place where the tasks are stored.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"    public TaskList(ArrayList\u003cTask\u003e loadTask, Storage store) {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"        taskArray \u003d loadTask;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"        numTask \u003d taskArray.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"        storage \u003d store;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"jannnice"},"content":"     * Empty constructor method for the duke.TaskList class.","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"jannnice"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"jannnice"},"content":"        taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"jannnice"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"jannnice"},"content":"     * Marks a provided task as not done.","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the task to be unmarked.","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided task number is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"jannnice"},"content":"    public String unmark(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"jannnice"},"content":"        if (parser.commandSplit(i).length \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Which task do you want to mark as not done? Write your command as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"jannnice"},"content":"                    + \"unmark \u003cINDEX_OF_TASK\u003e\");","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"jannnice"},"content":"        int taskId \u003d Integer.parseInt(i.substring(7)) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"jannnice"},"content":"        if (taskId \u003c 0 || taskId \u003e\u003d numTask) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(INVALID_TASK_NUMBER_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(taskId).markAsUndone();","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"jannnice"},"content":"        // update the duke.txt","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"jannnice"},"content":"            storage.saveTask(taskArray);","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"jannnice"},"content":"            return \"Uhm.. something is not working right..\";","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"jannnice"},"content":"     * Marks a provided task as done.","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the task to be marked done.","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided task number is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"jannnice"},"content":"    public String mark(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"jannnice"},"content":"        if (parser.commandSplit(i).length \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Which task to you want to mark as done? Write your command as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"jannnice"},"content":"                    + \"mark \u003cINDEX_OF_TASK\u003e\");","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"jannnice"},"content":"        int taskId \u003d Integer.parseInt(i.substring(5)) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"jannnice"},"content":"        if (taskId \u003c 0 || taskId \u003e\u003d numTask) {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(INVALID_TASK_NUMBER_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(taskId).markAsDone();","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"jannnice"},"content":"        // update the duke.txt","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"jannnice"},"content":"            storage.saveTask(taskArray);","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"jannnice"},"content":"            return \"Uhm.. something is not working right..\";","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"jannnice"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the task to be deleted.","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided task number is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"jannnice"},"content":"    public static String deleteTask(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"jannnice"},"content":"        if (parser.commandSplit(i).length \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Which task do you want to delete? Write your command as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"jannnice"},"content":"                    + \"delete \u003cINDEX_OF_TASK\u003e\");","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"jannnice"},"content":"        int deleteTask \u003d Integer.parseInt(i.substring(7)) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"jannnice"},"content":"        if (deleteTask \u003c 0 || deleteTask \u003e\u003d numTask) {","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(INVALID_TASK_NUMBER_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"jannnice"},"content":"        Task removed \u003d taskArray.get(deleteTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"jannnice"},"content":"        taskArray.remove(deleteTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"jannnice"},"content":"        numTask--;","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"jannnice"},"content":"        assert taskArray.size() \u003d\u003d numTask : \"Task is not deleted successfully.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"jannnice"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"jannnice"},"content":"                + removed.printDesc() + \"\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":107,"author":{"gitId":"jannnice"},"content":"                + \"Now you have \" + numTask + \" tasks in the list.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"jannnice"},"content":"     * Retrieves the full task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"jannnice"},"content":"     * @return The full task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"jannnice"},"content":"    public static String listTask() {","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"jannnice"},"content":"        if (numTask \u003d\u003d 0) {","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"jannnice"},"content":"            return \"Good news! You have no tasks in your list!\";","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"jannnice"},"content":"        } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"jannnice"},"content":"            String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"jannnice"},"content":"            message \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"jannnice"},"content":"            for (int a \u003d 0; a \u003c numTask; a++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"jannnice"},"content":"                message +\u003d \"     \" + (a + 1) + \". \" + taskArray.get(a).printDesc() + \"\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"jannnice"},"content":"            return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"jannnice"},"content":"     * Adds a Todo task to the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the Todo task to be added.","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided information is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"jannnice"},"content":"    public static String todoTask(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"jannnice"},"content":"        String[] taskDetails \u003d parser.commandSplit(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"jannnice"},"content":"        if (taskDetails.length !\u003d 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(EMPTY_DESCRIPTION_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"jannnice"},"content":"        taskArray.add(new Todo(taskDetails[1]));","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(numTask).printMessage(numTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"jannnice"},"content":"        numTask++;","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"jannnice"},"content":"        assert taskArray.size() \u003d\u003d numTask : \"Task is not added successfully.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":142,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":144,"author":{"gitId":"jannnice"},"content":"     * Adds a Deadline task to the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":145,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the Deadline task to be added.","lastModifiedDate":"2023-09-08"},{"lineNumber":146,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":147,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided information is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"jannnice"},"content":"    public static String deadlineTask(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":150,"author":{"gitId":"jannnice"},"content":"        String[] taskDetails \u003d parser.commandSplit(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":152,"author":{"gitId":"jannnice"},"content":"        if (taskDetails.length !\u003d 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(EMPTY_DESCRIPTION_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":154,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"jannnice"},"content":"        String[] deadlineDetails \u003d parser.deadlineDetails(taskDetails[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"jannnice"},"content":"        if (deadlineDetails.length !\u003d 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Something is missing. Write your deadline as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"jannnice"},"content":"                    + \"description + /by YYYY-MM-ddThh:mm:ss\");","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"jannnice"},"content":"        taskArray.add(new Deadline(deadlineDetails[0], deadlineDetails[1]));","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(numTask).printMessage(numTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":162,"author":{"gitId":"jannnice"},"content":"        numTask++;","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"jannnice"},"content":"        assert taskArray.size() \u003d\u003d numTask : \"Task is not added successfully.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":165,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":167,"author":{"gitId":"jannnice"},"content":"     * Adds a Event task to the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"jannnice"},"content":"     * @param i The information of the Event task to be added.","lastModifiedDate":"2023-09-08"},{"lineNumber":169,"author":{"gitId":"jannnice"},"content":"     * @return Message regarding the outcome of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"jannnice"},"content":"     * @throws DukeArgumentException DukeArgumentException is thrown if the provided information is invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"jannnice"},"content":"    public static String eventTask(String i) throws DukeArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"jannnice"},"content":"        String[] taskDetails \u003d parser.commandSplit(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":175,"author":{"gitId":"jannnice"},"content":"        if (taskDetails.length !\u003d 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(EMPTY_DESCRIPTION_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"jannnice"},"content":"        String[] eventDetails \u003d parser.eventDetails(taskDetails[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"jannnice"},"content":"        if (eventDetails.length !\u003d 3) {","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Something is missing. Write your event as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":181,"author":{"gitId":"jannnice"},"content":"                    + \"description + /from YYYY-MM-ddThh:mm:ss + /to YYYY-MM-ddThh:mm:ss\");","lastModifiedDate":"2023-09-20"},{"lineNumber":182,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"jannnice"},"content":"        taskArray.add(new Event(eventDetails[0], eventDetails[1].substring(5),","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"jannnice"},"content":"                eventDetails[2].substring(3)));","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(numTask).printMessage(numTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":186,"author":{"gitId":"jannnice"},"content":"        numTask++;","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"jannnice"},"content":"        assert taskArray.size() \u003d\u003d numTask : \"Task is not added successfully.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":189,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"jannnice"},"content":"    protected ArrayList\u003cTask\u003e getTaskArray() {","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"jannnice"},"content":"        return taskArray;","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"jannnice"},"content":"    protected String findTask(String info) throws DukeArgumentException {","lastModifiedDate":"2023-09-20"},{"lineNumber":194,"author":{"gitId":"jannnice"},"content":"        if (parser.commandSplit(info).length \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":195,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"What task are you looking for? Write your command as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":196,"author":{"gitId":"jannnice"},"content":"                    + \"find \u003cTASK_NAME\u003e\");","lastModifiedDate":"2023-09-20"},{"lineNumber":197,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":198,"author":{"gitId":"jannnice"},"content":"        String keyword \u003d (parser.commandSplit(info))[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-08"},{"lineNumber":200,"author":{"gitId":"jannnice"},"content":"        ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"jannnice"},"content":"        for (int i \u003d 0; i \u003c numTask; i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"jannnice"},"content":"            if (taskArray.get(i).getDesc().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"jannnice"},"content":"                keywordTasks.add(taskArray.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"jannnice"},"content":"        if (keywordTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-20"},{"lineNumber":207,"author":{"gitId":"jannnice"},"content":"            return \"I can\u0027t find any matching task with that keyword.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":208,"author":{"gitId":"jannnice"},"content":"        } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":209,"author":{"gitId":"jannnice"},"content":"            message \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":210,"author":{"gitId":"jannnice"},"content":"            for (int a \u003d 0; a \u003c keywordTasks.size(); a++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"jannnice"},"content":"                message +\u003d (a + 1) + \". \" + keywordTasks.get(a).printDesc() + \"\\n\";","lastModifiedDate":"2023-09-19"},{"lineNumber":212,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"jannnice"},"content":"            return message;","lastModifiedDate":"2023-09-08"},{"lineNumber":214,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":216,"author":{"gitId":"jannnice"},"content":"    protected String setReminder(String info) throws DukeArgumentException {","lastModifiedDate":"2023-09-12"},{"lineNumber":217,"author":{"gitId":"jannnice"},"content":"        if (parser.commandSplit(info).length \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":218,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(\"Which task do you want to set reminder for? Write your command as:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":219,"author":{"gitId":"jannnice"},"content":"                    + \"reminder \u003cINDEX_OF_TASK\u003e\");","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":221,"author":{"gitId":"jannnice"},"content":"        int taskId \u003d Integer.parseInt(info.substring(9)) - 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"jannnice"},"content":"        if (taskId \u003c 0 || taskId \u003e\u003d numTask) {","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"jannnice"},"content":"            throw new DukeArgumentException(INVALID_TASK_NUMBER_MESSAGE);","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"jannnice"},"content":"        message \u003d taskArray.get(taskId).makeReminder();","lastModifiedDate":"2023-09-12"},{"lineNumber":227,"author":{"gitId":"jannnice"},"content":"        // update the duke.txt","lastModifiedDate":"2023-09-12"},{"lineNumber":228,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"jannnice"},"content":"            storage.saveTask(taskArray);","lastModifiedDate":"2023-09-12"},{"lineNumber":230,"author":{"gitId":"jannnice"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":231,"author":{"gitId":"jannnice"},"content":"            return \"Uhm.. something is not working right..\";","lastModifiedDate":"2023-09-12"},{"lineNumber":232,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":233,"author":{"gitId":"jannnice"},"content":"        return message;","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":235,"author":{"gitId":"jannnice"},"content":"    protected static String printReminders() {","lastModifiedDate":"2023-09-12"},{"lineNumber":236,"author":{"gitId":"jannnice"},"content":"        String message;","lastModifiedDate":"2023-09-12"},{"lineNumber":237,"author":{"gitId":"jannnice"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"jannnice"},"content":"        message \u003d \"Here are some reminders for you:\\n\";","lastModifiedDate":"2023-09-12"},{"lineNumber":239,"author":{"gitId":"jannnice"},"content":"        for (int a \u003d 0; a \u003c numTask; a++) {","lastModifiedDate":"2023-09-12"},{"lineNumber":240,"author":{"gitId":"jannnice"},"content":"            if (taskArray.get(a).isReminder) {","lastModifiedDate":"2023-09-12"},{"lineNumber":241,"author":{"gitId":"jannnice"},"content":"                message +\u003d (counter + 1) + \". \" + taskArray.get(a).printDesc() + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":242,"author":{"gitId":"jannnice"},"content":"                counter++;","lastModifiedDate":"2023-09-12"},{"lineNumber":243,"author":{"gitId":"jannnice"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":244,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":245,"author":{"gitId":"jannnice"},"content":"        if (counter \u003d\u003d 0) {","lastModifiedDate":"2023-09-12"},{"lineNumber":246,"author":{"gitId":"jannnice"},"content":"            return \"You have no reminders for today.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":247,"author":{"gitId":"jannnice"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":248,"author":{"gitId":"jannnice"},"content":"            return message;","lastModifiedDate":"2023-09-12"},{"lineNumber":249,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":250,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":251,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":251}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" * A Todo is a type of task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"     * Constructor method for Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"     * @param description Description of the Todo.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    public String printDesc() {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"        return \"[T]\" + super.printDesc();","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"        return \"T~\" + super.getDescription();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"jannnice":24}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":" * This class helps Duke interact with the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"    public static String greet() {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"        return \"Hello! I\u0027m POPOOH!!\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"                + \"What can I do for you?\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    public static String exit() {","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"        return \"Glad that I could help you!\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"                + \"See ya next time hehe :)\";","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":15}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jannnice":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"dialogContainer\"/\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jannnice":19}},{"path":"src/test/java/duke/ParseTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"public class ParseTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"    public void deadlineDetails_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"        String deadline \u003d \"homework /by: 2023-12-01T12:20:00\";","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"        String[] output \u003d parser.deadlineDetails(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"        assertEquals(output.length, 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":15}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jannnice"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jannnice"},"content":"import Exceptions.DukeArgumentException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jannnice"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jannnice"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jannnice"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jannnice"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jannnice"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jannnice"},"content":"    public void markTask_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jannnice"},"content":"        Task exampleTask \u003d new Todo(\"testing for marking\");","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jannnice"},"content":"        exampleTask.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jannnice"},"content":"        assertTrue(exampleTask.isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jannnice"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jannnice"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"    public void addEvent_invalidDescription_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"jannnice"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"jannnice"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"jannnice"},"content":"            tasks.eventTask(\"wedding /from 2023-09-09T09:00:00 /to\");","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"jannnice"},"content":"        } catch (DukeArgumentException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"jannnice"},"content":"            String message \u003d \"     OOPS!!! The details for the event is missing!\";","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jannnice"},"content":"            assertEquals(e.getMessage(), message);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jannnice"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"jannnice"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jannnice":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jannnice"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jannnice":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"jannnice"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jannnice":1,"-":33}}]
