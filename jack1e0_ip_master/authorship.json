[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"# Bob project template","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"3. After that, locate the `src/main/java/Bob.java` file, right-click it, and choose `Run Bob.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jack1e0":2,"-":22}},{"path":"data/bob.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"todo | 1 | read","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"todo | 0 | hih","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"todo | 0 | g out","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":3}},{"path":"src/main/java/bob/Bob.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.util.*;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.command.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class Bob {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"    public Bob(String dataPath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"        storage \u003d new Storage(dataPath);","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"    public void run() {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"        ui.greet();","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"                if (nextLine.isEmpty()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"                    throw new NoSuchElementException();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"                Command c \u003d Parser.parse(nextLine);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"                isExit \u003d c.isExit;","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"            } catch (NoSuchElementException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"                ui.stringFormat(new String[]{\"Write something!\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"        new Bob(\"./data/bob.txt\").run();","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jack1e0":42,"-":2}},{"path":"src/main/java/bob/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import bob.command.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":" * Handles user input and convert them into the right command.","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"public class Parser {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"    public static Command parse(String nextLine) {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"        if (nextLine.equals(\"list\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"            return new DisplayCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"        } else if (nextLine.contains(\"mark\")) { // if command is to mark or unmark","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"            return new MarkCommand(nextLine);","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        } else if (nextLine.contains(\"delete\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            return new DeleteCommand(nextLine);","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"        } else if (nextLine.equals(\"bye\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"        } else { // if command is to add tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"            return new AddCommand(nextLine);","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":21}},{"path":"src/main/java/bob/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"import bob.task.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":" * Handles loading tasks from, and saving tasks to file","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"    private String dataPath;","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"    public Storage(String dataPath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"        this.dataPath \u003d dataPath;","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"     * If bob.txt exists, read data from it. If data is not in correct form, delete file and create empty file.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"     * If bob.txt does not exist, create empty file.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"        File file \u003d new File(dataPath);","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"        if (file.createNewFile()) { // if file do not exist","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"            // do nothing, as a new file is created. list remains empty","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"            // read from file","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"                while (sc.hasNext()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"                    lst.add(Task.parse(sc.nextLine()));","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"            } catch (IndexOutOfBoundsException e) { // file corrupted","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"                file.delete();","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"        return lst;","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"jack1e0"},"content":"     * Writes a new line to bob.txt for each Task in lst.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"jack1e0"},"content":"     * Called whenever an operation that alters lst is implemented.","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"jack1e0"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"jack1e0"},"content":"    public void write(ArrayList\u003cTask\u003e lst) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"jack1e0"},"content":"        FileWriter fw \u003d new FileWriter(dataPath, false);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"jack1e0"},"content":"        String lstString \u003d \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"jack1e0"},"content":"        for (Task tsk : lst) {","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"jack1e0"},"content":"            lstString +\u003d tsk.toTxt() + \"\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"jack1e0"},"content":"        fw.write(lstString);","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"jack1e0"},"content":"        fw.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":58}},{"path":"src/main/java/bob/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import bob.task.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.exception.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":" * Contains list of tasks, and operations that alter it.","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"public class TaskList {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    public ArrayList\u003cTask\u003e lst;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        this.lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"    public TaskList(ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"        this.lst \u003d lst;","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"     * Generates the appropriate type of Task based on user input","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"     * Throws exceptions due to incorrect user input","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"     * @param description is of the form e.g. \"event read /from 2pm /to 4pm\"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"     * @return the relevant Task","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"     * @throws WrongInputException for unrecognised input.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"     * @throws MissingTaskException when task name is missing.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"     * @throws MissingDeadlineException when duedate of Deadline is missing.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"     * @throws MissingEventDatesException when start and end of Event is missing.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"    public Task generateTask(String description)","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"            throws WrongInputException, MissingTaskException, MissingDeadlineException, MissingEventDatesException {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"        // Split by the first \" \" into type, and task details","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"        String[] task \u003d description.split(\" \", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"        TaskType taskType;","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"            taskType \u003d Enum.valueOf(TaskType.class, task[0]);","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"            throw new WrongInputException();","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"        if (task.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"            throw new MissingTaskException();","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"jack1e0"},"content":"        String taskDetails \u003d task[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"jack1e0"},"content":"        if (taskType.equals(TaskType.deadline)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"jack1e0"},"content":"            return new Deadline(taskDetails);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"jack1e0"},"content":"        } else if (taskType.equals(TaskType.event)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"jack1e0"},"content":"            return new Event(taskDetails);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"jack1e0"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"jack1e0"},"content":"            return new Todo(taskDetails);","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"jack1e0"},"content":"     * Adds a Task to lst. Writes modified lst to bob.txt.","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"jack1e0"},"content":"     * Handles exceptions that occur due to wrong input/ missing requirements","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"jack1e0"},"content":"     * @param description is of the form e.g. \"event read /from 2pm /to 4pm\"","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"jack1e0"},"content":"     * @return message for adding a Task","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"jack1e0"},"content":"    public String[] addToList(String description) {","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"jack1e0"},"content":"            Task taskObj \u003d generateTask(description);","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"jack1e0"},"content":"            lst.add(taskObj);","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"jack1e0"},"content":"            return new String[]{\"New task added: \", \"\\t\" + taskObj.toString(),","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"jack1e0"},"content":"                    \"You now have \" + lst.size() + (lst.size() \u003d\u003d 1 ? \" task!\" : \" tasks!\")};","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"jack1e0"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"jack1e0"},"content":"            return new String[]{e.message};","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"jack1e0"},"content":"        } catch (MissingTaskException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"jack1e0"},"content":"            return new String[]{e.message};","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"jack1e0"},"content":"        } catch (MissingDeadlineException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"jack1e0"},"content":"            return new String[]{e.message};","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"jack1e0"},"content":"        } catch (MissingEventDatesException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"jack1e0"},"content":"            return new String[]{e.message};","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"jack1e0"},"content":"     * Prints out the Tasks on lst.","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"jack1e0"},"content":"     * @return display of lst","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"jack1e0"},"content":"    public String[] displayList() {","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"jack1e0"},"content":"        String[] tasks \u003d new String[lst.size() + 1];","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"jack1e0"},"content":"        if (lst.isEmpty()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"jack1e0"},"content":"            tasks[0] \u003d \"You currently have no tasks.\";","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"jack1e0"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"jack1e0"},"content":"            tasks[0] \u003d \"Here are your tasks!\";","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"jack1e0"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"jack1e0"},"content":"            tasks[i + 1] \u003d (i + 1) + \". \" + lst.get(i).toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"jack1e0"},"content":"        return tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"jack1e0"},"content":"     * Marks Task as done or undone at a specified index. Writes modified lst to bob.txt.","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"jack1e0"},"content":"     * @param index of Task to be marked","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"jack1e0"},"content":"     * @param doneOrNot states whether the Task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"jack1e0"},"content":"     * @return message for marking a Task","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"jack1e0"},"content":"    public String[] markDoneOrNot(int index, boolean doneOrNot) {","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"jack1e0"},"content":"        lst.get(index - 1).SetDoneOrNot(doneOrNot);","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"jack1e0"},"content":"        String statement \u003d doneOrNot ? \"Nice! You completed a task!\" : \"... This is now undone.\";","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"jack1e0"},"content":"        return new String[]{statement, \"\\t\" + lst.get(index - 1).toString()};","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"jack1e0"},"content":"     * Deletes Task at specified index from list. Writes modified lst to bob.txt.","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"jack1e0"},"content":"     * @param index of Task to be deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"jack1e0"},"content":"     * @return message for deleting a Task","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"jack1e0"},"content":"    public String[] deleteTask(int index) {","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"jack1e0"},"content":"        String taskStr \u003d lst.get(index - 1).toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"jack1e0"},"content":"        lst.remove(index - 1);","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"jack1e0"},"content":"        return new String[]{\"I\u0027ve removed this task from list: \", \"\\t\" + taskStr,","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"jack1e0"},"content":"                    \"You now have \" + lst.size() + (lst.size() \u003d\u003d 1 ? \" task!\" : \" tasks!\")};","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":119}},{"path":"src/main/java/bob/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":" * Handles user interaction","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class Ui {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"     * Formats string into nice display","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"     * @param strArray contains strings to be displayed on different lines","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"     * @return formatted string","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"    public void stringFormat(String[] strArray) {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        String content \u003d \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"        for (String s : strArray) {","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"            content +\u003d \"\\t \" + s + \"\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"        String display \u003d \"\\t_______________________________________________\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"                + content","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"                + \"\\t_______________________________________________\";","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"        System.out.println(display);","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"    public void greet() {","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"        stringFormat(new String[]{\"Hi there! I\u0027m Bob\", \"How can I help?\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"    public void exit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"        stringFormat(new String[]{\"See you soon!\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"    public void echo(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"        stringFormat(new String[]{input});","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"        stringFormat(new String[]{\"Unable to load tasks. New list created!\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":38}},{"path":"src/main/java/bob/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"    public AddCommand(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"        super.input \u003d input;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"        super.isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(tasks.addToList(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            storage.write(tasks.lst);","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":19}},{"path":"src/main/java/bob/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":" * Handles the execution of different types of commands.","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"    public String input;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    public boolean isExit;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":13}},{"path":"src/main/java/bob/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.exception.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"        super.input \u003d input;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"        super.isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            String[] deleteIndex \u003d input.split(\" \");","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"            if (deleteIndex.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"                throw new MissingIndexException();","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"            int index \u003d 0;","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"                index \u003d Integer.parseInt(deleteIndex[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"                throw new MissingIndexException();","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(tasks.deleteTask(index));","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"            storage.write(tasks.lst);","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"        } catch (MissingIndexException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(new String[]{e.message});","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(new String[]{\"Index provided is wrong!\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":34}},{"path":"src/main/java/bob/command/DisplayCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"public class DisplayCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"    public DisplayCommand() {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"        super.isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"        ui.stringFormat(tasks.displayList());","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":12}},{"path":"src/main/java/bob/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"        super.isExit \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"        ui.exit();","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":12}},{"path":"src/main/java/bob/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import bob.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.exception.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    public MarkCommand(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"        super.input \u003d input;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"        super.isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            String[] markIndex \u003d input.split(\" \");","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"            if (markIndex.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"                throw new MissingIndexException();","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"            int index \u003d 0;","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"                index \u003d Integer.parseInt(markIndex[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"                throw new MissingIndexException();","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"            boolean doneOrNot \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"            if (input.contains(\"unmark\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"                doneOrNot \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(tasks.markDoneOrNot(index, doneOrNot));","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"            storage.write(tasks.lst);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"        } catch (MissingIndexException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(new String[]{e.message});","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"            ui.stringFormat(new String[]{\"Index provided is wrong!\"});","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":38}},{"path":"src/main/java/bob/exception/BobException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class BobException extends Exception {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"Error.\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":6}},{"path":"src/main/java/bob/exception/MissingDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class MissingDeadlineException extends BobException {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"A due date must be given for deadlines!\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/exception/MissingEventDatesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class MissingEventDatesException extends BobException {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"Start and end times must be provided for events!\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/exception/MissingIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class MissingIndexException extends BobException {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"Task index must be provided!\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/exception/MissingTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class MissingTaskException extends BobException {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"Task description is missing!\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/exception/WrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.exception;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class WrongInputException extends BobException {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public String message \u003d \"Oh no, I don\u0027t understand that...\";","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.exception.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    private LocalDate due;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"    public Deadline(String description) throws MissingDeadlineException {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"        super(description.split(\" /by \")[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"            this.due \u003d LocalDate.parse(description.split(\" /by \")[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            throw new MissingDeadlineException();","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"    public Deadline(String name, boolean done, String due) {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"        super(name);","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"        super.done \u003d done;","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"        this.due \u003d LocalDate.parse(due);","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"        String done \u003d this.done ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"        return \"[D]\" + done + \" \" + this.name","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"                + \" (by: \" + this.due.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"     * Parses string into a Deadline object","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"     * @param str is in the form e.g. \"0 | read book | 2pm\"","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"     * @return Deadline object","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"     * @throws IndexOutOfBoundsException when parsing fails, as string split does not occur correctly.","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"    public static Deadline parseDeadline(String str) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"        String[] strSplit \u003d str.split(\" \\\\| \", 3);","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"        boolean isDone \u003d strSplit[0].equals(\"1\");","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"        String name \u003d strSplit[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"        String due \u003d strSplit[2];","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"        return new Deadline(name, isDone, due);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"jack1e0"},"content":"    public String toTxt() {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"jack1e0"},"content":"        String separation \u003d \" | \";","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"jack1e0"},"content":"        return \"deadline\" + separation + (done ? 1 : 0) + separation","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"jack1e0"},"content":"                + super.name + separation + due;","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":52}},{"path":"src/main/java/bob/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"import bob.exception.*;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    private LocalDate start;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"    private LocalDate end;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    public Event(String description) throws MissingEventDatesException {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"        super(description.split(\" /from \")[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"            this.start \u003d LocalDate.parse(description.split(\" /from \")[1].split(\" /to \")[0]);","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"            this.end \u003d LocalDate.parse(description.split(\" /from \")[1].split(\" /to \")[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"            throw new MissingEventDatesException();","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"    public Event(String name, boolean done, String start, String end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"        super(name);","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"        super.done \u003d done;","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"        this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"        this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"        String done \u003d this.done ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"        return \"[E]\" + done + \" \" + this.name","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"                + \" (from: \" + this.start.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"                + \" to: \" + this.end.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"     * Parses string into an Event object","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"     * @param str is in the form e.g. \"0 | read book | 2pm | 4pm\"","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"     * @return Event object","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"     * @throws IndexOutOfBoundsException when parsing fails, as string split does not occur correctly.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"    public static Event parseEvent(String str) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"        String[] strSplit \u003d str.split(\" \\\\| \", 4);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"jack1e0"},"content":"        boolean isDone \u003d strSplit[0].equals(\"1\");","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"jack1e0"},"content":"        String name \u003d strSplit[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"jack1e0"},"content":"        String start \u003d strSplit[2];","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"jack1e0"},"content":"        String end \u003d strSplit[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"jack1e0"},"content":"        return new Event(name, isDone, start, end);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"jack1e0"},"content":"    public String toTxt() {","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"jack1e0"},"content":"        String separation \u003d \" | \";","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"jack1e0"},"content":"        return \"event\" + separation + (done ? 1 : 0) + separation","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"jack1e0"},"content":"                + super.name + separation + start + separation + end;","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jack1e0":56}},{"path":"src/main/java/bob/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    protected String name;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"    protected boolean done;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"    protected Task(String name) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"    public void SetDoneOrNot(boolean doneOrNot) {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"        this.done \u003d doneOrNot;","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"     * Parses Task from string to Task object","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"     * @param description is in the form e.g. \"event | 0 | read book | 2pm | 4pm\"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"     * @return Task object","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"     * @throws IndexOutOfBoundsException when parsing fails, indicates corrupt file.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"    public static Task parse(String description) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"        String[] split \u003d description.split(\" \\\\| \", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"        String type \u003d split[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"        String details \u003d split[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"        switch (Enum.valueOf(TaskType.class, type)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"            case todo:","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"                return Todo.parseTodo(details);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"            case event:","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"                return Event.parseEvent(details);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"            case deadline:","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"                return Deadline.parseDeadline(details);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"            default:","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"                throw new IndexOutOfBoundsException();","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"jack1e0"},"content":"    public String toTxt() {","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"jack1e0"},"content":"        return \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jack1e0":43}},{"path":"src/main/java/bob/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    todo, event, deadline","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"jack1e0":5}},{"path":"src/main/java/bob/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"package bob.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"        super(name);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"    public Todo(String name, boolean done) {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"        super(name);","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"        super.done \u003d done;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jack1e0"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jack1e0"},"content":"        String done \u003d this.done ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"jack1e0"},"content":"        return \"[T]\" + done + \" \" + this.name;","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"jack1e0"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"jack1e0"},"content":"     * Parses string into a Todo object","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"jack1e0"},"content":"     * @param str is in the form e.g. \"0 | read book\"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"jack1e0"},"content":"     * @return Todo object","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"jack1e0"},"content":"     * @throws IndexOutOfBoundsException when parsing fails, as string split does not occur correctly.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"jack1e0"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"jack1e0"},"content":"    public static Todo parseTodo(String str) throws IndexOutOfBoundsException {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"jack1e0"},"content":"        String[] strSplit \u003d str.split(\" \\\\| \", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"jack1e0"},"content":"        boolean isDone \u003d strSplit[0].equals(\"1\");","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"jack1e0"},"content":"        String name \u003d strSplit[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"jack1e0"},"content":"        return new Todo(name, isDone);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"jack1e0"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"jack1e0"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"jack1e0"},"content":"    public String toTxt() {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"jack1e0"},"content":"        String separation \u003d \" | \";","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"jack1e0"},"content":"        return \"todo\" + separation + (done ? 1 : 0) + separation + name;","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"jack1e0"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"jack1e0"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jack1e0":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jack1e0"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"jack1e0"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"jack1e0"},"content":"event study /from 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"jack1e0"},"content":"deadline submit /by 12 Aug","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"jack1e0"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jack1e0"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jack1e0"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jack1e0"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"jack1e0"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"jack1e0"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jack1e0":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jack1e0"},"content":"java -classpath ..\\bin Bob \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jack1e0":1,"-":20}}]
