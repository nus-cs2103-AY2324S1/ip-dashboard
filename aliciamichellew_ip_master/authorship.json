[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"# kevin.Kevin project template","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"3. After that, locate the `src/main/java/kevin.Kevin.java` file, right-click it, and choose `Run kevin.Kevin.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"aliciamichellew":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    mainClass.set(\"kevin.Kevin\")","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"    archiveBaseName \u003d \"kevin\"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"checkstyle {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"dependencies {","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"-":40,"aliciamichellew":24}},{"path":"data/kevin.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"Todo - true - test","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"Todo - true - borrow book","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"Todo - true - borrow book","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"Todo - false - borrow book","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"Event - false - apa - 1 pm - 4 pm","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":5}},{"path":"src/main/java/kevin/Kevin.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.util.Timer;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.evaluator.Evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.parser.FileParser;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.parser.Parser;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"import kevin.parser.QueryObject;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":" * Kevin class, a task list chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"public class Kevin {","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    protected Logger logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    protected Parser parser;","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    protected FileParser fileParser;","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    protected FileStorage fileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    protected Evaluator evaluator;","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor for Kevin.","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    public Kevin() {","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"        this.logger \u003d new Logger();","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        this.fileParser \u003d new FileParser();","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        this.fileStorage \u003d new FileStorage();","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        this.evaluator \u003d new Evaluator(logger, fileStorage, taskList);","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"            this.fileStorage.initialize();","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            ArrayList\u003cString\u003e unparsedTasks \u003d this.fileStorage.getTasksFromFile();","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            for (String s : unparsedTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"                this.evaluator.evaluate(fileParser.parseLine(s), true);","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        } catch (KevinException ke) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"            this.logger.log(ke.getMessage());","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"            QueryObject queryObject \u003d parser.prepareArguments(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"            String output \u003d evaluator.evaluate(queryObject, false);","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"            if (output.equals(\"bye\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"                Timer timer \u003d new Timer();","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"                int fiveSeconds \u003d 5 * 1000;","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"                timer.schedule(new TimerTask() {","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"                    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"                    public void run() {","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"                        javafx.application.Platform.exit();","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"                }, fiveSeconds);","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"                return logger.bye();","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"            return output;","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"        } catch (KevinException ke) {","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(ke.getMessage());","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":71}},{"path":"src/main/java/kevin/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"public class Launcher {","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":12}},{"path":"src/main/java/kevin/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"    private Kevin kevin \u003d new Kevin();","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setKevin(kevin);","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"            stage.show();","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":32}},{"path":"src/main/java/kevin/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.DialogBox;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    private Kevin kevin;","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"    private Image kevinImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/kevin.png\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * Initialises Kevin","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"                DialogBox.getKevinDialog(Logger.hello(), kevinImage)","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        );","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"    public void setKevin(Kevin d) {","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        kevin \u003d d;","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Kevin\u0027s reply and then appends them to","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        String response \u003d kevin.getResponse(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"                DialogBox.getKevinDialog(response, kevinImage)","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"        );","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":62}},{"path":"src/main/java/kevin/evaluator/BaseStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":" * Abstract class responsible for the logic for different commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"public abstract class BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    protected ArrayList\u003cString\u003e arguments;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize BaseStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    public BaseStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":38}},{"path":"src/main/java/kevin/evaluator/ByeStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for BYE command.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"public class ByeStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize ByeStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    public ByeStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the command.","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"        return \"bye\";","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":34}},{"path":"src/main/java/kevin/evaluator/DeadlineStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Deadline;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for DEADLINE command.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"public class DeadlineStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize DeadlineStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    DeadlineStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the DEADLINE command.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        Boolean isDone \u003d Boolean.getBoolean(this.arguments.get(0));","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        String name \u003d this.arguments.get(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        String deadline \u003d this.arguments.get(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"            LocalDateTime deadlineDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"                deadlineDate \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\" d/MM/yyyy HHmm\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"            } catch (DateTimeParseException err) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(\"Ensure that the deadline is a valid date\");","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"            Deadline newDeadline \u003d taskList.addDeadline(isDone, name, deadlineDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.addDeadline(newDeadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(new StringBuilder().append(\"Got it. I\u0027ve added this task: \\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"                    .append(newDeadline).append(\"\\nNow you have \")","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"                    .append(taskList.size())","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"                    .append(\" tasks in the list.\")","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"                    .toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"            LocalDateTime deadlineDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"                deadlineDate \u003d LocalDateTime.parse(deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"            } catch (DateTimeParseException err) {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(\"Ensure that the deadline is a valid date\");","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"            taskList.addDeadline(isDone, name, deadlineDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"            return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":68}},{"path":"src/main/java/kevin/evaluator/DeleteStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for DELETE command.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"public class DeleteStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize DeleteStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public DeleteStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the DELETE command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        int index \u003d Integer.parseInt(this.arguments.get(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        Task deletedTask \u003d this.taskList.delete(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.deleteTask(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(String.format(\"Noted. I\u0027ve removed this task: \\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"                    deletedTask, this.taskList.size()));","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":45}},{"path":"src/main/java/kevin/evaluator/Evaluator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.parser.Command;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.parser.QueryObject;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"@FunctionalInterface","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"interface FiveParameterFunction\u003cT, U, V, W, X, R\u003e {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    R apply(T t, U u, V v, W w, X x) throws KevinException;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":" * A class that handles which function to call based on a specific command.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"public class Evaluator {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    private static final HashMap\u003cCommand, FiveParameterFunction\u003cTaskList, ArrayList\u003cString\u003e,","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"            Logger, FileStorage, Boolean, String\u003e\u003e MAPPER \u003d","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"            new HashMap\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    static {","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.BYE, (t, a, l, f, i) -\u003e new ByeStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.LIST, (t, a, l, f, i) -\u003e new ListStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.MARK, (t, a, l, f, i) -\u003e new MarkStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.UNMARK, (t, a, l, f, i) -\u003e new UnmarkStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.TODO, (t, a, l, f, i) -\u003e new ToDoStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.EVENT, (t, a, l, f, i) -\u003e new EventStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.DEADLINE, (t, a, l, f, i) -\u003e new DeadlineStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.DELETE, (t, a, l, f, i) -\u003e new DeleteStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        MAPPER.put(Command.FIND, (t, a, l, f, i) -\u003e new FindStrategy(t, a).evaluate(l, f, i));","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"    private final Logger logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"    private final FileStorage fileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize Evaluator.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    public Evaluator(Logger logger, FileStorage fileStorage, TaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"        this.logger \u003d logger;","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        this.fileStorage \u003d fileStorage;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"     * @param queryObject This is the QueryObject that contains the command and the arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(QueryObject queryObject, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"        Command command \u003d queryObject.getCommandType();","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"        ArrayList\u003cString\u003e arguments \u003d queryObject.getArgs();","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"        return MAPPER.get(command).apply(taskList, arguments, logger, fileStorage, isInFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":63}},{"path":"src/main/java/kevin/evaluator/EventStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Event;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for EVENT command.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"public class EventStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize EventStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    EventStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the EVENT command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        Boolean isDone \u003d Boolean.getBoolean(this.arguments.get(0));","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        String name \u003d this.arguments.get(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        String startTime \u003d this.arguments.get(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        String endTime \u003d this.arguments.get(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        Event newEvent \u003d taskList.addEvent(isDone, name, startTime, endTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.addEvent(newEvent);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(String.format(\"Got it. I\u0027ve added this task: \\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"                    newEvent, taskList.size()));","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":51}},{"path":"src/main/java/kevin/evaluator/FindStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for FIND command.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"public class FindStrategy extends BaseStrategy {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize FindStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    public FindStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the FIND command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        String keyword \u003d this.arguments.get(1);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        return logger.log(taskList.find(keyword));","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aliciamichellew":36}},{"path":"src/main/java/kevin/evaluator/ListStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for LIST command.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"public class ListStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize ListStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    public ListStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the LIST command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        return logger.log(taskList.list());","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":35}},{"path":"src/main/java/kevin/evaluator/MarkStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for MARK command.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"public class MarkStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize MarkStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public MarkStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the MARK command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        int index \u003d Integer.parseInt(this.arguments.get(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        Task newTask \u003d this.taskList.mark(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.overwriteTask(newTask, index);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(\"Nice! I\u0027ve marked this task as done: \\n\" + newTask);","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":44}},{"path":"src/main/java/kevin/evaluator/ToDoStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.ToDo;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for TODO command.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"public class ToDoStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize ToDoStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public ToDoStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the TODO command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        Boolean isDone \u003d Boolean.getBoolean(this.arguments.get(0));","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"        String toDoName \u003d this.arguments.get(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        ToDo newToDo \u003d taskList.addToDo(isDone, toDoName);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.addToDo(newToDo);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(String.format(\"Got it. I\u0027ve added this task: \\n%s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"                    newToDo, this.taskList.size()));","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":47}},{"path":"src/main/java/kevin/evaluator/UnmarkStrategy.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.evaluator;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.storage.FileStorage;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.ui.Logger;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the logic for UNMARK command.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"public class UnmarkStrategy extends BaseStrategy {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize UnmarkStrategy.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @param taskList This is the TaskList where the tasks are stored and operations are defined.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * @param arguments This is an ArrayList where all the needed arguments are stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public UnmarkStrategy(TaskList taskList, ArrayList\u003cString\u003e arguments) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        super(taskList, arguments);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * Handles the logic of the UNMARK command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @param logger This is the Logger that handles System.out.println.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileStorage This is the FileStorage that handles the storage in the local computer.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @param isInFile This is the boolean to show whether the task is in the local computer\u0027s file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a boolean that determines the continuation of the evaluation.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    public String evaluate(Logger logger, FileStorage fileStorage, boolean isInFile) throws KevinException {","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        int index \u003d Integer.parseInt(this.arguments.get(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        Task newTask \u003d this.taskList.unmark(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        if (!isInFile) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            fileStorage.overwriteTask(newTask, index);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            return logger.log(\"OK, I\u0027ve marked this task as not done yet: \\n\" + newTask);","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        return \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":45}},{"path":"src/main/java/kevin/exception/KevinException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible for the exceptions for Kevin.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public class KevinException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to intialize KevinException.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"     * @param errorMessage This is the message that will be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    public KevinException(String errorMessage) {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the detail message string of this throwable.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public String getMessage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        return \"☹ OOPS!!! \" + super.getMessage();","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aliciamichellew":23}},{"path":"src/main/java/kevin/parser/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * Enums for all the different commands in Kevin.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public enum Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    BYE,","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"    LIST,","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"    MARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    UNMARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    TODO,","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    EVENT,","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    DELETE,","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    FIND,","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":16}},{"path":"src/main/java/kevin/parser/FileParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":" * A class to handle the parsing of text from the kevin.txt file.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"public class FileParser {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"     * Parses the text that is taken from the kevin.txt file to make it a QueryObject.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * @param input This is the text input that needs to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a QueryObject containing the Command and arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    public QueryObject parseLine(String input) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"        String[] querySplit \u003d input.trim().split(\" - \", 3);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        if (querySplit.length \u003d\u003d 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Command is not found.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        Command command;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"        boolean isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        ArrayList\u003cString\u003e args \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"            command \u003d Command.valueOf(querySplit[0].toUpperCase());","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"            isDone \u003d Boolean.parseBoolean(querySplit[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"            args.add(String.valueOf(isDone));","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"        } catch (IllegalArgumentException err) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Command is invalid.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        if (command \u003d\u003d Command.TODO) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"            if (querySplit.length !\u003d 3) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(\"Todo command needs to follow \\\"Todo - {isDone} - {todo name}.\\\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            args.add(querySplit[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.DEADLINE) {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentSplit \u003d querySplit[2].split(\" - \");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(String.format(new StringBuilder().append(\"Deadline command needs to \")","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"follow \\\"Deadline - {isDone} - {deadline name} - {deadline date}\\\".\").toString()));","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentSplit[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentSplit[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.EVENT) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentGetName \u003d querySplit[2].split(\" - \", 3);","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentGetName.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(new StringBuilder().append(\"Event command needs to follow \")","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"\\\"Event - {isDone} - {deadline name} - {event start time} - {event end time}\\\".\")","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"                        .toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentGetDate \u003d argumentGetName[2].split(\" - \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentGetDate.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(new StringBuilder().append(\"Event command needs to follow \")","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"\\\"Event - {isDone} -{deadline name} - {event start time} - {event end time}\\\".\")","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"                        .toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetName[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetName[1]);","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetDate[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetDate[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"        return new QueryObject(command, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"aliciamichellew":69}},{"path":"src/main/java/kevin/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":" * A class to handle the parsing of text from the user\u0027s input.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"public class Parser {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"     * Parses the text from the user to make it a QueryObject.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * @param userInput This is the user input that needs to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a QueryObject containing the Command and arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    public QueryObject prepareArguments(String userInput) throws KevinException {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"        String[] querySplit \u003d userInput.trim().split(\" \", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        if (querySplit.length \u003d\u003d 0) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Please input a command.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        Command command;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        ArrayList\u003cString\u003e args \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        args.add(String.valueOf(isDone));","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"            command \u003d Command.valueOf(querySplit[0].toUpperCase());","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"        } catch (IllegalArgumentException err) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Command is invalid.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"        if (command \u003d\u003d Command.BYE || command \u003d\u003d Command.LIST) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"            if (querySplit.length \u003e 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(command.name() + \" command does not take any input.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.MARK || command \u003d\u003d Command.UNMARK || command \u003d\u003d Command.DELETE) {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"            if (querySplit.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(command.name() + \" command needs to take one input\");","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentSplit \u003d querySplit[1].split(\" \");","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentSplit.length \u003e 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(command.name() + \" command only takes one input.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"                Integer.parseInt(argumentSplit[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"            } catch (NumberFormatException err) {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(command.name() + \" input must be an integer.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentSplit[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.TODO) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"            if (querySplit.length !\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(\"Todo command needs to follow \\\"todo {todo name}.\\\"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"            args.add(querySplit[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.DEADLINE) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentSplit \u003d querySplit[1].split(\" /by\");","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(new StringBuilder().append(\"Deadline command needs to follow \")","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"\\\"deadline {deadline name} /by {deadline date}\\\".\").toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentSplit[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentSplit[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.EVENT) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentGetName \u003d querySplit[1].split(\" /from\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentGetName.length !\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(new StringBuilder().append(\"Event command needs to follow \")","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"\\\"event {deadline name} /from {event start time} /to {event end time}\\\".\").toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"aliciamichellew"},"content":"            String[] argumentGetDate \u003d argumentGetName[1].split(\" /to\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"aliciamichellew"},"content":"            if (argumentGetDate.length !\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(new StringBuilder().append(\"Event command needs to follow \")","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\"\\\"event {deadline name} /from {event start time} /to {event end time}\\\".\").toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetName[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetDate[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"aliciamichellew"},"content":"            args.add(argumentGetDate[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"aliciamichellew"},"content":"        } else if (command \u003d\u003d Command.FIND) {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aliciamichellew"},"content":"            if (querySplit.length !\u003d 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aliciamichellew"},"content":"                throw new KevinException(\"Find command needs to follow \\\"find {keyword}.\\\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aliciamichellew"},"content":"            args.add(querySplit[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"aliciamichellew"},"content":"        return new QueryObject(command, args);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":88}},{"path":"src/main/java/kevin/parser/QueryObject.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":" * A class that contains the Command and arguments to be passed to the Evaluator.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"public class QueryObject {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"    private final Command commandType;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    private final ArrayList\u003cString\u003e args;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize QueryObject","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     * @param commandType This is the Command for the query object.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * @param args This is the arguments needed to run the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    public QueryObject(Command commandType, ArrayList\u003cString\u003e args) {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"     * Gets the command of the query object.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    public Command getCommandType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        return commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     * Gets the arguments of the query object.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    public ArrayList\u003cString\u003e getArgs() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        return args;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the object.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"        StringBuilder result \u003d new StringBuilder(this.commandType.name());","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"        for (int i \u003d 0; i \u003c args.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"            result.append(args.get(i));","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"        return result.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"aliciamichellew":48}},{"path":"src/main/java/kevin/storage/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Deadline;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Event;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.tasklist.ToDo;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" * A class that is responsible to write to kevin.txt.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"public class FileStorage {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"    public static final String FILE_LOCATION \u003d \"./data/kevin.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize FileStorage.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    public FileStorage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     * Makes the file to be written on if it does not exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    public void initialize() throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"        storage.createFile(FILE_LOCATION);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"     * Adds todo task to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"     * @param newToDo This is the todo task to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"    public void addToDo(ToDo newToDo) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"        storage.appendFile(FILE_LOCATION, newToDo.toText());","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"     * Adds event task to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"     * @param newEvent This is the event task to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"    public void addEvent(Event newEvent) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        storage.appendFile(FILE_LOCATION, newEvent.toText());","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"     * Overwrites a specific line with the new task.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"     * @param newTask This is the new task to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"     * @param index This is the line number to be overwritten.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"    public void overwriteTask(Task newTask, int index) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"        storage.overwriteLine(FILE_LOCATION, newTask.toText(), index);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"     * Delete a specific line.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"     * @param index This is the line number to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"    public void deleteTask(int index) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"        storage.overwriteLine(FILE_LOCATION, \"\", index);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"aliciamichellew"},"content":"     * Adds deadline task to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"aliciamichellew"},"content":"     * @param newDeadline This is the deadline task to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"aliciamichellew"},"content":"    public void addDeadline(Deadline newDeadline) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"aliciamichellew"},"content":"        storage.appendFile(FILE_LOCATION, newDeadline.toText());","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aliciamichellew"},"content":"     * Divides the String to become ArrayList of String on new line.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aliciamichellew"},"content":"     * @param tasks This is the String of tasks to be divided","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns an ArrayList of String.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aliciamichellew"},"content":"    public ArrayList\u003cString\u003e makeStringToList(String tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"aliciamichellew"},"content":"        String[] tasksSplit \u003d tasks.split(System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"aliciamichellew"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(tasksSplit));","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"aliciamichellew"},"content":"     * Gets the tasks from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns an ArrayList of Task String.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"aliciamichellew"},"content":"    public ArrayList\u003cString\u003e getTasksFromFile() throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"aliciamichellew"},"content":"        String fileContent \u003d storage.readFile(FILE_LOCATION);","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"aliciamichellew"},"content":"        return makeStringToList(fileContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"aliciamichellew":99}},{"path":"src/main/java/kevin/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":" * A class that is responsible for file input output.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"    public static final String FILE_FOLDER_NAME \u003d \"data\";","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     * Creates a new file to local computer if it does not exit.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileLocation This is the location of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    public void createFile(String fileLocation) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"            File fileFolder \u003d new File(FILE_FOLDER_NAME);","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"            if (!fileFolder.isDirectory()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"                fileFolder.mkdir();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"            File dataFile \u003d new File(fileLocation);","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"            if (!dataFile.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception err) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Fail to make new file: \" + err.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"     * Appends text to the local file.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileLocation This is the location of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"     * @param text This is the text that will be appended to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    public void appendFile(String fileLocation, String text) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"            FileWriter fileWriter \u003d new FileWriter(fileLocation, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"            fileWriter.write(text);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"        } catch (java.io.IOException err) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Fail to append text to file: \" + err.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"     * Overwrites a single line with text based on line number.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileLocation This is the location of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"     * @param text This is the text that will overwrite the old line.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"     * @param index The line number to be overwritten.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"    public void overwriteLine(String fileLocation, String text, int index) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"            Scanner sc \u003d new Scanner(new File(fileLocation));","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"            StringBuffer buffer \u003d new StringBuffer();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"            String toBeReplaced \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"            for (int i \u003d 0; i \u003c index; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"                toBeReplaced \u003d sc.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"aliciamichellew"},"content":"                buffer.append(toBeReplaced);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"aliciamichellew"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"aliciamichellew"},"content":"                buffer.append(sc.nextLine() + System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"aliciamichellew"},"content":"            String fileContents \u003d buffer.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"aliciamichellew"},"content":"            sc.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"aliciamichellew"},"content":"            fileContents \u003d fileContents.replaceAll(toBeReplaced, text);","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"aliciamichellew"},"content":"            FileWriter writer \u003d new FileWriter(fileLocation);","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"aliciamichellew"},"content":"            writer.append(fileContents);","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"aliciamichellew"},"content":"            writer.flush();","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"aliciamichellew"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"aliciamichellew"},"content":"     * Reads from the local file.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"aliciamichellew"},"content":"     * @param fileLocation This is the location of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a String of the file content.","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"aliciamichellew"},"content":"     * @throws KevinException On the detection of errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"aliciamichellew"},"content":"    public String readFile(String fileLocation) throws KevinException {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"aliciamichellew"},"content":"            String data \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"aliciamichellew"},"content":"            data \u003d new String(Files.readAllBytes(Paths.get(fileLocation)));","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"aliciamichellew"},"content":"            return data;","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception err) {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"aliciamichellew"},"content":"            throw new KevinException(\"Fail to read text to file: \" + err.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"aliciamichellew":101}},{"path":"src/main/java/kevin/tasklist/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":" * A class to represent the Deadline Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the Deadline is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     * @param deadline This is the deadline date for the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    public Deadline(Boolean isDone, String name, LocalDateTime deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"        super(isDone, name);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * Changes the date format to be shown.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * @param deadline This is the date that wants to be formatted.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string of the new date format.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    public String changeDeadlineFormat(LocalDateTime deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        return deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     * Returns a string representation of the Deadline Object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public String toText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        return \"Deadline - \" + isDone + \" - \" + name + \" - \" + deadline + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the Deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + changeDeadlineFormat(deadline) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":47}},{"path":"src/main/java/kevin/tasklist/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * A class to represent the Event Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    private final String startTime;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"    private final String endTime;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the Event is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     * @param startTime This is a string for the event start time.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"     * @param endTime This is a string for the event end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    public Event(Boolean isDone, String name, String startTime, String endTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"        super(isDone, name);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * Returns a string representation of the Event Object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    public String toText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        return \"Event - \" + isDone + \" - \" + name + \" -\" + startTime + \" -\" + endTime + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the Event object.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        return \"[E]\" + super.toString() + \" (from:\" + this.startTime + \" to:\" + this.endTime + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":38}},{"path":"src/main/java/kevin/tasklist/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * A class to represent the Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    protected final String name;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the Task is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    public Task(Boolean isDone, String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     * Sets isDone based on the boolean passed.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to store to isDone.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"     * Changes isDone to true.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    public void mark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"        this.setIsDone(true);","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"     * Changes isDone to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        this.setIsDone(false);","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"     * Returns string representation of the isDone status.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"    public String isDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"     * Returns a string representation of the Task Object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    public String toText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        return \"Task - \" + isDone + \" - \" + name + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"        return \"[\" + this.isDone() + \"] \" + this.name;","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":64}},{"path":"src/main/java/kevin/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":" * A class where Kevin stores the list of Task and the actions done to the tasks based on the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"public class TaskList {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"     * Adds ToDo task to the taskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the ToDo is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the ToDo.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the new ToDo Object.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    public ToDo addToDo(Boolean isDone, String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        ToDo newToDo \u003d new ToDo(isDone, name);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.add(newToDo);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"        return newToDo;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"     * Adds Event task to the taskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the Event is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"     * @param startTime This is the start time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"     * @param endTime This is the end time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the new Event Object.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"    public Event addEvent(Boolean isDone, String name, String startTime, String endTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"        Event newEvent \u003d new Event(isDone, name, startTime, endTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.add(newEvent);","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"        return newEvent;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"     * Adds Deadline task to the taskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the Deadline is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"     * @param deadline This is the deadline date of the Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the new Deadline Object.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    public Deadline addDeadline(Boolean isDone, String name, LocalDateTime deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        Deadline newDeadline \u003d new Deadline(isDone, name, deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.add(newDeadline);","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"        return newDeadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"     * Returns the string representation of all the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"    public String list() {","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"aliciamichellew"},"content":"        StringBuilder listOutput \u003d new StringBuilder();","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"aliciamichellew"},"content":"        listOutput.append(\"Here are the tasks in your list: \");","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"aliciamichellew"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"aliciamichellew"},"content":"            listOutput.append(\"\\n\\t\")","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"aliciamichellew"},"content":"                    .append((i + 1))","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"aliciamichellew"},"content":"                    .append(\".\")","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"aliciamichellew"},"content":"                    .append(this.taskList.get(i));","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"aliciamichellew"},"content":"        return listOutput.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"aliciamichellew"},"content":"     * Marks the task according the index given to be done.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"aliciamichellew"},"content":"     * @param toDoIndex This is the index of the task in the TaskList to be updated.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the updated Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"aliciamichellew"},"content":"    public Task mark(int toDoIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.get(toDoIndex - 1).mark();","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"aliciamichellew"},"content":"        return this.taskList.get(toDoIndex - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"aliciamichellew"},"content":"     * Marks the task according the index given to be not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"aliciamichellew"},"content":"     * @param toDoIndex This is the index of the task in the TaskList to be updated.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the updated Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"aliciamichellew"},"content":"    public Task unmark(int toDoIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.get(toDoIndex - 1).unmark();","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"aliciamichellew"},"content":"        return this.taskList.get(toDoIndex - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"aliciamichellew"},"content":"     * Delete the task according the index given to be done.","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"aliciamichellew"},"content":"     * @param deleteIndex This is the index of the task in the TaskList to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns the deleted Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"aliciamichellew"},"content":"    public Task delete(int deleteIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"aliciamichellew"},"content":"        Task deletedTask \u003d this.taskList.get(deleteIndex - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"aliciamichellew"},"content":"        this.taskList.remove(deleteIndex - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":103,"author":{"gitId":"aliciamichellew"},"content":"        return deletedTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"aliciamichellew"},"content":"     * Returns the current size of the taskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"aliciamichellew"},"content":"    public int size() {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"aliciamichellew"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"aliciamichellew"},"content":"     * Finds tasks based on the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"aliciamichellew"},"content":"     * @param keyword This is the keyword to be checked.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a list of task that contains the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"aliciamichellew"},"content":"    public String find(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"aliciamichellew"},"content":"        StringBuilder listOutput \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"aliciamichellew"},"content":"        Integer number \u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"aliciamichellew"},"content":"        listOutput.append(\"Here are the matching tasks in your list: \");","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"aliciamichellew"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"aliciamichellew"},"content":"            if (this.taskList.get(i).toString().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"aliciamichellew"},"content":"                listOutput.append(\"\\n\\t\")","lastModifiedDate":"2023-09-14"},{"lineNumber":126,"author":{"gitId":"aliciamichellew"},"content":"                        .append((number))","lastModifiedDate":"2023-09-14"},{"lineNumber":127,"author":{"gitId":"aliciamichellew"},"content":"                        .append(\".\")","lastModifiedDate":"2023-09-14"},{"lineNumber":128,"author":{"gitId":"aliciamichellew"},"content":"                        .append(this.taskList.get(i));","lastModifiedDate":"2023-09-14"},{"lineNumber":129,"author":{"gitId":"aliciamichellew"},"content":"                number +\u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"aliciamichellew"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"aliciamichellew"},"content":"        return listOutput.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the TaskList object.","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":141,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"aliciamichellew"},"content":"        return this.taskList.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":144}},{"path":"src/main/java/kevin/tasklist/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * A class to represent the ToDo Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"     * Constructor to initialize ToDo.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"     * @param isDone This is a boolean to mark whether the ToDo is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"     * @param name This is the name description of the ToDo.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    public ToDo(Boolean isDone, String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"        super(isDone, name);","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * Returns a string representation of the ToDo Object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    public String toText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"        return \"Todo - \" + isDone + \" - \" + name + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * @return Returns a string representation of the ToDo object.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"aliciamichellew":31}},{"path":"src/main/java/kevin/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(kevin.MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"    private void flip() {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"aliciamichellew"},"content":"    public static DialogBox getKevinDialog(String text, Image img) {","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"aliciamichellew"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"aliciamichellew"},"content":"        db.flip();","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"aliciamichellew"},"content":"        return db;","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":61}},{"path":"src/main/java/kevin/ui/Logger.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":" * A class responsible to output to the console.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"public class Logger {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"    public static final String BOT_NAME \u003d new StringBuilder()","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"            .append(\" _   __ _____ _   _ _____ _   _ \\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"| | / /|  ___| | | |_   _| \\\\ | |\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"| |/ / | |__ | | | | | | |  \\\\| |\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"|    \\\\ |  __|| | | | | | | . ` |\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"| |\\\\  \\\\| |___\\\\ \\\\_/ /_| |_| |\\\\  |\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"            .append(\"\\\\_| \\\\_/\\\\____/ \\\\___/ \\\\___/\\\\_| \\\\_/\\n\")","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"            .toString();","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"     * Prints the text wrapped in horizontal lines.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"     * @param str","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    public String log(String str) {","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"        return str;","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"     * Prints the hello message when the program first runs.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"    public static String hello() {","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m\" + BOT_NAME + \"\\n\" + \"What can I do for you?\";","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        return welcomeMessage;","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"     * Prints the bye message before the program ends.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"    public String bye() {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"        String goodbyeMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        this.log(goodbyeMessage);","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        return goodbyeMessage;","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aliciamichellew":40}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"kevin.MainWindow\"\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"aliciamichellew":19}},{"path":"src/test/java/kevin/parser/FileParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"public class FileParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    public void parseLine_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"invalidCommand\";","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"            FileParser fileParser \u003d new FileParser();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"            fileParser.parseLine(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    public void parseLine_invalidToDoInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"Todo - \";","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"            FileParser fileParser \u003d new FileParser();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"            fileParser.parseLine(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    public void parseLine_invalidDeadlineInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"Deadline - cs2103 - today\";","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"            FileParser fileParser \u003d new FileParser();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"            fileParser.parseLine(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    public void parseLine_invalidEventInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"Event - lecture - 2pm\";","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"            FileParser fileParser \u003d new FileParser();","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"            fileParser.parseLine(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"aliciamichellew":52}},{"path":"src/test/java/kevin/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"package kevin.parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"import kevin.exception.KevinException;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"aliciamichellew"},"content":"    public void prepareArguments_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"invalidCommand\";","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"aliciamichellew"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"aliciamichellew"},"content":"            parser.prepareArguments(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"aliciamichellew"},"content":"    public void prepareArguments_invalidToDoInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"todo \";","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"aliciamichellew"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"aliciamichellew"},"content":"            parser.prepareArguments(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"aliciamichellew"},"content":"    public void prepareArguments_invalidDeadlineInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"deadline cs2103 by today\";","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"aliciamichellew"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"aliciamichellew"},"content":"            parser.prepareArguments(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"aliciamichellew"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"aliciamichellew"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"aliciamichellew"},"content":"    public void prepareArguments_invalidEventInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"aliciamichellew"},"content":"        String input \u003d \"event lecture /from 2pm\";","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"aliciamichellew"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"aliciamichellew"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"aliciamichellew"},"content":"            parser.prepareArguments(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"aliciamichellew"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"aliciamichellew"},"content":"            assertTrue(ex instanceof KevinException);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"aliciamichellew"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"aliciamichellew"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"aliciamichellew"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"aliciamichellew":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aliciamichellew"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"aliciamichellew"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"aliciamichellew"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"aliciamichellew"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"aliciamichellew"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"aliciamichellew"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aliciamichellew"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"aliciamichellew"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"aliciamichellew"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"aliciamichellew"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aliciamichellew":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"aliciamichellew"},"content":"java -classpath ..\\bin kevin.Kevin \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"aliciamichellew":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"aliciamichellew"},"content":"java -classpath ../bin Kevin \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"aliciamichellew":1}}]
