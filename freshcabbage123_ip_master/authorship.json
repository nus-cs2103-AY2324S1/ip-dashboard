[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"checkstyle {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"    mainClass.set(\"Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"freshcabbage123":20}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"[E][ ] valid event (from: 30-08-2023 10:00 to: 31-08-2023 12:00)","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"[D][ ] valid deadline (by: 30-08-2023 12:00)","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] my assignment","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import duke.ui.Gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":" * The main class of the program.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"public class Duke {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    private static final String BOT_NAME \u003d \"Snake CYQJ\";","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    private final TaskList taskList \u003d new TaskList(\"duke.txt\");","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for Duke.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    public Duke() {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"        this.ui \u003d new Ui(BOT_NAME);","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"        Application.launch(Gui.class, args);","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the hello message.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"     * @return the hello message","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"    public String greet() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        return this.ui.getHelloMessage();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        return Parser.parseCommand(input, this.taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":45}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * duke.exception.DukeException class is a custom duke.exception class that extends Exception.","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for duke.exception.DukeException.","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * @param message The error message.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/duke/exception/IllegalTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * duke.exception.IllegalTaskIndexException class is a custom duke.exception class that extends DukeException.","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an invalid duke.task index.","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * @author Alan Lim","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class IllegalTaskIndexException extends DukeException {","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for duke.exception.IllegalTaskIndexException.","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public IllegalTaskIndexException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(\"☹ OOPS!!! The duke.task index is invalid.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * duke.exception.InvalidArgumentException class is a custom duke.exception class that extends DukeException.","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an invalid argument for a command.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for duke.exception.InvalidArgumentException.","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    public InvalidArgumentException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":14}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * duke.exception.UnknownCommandException class is a custom duke.exception class that extends DukeException.","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an unknown command.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * @author Alan Lim","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class UnknownCommandException extends DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    * Constructor for duke.exception.UnknownCommandException.","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.parser;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.UnknownCommandException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":" * Parser class to parse user\u0027s input.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"public class Parser {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"     * Select command to run.","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    public static String parseCommand(String input, TaskList taskList) {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"            String trimmedInput \u003d input.trim();","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.listTasks());","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"                String rest \u003d trimmedInput.substring(4).trim();","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"The \u0027mark\u0027 command must be followed by a task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.markAsDone(index));","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"                String rest \u003d trimmedInput.substring(6).trim();","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"The \u0027unmark\u0027 command must be followed by a task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.markAsUndone(index));","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"todo\") || input.startsWith(\"deadline\") || input.startsWith(\"event\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.addTask(input));","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"                String rest \u003d trimmedInput.substring(6).trim();","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"The \u0027delete\u0027 command must be followed by a task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.deleteTask(index));","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"                String rest \u003d trimmedInput.substring(4).trim();","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"The \u0027find\u0027 command must be followed by a keyword.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"                String keyword \u003d input.substring(5);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"                output.append(taskList.findTasks(keyword));","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"                throw new UnknownCommandException();","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"            output.append(e.getMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"freshcabbage123":65}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import java.util.List;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":" * Storage class to load and save data.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"public class Storage {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    private final Path filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"     * @param filename The name of the file to load and save data.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    public Storage(String filename) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"        this.filePath \u003d Paths.get(\".\", \"data\", filename);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"     * Loads the data from the file.","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"     * @return The tasks loaded from the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"        Path directoryPath \u003d filePath.getParent();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"        if (!Files.exists(directoryPath)) {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"            Files.createDirectories(directoryPath);","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        // Check if file exists, if not create it","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"        // Read file and load data","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"        List\u003cString\u003e data;","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"            data \u003d Files.readAllLines(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"            System.out.println(\"An error occurred while reading the file: \" + e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"        for (String line : data) {","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"            String[] parts \u003d line.split(\"\\\\]\", 3);","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"            if (parts.length \u003c 3) {","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"                System.out.println(\"Invalid duke.task format found in Hard Disk\");","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"                continue;","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"            char type \u003d parts[0].charAt(parts[0].length() - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"            char doneStatus \u003d parts[1].charAt(1);","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"            boolean isDone \u003d doneStatus \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"            String description \u003d parts[2].trim();","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"freshcabbage123"},"content":"            Task task;","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"freshcabbage123"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"freshcabbage123"},"content":"            switch (type) {","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"freshcabbage123"},"content":"            case \u0027T\u0027:","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"freshcabbage123"},"content":"                task \u003d new ToDo(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"freshcabbage123"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"freshcabbage123"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"freshcabbage123"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"freshcabbage123"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"freshcabbage123"},"content":"            case \u0027D\u0027:","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"freshcabbage123"},"content":"                String[] components \u003d description.split(\" \\\\(by: \");","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"freshcabbage123"},"content":"                String deadlineDescription \u003d components[0].trim();","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"freshcabbage123"},"content":"                String deadlineDateTime \u003d components[1].substring(0, components[1].length() - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"freshcabbage123"},"content":"                task \u003d new Deadline(deadlineDescription, LocalDateTime.parse(deadlineDateTime, format));","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"freshcabbage123"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"freshcabbage123"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"freshcabbage123"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"freshcabbage123"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"freshcabbage123"},"content":"            case \u0027E\u0027:","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"freshcabbage123"},"content":"                String[] eventParts \u003d description.split(\" \\\\(from: \");","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"freshcabbage123"},"content":"                String eventDescription \u003d eventParts[0].trim();","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"freshcabbage123"},"content":"                String[] eventDateTimes \u003d eventParts[1].split(\" to: \");","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"freshcabbage123"},"content":"                String eventStartDateTime \u003d eventDateTimes[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"freshcabbage123"},"content":"                String eventEndDateTime \u003d eventDateTimes[1].substring(0, eventDateTimes[1].length() - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"freshcabbage123"},"content":"                task \u003d new Event(eventDescription,","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"freshcabbage123"},"content":"                        LocalDateTime.parse(eventStartDateTime, format),","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"freshcabbage123"},"content":"                        LocalDateTime.parse(eventEndDateTime, format));","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"freshcabbage123"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"freshcabbage123"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"freshcabbage123"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"freshcabbage123"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"freshcabbage123"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"freshcabbage123"},"content":"                System.out.println(\"Invalid duke.task type found in Hard Disk\");","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"freshcabbage123"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"freshcabbage123"},"content":"        return tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"freshcabbage123"},"content":"     * Saves the data to the file.","lastModifiedDate":"2023-08-28"},{"lineNumber":110,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks The tasks to save.","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"freshcabbage123"},"content":"    public void save(List\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"freshcabbage123"},"content":"        Path directoryPath \u003d filePath.getParent();","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"freshcabbage123"},"content":"        if (!Files.exists(directoryPath)) {","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"freshcabbage123"},"content":"            Files.createDirectories(directoryPath);","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"freshcabbage123"},"content":"        // Check if file exists, if not create it","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"freshcabbage123"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"freshcabbage123"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"freshcabbage123"},"content":"        // Write data to file","lastModifiedDate":"2023-08-28"},{"lineNumber":123,"author":{"gitId":"freshcabbage123"},"content":"        List\u003cString\u003e data \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"freshcabbage123"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"freshcabbage123"},"content":"            data.add(task.toString());","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":127,"author":{"gitId":"freshcabbage123"},"content":"        Files.write(filePath, data);","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":129,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"freshcabbage123"},"content":"     * Deletes the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"freshcabbage123"},"content":"    public void delete() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"freshcabbage123"},"content":"        Files.delete(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"freshcabbage123":137}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * Represents a deadline.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * The date of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"     * Creates a deadline with the given description and date.","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"     * @param dateTime The date and time of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    public Deadline(String description, LocalDateTime dateTime) {","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"        String newDateTime \u003d dateTime.format(super.formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + newDateTime + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * Represents an event.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * The date of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"     * Creates an event with the given description and date.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"     * @param startDateTime The startDateTime of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"     * @param endDateTime The endDateTime of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"        String newStartDateTime \u003d startDateTime.format(super.formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        String newEndDateTime \u003d endDateTime.format(super.formatter);","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + newStartDateTime + \" to: \" + newEndDateTime + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":38}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * Represents a task in the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     * The description of the duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"     * Whether the duke.task is done.","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the status icon of the duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"     * @return The status icon of the duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"     * Marks the duke.task as done.","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"     * Marks the duke.task as undone.","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the description of the duke.task.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"     * @return The description of the duke.task.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"        return description;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the description of the duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"     * @return The description of the duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":61}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import java.util.List;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.IllegalTaskIndexException;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":" * Represents a list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"public class TaskList {","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"     * Represents the type of task.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    public enum TaskType {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"        TODO {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"            @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"            public Task createTask(String details) {","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"                return new ToDo(details);","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"        },","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"        DEADLINE {","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"            @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"            public Task createTask(String details) throws InvalidArgumentException {","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"                String[] split \u003d details.split(\" /by \");","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"                if (split.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"☹ OOPS!!! The deadline format is incorrect. \"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"                            + \"It should be: deadline \u003cname\u003e /by \u003cdate\u003e \u003ctime\u003e\");","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"                String taskName \u003d split[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"                String dateTime \u003d split[1];","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"                return new Deadline(taskName, parseDateTime(dateTime));","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"        },","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"        EVENT {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"            @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"            public Task createTask(String details) throws InvalidArgumentException {","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"                String[] firstSplit \u003d details.split(\" /from \");","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"                String[] secondSplit \u003d firstSplit[firstSplit.length - 1].split(\" /to \");","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"                if (firstSplit.length !\u003d 2 || secondSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"☹ OOPS!!! The event format is incorrect. \"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"                            + \"It should be: event \u003cname\u003e /from \u003cdate\u003e \u003ctime\u003e /to \u003cdate\u003e \u003ctime\u003e\");","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"                String taskName \u003d firstSplit[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"                String startDateTime \u003d secondSplit[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"                String endDateTime \u003d secondSplit[1];","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"                return new Event(taskName, parseDateTime(startDateTime), parseDateTime(endDateTime));","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"        };","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"        private static final DateTimeFormatter[] DATE_TIME_FORMATS \u003d {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"                DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"                DateTimeFormatter.ofPattern(\"dd-MMM-yyyy HH:mm\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"        };","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"freshcabbage123"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"freshcabbage123"},"content":"         * Creates a deadline duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"freshcabbage123"},"content":"         * @param details The details of the deadline duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"freshcabbage123"},"content":"         * @return The deadline duke.task.","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"freshcabbage123"},"content":"         * @throws InvalidArgumentException If the deadline task\u0027s format is invalid.","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"freshcabbage123"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"freshcabbage123"},"content":"        public abstract Task createTask(String details) throws InvalidArgumentException;","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"freshcabbage123"},"content":"        private static LocalDateTime parseDateTime(String dateTime) throws InvalidArgumentException {","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"freshcabbage123"},"content":"            for (DateTimeFormatter format: DATE_TIME_FORMATS) {","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"freshcabbage123"},"content":"                try {","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"freshcabbage123"},"content":"                    return LocalDateTime.parse(dateTime, format);","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"freshcabbage123"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"freshcabbage123"},"content":"                    // Do nothing","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"freshcabbage123"},"content":"            throw new InvalidArgumentException(\"☹ OOPS!!! Your dateTime format is not supported!\");","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"freshcabbage123"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"freshcabbage123"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"freshcabbage123"},"content":"    public TaskList(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"freshcabbage123"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"freshcabbage123"},"content":"            this.tasks \u003d storage.load();","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"freshcabbage123"},"content":"            Ui.getErrorLoadingFromFileMessage();","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"freshcabbage123"},"content":"            this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":100,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":103,"author":{"gitId":"freshcabbage123"},"content":"     * Adds a task to the list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":104,"author":{"gitId":"freshcabbage123"},"content":"     * @param command The command that the user inputted.","lastModifiedDate":"2023-08-24"},{"lineNumber":105,"author":{"gitId":"freshcabbage123"},"content":"     * @return The add task message.","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"freshcabbage123"},"content":"     * @throws InvalidArgumentException If the task\u0027s format is invalid.","lastModifiedDate":"2023-08-24"},{"lineNumber":107,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":108,"author":{"gitId":"freshcabbage123"},"content":"    public String addTask(String command) throws InvalidArgumentException {","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":110,"author":{"gitId":"freshcabbage123"},"content":"        String[] splitCommand \u003d command.split(\"\\\\s\", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"freshcabbage123"},"content":"        if (splitCommand.length \u003c 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"freshcabbage123"},"content":"            throw new InvalidArgumentException(\"☹ OOPS!!! The description cannot be empty.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":114,"author":{"gitId":"freshcabbage123"},"content":"        String type \u003d splitCommand[0];","lastModifiedDate":"2023-08-24"},{"lineNumber":115,"author":{"gitId":"freshcabbage123"},"content":"        String taskDetails \u003d splitCommand[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":116,"author":{"gitId":"freshcabbage123"},"content":"        TaskType taskType;","lastModifiedDate":"2023-08-24"},{"lineNumber":117,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":118,"author":{"gitId":"freshcabbage123"},"content":"            taskType \u003d TaskType.valueOf(type.toUpperCase());","lastModifiedDate":"2023-08-24"},{"lineNumber":119,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":120,"author":{"gitId":"freshcabbage123"},"content":"            throw new InvalidArgumentException(\"Bro your task type is unknown: \" + type);","lastModifiedDate":"2023-08-24"},{"lineNumber":121,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":122,"author":{"gitId":"freshcabbage123"},"content":"        tasks.add(taskType.createTask(taskDetails));","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"freshcabbage123"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getErrorSavingToFileMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":128,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getAddTaskMessage(tasks));","lastModifiedDate":"2023-09-06"},{"lineNumber":129,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":130,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":131,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":132,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":133,"author":{"gitId":"freshcabbage123"},"content":"     * Lists all the tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":134,"author":{"gitId":"freshcabbage123"},"content":"     * @return The list tasks message.","lastModifiedDate":"2023-09-06"},{"lineNumber":135,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":136,"author":{"gitId":"freshcabbage123"},"content":"    public String listTasks() {","lastModifiedDate":"2023-09-06"},{"lineNumber":137,"author":{"gitId":"freshcabbage123"},"content":"        return Ui.getListTasksMessage(tasks);","lastModifiedDate":"2023-09-06"},{"lineNumber":138,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":139,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":140,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":141,"author":{"gitId":"freshcabbage123"},"content":"     * Marks a duke.task as done.","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-24"},{"lineNumber":143,"author":{"gitId":"freshcabbage123"},"content":"     * @return The mark as done message.","lastModifiedDate":"2023-09-06"},{"lineNumber":144,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-24"},{"lineNumber":145,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":146,"author":{"gitId":"freshcabbage123"},"content":"    public String markAsDone(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-09-06"},{"lineNumber":147,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":148,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":149,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":150,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":151,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getMarkAsDoneMessage(tasks, index));","lastModifiedDate":"2023-09-06"},{"lineNumber":152,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":153,"author":{"gitId":"freshcabbage123"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":154,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":155,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getErrorSavingToFileMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":156,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":157,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":158,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":159,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":160,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":161,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":162,"author":{"gitId":"freshcabbage123"},"content":"     * Marks a duke.task as undone.","lastModifiedDate":"2023-08-28"},{"lineNumber":163,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-08-24"},{"lineNumber":164,"author":{"gitId":"freshcabbage123"},"content":"     * @return The mark as undone message.","lastModifiedDate":"2023-09-06"},{"lineNumber":165,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-24"},{"lineNumber":166,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":167,"author":{"gitId":"freshcabbage123"},"content":"    public String markAsUndone(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-09-06"},{"lineNumber":168,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":169,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":170,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":171,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":172,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getMarkAsUndoneMessage(tasks, index));","lastModifiedDate":"2023-09-06"},{"lineNumber":173,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":174,"author":{"gitId":"freshcabbage123"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":175,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":176,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getErrorSavingToFileMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":177,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":178,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":179,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":180,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":181,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":182,"author":{"gitId":"freshcabbage123"},"content":"     * Delete a task from the list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":183,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-24"},{"lineNumber":184,"author":{"gitId":"freshcabbage123"},"content":"     * @return The delete message.","lastModifiedDate":"2023-09-06"},{"lineNumber":185,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-24"},{"lineNumber":186,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":187,"author":{"gitId":"freshcabbage123"},"content":"    public String deleteTask(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-09-06"},{"lineNumber":188,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":189,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":190,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":191,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":192,"author":{"gitId":"freshcabbage123"},"content":"        // Calls delete message from duke.ui.Ui class","lastModifiedDate":"2023-08-28"},{"lineNumber":193,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getDeleteTaskMessage(tasks, index));","lastModifiedDate":"2023-09-06"},{"lineNumber":194,"author":{"gitId":"freshcabbage123"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2023-09-06"},{"lineNumber":195,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":196,"author":{"gitId":"freshcabbage123"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":197,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":198,"author":{"gitId":"freshcabbage123"},"content":"            output.append(Ui.getErrorSavingToFileMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":199,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":200,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":201,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":202,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":203,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"freshcabbage123"},"content":"     * Delete all tasks from the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"freshcabbage123"},"content":"    public void deleteAllTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"freshcabbage123"},"content":"        tasks.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"freshcabbage123"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"freshcabbage123"},"content":"            Ui.getErrorSavingToFileMessage();","lastModifiedDate":"2023-09-06"},{"lineNumber":212,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":216,"author":{"gitId":"freshcabbage123"},"content":"     * Find tasks with the given keyword.","lastModifiedDate":"2023-08-30"},{"lineNumber":217,"author":{"gitId":"freshcabbage123"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2023-08-30"},{"lineNumber":218,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":219,"author":{"gitId":"freshcabbage123"},"content":"    public String findTasks(String keyword) {","lastModifiedDate":"2023-09-06"},{"lineNumber":220,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":221,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":222,"author":{"gitId":"freshcabbage123"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"freshcabbage123"},"content":"            output.append(\"There are no tasks in your list.\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":224,"author":{"gitId":"freshcabbage123"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"freshcabbage123"},"content":"            output.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":226,"author":{"gitId":"freshcabbage123"},"content":"            int matchingTasks \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"freshcabbage123"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"freshcabbage123"},"content":"                if (tasks.get(i).getDescription().contains(keyword)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"freshcabbage123"},"content":"                    output.append((matchingTasks + 1) + \".\" + tasks.get(i) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":230,"author":{"gitId":"freshcabbage123"},"content":"                    matchingTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":231,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":233,"author":{"gitId":"freshcabbage123"},"content":"            if (matchingTasks \u003d\u003d 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":234,"author":{"gitId":"freshcabbage123"},"content":"                output.append(\"Sorry there are no matching tasks!\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":235,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":236,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"freshcabbage123"},"content":"        output.append(Ui.getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":238,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":239,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"freshcabbage123":240}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * Represents a todo.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    * Creates a todo with the given description.","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    * @param description The description of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    * Returns the string representation of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    * @return The string representation of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":23}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"        dialog.setWrapText(true);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"        dialog.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"        dialog.setPrefSize(250, 180);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"    private void flip() {","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"        db.flip();","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"        return db;","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":64}},{"path":"src/main/java/duke/ui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"public class Gui extends Application {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"            stage.show();","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":32}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":" * Controller for duke.ui.MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"     * Initializes the main window.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"        String defaultGreeting \u003d duke.greet();","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"                DialogBox.getDukeDialog(defaultGreeting, dukeImage)","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":59}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import java.util.List;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":" * Represents the user interface of the program.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"public class Ui {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    private final String name;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    public Ui(String name) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the welcome message when the program starts.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    public String getHelloMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Hello! I\u0027m \" + this.name + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"What can I do for you?\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"     * Prints dotted line with new line.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"    public static String getDottedLine() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"        return \"________________________\\n\";","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the goodbye message.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"     * @return the goodbye message","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"    public static String getGoodbyeMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the delete message.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"     * @return the delete message","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"    public static String getDeleteTaskMessage(List\u003cTask\u003e tasks, int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Noted. I\u0027ve removed this duke.task:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"        output.append(tasks.get(index - 1) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"        String placeholder \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Now you have \" + tasks.size() + \" \" + placeholder + \" in the list.\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the add task message.","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"freshcabbage123"},"content":"     * @return the add task message","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"freshcabbage123"},"content":"    public static String getAddTaskMessage(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Got it. I\u0027ve added this duke.task:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"freshcabbage123"},"content":"        output.append(tasks.get(tasks.size() - 1) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"freshcabbage123"},"content":"        String placeholder \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Now you have \" + tasks.size() + \" \" + placeholder + \" in the list.\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the list tasks message.","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"freshcabbage123"},"content":"     * @return the list tasks message","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"freshcabbage123"},"content":"    public static String getListTasksMessage(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"freshcabbage123"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"freshcabbage123"},"content":"            output.append(\"There are no tasks in your list.\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"freshcabbage123"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"freshcabbage123"},"content":"            output.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"freshcabbage123"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"freshcabbage123"},"content":"                output.append((i + 1) + \".\" + tasks.get(i) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the done task message.","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"freshcabbage123"},"content":"     * @param index the index of the completed task","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"freshcabbage123"},"content":"     * @return the done task message","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"freshcabbage123"},"content":"    public static String getMarkAsDoneMessage(List\u003cTask\u003e tasks, int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":110,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"Nice! I\u0027ve marked this task as done:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":111,"author":{"gitId":"freshcabbage123"},"content":"        tasks.get(index - 1).markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"freshcabbage123"},"content":"        output.append(tasks.get(index - 1) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"freshcabbage123"},"content":"     * Prints the undone task message.","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"freshcabbage123"},"content":"     * @param tasks the list of tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"freshcabbage123"},"content":"     * @param index the index of the uncompleted task","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"freshcabbage123"},"content":"     * @return the undone task message","lastModifiedDate":"2023-09-06"},{"lineNumber":122,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"freshcabbage123"},"content":"    public static String getMarkAsUndoneMessage(List\u003cTask\u003e tasks, int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":124,"author":{"gitId":"freshcabbage123"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":126,"author":{"gitId":"freshcabbage123"},"content":"        output.append(\"OK, I\u0027ve marked this task as not done yet:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"freshcabbage123"},"content":"        tasks.get(index - 1).markAsUndone();","lastModifiedDate":"2023-08-28"},{"lineNumber":128,"author":{"gitId":"freshcabbage123"},"content":"        output.append(tasks.get(index - 1) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":129,"author":{"gitId":"freshcabbage123"},"content":"        output.append(getDottedLine());","lastModifiedDate":"2023-09-06"},{"lineNumber":130,"author":{"gitId":"freshcabbage123"},"content":"        return output.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":132,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"freshcabbage123"},"content":"     * Shows the error message when saving file.","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"freshcabbage123"},"content":"     * @return the error message when saving file","lastModifiedDate":"2023-09-06"},{"lineNumber":136,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"freshcabbage123"},"content":"    public static String getErrorSavingToFileMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":138,"author":{"gitId":"freshcabbage123"},"content":"        return \"Error saving data to file.\";","lastModifiedDate":"2023-09-06"},{"lineNumber":139,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"freshcabbage123"},"content":"     * Shows the error message when loading file.","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"freshcabbage123"},"content":"     * @return the error message when loading file","lastModifiedDate":"2023-09-06"},{"lineNumber":144,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"freshcabbage123"},"content":"    public static String getErrorLoadingFromFileMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":146,"author":{"gitId":"freshcabbage123"},"content":"        return \"Error loading data from file.\";","lastModifiedDate":"2023-09-06"},{"lineNumber":147,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":149,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"freshcabbage123":150}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"freshcabbage123":19}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    public void testToString_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2023, 8, 30, 15, 0); // Example date and time","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"        Deadline deadline \u003d new Deadline(\"Sample Deadline\", sampleDateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"        String expectedToString \u003d \"[D][ ] Sample Deadline (by: 30-08-2023 15:00)\";","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(expectedToString, deadline.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"    public void testToString_shouldDisplayCorrectMessage2() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2023, 9, 30, 15, 0); // Example date and time","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"        Deadline deadline \u003d new Deadline(\"Sample Deadline\", sampleDateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"        String expectedToString \u003d \"[D][ ] Sample Deadline (by: 30-09-2023 15:00)\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(expectedToString, deadline.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    public void testMarkAsDone_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2023, 9, 30, 15, 0); // Example date and time","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"        Deadline deadline \u003d new Deadline(\"Sample Deadline\", sampleDateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"        assertFalse(deadline.isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"        deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        assertTrue(deadline.isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"    public void testMarkAsUndone_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2023, 9, 30, 15, 0); // Example date and time","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"        Deadline deadline \u003d new Deadline(\"Sample Deadline\", sampleDateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        assertTrue(deadline.isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"        deadline.markAsUndone();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"        assertFalse(deadline.isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"    public void testGetStatusIcon() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"        LocalDateTime sampleDateTime \u003d LocalDateTime.of(2023, 9, 30, 15, 0); // Example date and time","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"        Deadline deadline \u003d new Deadline(\"Sample Deadline\", sampleDateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(\" \", deadline.getStatusIcon());","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"        deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(\"X\", deadline.getStatusIcon());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"freshcabbage123":55}},{"path":"src/test/java/duke/task/TasklistTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.IllegalTaskIndexException;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"public class TasklistTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    @BeforeEach","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    public void testAddTask_validTodo_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"        TaskList taskList \u003d new TaskList(\"sample.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"                taskList.addTask(\"todo This is a valid task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"        String expectedOutput \u003d \"____________________________________________________________\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"                + \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"                + \"[T][ ] This is a valid task\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"                + \"Now you have 1 task in the list.\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"                + \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(expectedOutput, outContent.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"        taskList.deleteAllTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"    public void testAddTask_validEvent_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        TaskList taskList \u003d new TaskList(\"sample.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"        assertDoesNotThrow(() -\u003e","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"                taskList.addTask(\"event valid event /from 2023-08-30 10:00 /to 2023-08-31 12:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"        String expectedOutput \u003d \"____________________________________________________________\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"                + \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"                + \"[E][ ] valid event (from: 30-08-2023 10:00 to: 31-08-2023 12:00)\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"                + \"Now you have 1 task in the list.\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"                + \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(expectedOutput, outContent.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"        taskList.deleteAllTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"    public void testAddTask_validDeadline_shouldDisplayCorrectMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"        TaskList taskList \u003d new TaskList(\"sample.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"        assertDoesNotThrow(() -\u003e taskList.addTask(\"deadline valid deadline /by 2023-08-30 12:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"        String expectedOutput \u003d \"____________________________________________________________\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"                + \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"                + \"[D][ ] valid deadline (by: 30-08-2023 12:00)\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"                + \"Now you have 1 task in the list.\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"                + \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"        assertEquals(expectedOutput, outContent.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"        taskList.deleteAllTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"freshcabbage123"},"content":"    public void testMarkAsDone_invalidIndex_shouldThrowException() {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"freshcabbage123"},"content":"        TaskList taskList \u003d new TaskList(\"sample.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"freshcabbage123"},"content":"        assertThrows(IllegalTaskIndexException.class, () -\u003e taskList.markAsDone(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"freshcabbage123"},"content":"        taskList.deleteAllTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"freshcabbage123"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"freshcabbage123"},"content":"    public void testAddTask_invalidTaskType_shouldThrowException() {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"freshcabbage123"},"content":"        TaskList taskList \u003d new TaskList(\"sample.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"freshcabbage123"},"content":"        assertThrows(InvalidArgumentException.class, () -\u003e taskList.addTask(\"invalidTaskType some details\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"freshcabbage123"},"content":"        taskList.deleteAllTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"freshcabbage123":84}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"[E][ ] 2101 team meeting (from: 05-09-2023 18:00 to: 08-09-2023 10:00)","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Go grocery shopping","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"[D][X] Finish project (by: 17-09-2023 23:59)","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"[D][ ] homework (by: 28-02-2023 18:00)","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"[D][X] homework (by: 19-02-2024 18:29)","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] read boook","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"[T][X] Read book","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Go grocery shopping","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"[D][ ] Finish project (by: 17-09-2023 23:59)","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Walk the dog","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Read book","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Go grocery shopping","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"[D][ ] Finish project (by: 17-09-2023 23:59)","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Walk the dog","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Read book","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Go grocery shopping","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"[D][ ] Finish project (by: 17-09-2023 23:59)","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"[T][ ] Walk the dog","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"freshcabbage123":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"todo Read book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"deadline submit 2103T lab /by 30-08-2023 2356","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"event 2101 team meeting /from 05-09-2023 /to Tuesday 10pm","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"todo Go grocery shopping","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"event Running /from 2023-Sep-10 /to 15:00 tomorrow","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"deadline Finish project /by 17-09-2023 23:59","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"todo Walk the dog","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"mark 5","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"unmark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"event watch netflix again /from 19-4-2023 /to Tuesday 19:00","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"deadline modreg round 9 /by Wedenesday 2023-09-25","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"mark 7","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"mark 3","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"unmark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"event Dinner with the family /from 17-09-2024 /to 20:00 tomorrow","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":27}}]
