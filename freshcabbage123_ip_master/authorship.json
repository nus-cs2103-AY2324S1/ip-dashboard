[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"import exception.DukeException;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"import exception.IllegalTaskIndexException;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"import exception.InvalidArgumentException;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"import exception.UnknownCommandException;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"import task.Deadline;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"import task.Event;","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"import task.Task;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"import task.ToDo;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"import java.util.List;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":" * The main class of the program.","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"     * Name of the bot.","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    private final String NAME \u003d \"Cabbage\";","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"     * Dynamic array of tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    private final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"     * Entry-point for the program. Displays a greeting, echos the user\u0027s input, and exits.","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"     * @param args CLI arguments passed into the program.","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        duke.greet();","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"            duke.selectCommand(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"            input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        duke.exit();","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"     * Greets the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"    public void greet() {","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Hello! I\u0027m \" + NAME);","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"     * Echoes the user\u0027s input.","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"freshcabbage123"},"content":"    public void echo(String input) {","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"freshcabbage123"},"content":"     * Select command to run.","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"freshcabbage123"},"content":"     * @param input The user\u0027s input.","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"freshcabbage123"},"content":"    public void selectCommand(String input) {","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"freshcabbage123"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"freshcabbage123"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"freshcabbage123"},"content":"                this.listTasks();","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"freshcabbage123"},"content":"                this.markAsDone(index);","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"freshcabbage123"},"content":"                this.markAsUndone(index);","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"todo\") || input.startsWith(\"deadline\") || input.startsWith(\"event\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"freshcabbage123"},"content":"                String[] description \u003d input.split(\" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"freshcabbage123"},"content":"                if (description.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":81,"author":{"gitId":"freshcabbage123"},"content":"                    throw new InvalidArgumentException(\"☹ OOPS!!! The description cannot be empty.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":82,"author":{"gitId":"freshcabbage123"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":83,"author":{"gitId":"freshcabbage123"},"content":"                this.addTask(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":84,"author":{"gitId":"freshcabbage123"},"content":"            } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":85,"author":{"gitId":"freshcabbage123"},"content":"                int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2023-08-21"},{"lineNumber":86,"author":{"gitId":"freshcabbage123"},"content":"                this.deleteTask(index);","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"freshcabbage123"},"content":"            else {","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"freshcabbage123"},"content":"                throw new UnknownCommandException();","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"freshcabbage123"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"freshcabbage123"},"content":"            System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"freshcabbage123"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"freshcabbage123"},"content":"            System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":98,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":99,"author":{"gitId":"freshcabbage123"},"content":"     * Adds a task to the list of tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":100,"author":{"gitId":"freshcabbage123"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"freshcabbage123"},"content":"     * @throws InvalidArgumentException If the task\u0027s format is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":102,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":103,"author":{"gitId":"freshcabbage123"},"content":"    public void addTask(String task) throws InvalidArgumentException {","lastModifiedDate":"2023-08-21"},{"lineNumber":104,"author":{"gitId":"freshcabbage123"},"content":"        if (task.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"freshcabbage123"},"content":"            // Check if task description contains only spaces","lastModifiedDate":"2023-08-21"},{"lineNumber":106,"author":{"gitId":"freshcabbage123"},"content":"            tasks.add(new ToDo(task.substring(5)));","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"freshcabbage123"},"content":"        else if (task.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"freshcabbage123"},"content":"            String[] split \u003d task.substring(9).split(\"/by\");","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"freshcabbage123"},"content":"            if (!task.matches(\"deadline\\\\s.+\\\\s+/by\\\\s+.+\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":111,"author":{"gitId":"freshcabbage123"},"content":"                throw new InvalidArgumentException(\"☹ OOPS!!! task.Deadline format is incorrect. \" +","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"freshcabbage123"},"content":"                        \"It should be: deadline \u003cname\u003e /by \u003cdateTime\u003e\");","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"freshcabbage123"},"content":"            if (split.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"freshcabbage123"},"content":"                throw new InvalidArgumentException(\"Please specify in this format: \" +","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"freshcabbage123"},"content":"                        \"deadline \u003cdescription\u003e /by \u003cdate \u0026 time\u003e\");","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":118,"author":{"gitId":"freshcabbage123"},"content":"            tasks.add(new Deadline(split[0], split[1]));","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":120,"author":{"gitId":"freshcabbage123"},"content":"        else if (task.startsWith(\"event\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":121,"author":{"gitId":"freshcabbage123"},"content":"            if (!task.matches(\"event\\\\s.+\\\\s+/from\\\\s.+\\\\s+/to\\\\s.+\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":122,"author":{"gitId":"freshcabbage123"},"content":"                throw new InvalidArgumentException(\"☹ OOPS!!! The event format is incorrect. \" +","lastModifiedDate":"2023-08-21"},{"lineNumber":123,"author":{"gitId":"freshcabbage123"},"content":"                        \"It should be: event \u003cname\u003e /from \u003cdateTime\u003e /to \u003cdateTime\u003e\");","lastModifiedDate":"2023-08-21"},{"lineNumber":124,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":125,"author":{"gitId":"freshcabbage123"},"content":"            String[] split \u003d task.substring(6).split(\"/\");","lastModifiedDate":"2023-08-21"},{"lineNumber":126,"author":{"gitId":"freshcabbage123"},"content":"            tasks.add(new Event(split[0], split[1].substring(5), split[2].substring(3)));","lastModifiedDate":"2023-08-21"},{"lineNumber":127,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":128,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":129,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":130,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":131,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(tasks.get(tasks.size() - 1));","lastModifiedDate":"2023-08-21"},{"lineNumber":132,"author":{"gitId":"freshcabbage123"},"content":"        String placeholder \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-08-21"},{"lineNumber":133,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" \" + placeholder + \" in the list.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":134,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":135,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":136,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":137,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":138,"author":{"gitId":"freshcabbage123"},"content":"     * Lists all the tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":139,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":140,"author":{"gitId":"freshcabbage123"},"content":"    public void listTasks() {","lastModifiedDate":"2023-08-21"},{"lineNumber":141,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":142,"author":{"gitId":"freshcabbage123"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":143,"author":{"gitId":"freshcabbage123"},"content":"            System.out.println(\"There are no tasks in your list.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":144,"author":{"gitId":"freshcabbage123"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":145,"author":{"gitId":"freshcabbage123"},"content":"            for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":146,"author":{"gitId":"freshcabbage123"},"content":"                System.out.println((i + 1) + \".\" + this.tasks.get(i));","lastModifiedDate":"2023-08-21"},{"lineNumber":147,"author":{"gitId":"freshcabbage123"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":148,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":149,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":150,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":151,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":152,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":153,"author":{"gitId":"freshcabbage123"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":154,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":156,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":157,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsDone(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-08-21"},{"lineNumber":158,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-21"},{"lineNumber":160,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":161,"author":{"gitId":"freshcabbage123"},"content":"        this.tasks.get(index - 1).markAsDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":162,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":163,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":164,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"freshcabbage123"},"content":"     * Marks a task as undone.","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-08-21"},{"lineNumber":167,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":168,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":169,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsUndone(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-08-21"},{"lineNumber":170,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":171,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-21"},{"lineNumber":172,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":173,"author":{"gitId":"freshcabbage123"},"content":"        this.tasks.get(index - 1).markAsUndone();","lastModifiedDate":"2023-08-21"},{"lineNumber":174,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":175,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":176,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":177,"author":{"gitId":"freshcabbage123"},"content":"     * Delete a task from the list of tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":178,"author":{"gitId":"freshcabbage123"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-21"},{"lineNumber":179,"author":{"gitId":"freshcabbage123"},"content":"     * @throws IllegalTaskIndexException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":180,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":181,"author":{"gitId":"freshcabbage123"},"content":"    public void deleteTask(int index) throws IllegalTaskIndexException {","lastModifiedDate":"2023-08-21"},{"lineNumber":182,"author":{"gitId":"freshcabbage123"},"content":"        if (index \u003e tasks.size() || index \u003c 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":183,"author":{"gitId":"freshcabbage123"},"content":"            throw new IllegalTaskIndexException();","lastModifiedDate":"2023-08-21"},{"lineNumber":184,"author":{"gitId":"freshcabbage123"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":185,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":186,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":187,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(tasks.get(index - 1));","lastModifiedDate":"2023-08-21"},{"lineNumber":188,"author":{"gitId":"freshcabbage123"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2023-08-21"},{"lineNumber":189,"author":{"gitId":"freshcabbage123"},"content":"        String placeholder \u003d tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2023-08-21"},{"lineNumber":190,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" \" + placeholder + \" in the list.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":191,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":192,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":193,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":194,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":195,"author":{"gitId":"freshcabbage123"},"content":"     * Exits the program.","lastModifiedDate":"2023-08-21"},{"lineNumber":196,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":197,"author":{"gitId":"freshcabbage123"},"content":"    public void exit() {","lastModifiedDate":"2023-08-21"},{"lineNumber":198,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":199,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-21"},{"lineNumber":200,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"freshcabbage123":197,"-":5}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package exception;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * exception.DukeException class is a custom exception class that extends Exception.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for exception.DukeException.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * @param message The error message.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/exception/IllegalTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package exception;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * exception.IllegalTaskIndexException class is a custom exception class that extends DukeException.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an invalid task index.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * @author Alan Lim","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class IllegalTaskIndexException extends DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for exception.IllegalTaskIndexException.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public IllegalTaskIndexException() {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(\"☹ OOPS!!! The task index is invalid.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package exception;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * exception.InvalidArgumentException class is a custom exception class that extends DukeException.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an invalid argument for a command.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"public class InvalidArgumentException extends DukeException{","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"     * Constructor for exception.InvalidArgumentException.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    public InvalidArgumentException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":14}},{"path":"src/main/java/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package exception;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * exception.UnknownCommandException class is a custom exception class that extends DukeException.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" * It is thrown when the user inputs an unknown command.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":" * @author Alan Lim","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"public class UnknownCommandException extends DukeException{","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    * Constructor for exception.UnknownCommandException.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":15}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"import task.Task;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"     * The date of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    private final String dateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     * Creates a deadline with the given description and date.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"     * @param dateTime The date and time of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    public Deadline (String description, String dateTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"        return \"[D]\" + super.toString() + \"(by:\" + dateTime + \")\";","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":28}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"     * The date of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"    private final String startDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    private final String endDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"     * Creates an event with the given description and date.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"     * @param startDateTime The startDateTime of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"     * @param endDateTime The endDateTime of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    public Event (String description, String startDateTime, String endDateTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"        return \"[E]\" + super.toString() + \"(from: \" + startDateTime + \"to: \" + endDateTime + \")\";","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":31}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":" * Represents a task in the task list.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"     * The description of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"     * Whether the task is done.","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"     * @return The status icon of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"freshcabbage123"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(this);","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"freshcabbage123"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"freshcabbage123"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"freshcabbage123"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(this);;","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"freshcabbage123"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"freshcabbage123"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"freshcabbage123"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"freshcabbage123"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"freshcabbage123"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":57}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"    * Creates a todo with the given description.","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"    * @param description The description of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"    public ToDo (String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"        super.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"    * Returns the string representation of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"    * @return The string representation of the todo.","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"    */","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"freshcabbage123"},"content":"todo Read book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"freshcabbage123"},"content":"deadline submit 2103T lab /by 30-08-2023 2356","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"freshcabbage123"},"content":"event 2101 team meeting /from 05-09-2023 /to Tuesday 10pm","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"freshcabbage123"},"content":"todo Go grocery shopping","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"freshcabbage123"},"content":"event Running /from 2023-Sep-10 /to 15:00 tomorrow","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"freshcabbage123"},"content":"deadline Finish project /by 17-09-2023 23:59","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"freshcabbage123"},"content":"todo Walk the dog","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"freshcabbage123"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"freshcabbage123"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"freshcabbage123"},"content":"mark 5","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"freshcabbage123"},"content":"unmark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"freshcabbage123"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"freshcabbage123"},"content":"event watch netflix again /from 19-4-2023 /to Tuesday 19:00","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"freshcabbage123"},"content":"deadline modreg round 9 /by Wedenesday 2023-09-25","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"freshcabbage123"},"content":"mark 7","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"freshcabbage123"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"freshcabbage123"},"content":"mark 3","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"freshcabbage123"},"content":"unmark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"freshcabbage123"},"content":"event Dinner with the family /from 17-09-2024 /to 20:00 tomorrow","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"freshcabbage123"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"freshcabbage123"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"freshcabbage123":27}}]
