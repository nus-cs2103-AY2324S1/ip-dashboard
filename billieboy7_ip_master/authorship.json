[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"# main.Duke project template","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"3. After that, locate the `src/main/java/main.Duke.java` file, right-click it, and choose `Run main.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"billieboy7":2,"-":22}},{"path":"src/main/java/Command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import Main.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import Main.UI;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import Task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":" * ListCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":" * Used to execute List Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"     * Constructor for ListCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    public ListCommand() {}","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * method to execute the list sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"        ui.list(taskList.getTaskArrayList());","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":29}},{"path":"src/main/java/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * ByeCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Bye Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"     * Constructor for ByeCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    public ByeCommand() {}","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     * method to execute the bye sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        ui.printByeMessage();","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"        storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"     * Method to decide whether program should continue","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"     * @return false, signifying end of program","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"    public boolean isContinue() {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":40}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * Abstract Command class","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"     * method to execute a command sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {}","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * Method to decide whether program should continue","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * @return true, signifying continuance of program","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    public boolean isContinue() {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        return true;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":30}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * DeadlineCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Deadline Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    private String fullCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Constructor for DeadlineCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @param fullCommand full user input","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    public DeadlineCommand(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * method to execute the deadline sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        taskList.addDeadline(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"        storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":37}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * DeleteCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Delete Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    private String fullCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     * Constructor for DeleteCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * @param fullCommand full user input","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"    public DeleteCommand(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * method to execute the delete sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"        taskList.deleteTask(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":37}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * EventCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Event Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    private String fullCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Constructor for EventCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @param fullCommand full user input","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    public EventCommand(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * method to execute the event sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        taskList.addEvent(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"        storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":37}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * ListCommand is a subclass of Command.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute List Commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"     * Constructor for List Command","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"    public ListCommand() {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"     * method to execute the list sequence","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"        ui.printList(taskList.getTaskArrayList());","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":33}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * Mark Command is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Mark Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    private int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Constructor for MarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @param index index of task to be marked","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * method to execute the mark sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"            taskList.mark(this.index);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"            storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"        } catch (RuntimeException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(String.format(\"Given index is out of range. Index range should be between\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"                            \" 1 and %d.\",","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"                    taskList.getSize()));","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":43}},{"path":"src/main/java/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * ToDoCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute ToDo Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    String description;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     * Constructor for ToDo Command","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * @param description user description to be saved for ToDo tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"    public ToDoCommand(String description) {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"        taskList.addToDo(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"        storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":29}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import main.UI;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import main.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":" * UnmarkCommand is a subclass of Command.","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Used to execute Unmark Commands.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    int index;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     * Constructor for UnmarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * @param index index of task to be unmarked","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * method to execute the unmark sequence","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * @param taskList object containing the ArrayList of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * @param ui user interface responsible for terminal messages","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param storage object to communicate with data.txt file","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"            taskList.unmark(this.index);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"            storage.saveList(taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        } catch (RuntimeException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(String.format(\"Given index is out of range. Index range should be between\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"                            \" 1 and %d.\",","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"                    taskList.getSize()));","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":42}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package exception;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":" * DukeException class is subclass of the Exception class","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"     * Constructor for DukeException","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"     * @param message message to be output when exception is thrown","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"billieboy7":15}},{"path":"src/main/java/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package main;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":" * Duke class - Main class","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    Scanner userInput \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"    Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"    UI ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"        Duke duke \u003d new Duke(\"./data/data.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"        duke.start();","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * Constructor for Duke class","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     * @param filePath file path from which past saved date, if available, should be read from","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    private Duke(String filePath) {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"        this.storage \u003d new Storage(filePath, tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        this.ui \u003d new UI();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        this.ui.printWelcomeMessage();","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"            this.storage.loadList();","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"     * Method to start the Duke program","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"    private void start() {","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"        boolean isContinue \u003d true;","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"        while (isContinue) {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"                String input \u003d userInput.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"                Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"                command.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"                isContinue \u003d command.isContinue();","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"                if (isContinue) {","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"                    System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"                    this.ui.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"                System.out.println(exception.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"billieboy7":65,"-":2}},{"path":"src/main/java/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package main;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import command.ByeCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"import command.ToDoCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"import command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"import command.DeadlineCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":" * Parser class to read user input","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"     * parse method reads users input and directs the course of action.","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * @param fullCommand user input","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * @return return an Object belonging to the command class for further execution.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception to Duke - subclass of Exception class","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"        if (Parser.isBye(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"        } else if (Parser.isList(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"        } else if (Parser.isMark(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"            Parser.testMarkAndDelete(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"            int taskIndex \u003d Integer.parseInt(fullCommand.substring(5)) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"            return new MarkCommand(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"        } else if (Parser.isUnmark(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"            Parser.testMarkAndDelete(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"            int taskIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"            return new UnmarkCommand(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"            if (Parser.isToDo(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"                String description \u003d fullCommand.substring(4).trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"                // test whether the todo is valid","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"                Parser.testToDo(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"                return new ToDoCommand(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"            } else if (Parser.isEvent(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"                Parser.testEvent(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"                return new EventCommand(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"            } else if (Parser.isDeadline(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"                Parser.testDeadline(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"                return new DeadlineCommand(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"            } else if (Parser.isDelete(fullCommand)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"                Parser.testMarkAndDelete(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"                return new DeleteCommand(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"billieboy7"},"content":"    private static boolean isBye(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.equals(\"bye\");","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"billieboy7"},"content":"    private static boolean isList(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"list\");","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"billieboy7"},"content":"    private static boolean isMark(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"mark\");","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"billieboy7"},"content":"    private static boolean isUnmark(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"unmark\");","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"billieboy7"},"content":"    private static boolean isToDo(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"todo\");","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"billieboy7"},"content":"    private static boolean isEvent(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"event\");","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"billieboy7"},"content":"    private static boolean isDeadline(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"deadline\");","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"billieboy7"},"content":"    private static boolean isDelete(String fullCommand) {","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"billieboy7"},"content":"        return fullCommand.startsWith(\"delete\");","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"billieboy7"},"content":"    private static void testToDo(String description) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"billieboy7"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"billieboy7"},"content":"    private static void testMarkAndDelete(String description) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"billieboy7"},"content":"        String[] words \u003d description.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"billieboy7"},"content":"        String index \u003d String.join(\" \", Arrays.copyOfRange(words, 1, words.length));","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"billieboy7"},"content":"        if (index.isEmpty() || !index.matches(\"-?(0|[1-9]\\\\d*)\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"Following \\\"mark\\\" or \\\"unmark\\\" or \\\"delete\\\", an integer value is expected. Blanks or\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"billieboy7"},"content":"                    \" non-integer values are invalid.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"billieboy7"},"content":"    private static void testEvent(String description) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"billieboy7"},"content":"        String[] list \u003d description.split(\"/\");","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"billieboy7"},"content":"        if (list.length !\u003d 3) {","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"Invalid input. Fill up all fields. Do not forget the \\\"/\\\" symbol before your\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"billieboy7"},"content":"                    \" start and end time.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"billieboy7"},"content":"        String title \u003d list[0].substring(6);","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"billieboy7"},"content":"        String start \u003d list[1].substring(5);","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"billieboy7"},"content":"        String end \u003d list[2].substring(3);","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"billieboy7"},"content":"        if (start.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"\\\"from\\\" time missing!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"billieboy7"},"content":"        } else if (end.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"\\\"to\\\" time missing!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"billieboy7"},"content":"    private static void testDeadline(String description) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"billieboy7"},"content":"        String[] list \u003d description.split(\"/\");","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"billieboy7"},"content":"        if (list.length !\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"Invalid input. Fill up all fields. Do not forget the \\\"/\\\" symbol before your\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"billieboy7"},"content":"                    \" end time.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"billieboy7"},"content":"        String time \u003d list[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"billieboy7"},"content":"        if (!time.startsWith(\"by\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"Invalid input. Start with \\\"by\\\".\");","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"billieboy7"},"content":"        } else if (time.substring(2).equals(\" \") || time.substring(2).isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"Invalid input. Field Empty.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":154}},{"path":"src/main/java/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package main;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"import task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"import task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"import task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":" * Storage class to create objects that manage saving/loading data","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    String filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    TaskList taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"     * @param filePath file path from which past saved date, if available, should be read from or load to.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"     * @param taskList contains the ArrayList of Task.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"    public Storage(String filePath, TaskList taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"     * saves data in the given TaskList object to the file specified in the file path.","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"     * @param taskList contains the ArrayList of Task.","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke.","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"    public void saveList(TaskList taskList) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"            for (Task task : taskList.getTaskArrayList()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"                writer.append(task.outputStoreFormat()).append(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"            writer.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"IO exception occurred.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"     * loads data from the file specified in the file path.","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception for Duke.","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"     * @throws IOException input/output error when there is an error reading from the data file.","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"    void loadList() throws DukeException, IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"billieboy7"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"billieboy7"},"content":"            FileReader fileReader \u003d new FileReader(file);","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"billieboy7"},"content":"            BufferedReader reader \u003d new BufferedReader(fileReader); // BufferedReader wraps the fileReader","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"billieboy7"},"content":"            String line;","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"billieboy7"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"billieboy7"},"content":"                String[] inputArray \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"billieboy7"},"content":"                switch (inputArray[0]) {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"billieboy7"},"content":"                case \"T\":","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"billieboy7"},"content":"                    ToDo toDo \u003d new ToDo(inputArray[2]);","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"billieboy7"},"content":"                    int status \u003d Integer.parseInt(inputArray[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"billieboy7"},"content":"                    if (status \u003d\u003d 1) {","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"billieboy7"},"content":"                        toDo.setTaskDone(true);","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"billieboy7"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"billieboy7"},"content":"                    this.taskList.addTask(toDo);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"billieboy7"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"billieboy7"},"content":"                case \"E\":","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"billieboy7"},"content":"                    Event event \u003d new Event(inputArray[2], inputArray[3], inputArray[4]);","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"billieboy7"},"content":"                    if (inputArray[1] \u003d\u003d \"1\") {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"billieboy7"},"content":"                        event.setTaskDone(true);","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"billieboy7"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"billieboy7"},"content":"                    this.taskList.addTask(event);","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"billieboy7"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"billieboy7"},"content":"                case \"D\":","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"billieboy7"},"content":"                    Deadline deadline \u003d new Deadline(inputArray[2], inputArray[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"billieboy7"},"content":"                    if (inputArray[1] \u003d\u003d \"1\") {","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"billieboy7"},"content":"                        deadline.setTaskDone(true);","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"billieboy7"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"billieboy7"},"content":"                    this.taskList.addTask(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"billieboy7"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"billieboy7"},"content":"                default:","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"billieboy7"},"content":"                    throw new DukeException(\"An unexpected error occurred while reading the text file. Error Code:\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"billieboy7"},"content":"                            \" 01\");","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"billieboy7"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"billieboy7"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"billieboy7"},"content":"            this.saveList(this.taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"billieboy7"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"billieboy7"},"content":"            throw new DukeException(\"IO error occurred. Check the formatting of the text file - data.txt.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"billieboy7":119}},{"path":"src/main/java/main/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package main;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":" * UI class - User Interface - Handles the display shown by the program.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"public class UI {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"     * Constructor for UI class.","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    public UI() {}","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Generates the divider displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"    void printDivider() {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"        String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     * Generates the welcome message displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    void printWelcomeMessage() {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"        this.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\" Hello! I\u0027m JARVIS\");","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"        this.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"     * Lists out the tasks stored in the ArrayList\u003cTask\u003e Object.","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"     * @param taskArrayList - Contains the list of Tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"    public void printList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"        this.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"        if (taskArrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"            System.out.println(\"There are no tasks in your list.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"            for (int i \u003d 0; i \u003c taskArrayList.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"                int index \u003d i + 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"                Task t \u003d taskArrayList.get(i);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"                System.out.println(index + \".\" + t.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"        this.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"     * Generates the bye message displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"    public void printByeMessage() {","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"        this.printDivider();","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"billieboy7":70}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":" * Deadline class is a subclass of Task class.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"    private String time;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    DateTimeFormatter outputFormatWithTime \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\");","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"     * Constructor for Deadline class.","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * @param description user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @param time user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    public Deadline(String description, String time) {","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"        this.time \u003d time;","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     * Overloaded Constructor for Deadline class.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"     * @param description user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"     * @param dateTime user provided end time as a LocalDateTime object.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    public Deadline(String description, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"     * storeFormat() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"     * @return the specific format in which the task should be saved in the data file.","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"    public String outputStoreFormat() {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"        String taskType \u003d \"D\";","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"        String isTaskDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"0\";","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"        if (this.dateTime \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"            return (taskType + \" | \" + isTaskDone + \" | \" + this.description.trim() + \" | \" + this.time);","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"            return (taskType + \" | \" + isTaskDone + \" | \" + this.description.trim() + \" | \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"                    this.dateTime.format(outputFormatWithTime));","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"     * toString() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"     * @return string text of the task in which the task will be displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(), time);","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(), dateTime.format(outputFormatWithTime));","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"billieboy7":74}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":" * Event class is a subclass of Task class.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"    private String startTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"    private String endTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    DateTimeFormatter outputFormatWithTime \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\");","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Constructor for Event class.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     * @param description user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     * @param startTime user provided start time.","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"     * @param endTime user provided end time.","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"     * Overloaded Constructor for Event class.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"     * @param description user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"     * @param startDateTime user provided start time as a LocalDateTime object.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"     * @param endDateTime user provided end time as a LocalDateTime object.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"     * storeFormat() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"     * @return the specific format in which the task should be saved in the data file.","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"    public String outputStoreFormat() {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"        String taskType \u003d \"E\";","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"        String isTaskDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"0\";","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"        if (startDateTime \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"            return (taskType + \" | \" + isTaskDone + \" | \" + this.description.trim() + \" | \" + this.startTime + \" | \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"                    this.endTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"            return (taskType + \" | \" + isTaskDone + \" | \" + this.description.trim() + \" | \"","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"                    + this.startDateTime.format(outputFormatWithTime) + \" | \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"                    this.endDateTime.format(outputFormatWithTime));","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"     * toString() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"     * @return string text of the task in which the task will be displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"billieboy7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"billieboy7"},"content":"        if (startDateTime \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"billieboy7"},"content":"            return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), startTime, endTime);","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"billieboy7"},"content":"            return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), startDateTime.format(outputFormatWithTime)","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"billieboy7"},"content":"                    , endDateTime.format(outputFormatWithTime));","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"billieboy7":80}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":" * Task class.","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"public class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"    protected String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"     * Constructor for Task class.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"     * @param description description provided by user.","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * setter method which updates whether a task is done.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     * @param status boolean value which represents whether a task is done","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"     *               true - task is done, false - task is not done","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"    public void setTaskDone(boolean status) {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"     * storeFormat() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"     * @return the specific format in which the task should be saved in the data file.","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"    public String outputStoreFormat() {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"        return null;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"     * toString() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"     * @return string text of the task in which the task will be displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"billieboy7":48}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":" * Wrapper class that contains ArrayList of type Task.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"     * Constructor for TaskList class.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"    public TaskList() {}","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"     * Deletes Task from the Task List.","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"     * @param input user input specifying the index of the task to be removed.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    public void deleteTask(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"        int taskIndex \u003d Integer.parseInt(input.substring(7)) - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"        System.out.println(taskList.get(taskIndex));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"        taskList.remove(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"     * Adds Event to the Task List.","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"     * @param input user input specifying the details of the Event to be added.","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"    public void addEvent(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"        String[] list \u003d input.split(\"/\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"        String title \u003d list[0].substring(6);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"        String start \u003d list[1].substring(5).trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"        String end \u003d list[2].substring(3).trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"        // returns 1 if correct datetime","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"        // returns 0 if random string input","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"        int startTimeFormat \u003d this.computeDateTimeFormat(start);","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"        int endTimeFormat \u003d this.computeDateTimeFormat(end);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"        if (startTimeFormat !\u003d 1 || endTimeFormat !\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"            Event event \u003d new Event(title, start, end);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"            System.out.println(event.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"            taskList.add(event);","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"                DateTimeFormatter inputFormatWithTime \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"                LocalDateTime startDateTime \u003d LocalDateTime.parse(start, inputFormatWithTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"                LocalDateTime endDateTime \u003d LocalDateTime.parse(end, inputFormatWithTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"                Event event \u003d new Event(title, startDateTime, endDateTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"                System.out.println(event.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"                taskList.add(event);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"                System.out.println(\"Invalid date-time format. Stick to the given format of dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"billieboy7"},"content":"     * Adds Deadline to the Task List.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"billieboy7"},"content":"     * @param input user input specifying the details of the Deadline to be added.","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"billieboy7"},"content":"    public void addDeadline(String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"billieboy7"},"content":"        String[] list \u003d input.split(\"/\");","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"billieboy7"},"content":"        String title \u003d list[0].substring(9);","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"billieboy7"},"content":"        String time \u003d list[1].substring(3).trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"billieboy7"},"content":"        // returns 1 if correct datetime","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"billieboy7"},"content":"        // returns 0 if random string input","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"billieboy7"},"content":"        int timeFormat \u003d this.computeDateTimeFormat(time);","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"billieboy7"},"content":"        if (timeFormat \u003d\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"billieboy7"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"billieboy7"},"content":"            Deadline deadline \u003d new Deadline(title, time);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"billieboy7"},"content":"            System.out.println(deadline.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"billieboy7"},"content":"            taskList.add(deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"billieboy7"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"billieboy7"},"content":"                DateTimeFormatter inputFormatWithTime \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"billieboy7"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(time, inputFormatWithTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"billieboy7"},"content":"                Deadline deadline \u003d new Deadline(title, dateTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"billieboy7"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"billieboy7"},"content":"                System.out.println(deadline.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"billieboy7"},"content":"                taskList.add(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"billieboy7"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"billieboy7"},"content":"                System.out.println(\"Invalid date-time format. Stick to the given format of dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"billieboy7"},"content":"     * Adds ToDoTask to the Task List.","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"billieboy7"},"content":"     * @param input user input specifying the details of the ToDoTask to be added.","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"billieboy7"},"content":"    public void addToDo(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"billieboy7"},"content":"        ToDo toDo \u003d new ToDo(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"billieboy7"},"content":"        System.out.println(toDo.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"billieboy7"},"content":"        taskList.add(toDo);","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"billieboy7"},"content":"     * Generic method to add tasks to the Task List.","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"billieboy7"},"content":"     * @param task task object to be added to the tasks list.","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"billieboy7"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"billieboy7"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"billieboy7"},"content":"     * marks the specific task as done.","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"billieboy7"},"content":"     * @param taskIndex index of the task to be marked as done.","lastModifiedDate":"2023-09-04"},{"lineNumber":126,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":127,"author":{"gitId":"billieboy7"},"content":"    public void mark(int taskIndex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"billieboy7"},"content":"        Task currTask \u003d taskList.get(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"billieboy7"},"content":"        currTask.setTaskDone(true);","lastModifiedDate":"2023-09-04"},{"lineNumber":130,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"billieboy7"},"content":"        System.out.println(currTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":135,"author":{"gitId":"billieboy7"},"content":"     * unmarks the specific task.","lastModifiedDate":"2023-09-04"},{"lineNumber":136,"author":{"gitId":"billieboy7"},"content":"     * @param taskIndex index of the task to be unmarked.","lastModifiedDate":"2023-09-04"},{"lineNumber":137,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":138,"author":{"gitId":"billieboy7"},"content":"    public void unmark(int taskIndex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"billieboy7"},"content":"        Task currTask \u003d taskList.get(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"billieboy7"},"content":"        currTask.setTaskDone(false);","lastModifiedDate":"2023-09-04"},{"lineNumber":141,"author":{"gitId":"billieboy7"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"billieboy7"},"content":"        System.out.println(currTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":146,"author":{"gitId":"billieboy7"},"content":"     * size() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":147,"author":{"gitId":"billieboy7"},"content":"     * @return number of tasks in the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":148,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":149,"author":{"gitId":"billieboy7"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-04"},{"lineNumber":150,"author":{"gitId":"billieboy7"},"content":"        return taskList.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":154,"author":{"gitId":"billieboy7"},"content":"     * Checks whether given string is made up of just numbers.","lastModifiedDate":"2023-09-04"},{"lineNumber":155,"author":{"gitId":"billieboy7"},"content":"     * @param strNum string to be tested.","lastModifiedDate":"2023-09-04"},{"lineNumber":156,"author":{"gitId":"billieboy7"},"content":"     * @return true - is numeric, false - not numeric.","lastModifiedDate":"2023-09-04"},{"lineNumber":157,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":158,"author":{"gitId":"billieboy7"},"content":"    public static boolean isNumeric(String strNum) {","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"billieboy7"},"content":"        if (strNum \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"billieboy7"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"billieboy7"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"billieboy7"},"content":"            double d \u003d Double.parseDouble(strNum);","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"billieboy7"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"billieboy7"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"billieboy7"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":171,"author":{"gitId":"billieboy7"},"content":"     * The method is used to identify dates in the below Local Date Time format :","lastModifiedDate":"2023-09-04"},{"lineNumber":172,"author":{"gitId":"billieboy7"},"content":"     * \"dd-MM-yyyy HHmm\" with HHmm in the 24 hour format. Note: This method only checks for the","lastModifiedDate":"2023-09-04"},{"lineNumber":173,"author":{"gitId":"billieboy7"},"content":"     * structure of the input. The validity of the Local Date Time Format is validated/tested later.","lastModifiedDate":"2023-09-04"},{"lineNumber":174,"author":{"gitId":"billieboy7"},"content":"     * The method will return 1 if it is in LocalDateTimeFormat, 0 if it is a custom string format","lastModifiedDate":"2023-09-04"},{"lineNumber":175,"author":{"gitId":"billieboy7"},"content":"     * @param input string to run the test on.","lastModifiedDate":"2023-09-04"},{"lineNumber":176,"author":{"gitId":"billieboy7"},"content":"     * @return 1 or 0.","lastModifiedDate":"2023-09-04"},{"lineNumber":177,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":178,"author":{"gitId":"billieboy7"},"content":"    int computeDateTimeFormat(String input) {","lastModifiedDate":"2023-09-03"},{"lineNumber":179,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"billieboy7"},"content":"        // returns 1 if correct datetime","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"billieboy7"},"content":"        // returns 2 if correct date","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"billieboy7"},"content":"        // returns 0 if random string input","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"billieboy7"},"content":"        // Assume that the date input is dd/MM/yyyy 16-08-1977 1800","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"billieboy7"},"content":"        String[] blankArray \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"billieboy7"},"content":"        // Check for datetime input","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"billieboy7"},"content":"        if (blankArray.length \u003d\u003d 2 \u0026\u0026 isNumeric(blankArray[1])) {","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"billieboy7"},"content":"            String[] slashArray \u003d blankArray[0].split(\"-\");","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"billieboy7"},"content":"            boolean isAllNumeric \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"billieboy7"},"content":"            for (String s : slashArray) {","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"billieboy7"},"content":"                if (!isNumeric(s)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"billieboy7"},"content":"                    isAllNumeric \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"billieboy7"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"billieboy7"},"content":"            if (slashArray.length \u003d\u003d 3 \u0026\u0026 isAllNumeric) {","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"billieboy7"},"content":"                return 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"billieboy7"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"billieboy7"},"content":"        return 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":208,"author":{"gitId":"billieboy7"},"content":"     * getter method.","lastModifiedDate":"2023-09-04"},{"lineNumber":209,"author":{"gitId":"billieboy7"},"content":"     * @return ArrayList of Task objects.","lastModifiedDate":"2023-09-04"},{"lineNumber":210,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":211,"author":{"gitId":"billieboy7"},"content":"    public ArrayList\u003cTask\u003e getTaskArrayList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"billieboy7"},"content":"        return taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"billieboy7":214}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":" * ToDo class is a subclass of Task class.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"     * Constructor for ToDo class.","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"     * @param description user provided description.","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"     * @throws DukeException organic exception by Duke.","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"    public ToDo(String description) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"     * storeFormat() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"     * @return the specific format in which the task should be saved in the data file.","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    public String outputStoreFormat() {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"        String taskType \u003d \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"        String isTaskDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"            isTaskDone \u003d \"0\";","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"        return (taskType + \" | \" + isTaskDone + \" | \" + this.description.trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"     * toString() method.","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"     * @return string text of the task in which the task will be displayed in the terminal.","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"billieboy7":45}},{"path":"src/test/java/main/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package main;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import command.ByeCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"//Underscores may be used in test method names using the","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"// following three part format featureUnderTest_testScenario_expectedBehavior()","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"// Testing the Parser.parse() method","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    public void parse_correctByeInput() throws DukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"        assertEquals(new ByeCommand().isContinue(), Parser.parse(\"bye\").isContinue());","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"    public void parse_incorrectByeInput() {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        assertThrows(DukeException.class,","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"                    Parser.parse(\"bye bye\");","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"                });","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"billieboy7"},"content":"    public void parse_inputStartingWithEvent_shouldReturnEventCommandParseTest() throws DukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"billieboy7"},"content":"        assertEquals(EventCommand.class, Parser.parse(\"event Amma Birthday Dinner \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"billieboy7"},"content":"                \"/from 02-08-2023 1800 /to 02-08-2023 2200\").getClass());","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"billieboy7"},"content":"    public void parse_eventSpellingMistake_shouldReturnDukeException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"billieboy7"},"content":"        assertThrows(DukeException.class,","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"billieboy7"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"billieboy7"},"content":"                    Parser.parse(\"evennt Amma Birthday Dinner \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"billieboy7"},"content":"                            \"/from 02-08-2023 1800 /to 02-08-2023 2200\");","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"billieboy7"},"content":"                });","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"billieboy7"},"content":"    public void parse_notIndicatingTo_shouldReturnDukeException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"billieboy7"},"content":"        assertThrows(DukeException.class,","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"billieboy7"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"billieboy7"},"content":"                    Parser.parse(\"evennt Amma Birthday Dinner \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"billieboy7"},"content":"                            \"/from 02-08-2023 1800\");","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"billieboy7"},"content":"                });","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"billieboy7"},"content":"    public void parse_notIndicatingFrom_shouldReturnDukeException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"billieboy7"},"content":"        assertThrows(DukeException.class,","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"billieboy7"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"billieboy7"},"content":"                    Parser.parse(\"evennt Amma Birthday Dinner \" +","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"billieboy7"},"content":"                            \"/to 02-08-2023 1800\");","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"billieboy7"},"content":"                });","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"billieboy7":66}},{"path":"src/test/java/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    public void outputStoreFormat() {","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"        assertEquals(\"D | 0 | homework | tomorrow\", new Deadline(\"homework\",","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"                \"tomorrow\").outputStoreFormat());","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"        assertEquals(\"D | 0 | clean room | tonight 8pm\", new Deadline(\"clean room\",","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"                \"tonight 8pm\").outputStoreFormat());","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"        assertEquals(\"D | 0 | watch movie | 16 Aug 1977 2:00AM\", new Deadline(\"watch movie\",","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"                LocalDateTime.parse(\"16-08-1977 0200\",","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"                        DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"))).outputStoreFormat());","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"billieboy7":25}},{"path":"src/test/java/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billieboy7"},"content":"package task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"billieboy7"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"billieboy7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"billieboy7"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"billieboy7"},"content":"    // Test - private int computeDateTimeFormat(String input)","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"billieboy7"},"content":"    // The method is used to identify dates in the below Local Date Time format :","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"billieboy7"},"content":"    // \"dd-MM-yyyy HHmm\" with HHmm in the 24 hour format. Note: This method only checks for the","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"billieboy7"},"content":"    // structure of the input. The validity of the Local Date Time Format is validated/tested later.","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"billieboy7"},"content":"    // The method will return 1 if it is in LocalDateTimeFormat, 0 if it is a custom string format","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"billieboy7"},"content":"    public void computeDateTimeFormat_localDateTimeInput_shouldReturnOne() {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"billieboy7"},"content":"        TaskList task \u003d new TaskList();","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"billieboy7"},"content":"        String input \u003d \"16-08-1977 1700\";","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"billieboy7"},"content":"        assertEquals(1, task.computeDateTimeFormat(input));","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"billieboy7"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"billieboy7"},"content":"    public void computeDateTimeFormat_customInput_shouldReturnZero() {","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"billieboy7"},"content":"        TaskList task \u003d new TaskList();","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"billieboy7"},"content":"        String input \u003d \"16 August 1977 5pm\";","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"billieboy7"},"content":"        assertEquals(0, task.computeDateTimeFormat(input));","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"billieboy7"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"billieboy7"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"billieboy7"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"billieboy7":33}}]
