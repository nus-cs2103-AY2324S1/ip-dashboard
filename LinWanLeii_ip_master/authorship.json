[{"path":"Testing.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"  [D][ ] bye (by: Oct 10 2020)","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"  [E][ ] yo (from: Oct 10 2020 to: Oct 12 2020)","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"  [T][ ] poo","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"  [T][ ] book","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"  [T][ ] book","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"  [T][ ] screenshot this","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":6}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import command.Command;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * A class that the chatbot program will run from.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    private TaskList userList;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    private final FileStorage fileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"    private final Ui userInterface;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * A constructor method to initialise the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @param filePath the file that will be written or read from.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"        this.userInterface \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        this.fileStorage \u003d new FileStorage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"            //System.out.println(\"here\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"            userList \u003d new TaskList(fileStorage.read());","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"            //System.out.println(\"new userlist\");","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"            this.userList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"            System.out.println(\"File Empty\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will need the user to input what Text file they would like to use.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"     * @param args arguments use to start the program.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"\\n \\n\" + \"Please Input the txt file you wish to access\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"        String textFile \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LinWanLeii"},"content":"        new Duke(textFile).run();","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LinWanLeii"},"content":"     * A method to run the program.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LinWanLeii"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LinWanLeii"},"content":"        userInterface.showGreetings();","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LinWanLeii"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LinWanLeii"},"content":"        while (!isExit) {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LinWanLeii"},"content":"                String fullCommand \u003d userInterface.readCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LinWanLeii"},"content":"                userInterface.showLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LinWanLeii"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LinWanLeii"},"content":"                c.excute(userList, userInterface, fileStorage);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LinWanLeii"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LinWanLeii"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LinWanLeii"},"content":"                userInterface.showError(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LinWanLeii"},"content":"            } finally {","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LinWanLeii"},"content":"                userInterface.showLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LinWanLeii"},"content":"        userInterface.closeScanner();","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LinWanLeii":67,"-":4}},{"path":"src/main/java/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command, for this particularly it will end the program.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * @author LinWanLeii","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will end the program.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     * @param taskList contains all the past few tasks excuted.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList taskList, Ui ui, FileStorage fileStorage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"        ui.showGoodbye();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":26}},{"path":"src/main/java/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command, for this particularly it will clear all the past tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will excute the clearing of all past cases.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist.clear());","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"        ui.showClearTask();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":26}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":" * An Abstract class that represents the action that will be done by the different command input","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    protected boolean isExit \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     * Returns whether the program should stop running as the end point \"bye\" is hit.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @return boolean value shows whether the program should be completed and exited.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"        return isExit;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     * An abstract method that will excute the task provided depending on the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"    public abstract void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":34}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command, for this in particular this will store a task that has a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    private final String task;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    private final String deadDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     * A constructor method to call for the method.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task that is input by the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @param deadDate the deadline of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    public DeadlineCommand(String task, String deadDate) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"        this.deadDate \u003d deadDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will take down the deadline task that the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"        Deadline task \u003d new Deadline(this.task, this.deadDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"        tasklist.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"        ui.showTaskAdded(task, tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":41}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command class, for this in particular it deletes a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    private final int index;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will delete a task from the taskList depending on the index.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"        Task task \u003d tasklist.deleteTask(this.index);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        ui.showDeleteTask(task, tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":32}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Event;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command, for this in particular it will result in event being stored.","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    private final String task;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    private final String startDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    private final String endDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     * Constructor method that will initialise all content of the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task the user wants to do","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     * @param startDate the starting date","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @param endDate the ending date","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    public EventCommand(String task, String startDate, String endDate) {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * This method will form a task depending on the user inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"        Event task \u003d new Event(this.task, this.startDate, this.endDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"        tasklist.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"        ui.showTaskAdded(task, tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":44}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command, this will find task with similar words.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"    private final String word;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    public FindCommand(String word) {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"        this.word \u003d word;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will excute the class.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the word cannot be found.","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"        TaskList newList \u003d new TaskList();","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        for (int i \u003d 0; i \u003c tasklist.size(); i++) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"            if (tasklist.get(i).toString().contains(word)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"                newList.add(tasklist.get(i));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"        ui.showFoundResults(newList);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":33}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that excutes the list command.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will list out all the task stored in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"        ui.showList(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":25}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * A class that will mark the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    private final int index;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will excute the mark command depending on the index by user .","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"        Task task \u003d tasklist.markTask(this.index);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"        ui.showMarkedTask(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":33}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Todo;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * A class that is part of the command family, this in particular calls for todo tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    private final String task;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    public TodoCommand(String task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will add a Todo task to the tasklist.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"        Todo task \u003d new Todo(this.task);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"        tasklist.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"        ui.showTaskAdded(task, tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":33}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" * A class that will call for the unmark command","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    private final int index;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will mark the task as unMarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     * @param tasklist contains all the past few tasks excuted.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     * @param ui contains the user interface that will be shown to the user depending on the inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * @param fileStorage Writing and reading on text files.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException If user inputs is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"    public void excute(TaskList tasklist, Ui ui, FileStorage fileStorage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"        Task task \u003d tasklist.unmarkTask(this.index);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"        fileStorage.write(tasklist);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"        ui.showUnMarkedTask(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":31}},{"path":"src/main/java/dukeexception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package dukeexception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":" * An Exceptional class for any errors faced by the user inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"     * Constructor method that creates the exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"     * @param message the message that we want to output to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LinWanLeii":16}},{"path":"src/main/java/filestorage/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package filestorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Event;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Todo;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":" * Represents a class that will convey the user input to a file and also the other way around.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"public class FileStorage {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    private final File fileData;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    public FileStorage(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"        this.fileData \u003d new File(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will write all the data from the tasklist to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * @param userList contains all the tasks by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if there is any situation where the FileWriter fails to write.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"    public void write(TaskList userList) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"            FileWriter fw \u003d new FileWriter(this.fileData);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"            for (int i \u003d 0; i \u003c userList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"                fw.write(userList.get(i).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"                fw.write(\"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"            fw.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"Writing Error\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will read all the information on a textFile and load it back into the program","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LinWanLeii"},"content":"     * @return ArrayList a list of all the task by user.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the content on the file cannot be recognised.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LinWanLeii"},"content":"    public ArrayList\u003cTask\u003e read() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LinWanLeii"},"content":"            ArrayList\u003cTask\u003e dataList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LinWanLeii"},"content":"            Scanner scanner \u003d new Scanner(this.fileData);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LinWanLeii"},"content":"            Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LinWanLeii"},"content":"            //System.out.println(\"reading\");","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LinWanLeii"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LinWanLeii"},"content":"                String inputs \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LinWanLeii"},"content":"                if (inputs.startsWith(\"  [T]\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LinWanLeii"},"content":"                    String info \u003d inputs.substring(9);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LinWanLeii"},"content":"                    task \u003d new Todo(info);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LinWanLeii"},"content":"                    if (inputs.substring(6).startsWith(\"X\")) {","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"LinWanLeii"},"content":"                        task.markDone();","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"LinWanLeii"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"LinWanLeii"},"content":"                    dataList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LinWanLeii"},"content":"                } else if (inputs.startsWith(\"  [D]\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LinWanLeii"},"content":"                    String info \u003d inputs.substring(9);","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LinWanLeii"},"content":"                    String[] split \u003d info.split(\"\\\\(by: |\\\\)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LinWanLeii"},"content":"                    task \u003d new Deadline(split[0], split[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LinWanLeii"},"content":"                    if (inputs.substring(6).startsWith(\"X\")) {","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"LinWanLeii"},"content":"                        task.markDone();","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"LinWanLeii"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"LinWanLeii"},"content":"                    dataList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"LinWanLeii"},"content":"                } else if (inputs.startsWith(\"  [E]\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"LinWanLeii"},"content":"                    String info \u003d inputs.substring(9);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LinWanLeii"},"content":"                    String[] split \u003d info.split(\"\\\\(from: | to: |\\\\)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"LinWanLeii"},"content":"                    task \u003d new Event(split[0], split[1], split[2]);","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"LinWanLeii"},"content":"                    if (inputs.substring(6).startsWith(\"X\")) {","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"LinWanLeii"},"content":"                        task.markDone();","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"LinWanLeii"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"LinWanLeii"},"content":"                    dataList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"LinWanLeii"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"LinWanLeii"},"content":"            scanner.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"LinWanLeii"},"content":"            //System.out.println(count);","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"LinWanLeii"},"content":"            return dataList;","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"LinWanLeii"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"Invalid file\");","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LinWanLeii":94}},{"path":"src/main/java/list/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package list;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":" * A class that stores Tasks inside an Arraylist.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"public class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"     * A Constructor method that will create a new TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    public TaskList(TaskList userList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        this.taskList \u003d convert(userList);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will convert a TaskList to an ArrayList.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     * @param userList the TaskList that is going to be converted.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"     * @return an Arraylist that is converted from TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"    public ArrayList\u003cTask\u003e convert(TaskList userList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"        for (int i \u003d 0; i \u003c userList.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"            taskList.add(i, userList.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"        return taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"     * A method that returns the size of the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"     * @return the size of the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LinWanLeii"},"content":"    public int size() {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"LinWanLeii"},"content":"        return taskList.size(); }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will get the task in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LinWanLeii"},"content":"     * @param i the index of the task needed.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LinWanLeii"},"content":"     * @return the task that is called for.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LinWanLeii"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"LinWanLeii"},"content":"        return taskList.get(i); }","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LinWanLeii"},"content":"     * A method that adds a task to the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task that the user wants to add.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LinWanLeii"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"LinWanLeii"},"content":"        taskList.add(task); }","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will delete a task depending on the index provided.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LinWanLeii"},"content":"     * @param i the index of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LinWanLeii"},"content":"     * @return the task that has been removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the index is out of bound.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"LinWanLeii"},"content":"    public Task deleteTask(int i) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LinWanLeii"},"content":"        if (i \u003e this.taskList.size() || i \u003c 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"Invalid Index provided.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LinWanLeii"},"content":"        Task removing \u003d this.taskList.get(i - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LinWanLeii"},"content":"        this.taskList.remove(i - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LinWanLeii"},"content":"        return removing;","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will mark a task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"LinWanLeii"},"content":"     * @param i the index of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"LinWanLeii"},"content":"     * @return the task that is marked.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the index is out of bound.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LinWanLeii"},"content":"    public Task markTask(int i) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LinWanLeii"},"content":"        if (i \u003e this.taskList.size() || i \u003c 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"Invalid Index provided.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"LinWanLeii"},"content":"        Task marking \u003d this.taskList.get(i - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"LinWanLeii"},"content":"        marking.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LinWanLeii"},"content":"        return marking;","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will unmark a task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LinWanLeii"},"content":"     * @param i the index of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"LinWanLeii"},"content":"     * @return the task that is unmarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the index is out of bound.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"LinWanLeii"},"content":"    public Task unmarkTask(int i) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"LinWanLeii"},"content":"        if (i \u003e this.taskList.size() || i \u003c 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"Invalid Index provided.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LinWanLeii"},"content":"        Task unMarking \u003d this.taskList.get(i - 1);","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"LinWanLeii"},"content":"        unMarking.unmarkDone();","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"LinWanLeii"},"content":"        return unMarking;","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LinWanLeii"},"content":"     * A method that clears the TaskList","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"LinWanLeii"},"content":"     * @return an empty list","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"LinWanLeii"},"content":"    public TaskList clear() {","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"LinWanLeii"},"content":"        this.taskList.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"LinWanLeii"},"content":"        return new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":124}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package parser;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import command.ByeCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"import command.ClearCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"import command.Command;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"import command.DeadlineCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"import command.EventCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"import command.FindCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"import command.TodoCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":" * A parser that takes the input data and checks its syntax followed bt excute it.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"public class Parser {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    //final String UNKNOWN_COMMAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"     * A method that takes the user input and calls the right command for it.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"     * @param fullCommand the user command input.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * @return a command that will be excute base on the users input.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     * @throws DukeException if the command is invalid in any ways.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"        String[] split \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"        String commandAction \u003d split[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"        switch (commandAction) {","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"        case \"list\":","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003e 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Please state in this format (mark 1)\");","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"                return new MarkCommand(Integer.parseInt(split[1]));","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"LinWanLeii"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Invalid Index\");","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"LinWanLeii"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003e 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Please state in this format (unmark 1)\");","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"LinWanLeii"},"content":"                return new UnmarkCommand(Integer.parseInt(split[1]));","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"LinWanLeii"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Invalid Index\");","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"LinWanLeii"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003e 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Please state in this format (delete 1)\");","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"LinWanLeii"},"content":"                return new DeleteCommand(Integer.parseInt(split[1]));","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"LinWanLeii"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"Invalid Index\");","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"LinWanLeii"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003c 2 || split[1].isEmpty()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"LinWanLeii"},"content":"            return new TodoCommand(split[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"LinWanLeii"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003c 2 || split[1].isEmpty()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a Tasks.Deadline cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"LinWanLeii"},"content":"            String[] info \u003d split[1].split(\"/by \");","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"LinWanLeii"},"content":"            if (info.length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline is invalid.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"LinWanLeii"},"content":"                String deadDate \u003d LocalDate.parse(info[1]).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"LinWanLeii"},"content":"                return new DeadlineCommand(info[0], deadDate);","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"LinWanLeii"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a time must be in yyyy-mm-dd\");","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"LinWanLeii"},"content":"        case \"event\":","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"LinWanLeii"},"content":"            if (split.length \u003c 2 || split[1].isEmpty()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a Tasks.Event cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"LinWanLeii"},"content":"            String[] infoEvent \u003d split[1].split(\"/from | /to \");","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"LinWanLeii"},"content":"            if (infoEvent.length !\u003d 3) {","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a event is invalid.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"LinWanLeii"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"LinWanLeii"},"content":"                String startDate \u003d LocalDate.parse(infoEvent[1]).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":96,"author":{"gitId":"LinWanLeii"},"content":"                String endDate \u003d LocalDate.parse(infoEvent[2]).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"LinWanLeii"},"content":"                return new EventCommand(infoEvent[0], startDate, endDate);","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"LinWanLeii"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"LinWanLeii"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a time must be in yyyy-mm-dd\");","lastModifiedDate":"2023-09-07"},{"lineNumber":100,"author":{"gitId":"LinWanLeii"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"LinWanLeii"},"content":"        case \"clear\":","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"LinWanLeii"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"LinWanLeii"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"LinWanLeii"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"LinWanLeii"},"content":"        case \"find\":","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"LinWanLeii"},"content":"            return new FindCommand(split[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"LinWanLeii"},"content":"        default:","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"LinWanLeii"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":111}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package tasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":" * A child class to Task, this in particular is a deadline task.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"    private final String deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"     * A constructor method.","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"     * @param deadline the deadline of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"        super(name);","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        super.setType(\"D\");","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"     * * A method that will represent the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * @return the syntax that will be shown to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"        return super.toString() + \"(by: \" + deadline + \")\";","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":29}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package tasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":" * A child class to Task, for this in particular it is for events tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"    private final String start;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"    private final String end;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"     * A Constructor method.","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"     * @param start the start date of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"     * @param end the end date of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    public Event(String name, String start, String end) {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        super(name);","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"        super.setType(\"E\");","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will represent the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     * @return the syntax that will be shown to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"        return super.toString() + \"(from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":31}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package tasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":" * A parent class that represents the task that the user will input.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"public class Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"    private String type;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"    private final String name;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"    private boolean marked;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"     * A Constructor method for task.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    public Task(String name) {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"        this.marked \u003d false;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    public void setType(String type) {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will mark a task as marked.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"        marked \u003d true;","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will unmark a task.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"        marked \u003d false;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will represent the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"     * @return the syntax that will be shown to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"        return \"  [\" + type + \"]\" + \"[\" + (marked ? \"X\" : \" \") + \"] \" + name;","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":45}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package tasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":" * A child class to Task, this in particular is for todo tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"     * A constructor method for Todo.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"        super(name);","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"        super.setType(\"T\");","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"LinWanLeii":15}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import list.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":" * A class that is used to show the user inferfaces.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    final String UNKNOWN_COMMAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    final String NAME \u003d \"CathyTheChattyCat\";","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    String lineBreak \u003d \"\\n__________________________________________\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"     * A constructor method to initialise the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"    public Ui() {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"     * A method to read the user input and trims the spaces at both ends.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"     * @return a string of the input.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"        return this.scanner.nextLine().trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will print a line.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LinWanLeii"},"content":"    public void showLine() {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LinWanLeii"},"content":"    /*","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LinWanLeii"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(lineBreak + \"Not detected in data. New List.TaskList created\" + lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LinWanLeii"},"content":"    public void showRequestForTextFile() {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(lineBreak + \"Please Input the txt file you wish to access\" + lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LinWanLeii"},"content":"    public void showUnknownCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(lineBreak + UNKNOWN_COMMAND + lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LinWanLeii"},"content":"    public void showDateFormatError(DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"☹ OOPS!!! The description of a time must be in yyyy-mm-dd\");","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LinWanLeii"},"content":"    public void showInvalidDescription(String taskType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"☹ OOPS!!! The description of a \" + taskType + \" is invalid.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will print out the error.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LinWanLeii"},"content":"     * @param e the error code produced.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LinWanLeii"},"content":"    public void showError(String e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(e);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will show task being added.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task to add.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LinWanLeii"},"content":"     * @param userList the TaskList to add to.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LinWanLeii"},"content":"    public void showTaskAdded(Task task, TaskList userList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + task);","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LinWanLeii"},"content":"        int size \u003d userList.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will greet the user at the start.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"LinWanLeii"},"content":"    public void showGreetings() {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(lineBreak + \"Hello! I\u0027m \" + NAME);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"LinWanLeii"},"content":"        System.out.printf(\"What can I do for you?\" + lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will show that a task is marked.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task being marked.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LinWanLeii"},"content":"    public void showMarkedTask(Task task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\\t\" + task);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will show that a task is unmarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LinWanLeii"},"content":"     * @param task the task being unmarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LinWanLeii"},"content":"    public void showUnMarkedTask(Task task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"OK, I\u0027ve unmarked this task as not done yet: \\n\\t\" + task);","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"LinWanLeii"},"content":"     * A method to show that a task is deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"LinWanLeii"},"content":"     * @param task task being deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"LinWanLeii"},"content":"     * @param userList where task is deleted from.","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LinWanLeii"},"content":"    public void showDeleteTask(Task task, TaskList userList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + task);","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Now you have \" + userList.size() + \" tasks in the list\");","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"LinWanLeii"},"content":"     * A method that shows that the task is cleared.","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"LinWanLeii"},"content":"    public void showClearTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Noted. I\u0027ve removed all the tasks.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"LinWanLeii"},"content":"     * A method that will show all the task in the list\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"LinWanLeii"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"LinWanLeii"},"content":"     * @param userList where the task is from.","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"LinWanLeii"},"content":"    public void showList(TaskList userList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"LinWanLeii"},"content":"        //System.out.println(lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"LinWanLeii"},"content":"        for (int i \u003d 0; i \u003c userList.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"LinWanLeii"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"LinWanLeii"},"content":"            System.out.println(index + \".\" + userList.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"LinWanLeii"},"content":"        //System.out.println(lineBreak);","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"LinWanLeii"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"LinWanLeii"},"content":"     * A method to say BYE.","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"LinWanLeii"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"LinWanLeii"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"LinWanLeii"},"content":"        System.out.print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"LinWanLeii"},"content":"    public void closeScanner() {","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"LinWanLeii"},"content":"        scanner.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"LinWanLeii"},"content":"    public void showFoundResults(TaskList foundList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"LinWanLeii"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"LinWanLeii"},"content":"        for (int i \u003d 0; i \u003c foundList.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"LinWanLeii"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"LinWanLeii"},"content":"            System.out.println(index + \".\" + foundList.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":154}},{"path":"src/test/java/seedu/duke/FileStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package seedu.duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import filestorage.FileStorage;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"public class FileStorageTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"    public void testingFileSuccess() {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"        FileStorage storage \u003d new FileStorage(\"testing.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"            assertEquals(storage.read().size(), 6);","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"    public void emptyFile_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"        FileStorage storage \u003d new FileStorage(\"nothing.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"            assertEquals(storage.read().size(), 0);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LinWanLeii"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":32}},{"path":"src/test/java/seedu/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"package seedu.duke;  //same package as the class being tested","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LinWanLeii"},"content":"import dukeexception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"LinWanLeii"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"LinWanLeii"},"content":"import tasks.Todo;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"LinWanLeii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LinWanLeii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LinWanLeii"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LinWanLeii"},"content":"public class TaskTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LinWanLeii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LinWanLeii"},"content":"    public void simpleToDoTest(){","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LinWanLeii"},"content":"        String str \u003d new Todo(\"book\").toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LinWanLeii"},"content":"        assertEquals(str,\"  [T][ ] book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LinWanLeii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LinWanLeii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LinWanLeii"},"content":"    public void exceptionTest() throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LinWanLeii"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LinWanLeii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LinWanLeii"},"content":"            Parser.parse(\"deadline book /by 10\");","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LinWanLeii"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LinWanLeii"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LinWanLeii"},"content":"            assertEquals(e.getMessage(), \"☹ OOPS!!! The description of a time must be in yyyy-mm-dd\");","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LinWanLeii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LinWanLeii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LinWanLeii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LinWanLeii":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LinWanLeii"},"content":"T | 0 | read book","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LinWanLeii"},"content":"T | 1 | join sports club","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LinWanLeii":2}}]
