[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shashahchk":5,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    archiveFileName\u003d\"duke.jar\"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shashahchk":2,"-":42}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"T | 0 | eat","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"shashahchk":1}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"T | 0 | eat","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":1}},{"path":"src/main/java/Duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import core.Duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Deadlines;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Events;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.ToDos;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"import core.Duke.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    public CommandType getCommandType(String userCommand) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        if (\"bye\".equals(userCommand)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.BYE;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"        } else if (\"list\".equals(userCommand)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.LIST;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"delete \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.DELETE;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"mark \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.MARK;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"unmark \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.UNMARK;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"todo \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.TODO;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"deadline \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.DEADLINE;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"event \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.EVENT;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"find\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"            return CommandType.FIND;","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"            return Duke.CommandType.UNKNOWN;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    public Task parseTaskFromFile(String line) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"        for (int i \u003d 0; i \u003c parts.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"            parts[i] \u003d parts[i].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"        boolean isCompleted \u003d \"1\".equals(parts[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime date \u003d (parts.length \u003e\u003d 4 \u0026\u0026 !parts[3].isEmpty()) ? LocalDateTime.parse(parts[3], formatter)","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"                : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime startDate \u003d (parts.length \u003e\u003d 5 \u0026\u0026 !parts[4].isEmpty()) ? LocalDateTime.parse(parts[4], formatter)","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"                : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime endDate \u003d (parts.length \u003d\u003d 6 \u0026\u0026 !parts[5].isEmpty()) ? LocalDateTime.parse(parts[5], formatter)","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"                : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"            switch (taskType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"                case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new ToDos(description, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"                case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new Deadlines(description, date, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"                case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new Events(description, startDate, endDate, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"Invalid task format.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"        return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"    public Duke.TaskType getTaskType(String str) {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"        if (str.startsWith(\"T\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"            return Duke.TaskType.TODO;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"        } else if (str.startsWith(\"D\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"            return Duke.TaskType.DEADLINE;","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"        } else if (str.startsWith(\"E\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"            return Duke.TaskType.EVENT;","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"            return Duke.TaskType.UNKNOWN;","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"    public Task parseTaskFromCommand(String userCommand) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"        String commandType \u003d parts[0].toLowerCase();","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"shashahchk"},"content":"        Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"shashahchk"},"content":"        switch (commandType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"shashahchk"},"content":"            case \"event\":","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"shashahchk"},"content":"                if (parts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Description for the event cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"shashahchk"},"content":"                String[] eventParts \u003d parts[1].split(\" /from \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"shashahchk"},"content":"                if (eventParts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Event timing is missing.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"shashahchk"},"content":"                String[] eventTimes \u003d eventParts[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"shashahchk"},"content":"                if (eventTimes.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"End time for event is missing.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"shashahchk"},"content":"                LocalDateTime fromDate \u003d LocalDateTime.parse(eventTimes[0], formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"shashahchk"},"content":"                LocalDateTime toDate \u003d LocalDateTime.parse(eventTimes[1], formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"shashahchk"},"content":"                task \u003d new Events(eventParts[0], fromDate, toDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"shashahchk"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"shashahchk"},"content":"                if (parts.length \u003c 2 || parts[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Description for the todo cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"shashahchk"},"content":"                task \u003d new ToDos(parts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"shashahchk"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"shashahchk"},"content":"                if (parts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Description for the deadline cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"shashahchk"},"content":"                String[] deadlineParts \u003d parts[1].split(\" /by \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"shashahchk"},"content":"                if (deadlineParts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Deadline timing is missing.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"shashahchk"},"content":"                LocalDateTime deadlineDate \u003d LocalDateTime.parse(deadlineParts[1], formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"shashahchk"},"content":"                task \u003d new Deadlines(deadlineParts[0], deadlineDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"shashahchk"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"Invalid command. Please enter a valid task type.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"shashahchk"},"content":"        return task; ","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"shashahchk"},"content":"    public TaskList parseMatchingTasks(String userCommand, TaskList allTasks) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"shashahchk"},"content":"        if (userCommand \u003d\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"Please input a valid command.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"shashahchk"},"content":"        if (parts.length \u003c 2 || parts[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"shashahchk"},"content":"            return new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"shashahchk"},"content":"        String keyword \u003d parts[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"shashahchk"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"shashahchk"},"content":"        for (Task task : allTasks.getTasks()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"shashahchk"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"shashahchk"},"content":"                matchingTasks.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"shashahchk"},"content":"        return matchingTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":168}},{"path":"src/main/java/Duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Deadlines;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Events;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.ToDos;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    public static String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        Storage.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"    public List\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"            return loadFromFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"Data file not found. Starting with an empty task list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"An error occurred while loading the data.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    public void updateData(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"            saveToFile(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"An error occurred while saving tasks.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"    public List\u003cTask\u003e loadFromFile(String filename) throws FileNotFoundException {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"            Scanner scanner \u003d new Scanner(new File(filename));","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"                if (!isValidFormat(line)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Data file is corrupted. Line not in expected format: \" + line);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d parseTask(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"            scanner.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Data file not found. Starting with an empty task list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"        return tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"    public boolean isValidFormat(String line) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"        return line.matches(\"^[TDE] \\\\| [01] \\\\| .+\");","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"    public Task parseTask(String line) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"        // Trim spaces for each part","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"        for (int i \u003d 0; i \u003c parts.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"            parts[i] \u003d parts[i].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"        // Extract fields","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"        boolean isCompleted \u003d \"1\".equals(parts[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime date \u003d (parts.length \u003e\u003d 4 \u0026\u0026 !parts[3].isEmpty()) ? LocalDateTime.parse(parts[3], formatter) : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime startDate \u003d (parts.length \u003e\u003d 5 \u0026\u0026 !parts[4].isEmpty()) ? LocalDateTime.parse(parts[4], formatter) : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime endDate \u003d (parts.length \u003d\u003d 6 \u0026\u0026 !parts[5].isEmpty()) ? LocalDateTime.parse(parts[5], formatter) : null;","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"            switch (taskType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"shashahchk"},"content":"                case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new ToDos(description, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"shashahchk"},"content":"                case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new Deadlines(description, date, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"shashahchk"},"content":"                case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"shashahchk"},"content":"                    System.out.println(endDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"shashahchk"},"content":"                    task \u003d new Events(description, startDate, endDate, isCompleted);","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"shashahchk"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"Invalid task format.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"shashahchk"},"content":"        return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"shashahchk"},"content":"    public void saveToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"shashahchk"},"content":"        File directory \u003d new File(\"./data\");","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"shashahchk"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"shashahchk"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"shashahchk"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath)) { // Using try-with-resources for automatic closure of","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"shashahchk"},"content":"                                                              // writer","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"shashahchk"},"content":"            for (Task task : tasks.getTasks()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"shashahchk"},"content":"                writer.write(taskToFileString(task) + \"\\n\"); // Convert each task to its file string representation","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"shashahchk"},"content":"    public String taskToFileString(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"shashahchk"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"shashahchk"},"content":"        if (task instanceof ToDos) {","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"T | \");","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Deadlines) {","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"D | \");","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Events) {","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"E | \");","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"shashahchk"},"content":"        sb.append(task.isCompleted() ? \"1\" : \"0\").append(\" | \");","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"shashahchk"},"content":"        sb.append(task.getDescription());","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"shashahchk"},"content":"        if (task instanceof Deadlines) {","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"shashahchk"},"content":"            sb.append(\" | \").append(((Deadlines) task).getDate().format(outputFormatter));","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Events) {","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"shashahchk"},"content":"            sb.append(\" | \").append(((Events) task).getStartDate().format(outputFormatter))","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"shashahchk"},"content":"                    .append(\" | \").append(((Events) task).getEndDate().format(outputFormatter));","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"shashahchk"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":158}},{"path":"src/main/java/Duke/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":" * Represents a deadline-based task.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":" * A Deadlines object is a task with a deadline represented by a description and","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":" * a date.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"     * Initializes a new instance of the Deadlines class with a given description","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"     * and date.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"     * @param date        Date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if the provided description or date is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    public Deadlines(String description, LocalDateTime date) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of deadline cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"date of deadline cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"     * Constructor that creates Deadlines object with three parameters.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"     * @param description description of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"     * @param date Date of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"     * @param isCompleted boolean status representing whether task is isisCompleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"    public Deadlines(String description, LocalDateTime date, boolean isCompleted) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of deadline cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"date of deadline cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"     * Gets the date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"     * @return The date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"        return this.date;","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the type of the task. For Deadlines, it returns","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"     *         \"D\".","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"        return \"D\";","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"     * Gets a formatted string representation of the Deadlines task.","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the Deadlines task, including its type,","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"     *         completion status, description, and date.","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"        String isCompleted \u003d this.isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + this.getType() + \"]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\");","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"        String byMessage \u003d \"by: \" + getDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"        return taskType + isCompleted + this.getDescription() + \"(\" + byMessage + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":89}},{"path":"src/main/java/Duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":" * Represents an event task with a specified start and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":" * An Events object is described by a description, start date, and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"public class Events extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime startDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime endDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"     * Initializes a new instance of the Events class with the given description, start date, and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"     * @param startDate Start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"     * @param endDate End date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if the provided description, start date, or end date is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    public Events(String description, LocalDateTime startDate, LocalDateTime endDate)","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"start date of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"end date of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"    public Events(String description, LocalDateTime startDate, LocalDateTime endDate, boolean isCompleted)","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"start date of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"end date of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"     * @return Start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getStartDate() {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"        return this.startDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the end date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"     * @return End date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getEndDate() {","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"        return this.endDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"     * @return A string indicating the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"        return \"E\";","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"     * Gets a formatted string representation of the Events task.","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the Events task.","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"        String isCompleted \u003d this.isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + this.getType() + \"]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\");","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"        String fromDateString \u003d getStartDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"        String fromMessage \u003d \"from: \" + fromDateString;","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"shashahchk"},"content":"        String toDateString \u003d getEndDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"shashahchk"},"content":"        String toMessage \u003d \"to: \" + toDateString;","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"shashahchk"},"content":"        return taskType + isCompleted + this.getDescription() + \"(\" + fromMessage + \" \" + toMessage + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":100}},{"path":"src/main/java/Duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":" * Represents a general task with a description and completion status.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"    protected boolean isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"    private final String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * Creates a new task with a given description.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"     * @param description The task\u0027s description.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d false;  // Tasks are unisCompleted by default","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"    public Task(String description, boolean isCompleted) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"     * Checks if the task is isCompleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"     * @return true if isCompleted, otherwise false.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        return this.isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the task\u0027s description.","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"     * @return The description.","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"        return this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"     * Toggles the completion status of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"    public void toggleCompleted() {","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d !this.isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"     * Provides a type identifier for the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"     * Since this is a general task, it returns an empty string.","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"     * @return Type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"        return \"\";","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"     * Offers a formatted string showing the task\u0027s type, completion status, and description.","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"     * @return Formatted string of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"        String completionStatus \u003d  isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + getType() + \"]\";","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"        return taskType + completionStatus + description;","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":71}},{"path":"src/main/java/Duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"    public int size() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        return taskList.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    public Task deleteTask(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        return taskList.remove(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"        return taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":35}},{"path":"src/main/java/Duke/tasks/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import Duke.parser.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":" * Manages tasks, handling operations like adding, deleting, etc.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"public class TaskManager {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"    private Parser p \u003d new Parser();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     * Constructs a TaskManager with a given TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"     * @param tasks TaskList to manage.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"    public TaskManager(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"     * Default constructor. Initializes an empty TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    public TaskManager() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"     * Deletes a task based on the given user command.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand Command to specify which task to delete.","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"     * @return Result of the delete operation.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"    public String handleDelete(String userCommand) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"        Task removedTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"            if (parts.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid delete command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"            int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"            if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid delete command (this task number does not exist)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"            removedTask \u003d tasks.deleteTask(num - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"            return \"Noted. I\u0027ve removed this task:\" + removedTask.toString() + updateNumMessage(tasks.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"            return e.getMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"     * Constructs a message indicating the current number of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"     * @param numTasks The current number of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"     * @return A formatted message indicating the count of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"    private String updateNumMessage(int numTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"        return \"\\n Now you have \" + numTasks + \" task(s) in the list\";","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"     * Marks a task as completed based on the given user command.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand Command to specify which task to mark as completed.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"     * @return Result of the mark operation.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"    public String handleMark(String userCommand) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"                int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"                if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"invalid mark command (task number does not exist)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d tasks.getTask(num - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"                task.toggleCompleted();","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"                return \"Nice! I\u0027ve marked this task as done:\" + task;","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid mark command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"           return e.getMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"     * Reverts a task to its incomplete status based on the given user command.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand Command to specify which task to unmark.","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"     * @return Result of the unmark operation.","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"    public String handleUnmark(String userCommand) {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"            String[] parts \u003d userCommand.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"shashahchk"},"content":"                int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"shashahchk"},"content":"                if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"invalid mark command (task number does not exist)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d tasks.getTask(num - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"shashahchk"},"content":"                task.toggleCompleted();","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"shashahchk"},"content":"                return \"Okay. I see you haven\u0027t done this task yet\" + (task);","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"shashahchk"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid unmark command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"shashahchk"},"content":"            return  e.getMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"shashahchk"},"content":"     * Adds a task based on the given user command.","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand Command describing the task to add.","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"shashahchk"},"content":"     * @return Result of the add operation.","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"shashahchk"},"content":"    public String addTask(String userCommand) {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"shashahchk"},"content":"            Task task \u003d p.parseTaskFromCommand(userCommand);","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"shashahchk"},"content":"            tasks.addTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"shashahchk"},"content":"            return \"Got it I have added this task:\" + \"\\n\" + task + updateNumMessage(tasks.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"shashahchk"},"content":"            return e.getMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"shashahchk"},"content":"    public String findTasks(String userCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"shashahchk"},"content":"        StringBuilder msg \u003d new StringBuilder();","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"shashahchk"},"content":"            TaskList matchingTasks \u003d p.parseMatchingTasks(userCommand, tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"shashahchk"},"content":"            if (matchingTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"shashahchk"},"content":"                return \"No matching tasks.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"shashahchk"},"content":"            msg.append(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"shashahchk"},"content":"            for (Task task : matchingTasks.getTasks()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"shashahchk"},"content":"                msg.append(\"\\n\").append(task.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"shashahchk"},"content":"            return e.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"shashahchk"},"content":"        return msg.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":144}},{"path":"src/main/java/Duke/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":" * Represents a ToDo task without a specific deadline or event date.","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":" * A ToDo task is represented by a description.","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * Creates a new ToDo task with the given description.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"     * @param description The description of ToDo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException If the description is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"    public ToDos(String description) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"OOPS! The description of ToDo cannot be empty!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    public ToDos(String description, boolean isCompleted) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"OOPS! The description of ToDo cannot be empty!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"     * Indicates that this task is of type \"T\".","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"     * @return The string \"T\" representing a ToDo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        return \"T\";","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":40}},{"path":"src/main/java/Duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"    private static final String horizontal_line \u003d \"_________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"    public Ui() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        handleStart();","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"    public String readUserCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"      /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"     * Initialises and displays the welcome message for the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    public static void handleStart() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        String welcomeMessage \u003d horizontal_line +","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"                \"\\nHello! I\u0027m Blob\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"                \"What can I do for you?\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"                horizontal_line;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        System.out.println(welcomeMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"        String welcomeMessage \u003d horizontal_line +","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"                                \" Hello! I\u0027m Blob\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"                                \" What can I do for you?\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"                                horizontal_line;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"        System.out.println(welcomeMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"        scanner.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"Bye. Come talk to Blob again soon!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"        System.out.println(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"    public void showTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"        System.out.println(tasks.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"here are the tasks in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"            Task task \u003d tasks.getTask(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"            System.out.println((i + 1) + \". \" + task);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"        System.out.println(message + \"\\n\" + horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"Error loading tasks.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"    public void showUpdateNumTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"    public void showAddTask(Task currTask) {","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"Got it I have added this task:\" + \"\\n\" + currTask + \"\\n\" + horizontal_line);","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"    // ... Add more methods for other interactions like showing added tasks, etc.","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"shashahchk":79}},{"path":"src/main/java/core/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package core;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import Duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import Duke.parser.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import Duke.tasks.*;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import Duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"    private TaskManager tm;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    public enum CommandType {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        LIST,","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"        TODO,","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        EVENT,","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        DELETE,","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"        MARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        UNMARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        BYE,","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        FIND,","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"        UNKNOWN","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"    public enum TaskType {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"        TODO,","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        EVENT,","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        UNKNOWN","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"        storage \u003d new Storage(filePath);  ","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        tm \u003d new TaskManager(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        while (isRunning) {","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"            String userCommand \u003d ui.readUserCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"            Parser p \u003d new Parser();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"            CommandType commandType \u003d p.getCommandType(userCommand);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"            switch (commandType) {","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"                case LIST:","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"                    ui.showTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"                case BYE:","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"                    ui.showGoodbye();","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"                    storage.updateData(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"                    isRunning \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"                case DELETE:","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"                    ui.showMessage(tm.handleDelete(userCommand));","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"                case MARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"                    ui.showMessage(tm.handleMark(userCommand));","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"                    ui.showMessage(tm.handleUnmark(userCommand));","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"                case EVENT:","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"                    case TODO:","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"                    ui.showMessage(tm.addTask(userCommand));","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"                case FIND:","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"                    ui.showMessage(tm.findTasks(userCommand));","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"                case UNKNOWN:","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"                    ui.showError(\"unknown command.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"                    break;    ","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"shashahchk":84,"-":3}},{"path":"src/main/java/core/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package core;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":" * Represents a custom exception for Duke application.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":" * This exception is thrown when Duke-specific conditions are violated.","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"     * Constructs a new DukeException with the specified message.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * @param message The detail message.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"shashahchk":16}},{"path":"src/test/java/Duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     * Tests the creation of an Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"     * Ensures that when an event is created with a specific description,","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"     * the getDescription method returns the correct description.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if there is an error during event creation.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    public void eventCreation() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime fromDateTime \u003d LocalDateTime.parse(\"2023-09-01 05:00\", formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime toDateTime \u003d LocalDateTime.parse(\"2023-10-01 06:00\", formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"        Events e \u003d new Events(\"Table tennis\", fromDateTime, toDateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"        assertEquals(\"Table tennis\", e.getDescription());","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"shashahchk":29}},{"path":"src/test/java/Duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"package Duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import core.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"     * Tests the creation of a Todos.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * Ensures that new event has correct description and is unmarked.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if there is an error during creation.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"    public void testTodoCreation() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        ToDos todo \u003d new ToDos(\"Sample Task\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"        assertEquals(\"Sample Task\", todo.getDescription());","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        assertFalse(todo.isCompleted(), \"New todo should not be marked as done\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"     * Tests the creation of a Todos.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"     * Ensures that exception is thrown if empty description in creation of Todos.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    public void testToDoCreationWithInvalidInput() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"            new ToDos(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"shashahchk":33}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"todo eat food","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"event table tennis /from 2 pm /to 4 pm","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"deadline submit hw /by 29 August","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"event interfaculty games /from 9 am /to 7 pm","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"todo run 2 miles","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"mark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"mark 10","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"blah","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"shashahchk":15}}]
