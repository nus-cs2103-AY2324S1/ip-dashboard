[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"shashahchk":5,"-":24}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"T | 0 | eat","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"T | 0 | eat","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"shashahchk":2}},{"path":"src/main/java/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":" * Represents a deadline-based task.","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":" * A Deadlines object is a task with a deadline represented by a description and a date.","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     * Initializes a new instance of the Deadlines class with a given description and date.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"     * @param date Date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if the provided description or date is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"    public Deadlines(String description, LocalDateTime date) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of deadline cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"date of deadline cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"        this.date\u003d date;","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"    public Deadlines(String description, LocalDateTime date, boolean completed) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of deadline cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"date of deadline cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"        this.date\u003d date;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"     * Gets the date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"     * @return The date of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getDate(){","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        return this.date;","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the type of the task. For Deadlines, it returns \"D\".","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"    public String getType(){","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"        return \"D\";","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"     * Gets a formatted string representation of the Deadlines task.","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the Deadlines task, including its type, completion status, description, and date.","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"@Override","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"        String completed \u003d this.isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + this.getType() + \"]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\");","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"        String byMessage \u003d \"by: \" + getDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"        return  taskType + completed + this.getDescription() + \"(\" + byMessage + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":73}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"import java.util.List;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    static String FILE_NAME \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"    public enum CommandType {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"        LIST,","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"        TODO,","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"        EVENT,","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"        DELETE,","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        MARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        UNMARK,","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        BYE,","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"        UNKNOWN","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"    public enum TaskType {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"        TODO,","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        EVENT,","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        UNKNOWN","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    static String horizontal_line \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"     * The main  method for the Duke application.","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"     * It initializes the task list and listens for user commands,","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"     * handling them appropriately based on their type.","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        List\u003cTask\u003e tasks \u003d loadData();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"        handleStart();","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"        while (isRunning) {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"            String userCommand \u003d scanner.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"            CommandType commandType \u003d getCommandType(userCommand);","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"            switch(commandType) {","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"                case LIST:","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"                    handleList(tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"                case BYE:","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"                    handleBye(scanner);","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"                    updateData(tasks);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"                    isRunning \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"                case DELETE:","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"                    handleDelete(userCommand,tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"                case MARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"                    handleMark(userCommand, tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"                    handleUnmark(userCommand, tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"                case EVENT:","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"                    handleEvent(userCommand, tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"                    handleDeadline(userCommand, tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"                case TODO:","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"                    handleTodo(userCommand, tasks);","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"                case UNKNOWN:","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"                    handleUnknown();","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"     * Determines type of command entered by the user.","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The command string entered by the user.","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"     * @return The type of command.","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"    public static CommandType getCommandType(String userCommand) {","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"        if (\"bye\".equals(userCommand)) {","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"            return CommandType.BYE;","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"        } else if (\"list\".equals(userCommand)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"            return CommandType.LIST;","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"delete \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"mark \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"shashahchk"},"content":"           return CommandType.MARK;","lastModifiedDate":"2023-08-24"},{"lineNumber":98,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"unmark \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"shashahchk"},"content":"            return CommandType.UNMARK;","lastModifiedDate":"2023-08-24"},{"lineNumber":100,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"todo \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":101,"author":{"gitId":"shashahchk"},"content":"            return CommandType.TODO;","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"deadline \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":103,"author":{"gitId":"shashahchk"},"content":"            return CommandType.DEADLINE;","lastModifiedDate":"2023-08-24"},{"lineNumber":104,"author":{"gitId":"shashahchk"},"content":"        } else if (userCommand.startsWith(\"event \")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":105,"author":{"gitId":"shashahchk"},"content":"            return CommandType.EVENT;","lastModifiedDate":"2023-08-24"},{"lineNumber":106,"author":{"gitId":"shashahchk"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":107,"author":{"gitId":"shashahchk"},"content":"            return CommandType.UNKNOWN;","lastModifiedDate":"2023-08-24"},{"lineNumber":108,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"shashahchk"},"content":"    public static List\u003cTask\u003e loadData() {","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"shashahchk"},"content":"        List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"shashahchk"},"content":"            tasks \u003d loadFromFile(FILE_NAME);","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"shashahchk"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"shashahchk"},"content":"            tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"shashahchk"},"content":"        return tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"shashahchk"},"content":"    public static void updateData(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"shashahchk"},"content":"            saveToFile(tasks);","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"shashahchk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"An error occured while saving tasks.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"shashahchk"},"content":"    public static void saveToFile(List\u003cTask\u003e tasks) throws IOException{","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"shashahchk"},"content":"        File directory \u003d new File(\"./data\");","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"shashahchk"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"shashahchk"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"shashahchk"},"content":"        try (FileWriter writer \u003d new FileWriter(FILE_NAME)) {  // Using try-with-resources for automatic closure of writer","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"shashahchk"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"shashahchk"},"content":"                writer.write(taskToFileString(task) + \"\\n\");  // Convert each task to its file string representation","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"shashahchk"},"content":"    public static String taskToFileString(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"shashahchk"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"shashahchk"},"content":"        if (task instanceof ToDos) {","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"T | \");","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Deadlines) {","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"D | \");","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Events) {","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"shashahchk"},"content":"            sb.append(\"E | \");","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"shashahchk"},"content":"        sb.append(task.isCompleted() ? \"1\" : \"0\").append(\" | \");","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"shashahchk"},"content":"        sb.append(task.getDescription());","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"shashahchk"},"content":"        if (task instanceof Deadlines) {","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"shashahchk"},"content":"            sb.append(\" | \").append(((Deadlines) task).getDate());","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"shashahchk"},"content":"        } else if (task instanceof Events) {","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"shashahchk"},"content":"            sb.append(\" | \").append(((Events) task).getStartDate()).append(\" | \").append(((Events) task).getEndDate());","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"shashahchk"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"shashahchk"},"content":"    public static List\u003cTask\u003e loadFromFile(String filename) throws FileNotFoundException {","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"shashahchk"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"shashahchk"},"content":"            Scanner scanner \u003d new Scanner(new File(filename));","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"shashahchk"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"shashahchk"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"shashahchk"},"content":"                ","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"shashahchk"},"content":"                if (!isValidFormat(line)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"Data file is corrupted. Line not in expected format: \" + line);","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d parseTask(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"shashahchk"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"shashahchk"},"content":"            scanner.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"shashahchk"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Data file not found. Starting with an empty task list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"shashahchk"},"content":"        return tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"shashahchk"},"content":"    public static boolean isValidFormat(String line) {","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"shashahchk"},"content":"        return line.matches(\"^[TDE] \\\\| [01] \\\\| .+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"shashahchk"},"content":"    public TaskType getTaskType(String str) {","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"shashahchk"},"content":"        if (str.startsWith(\"T\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"shashahchk"},"content":"            return TaskType.TODO;","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"shashahchk"},"content":"        } else if (str.startsWith(\"D\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"shashahchk"},"content":"            return TaskType.DEADLINE;","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"shashahchk"},"content":"        } else if (str.startsWith(\"E\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"shashahchk"},"content":"            return TaskType.EVENT;","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"shashahchk"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"shashahchk"},"content":"            return TaskType.UNKNOWN;","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":204,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":206,"author":{"gitId":"shashahchk"},"content":"    public static Task parseTask(String line) throws DukeException{","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":209,"author":{"gitId":"shashahchk"},"content":"        // Trim spaces for each part","lastModifiedDate":"2023-08-29"},{"lineNumber":210,"author":{"gitId":"shashahchk"},"content":"        for (int i \u003d 0; i \u003c parts.length; i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":211,"author":{"gitId":"shashahchk"},"content":"            parts[i] \u003d parts[i].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":213,"author":{"gitId":"shashahchk"},"content":"        ","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"shashahchk"},"content":"        // Extract fields","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"shashahchk"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"shashahchk"},"content":"        boolean completed \u003d \"1\".equals(parts[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"shashahchk"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":219,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime date \u003d (parts.length \u003e\u003d 4 \u0026\u0026 !parts[3].isEmpty()) ? LocalDateTime.parse(parts[3]) : null; ","lastModifiedDate":"2023-08-29"},{"lineNumber":220,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime startDate \u003d (parts.length \u003e\u003d 5 \u0026\u0026 !parts[4].isEmpty()) ? LocalDateTime.parse(parts[4]) : null;","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"shashahchk"},"content":"        LocalDateTime endDate \u003d (parts.length \u003d\u003d 6 \u0026\u0026 !parts[5].isEmpty()) ? LocalDateTime.parse(parts[5]) : null;","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"shashahchk"},"content":"        ","lastModifiedDate":"2023-08-29"},{"lineNumber":223,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"shashahchk"},"content":"            switch(taskType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"shashahchk"},"content":"            case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"shashahchk"},"content":"                task \u003d new ToDos(description, completed);","lastModifiedDate":"2023-08-29"},{"lineNumber":227,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":228,"author":{"gitId":"shashahchk"},"content":"        ","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"shashahchk"},"content":"            case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":230,"author":{"gitId":"shashahchk"},"content":"                task \u003d new Deadlines(description, date, completed);","lastModifiedDate":"2023-08-29"},{"lineNumber":231,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":232,"author":{"gitId":"shashahchk"},"content":"        ","lastModifiedDate":"2023-08-29"},{"lineNumber":233,"author":{"gitId":"shashahchk"},"content":"            case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":234,"author":{"gitId":"shashahchk"},"content":"                task \u003d new Events(description, startDate, endDate, completed);","lastModifiedDate":"2023-08-29"},{"lineNumber":235,"author":{"gitId":"shashahchk"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":236,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":237,"author":{"gitId":"shashahchk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":238,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":239,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":240,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":241,"author":{"gitId":"shashahchk"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":242,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"Invalid task format.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":243,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":244,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":245,"author":{"gitId":"shashahchk"},"content":"        return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":246,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":247,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":248,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":249,"author":{"gitId":"shashahchk"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":250,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":251,"author":{"gitId":"shashahchk"},"content":"     * Generates a message showing number of tasks in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":252,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":253,"author":{"gitId":"shashahchk"},"content":"     * @param numTasks The number of tasks currently in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":254,"author":{"gitId":"shashahchk"},"content":"     * @return The formatted message.","lastModifiedDate":"2023-08-24"},{"lineNumber":255,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":256,"author":{"gitId":"shashahchk"},"content":"    public static String updateNumMessage(String numTasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":257,"author":{"gitId":"shashahchk"},"content":"        return \"Now you have \" + numTasks + \" task(s) in the list\";","lastModifiedDate":"2023-08-24"},{"lineNumber":258,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":259,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":260,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":261,"author":{"gitId":"shashahchk"},"content":"     * Handles cases when the user provides an unrecognized command.","lastModifiedDate":"2023-08-24"},{"lineNumber":262,"author":{"gitId":"shashahchk"},"content":"     * Outputs an error message to inform the user that the command is unknown.","lastModifiedDate":"2023-08-24"},{"lineNumber":263,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":264,"author":{"gitId":"shashahchk"},"content":"    public static void handleUnknown() {","lastModifiedDate":"2023-08-24"},{"lineNumber":265,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"unknown command\");","lastModifiedDate":"2023-08-24"},{"lineNumber":266,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":267,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":268,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":269,"author":{"gitId":"shashahchk"},"content":"     * Displays the list of tasks to the user.","lastModifiedDate":"2023-08-24"},{"lineNumber":270,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":271,"author":{"gitId":"shashahchk"},"content":"     * @param tasks A list of tasks to be displayed.","lastModifiedDate":"2023-08-24"},{"lineNumber":272,"author":{"gitId":"shashahchk"},"content":"     * Each task is enumerated starting from 1 and printed using its string representation.","lastModifiedDate":"2023-08-24"},{"lineNumber":273,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":274,"author":{"gitId":"shashahchk"},"content":"    public static void handleList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":275,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-23"},{"lineNumber":276,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\"here are the tasks in your list:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":277,"author":{"gitId":"shashahchk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-24"},{"lineNumber":278,"author":{"gitId":"shashahchk"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-08-24"},{"lineNumber":279,"author":{"gitId":"shashahchk"},"content":"            System.out.println((i + 1) + \". \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":280,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":281,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-23"},{"lineNumber":282,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":283,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":284,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":285,"author":{"gitId":"shashahchk"},"content":"     * Handles the deletion of a task from the list based on the user command.","lastModifiedDate":"2023-08-24"},{"lineNumber":286,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":287,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The command given by the user to delete a task.","lastModifiedDate":"2023-08-24"},{"lineNumber":288,"author":{"gitId":"shashahchk"},"content":"     * @param tasks A list of tasks from which a task will be deleted.","lastModifiedDate":"2023-08-24"},{"lineNumber":289,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":290,"author":{"gitId":"shashahchk"},"content":"    public static void handleDelete(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":291,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":292,"author":{"gitId":"shashahchk"},"content":"        Task removedTask;","lastModifiedDate":"2023-08-24"},{"lineNumber":293,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":294,"author":{"gitId":"shashahchk"},"content":"            if (parts.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":295,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid delete command\");","lastModifiedDate":"2023-08-24"},{"lineNumber":296,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":297,"author":{"gitId":"shashahchk"},"content":"            int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-24"},{"lineNumber":298,"author":{"gitId":"shashahchk"},"content":"            if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":299,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid delete command (this task number does not exist)\");","lastModifiedDate":"2023-08-24"},{"lineNumber":300,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":301,"author":{"gitId":"shashahchk"},"content":"            removedTask \u003d tasks.remove(num - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":302,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":303,"author":{"gitId":"shashahchk"},"content":"            System.out.println(removedTask.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":304,"author":{"gitId":"shashahchk"},"content":"            System.out.println(updateNumMessage(String.valueOf(tasks.size())));","lastModifiedDate":"2023-08-24"},{"lineNumber":305,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":306,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":307,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":308,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":309,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":310,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":311,"author":{"gitId":"shashahchk"},"content":"     * Handles the marking of a task as completed based on the user command.","lastModifiedDate":"2023-08-24"},{"lineNumber":312,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":313,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The command given by the user to mark a task as completed.","lastModifiedDate":"2023-08-24"},{"lineNumber":314,"author":{"gitId":"shashahchk"},"content":"     * @param tasks A list of tasks from which a specific task will be marked as completed.","lastModifiedDate":"2023-08-24"},{"lineNumber":315,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":316,"author":{"gitId":"shashahchk"},"content":"    public static void handleMark(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":317,"author":{"gitId":"shashahchk"},"content":"        String[] parts \u003d userCommand.split(\" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":318,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":319,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":320,"author":{"gitId":"shashahchk"},"content":"                int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":321,"author":{"gitId":"shashahchk"},"content":"                if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":322,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"invalid mark command (task number does not exist)\");","lastModifiedDate":"2023-08-24"},{"lineNumber":323,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":324,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d tasks.get(num - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":325,"author":{"gitId":"shashahchk"},"content":"                task.toggleCompleted();","lastModifiedDate":"2023-08-23"},{"lineNumber":326,"author":{"gitId":"shashahchk"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":327,"author":{"gitId":"shashahchk"},"content":"                System.out.println(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":328,"author":{"gitId":"shashahchk"},"content":"            } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":329,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid mark command\");","lastModifiedDate":"2023-08-24"},{"lineNumber":330,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":331,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":332,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":333,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":334,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":335,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":336,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":337,"author":{"gitId":"shashahchk"},"content":"     * Handles the unmarking of a task, reverting its status to not completed based on the user command.","lastModifiedDate":"2023-08-24"},{"lineNumber":338,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":339,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The command given by the user to unmark a task.","lastModifiedDate":"2023-08-24"},{"lineNumber":340,"author":{"gitId":"shashahchk"},"content":"     * @param tasks A list of tasks from which a specific task will be unmarked.","lastModifiedDate":"2023-08-24"},{"lineNumber":341,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":342,"author":{"gitId":"shashahchk"},"content":"    public static void handleUnmark(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":343,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":344,"author":{"gitId":"shashahchk"},"content":"            String[] parts \u003d userCommand.split(\" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":345,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":346,"author":{"gitId":"shashahchk"},"content":"                int num \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":347,"author":{"gitId":"shashahchk"},"content":"                if (num \u003e tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":348,"author":{"gitId":"shashahchk"},"content":"                    throw new DukeException(\"invalid mark command (task number does not exist)\");","lastModifiedDate":"2023-08-24"},{"lineNumber":349,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":350,"author":{"gitId":"shashahchk"},"content":"                Task task \u003d tasks.get(num - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":351,"author":{"gitId":"shashahchk"},"content":"                task.toggleCompleted();","lastModifiedDate":"2023-08-23"},{"lineNumber":352,"author":{"gitId":"shashahchk"},"content":"                System.out.println(\"Okay. I see you haven\u0027t done this task yet\");","lastModifiedDate":"2023-08-23"},{"lineNumber":353,"author":{"gitId":"shashahchk"},"content":"                System.out.println(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":354,"author":{"gitId":"shashahchk"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":355,"author":{"gitId":"shashahchk"},"content":"                throw new DukeException(\"invalid unmark command\");","lastModifiedDate":"2023-08-24"},{"lineNumber":356,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":357,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":358,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":359,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":360,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":361,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":362,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":363,"author":{"gitId":"shashahchk"},"content":"     * Initialises and displays the welcome message for the Duke application.","lastModifiedDate":"2023-08-24"},{"lineNumber":364,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":365,"author":{"gitId":"shashahchk"},"content":"    public static void handleStart() {","lastModifiedDate":"2023-08-24"},{"lineNumber":366,"author":{"gitId":"shashahchk"},"content":"        String welcomeMessage \u003d horizontal_line +","lastModifiedDate":"2023-08-24"},{"lineNumber":367,"author":{"gitId":"shashahchk"},"content":"                \" Hello! I\u0027m Blob\\n\" +","lastModifiedDate":"2023-08-24"},{"lineNumber":368,"author":{"gitId":"shashahchk"},"content":"                \" What can I do for you?\\n\" +","lastModifiedDate":"2023-08-24"},{"lineNumber":369,"author":{"gitId":"shashahchk"},"content":"                horizontal_line;","lastModifiedDate":"2023-08-24"},{"lineNumber":370,"author":{"gitId":"shashahchk"},"content":"        System.out.println(welcomeMessage);","lastModifiedDate":"2023-08-24"},{"lineNumber":371,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":372,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":373,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":374,"author":{"gitId":"shashahchk"},"content":"     * Adds a \"todo\" task to the task list and provides user feedback.","lastModifiedDate":"2023-08-24"},{"lineNumber":375,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":376,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The user input command string.","lastModifiedDate":"2023-08-24"},{"lineNumber":377,"author":{"gitId":"shashahchk"},"content":"     * @param tasks The current list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":378,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":379,"author":{"gitId":"shashahchk"},"content":"    public static void handleTodo(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":380,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":381,"author":{"gitId":"shashahchk"},"content":"            String description \u003d\"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":382,"author":{"gitId":"shashahchk"},"content":"            String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":383,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003e\u003d 2 \u0026\u0026 !parts[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":384,"author":{"gitId":"shashahchk"},"content":"                description \u003d parts[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":385,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":386,"author":{"gitId":"shashahchk"},"content":"            Task currTask \u003d new ToDos(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":387,"author":{"gitId":"shashahchk"},"content":"            tasks.add(currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":388,"author":{"gitId":"shashahchk"},"content":"            String numTasks \u003d String.valueOf(tasks.size());","lastModifiedDate":"2023-08-24"},{"lineNumber":389,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Got it I have added this task:\" + \"\\n\" +  currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":390,"author":{"gitId":"shashahchk"},"content":"            System.out.println(updateNumMessage(numTasks));","lastModifiedDate":"2023-08-24"},{"lineNumber":391,"author":{"gitId":"shashahchk"},"content":"            System.out.println(horizontal_line);","lastModifiedDate":"2023-08-24"},{"lineNumber":392,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":393,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":394,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":395,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":396,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":397,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":398,"author":{"gitId":"shashahchk"},"content":"     * Adds a \"deadline\" task to the task list and provides user feedback.","lastModifiedDate":"2023-08-24"},{"lineNumber":399,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":400,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The user input command string.","lastModifiedDate":"2023-08-24"},{"lineNumber":401,"author":{"gitId":"shashahchk"},"content":"     * @param tasks The current list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":402,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":403,"author":{"gitId":"shashahchk"},"content":"    public static void handleDeadline(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":404,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":405,"author":{"gitId":"shashahchk"},"content":"            String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":406,"author":{"gitId":"shashahchk"},"content":"            String description \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":407,"author":{"gitId":"shashahchk"},"content":"            LocalDateTime date \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":408,"author":{"gitId":"shashahchk"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":409,"author":{"gitId":"shashahchk"},"content":"            String secondPart \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":410,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003e\u003d 2 \u0026\u0026 !parts[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":411,"author":{"gitId":"shashahchk"},"content":"                secondPart \u003d parts[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":412,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":413,"author":{"gitId":"shashahchk"},"content":"            String[] finalParts \u003d secondPart.split(\" /by \", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":414,"author":{"gitId":"shashahchk"},"content":"            if (finalParts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":415,"author":{"gitId":"shashahchk"},"content":"                description \u003d finalParts[0];","lastModifiedDate":"2023-08-24"},{"lineNumber":416,"author":{"gitId":"shashahchk"},"content":"                date \u003d LocalDateTime.parse(finalParts[1], formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":417,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":418,"author":{"gitId":"shashahchk"},"content":"            Task currTask \u003d new Deadlines(description, date);","lastModifiedDate":"2023-08-24"},{"lineNumber":419,"author":{"gitId":"shashahchk"},"content":"            tasks.add(currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":420,"author":{"gitId":"shashahchk"},"content":"            String numTasks \u003d String.valueOf(tasks.size());","lastModifiedDate":"2023-08-24"},{"lineNumber":421,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Got it I have added this task:\" + \"\\n\" +  currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":422,"author":{"gitId":"shashahchk"},"content":"            System.out.println(updateNumMessage(numTasks));","lastModifiedDate":"2023-08-24"},{"lineNumber":423,"author":{"gitId":"shashahchk"},"content":"            System.out.println(horizontal_line);","lastModifiedDate":"2023-08-24"},{"lineNumber":424,"author":{"gitId":"shashahchk"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":425,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"The date format you provided is invalid. Please use the format /by yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":426,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":427,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":428,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":429,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":430,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":431,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":432,"author":{"gitId":"shashahchk"},"content":"     * Adds an \"event\" task to the task list and provides user feedback.","lastModifiedDate":"2023-08-24"},{"lineNumber":433,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":434,"author":{"gitId":"shashahchk"},"content":"     * @param userCommand The user input command string.","lastModifiedDate":"2023-08-24"},{"lineNumber":435,"author":{"gitId":"shashahchk"},"content":"     * @param tasks The current list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":436,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":437,"author":{"gitId":"shashahchk"},"content":"    public static void handleEvent(String userCommand, List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-24"},{"lineNumber":438,"author":{"gitId":"shashahchk"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":439,"author":{"gitId":"shashahchk"},"content":"            String[] parts \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":440,"author":{"gitId":"shashahchk"},"content":"            String description \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":441,"author":{"gitId":"shashahchk"},"content":"            LocalDateTime fromDate \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":442,"author":{"gitId":"shashahchk"},"content":"            LocalDateTime byDate \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":443,"author":{"gitId":"shashahchk"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":444,"author":{"gitId":"shashahchk"},"content":"            if (parts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":445,"author":{"gitId":"shashahchk"},"content":"                String[] secondPartSplits \u003d parts[1].split(\" /from \", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":446,"author":{"gitId":"shashahchk"},"content":"                if (secondPartSplits.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":447,"author":{"gitId":"shashahchk"},"content":"                    String[] dates \u003d secondPartSplits[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":448,"author":{"gitId":"shashahchk"},"content":"                    if (dates.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":449,"author":{"gitId":"shashahchk"},"content":"                        fromDate \u003d LocalDateTime.parse(dates[0], formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":450,"author":{"gitId":"shashahchk"},"content":"                        byDate \u003d LocalDateTime.parse(dates[1], formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":451,"author":{"gitId":"shashahchk"},"content":"                        description \u003d secondPartSplits[0];","lastModifiedDate":"2023-08-24"},{"lineNumber":452,"author":{"gitId":"shashahchk"},"content":"                    }","lastModifiedDate":"2023-08-24"},{"lineNumber":453,"author":{"gitId":"shashahchk"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":454,"author":{"gitId":"shashahchk"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":455,"author":{"gitId":"shashahchk"},"content":"            Task currTask \u003d new Events(description, fromDate, byDate);","lastModifiedDate":"2023-08-24"},{"lineNumber":456,"author":{"gitId":"shashahchk"},"content":"            tasks.add(currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":457,"author":{"gitId":"shashahchk"},"content":"            String numTasks \u003d String.valueOf(tasks.size());","lastModifiedDate":"2023-08-24"},{"lineNumber":458,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"Got it I have added this task:\" + \"\\n\" +  currTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":459,"author":{"gitId":"shashahchk"},"content":"            System.out.println(updateNumMessage(numTasks));","lastModifiedDate":"2023-08-24"},{"lineNumber":460,"author":{"gitId":"shashahchk"},"content":"            System.out.println(horizontal_line);","lastModifiedDate":"2023-08-23"},{"lineNumber":461,"author":{"gitId":"shashahchk"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":462,"author":{"gitId":"shashahchk"},"content":"            System.out.println(\"The date format you provided is invalid. Please use the format yyyy-MM-dd HH:mm.\");    ","lastModifiedDate":"2023-08-29"},{"lineNumber":463,"author":{"gitId":"shashahchk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":464,"author":{"gitId":"shashahchk"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":465,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":466,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":467,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":468,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":469,"author":{"gitId":"shashahchk"},"content":"     * Closes the scanner and sends a bye message to the user.","lastModifiedDate":"2023-08-24"},{"lineNumber":470,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":471,"author":{"gitId":"shashahchk"},"content":"     * @param scanner The scanner used for user input.","lastModifiedDate":"2023-08-24"},{"lineNumber":472,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":473,"author":{"gitId":"shashahchk"},"content":"    public static void handleBye(Scanner scanner) {","lastModifiedDate":"2023-08-24"},{"lineNumber":474,"author":{"gitId":"shashahchk"},"content":"        scanner.close();","lastModifiedDate":"2023-08-24"},{"lineNumber":475,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-23"},{"lineNumber":476,"author":{"gitId":"shashahchk"},"content":"        System.out.println(\" Bye. Come talk to Blob again soon!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":477,"author":{"gitId":"shashahchk"},"content":"        System.out.println(horizontal_line);","lastModifiedDate":"2023-08-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":479,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"shashahchk":475,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":" * Represents a custom exception for Duke application.","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":" * This exception is thrown when Duke-specific conditions are violated.","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"     * Constructs a new DukeException with the specified message.","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"     * @param message The detail message.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"shashahchk":14}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":" * Represents an event task with a specified start and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":" * An Events object is described by a description, start date, and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"public class Events extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime startDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"    private final LocalDateTime endDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"     * Initializes a new instance of the Events class with the given description, start date, and end date.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"     * @param startDate Start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"     * @param endDate End date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException if the provided description, start date, or end date is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"    public Events(String description, LocalDateTime startDate, LocalDateTime endDate) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"start date of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"end date of event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"    public Events(String description, LocalDateTime startDate, LocalDateTime endDate, boolean completed) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"description of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"start date of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"end date of event cannot be empty\");","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"     * @return Start date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getStartDate() {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"        return this.startDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the end date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"     * @return End date of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"    public LocalDateTime getEndDate() {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"        return this.endDate;","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"shashahchk"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"shashahchk"},"content":"     * @return A string indicating the type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"shashahchk"},"content":"        return \"E\";","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"shashahchk"},"content":"     * Gets a formatted string representation of the Events task.","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"shashahchk"},"content":"     * @return A string representing the Events task.","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"shashahchk"},"content":"        String completed \u003d this.isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + this.getType() + \"]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"shashahchk"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\");","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"shashahchk"},"content":"        String fromDateString \u003d getStartDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"shashahchk"},"content":"        String fromMessage \u003d \"from: \" + fromDateString;","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"shashahchk"},"content":"        String toDateString \u003d getEndDate().format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"shashahchk"},"content":"        String toMessage \u003d \"to: \" + toDateString;","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"shashahchk"},"content":"        return taskType + completed + this.getDescription() + \"(\" + fromMessage + \" \" + toMessage + \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":95}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":" * Represents a general task with a description and completion status.","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"    protected boolean completed;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"    private final String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"     * Creates a new task with a given description.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * @param description The task\u0027s description.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d false;  // Tasks are uncompleted by default","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"    public Task(String description, boolean completed) {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"     * Checks if the task is completed.","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"     * @return true if completed, otherwise false.","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"        return this.completed;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"     * Retrieves the task\u0027s description.","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"     * @return The description.","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"shashahchk"},"content":"        return this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"shashahchk"},"content":"     * Toggles the completion status of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"shashahchk"},"content":"    public void toggleCompleted() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d !this.completed;","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"shashahchk"},"content":"     * Provides a type identifier for the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"shashahchk"},"content":"     * Since this is a general task, it returns an empty string.","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"shashahchk"},"content":"     * @return Type of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"shashahchk"},"content":"        return \"\";","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"shashahchk"},"content":"     * Offers a formatted string showing the task\u0027s type, completion status, and description.","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"shashahchk"},"content":"     * @return Formatted string of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"shashahchk"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"shashahchk"},"content":"        String completionStatus \u003d isCompleted() ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"shashahchk"},"content":"        String taskType \u003d \"[\" + getType() + \"]\";","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"shashahchk"},"content":"        return taskType + completionStatus + description;","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":69}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":" * Represents a ToDo task without a specific deadline or event date.","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":" * A ToDo task is represented by a description.","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"     * Creates a new ToDo task with the given description.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"     * @param description The description of ToDo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"     * @throws DukeException If the description is null or empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"    public ToDos(String description) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"OOPS! The description of ToDo cannot be empty!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"shashahchk"},"content":"    public ToDos(String description, boolean completed) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"shashahchk"},"content":"        super(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"shashahchk"},"content":"        if (description \u003d\u003d null || description.trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"shashahchk"},"content":"            throw new DukeException(\"OOPS! The description of ToDo cannot be empty!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"shashahchk"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"shashahchk"},"content":"        this.completed \u003d completed;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"shashahchk"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"shashahchk"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"shashahchk"},"content":"     * Indicates that this task is of type \"T\".","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"shashahchk"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"shashahchk"},"content":"     * @return The string \"T\" representing a ToDo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"shashahchk"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"shashahchk"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"shashahchk"},"content":"    public String getType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"shashahchk"},"content":"        return \"T\";","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"shashahchk"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"shashahchk"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"shashahchk":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shashahchk"},"content":"todo eat food","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"shashahchk"},"content":"event table tennis /from 2 pm /to 4 pm","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"shashahchk"},"content":"deadline submit hw /by 29 August","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"shashahchk"},"content":"event interfaculty games /from 9 am /to 7 pm","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"shashahchk"},"content":"todo run 2 miles","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"shashahchk"},"content":"mark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"shashahchk"},"content":"mark 10","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"shashahchk"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"shashahchk"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"shashahchk"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"shashahchk"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"shashahchk"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"shashahchk"},"content":"blah","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"shashahchk"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"shashahchk"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"shashahchk":15}}]
