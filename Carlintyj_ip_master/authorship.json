[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"javafx {","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    version \u003d \"17.0.7\"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027  ]","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    archiveFileName \u003d \u0027CarlBot.jar\u0027","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"checkstyle {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":43,"Carlintyj":27}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"D | 0 | return book    | 2023-09-09 18:00","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"E | 0 | project meeting | 2019-09-02 18:00 to 2019-09-02 19:00","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Carlintyj":2}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"T | 1 | read book","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"T | 0 | do tutorial","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Carlintyj":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"# Carl Bot User Guide","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"CarlBot is a Personal Assistant Chatbot that helps a person to keep track of various things. Carl Bot is created using Java that aids user to keep tracks of todo, deadline and events.  ","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"## Quick start","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"2. Download the latest `CarlBot.jar` from [here](https://github.com/Carlintyj/ip/releases/tag/A-Release).","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"3. Copy the file to the folder you want to use as the _home_ folder for your chatbot.","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"4. Open a command terminal, cd into the folder you put the jar file in, and use the `java -jar CarlBot.jar` command to run the application. A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data. \u003cbr\u003e ![Ui](Ui.png)","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will show all the commands.","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"6. Refer to the Features below for details of each command.","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"### Addition of Task","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"Users are able to add todo, deadline and event tasks into the chatbot which will be locally stored on your computer.","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"### Marking and unmarking tasks","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"Users are able to mark tasks that are done or unmark tasks.","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"### `help` - Views help of Carl Bot","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"Displays all the available commands.","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"Format: `help`","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"### `todo` - Adds a todo task","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"Adds a todo task that is a task without any date/time attached to it.","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"Format: `todo [task]`","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"`todo borrow book`","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will respond saying it has added your task.","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    [T][ ] borrow book","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"Now you have 5 tasks in the list.","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"### `deadline` - Adds a deadline task","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"Adds a deadline task that is a task that need to be done before a specific date/time e.g., submit report by 11/10/2019 5pm.","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"Format: `deadline [task] /by [deadline]`","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"`deadline return book /by Sunday`","lastModifiedDate":"2023-09-18"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will respond saying it has added your task.","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"    [D][ ] return book (by: Sunday)","lastModifiedDate":"2023-09-18"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"Now you have 6 tasks in the list.","lastModifiedDate":"2023-09-18"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":72,"author":{"gitId":"Carlintyj"},"content":"### `event` - Adds an event task","lastModifiedDate":"2023-09-18"},{"lineNumber":73,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":74,"author":{"gitId":"Carlintyj"},"content":"Adds an event task that is a task that start at a specific date/time and ends at a specific date/time","lastModifiedDate":"2023-09-18"},{"lineNumber":75,"author":{"gitId":"Carlintyj"},"content":"e.g., (a) team project meeting 2/10/2019 2-4pm (b) orientation week 4/10/2019 to 11/10/2019.","lastModifiedDate":"2023-09-18"},{"lineNumber":76,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":77,"author":{"gitId":"Carlintyj"},"content":"Format: `event [task] /from [YYYY-MM-DD HH:MM] /to [YYYY-MM-DD HH:MM]`","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":81,"author":{"gitId":"Carlintyj"},"content":"`event project meeting /from 2019-09-02 18:00 /to 2019-09-02 19:00`","lastModifiedDate":"2023-09-18"},{"lineNumber":82,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will respond saying it has added your task.","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"Carlintyj"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"Carlintyj"},"content":"    [E][ ] project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-09-18"},{"lineNumber":90,"author":{"gitId":"Carlintyj"},"content":"Now you have 7 tasks in the list.","lastModifiedDate":"2023-09-18"},{"lineNumber":91,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"Carlintyj"},"content":"### `mark` - Mark tasks as done","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"Carlintyj"},"content":"Mark tasks as done.","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"Carlintyj"},"content":"Format: `mark INDEX`","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":100,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":101,"author":{"gitId":"Carlintyj"},"content":"`mark 2`","lastModifiedDate":"2023-09-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":105,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will mark the task with the index as done.","lastModifiedDate":"2023-09-18"},{"lineNumber":106,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":107,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"Carlintyj"},"content":"OK, I\u0027ve marked this task as done:","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"Carlintyj"},"content":"    [ ] return book","lastModifiedDate":"2023-09-18"},{"lineNumber":110,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":111,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":112,"author":{"gitId":"Carlintyj"},"content":"### `unmark` - Unmark tasks as not done","lastModifiedDate":"2023-09-18"},{"lineNumber":113,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":114,"author":{"gitId":"Carlintyj"},"content":"Unmark tasks as not done yet.","lastModifiedDate":"2023-09-18"},{"lineNumber":115,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":116,"author":{"gitId":"Carlintyj"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2023-09-18"},{"lineNumber":117,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":118,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":119,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":120,"author":{"gitId":"Carlintyj"},"content":"`unmark 2`","lastModifiedDate":"2023-09-18"},{"lineNumber":121,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":122,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":123,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":124,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will unmark the task with the index as not done yet.","lastModifiedDate":"2023-09-18"},{"lineNumber":125,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":126,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":127,"author":{"gitId":"Carlintyj"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-09-18"},{"lineNumber":128,"author":{"gitId":"Carlintyj"},"content":"    [ ] return book","lastModifiedDate":"2023-09-18"},{"lineNumber":129,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":130,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":131,"author":{"gitId":"Carlintyj"},"content":"### `delete` - Deletes a task","lastModifiedDate":"2023-09-18"},{"lineNumber":132,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":133,"author":{"gitId":"Carlintyj"},"content":"Deletes a task from the list.","lastModifiedDate":"2023-09-18"},{"lineNumber":134,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":135,"author":{"gitId":"Carlintyj"},"content":"Format: `delete INDEX`","lastModifiedDate":"2023-09-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":139,"author":{"gitId":"Carlintyj"},"content":"`delete 3`","lastModifiedDate":"2023-09-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":143,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will respond saying it has removed your task.","lastModifiedDate":"2023-09-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":145,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":146,"author":{"gitId":"Carlintyj"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-09-18"},{"lineNumber":147,"author":{"gitId":"Carlintyj"},"content":"    [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-09-18"},{"lineNumber":148,"author":{"gitId":"Carlintyj"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2023-09-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":150,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":151,"author":{"gitId":"Carlintyj"},"content":"### `find` - Finds a task","lastModifiedDate":"2023-09-18"},{"lineNumber":152,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":153,"author":{"gitId":"Carlintyj"},"content":"Find a task by searching for a keyword.","lastModifiedDate":"2023-09-18"},{"lineNumber":154,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":155,"author":{"gitId":"Carlintyj"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-09-18"},{"lineNumber":156,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":157,"author":{"gitId":"Carlintyj"},"content":"Example of usage: ","lastModifiedDate":"2023-09-18"},{"lineNumber":158,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":159,"author":{"gitId":"Carlintyj"},"content":"`find book`","lastModifiedDate":"2023-09-18"},{"lineNumber":160,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":161,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":162,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":163,"author":{"gitId":"Carlintyj"},"content":"Carl Bot will display all the tasks with the keyword `book`.","lastModifiedDate":"2023-09-18"},{"lineNumber":164,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":165,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":166,"author":{"gitId":"Carlintyj"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-18"},{"lineNumber":167,"author":{"gitId":"Carlintyj"},"content":"    1.[T][X] read book","lastModifiedDate":"2023-09-18"},{"lineNumber":168,"author":{"gitId":"Carlintyj"},"content":"    2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-09-18"},{"lineNumber":169,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":170,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":171,"author":{"gitId":"Carlintyj"},"content":"### `list` - Lists all the task","lastModifiedDate":"2023-09-18"},{"lineNumber":172,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":173,"author":{"gitId":"Carlintyj"},"content":"Displays all the tasks stored in Carl Bot","lastModifiedDate":"2023-09-18"},{"lineNumber":174,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":175,"author":{"gitId":"Carlintyj"},"content":"Format: `list`","lastModifiedDate":"2023-09-18"},{"lineNumber":176,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":177,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":178,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":179,"author":{"gitId":"Carlintyj"},"content":"Display of all the tasks stored.","lastModifiedDate":"2023-09-18"},{"lineNumber":180,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":181,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":182,"author":{"gitId":"Carlintyj"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-09-18"},{"lineNumber":183,"author":{"gitId":"Carlintyj"},"content":"1.[T][X] read book","lastModifiedDate":"2023-09-18"},{"lineNumber":184,"author":{"gitId":"Carlintyj"},"content":"2.[D][ ] return book (by: Sep 02 2019 18:00)","lastModifiedDate":"2023-09-18"},{"lineNumber":185,"author":{"gitId":"Carlintyj"},"content":"3.[E][ ] project meeting (from: Sep 02 2019 18:00 to: Sep 02 2019 19:00)","lastModifiedDate":"2023-09-18"},{"lineNumber":186,"author":{"gitId":"Carlintyj"},"content":"4.[T][ ] CS2103T tutorial","lastModifiedDate":"2023-09-18"},{"lineNumber":187,"author":{"gitId":"Carlintyj"},"content":"```","lastModifiedDate":"2023-09-18"},{"lineNumber":188,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":189,"author":{"gitId":"Carlintyj"},"content":"### `bye` - Exits the program","lastModifiedDate":"2023-09-18"},{"lineNumber":190,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":191,"author":{"gitId":"Carlintyj"},"content":"Exits the program.","lastModifiedDate":"2023-09-18"},{"lineNumber":192,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":193,"author":{"gitId":"Carlintyj"},"content":"Format: `bye`","lastModifiedDate":"2023-09-18"},{"lineNumber":194,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":195,"author":{"gitId":"Carlintyj"},"content":"Expected outcome:","lastModifiedDate":"2023-09-18"},{"lineNumber":196,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":197,"author":{"gitId":"Carlintyj"},"content":"Program will close.","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"-":20,"Carlintyj":177}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":" * Represents the main class of the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":" * Duke is a chatbot that helps manage tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"     * @param filePath The path to the file used for storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"            c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"            if (commandIsExit(c)) {","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"                return ui.displayMessage();","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"            return getExceptionString(e);","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        return input;","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    private String getExceptionString(DukeException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        return ui.displayMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"    private boolean commandIsExit(Command c) {","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"        if (c.isExit()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"            Platform.exit();","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"            return true;","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":3,"Carlintyj":58}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":" * Represents an exception specific to the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"     * @param message The error message describing the exception.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":15}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Main;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"public class Launcher {","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":13}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to add tasks to the task list in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    private String fullCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    private char type;","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     * Constructs an AddCommand object with full command and task type.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     * @param fullCommand The full command input provided by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param type The type of task being added (\u0027T\u0027 for Todo, \u0027D\u0027 for Deadline, \u0027E\u0027 for Event).","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"    public AddCommand(String fullCommand, char type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"     * Executes the add task command, adding the specified task to the task list and updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        assert type \u003d\u003d \u0027T\u0027 || type \u003d\u003d \u0027D\u0027 || type \u003d\u003d \u0027E\u0027 : \"Invalid task type\";","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"        executeAddTask(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    private void executeAddTask(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        switch (type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"            addToDo(taskList, ui, storage);","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"            addDeadLine(taskList, ui, storage);","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"            addEvent(taskList, ui, storage);","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Invalid type!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"    private void addEvent(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"        Event eventTask \u003d getEventTask();","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"        boolean isDuplicate \u003d taskList.contains(eventTask.toString());","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"        if (isDuplicate) {","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Error! You cannot have duplicate event task.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"Carlintyj"},"content":"        displayAddedTaskMessage(taskList, ui, eventTask);","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"Carlintyj"},"content":"    private static void displayAddedTaskMessage(TaskList taskList, Ui ui, Task task) {","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(\"Got it. I\u0027ve added this task:\\n\\t\"","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"Carlintyj"},"content":"                + task","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"Carlintyj"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"Carlintyj"},"content":"    private Event getEventTask() throws DukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"Carlintyj"},"content":"        String eventDescription \u003d fullCommand.substring(6);","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"Carlintyj"},"content":"        int indexFrom \u003d eventDescription.indexOf(\"/from\");","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"Carlintyj"},"content":"        int indexTo \u003d eventDescription.indexOf(\"/to\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Carlintyj"},"content":"        String eventString \u003d eventDescription.substring(0, indexFrom).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"Carlintyj"},"content":"        String startTime \u003d eventDescription.substring(indexFrom + \"/from\".length(), indexTo).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"Carlintyj"},"content":"        String endTime \u003d eventDescription.substring(indexTo + \"/to\".length()).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"Carlintyj"},"content":"        Event eventTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"Carlintyj"},"content":"            eventTask \u003d new Event(eventString,","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"Carlintyj"},"content":"                    LocalDateTime.parse(startTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"Carlintyj"},"content":"                    LocalDateTime.parse(endTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"Carlintyj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Invalid Date Time: Date has to be in \\\"yyyy-MM-dd HH:mm\\\" format\\n\" + e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"Carlintyj"},"content":"        return eventTask;","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"Carlintyj"},"content":"    private void addDeadLine(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":103,"author":{"gitId":"Carlintyj"},"content":"        Deadline deadline \u003d getDeadlineTask();","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"Carlintyj"},"content":"        boolean isDuplicate \u003d taskList.contains(deadline.toString());","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"Carlintyj"},"content":"        if (isDuplicate) {","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Error! You cannot have duplicate deadline task.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"Carlintyj"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"Carlintyj"},"content":"        displayAddedTaskMessage(taskList, ui, deadline);","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"Carlintyj"},"content":"    private Deadline getDeadlineTask() throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"Carlintyj"},"content":"        String deadlineDescription \u003d fullCommand.substring(9);","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"Carlintyj"},"content":"        String descriptionText \u003d deadlineDescription.substring(0, deadlineDescription.indexOf(\"/by\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"Carlintyj"},"content":"        String dateTime \u003d deadlineDescription.substring(deadlineDescription.indexOf(\"/by\") + 4).trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"Carlintyj"},"content":"        Deadline deadline;","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"Carlintyj"},"content":"            DateTimeFormatter altInputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"Carlintyj"},"content":"            LocalDateTime byDateTime \u003d LocalDateTime.parse(dateTime, altInputFormatter);","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"Carlintyj"},"content":"            deadline \u003d new Deadline(descriptionText, byDateTime);","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"Carlintyj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Invalid Date Time: Date has to be in \\\"yyyy-MM-dd HH:mm\\\" format\\n\" + e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":124,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"Carlintyj"},"content":"        return deadline;","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"Carlintyj"},"content":"    private void addToDo(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":129,"author":{"gitId":"Carlintyj"},"content":"        Todo todo \u003d getTodoTask();","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"Carlintyj"},"content":"        boolean isDuplicate \u003d taskList.contains(todo.toString());","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"Carlintyj"},"content":"        if (isDuplicate) {","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"Error! You cannot have duplicate todo task.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"Carlintyj"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"Carlintyj"},"content":"        displayAddedTaskMessage(taskList, ui, todo);","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"Carlintyj"},"content":"    private Todo getTodoTask() {","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"Carlintyj"},"content":"        String description \u003d fullCommand.substring(5);","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"Carlintyj"},"content":"        Todo todo \u003d new Todo(description);","lastModifiedDate":"2023-09-12"},{"lineNumber":142,"author":{"gitId":"Carlintyj"},"content":"        return todo;","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"Carlintyj"},"content":"     * AddCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":155}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" * Represents an abstract command in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"     * Executes the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     * @return True if the command is an exit command, false otherwise.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to delete tasks to the task list in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    private int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * Constructs an DeleteCommand object with full command and task type.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index at which the user wish to delete.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     * Executes the delete task command, deleting the specified task to the task list and updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"        deleteTask(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    private void deleteTask(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        assert index \u003c 0 : \"Index cannot be negative\";","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"        if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"            displayInvalidDeleteException();","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"        delete(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"    private static void displayInvalidDeleteException() throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        throw new DukeException(\"OOPS!!! Invalid index to be deleted!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    private void delete(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"        String deletedTask \u003d taskList.getPrint(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        taskList.deleteTask(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        displayDeletedTaskMessage(taskList, ui, deletedTask);","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"    private static void displayDeletedTaskMessage(TaskList taskList, Ui ui, String deletedTask) {","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(\"Noted. I\u0027ve removed this task:\\n\\t\"","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"                + deletedTask","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"     * DeleteCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":71}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to exit the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"     * Executes the exit task command, exiting the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        displayByeMessage(ui);","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    private static void displayByeMessage(Ui ui) {","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     * ExitCommand is an exit command, so this method returns true.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"     * @return True.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        return true;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to find tasks in the task list that match a given search query.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"    private String searchItem;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a new FindCommand with the specified search query.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @param searchItem The search query entered by the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    public FindCommand(String searchItem) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        this.searchItem \u003d searchItem;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     * Executes the find command to search for tasks in the task list that contain","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * the search query and displays the matching tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The TaskList containing all tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     * @param storage  The storage for saving and loading tasks (not used in this command).","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there is an issue executing the command.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        findTask(taskList, ui);","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"    private void findTask(TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"        String str \u003d \"Here are the tasks in your list:\\n \";","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        str \u003d getFindTaskString(taskList, str);","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(str.substring(0, str.length() - 2));","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"    private String getFindTaskString(TaskList taskList, String str) {","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"            if (task.toString().contains(this.searchItem)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"                str +\u003d count + 1 + \".\" + task + \"\\n\\t \";","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"                count++;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        return str;","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command should exit the application.","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"     * @return False, as the find command does not exit the application.","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":65}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to list all available commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     * Executes the help command.","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or updating the storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"        displayHelpCommand(ui);","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    private static void displayHelpCommand(Ui ui) {","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"        String str \u003d \"Here are the available commands:\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"                + \"1. todo \u003ctask\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"                + \"2. deadline \u003ctask\u003e /by \u003cdate\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"                + \"3. event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"                + \"4. mark \u003cindex\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"                + \"5. unmark \u003cindex\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"                + \"6. delete \u003cindex\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"                + \"7. find \u003cindex\u003e\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"                + \"8. list\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"                + \"9. bye\";","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(str);","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"     * HelpCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":50}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to list all the tasks in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * Executes the list task command.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or updating the storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"        displayList(taskList, ui);","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    private static void displayList(TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"        String str \u003d \"Here are the tasks in your list:\\n \";","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"        str \u003d getListString(taskList, str);","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(str.substring(0, str.length() - 2));","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    private static String getListString(TaskList taskList, String str) {","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"            str +\u003d count + 1 + \".\" + task.toString() + \"\\n \";","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"            count++;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        return str;","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"     * ListCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":53}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to mark tasks to the task list in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    private int index;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * Constructs an MarkCommand object with full command and task type.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index at which the user wish to mark.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     * Executes the mark task command, marking the specific task input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"        markTask(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    private void markTask(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"            displayInvalidMarkException();","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        mark(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    private static void displayInvalidMarkException() throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        throw new DukeException(\"OOPS!!! Invalid task to be marked!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"    private void mark(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"        taskList.mark(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(\"OK, I\u0027ve marked this task as done yet:\\n\\t\"","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"                + taskList.getPrint(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"     * MarkCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":64}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":" * Represents a command to unmark tasks to the task list in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    private int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * Constructs an UnmarkCommand object with full command and task type.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index at which the user wish to unmark.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     * Executes the unmark task command, unmarking the specific task input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * @param storage The storage to update the tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"        unmarkTask(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    private void unmarkTask(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"            displayInvalidUnmarkException();","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        unmark(taskList, ui, storage);","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    private void unmark(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        taskList.unmark(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        ui.sendMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\\t\"","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"                + taskList.getPrint(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"        storage.updateFileContents(taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    private static void displayInvalidUnmarkException() throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        throw new DukeException(\"OOPS!!! Invalid task to be unmarked!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"     * Indicates whether this command is an exit command.","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"     * UnmarkCommand is not an exit command, so this method returns false.","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":64}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":" * Parses user input and generates the appropriate Command objects for the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":" * This class is responsible for converting user input strings into executable commands.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"     * Parses the user input string and generates a corresponding Command object.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     * @param userInput The input string provided by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     * @return A Command object representing the action to be executed.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while parsing the user input or generating a Command.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    public static Command parse(String userInput) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"      assert userInput !\u003d null \u0026\u0026 !userInput.isEmpty() : \"User input cannot be null or empty\";","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"      assert userInput.startsWith(\"todo\") || userInput.startsWith(\"deadline\") || userInput.startsWith(\"event\")","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"                || userInput.startsWith(\"list\") || userInput.startsWith(\"bye\") || userInput.startsWith(\"help\")","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"                || userInput.startsWith(\"mark\") || userInput.startsWith(\"unmark\") || userInput.startsWith(\"delete\")","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"                || userInput.startsWith(\"find\") : \"Invalid command format\";","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        boolean isByePhrase \u003d userInput.equals(\"bye\");","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        boolean isHelpPhrase \u003d userInput.equals(\"help\");","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        boolean isListPhrase \u003d userInput.equals(\"list\");","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"        if (isByePhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        } else if (isHelpPhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        } else if (isListPhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"            boolean isMarkPhrase \u003d userInput.contains(\"mark\") \u0026\u0026 userInput.substring(0, 4).equals(\"mark\");","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"            if (isMarkPhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"                return getMarkCommand(userInput);","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"            boolean isUnmarkPhrase \u003d userInput.contains(\"unmark\") \u0026\u0026 userInput.substring(0, 6).equals(\"unmark\");","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"            if (isUnmarkPhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"                return getUnmarkCommand(userInput);","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"            boolean isDeletePhrase \u003d userInput.contains(\"delete\") \u0026\u0026 userInput.substring(0, 6).equals(\"delete\");","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"            if (isDeletePhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"                return getDeleteCommand(userInput);","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"            boolean isFindPhrase \u003d userInput.contains(\"find\") \u0026\u0026 userInput.substring(0, 4).equals(\"find\");","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"            if (isFindPhrase) {","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"                return getFindCommand(userInput);","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"            boolean isTodo \u003d userInput.contains(\"todo\") \u0026\u0026 userInput.substring(0, 4).equals(\"todo\");","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"            if (isTodo) {","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"                // Add a task","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"                boolean isEmptyTodo \u003d userInput.equals(\"todo\");","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"                String message \u003d \"OOPS!!! The description of todo cannot be empty.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"                char t \u003d \u0027T\u0027;","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"                return getAddCommand(isEmptyTodo, message, userInput, t);","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"Carlintyj"},"content":"            boolean isDeadline \u003d userInput.contains(\"deadline\") \u0026\u0026 userInput.substring(0, 8).equals(\"deadline\");","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"Carlintyj"},"content":"            if (isDeadline) {","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"Carlintyj"},"content":"                // Add a deadline","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"Carlintyj"},"content":"                boolean isEmptyDeadline \u003d userInput.equals(\"deadline\") || !userInput.contains(\"/by\");","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"Carlintyj"},"content":"                String message \u003d \"OOPS!!! The description of deadline cannot be empty.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"Carlintyj"},"content":"                char d \u003d \u0027D\u0027;","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"Carlintyj"},"content":"                return getAddCommand(isEmptyDeadline, message, userInput, d);","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"Carlintyj"},"content":"            boolean isEvent \u003d userInput.contains(\"event\") \u0026\u0026 userInput.substring(0, 5).equals(\"event\");","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"Carlintyj"},"content":"            if (isEvent) {","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"Carlintyj"},"content":"                // Add an event","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"Carlintyj"},"content":"                boolean isEmptyEvent \u003d userInput.equals(\"event\")","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"Carlintyj"},"content":"                        || !userInput.contains(\"/from\")","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"Carlintyj"},"content":"                        || !userInput.contains(\"/to\");","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"Carlintyj"},"content":"                String message \u003d \"OOPS!!! The description of event cannot be empty.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"Carlintyj"},"content":"                char e \u003d \u0027E\u0027;","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"Carlintyj"},"content":"                return getAddCommand(isEmptyEvent, message, userInput, e);","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"Carlintyj"},"content":"            displayInvalidStatement();","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"Carlintyj"},"content":"            return null;","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"Carlintyj"},"content":"    private static void displayInvalidStatement() throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"Carlintyj"},"content":"        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"Carlintyj"},"content":"    private static AddCommand getAddCommand(boolean isEmpty, String message, String userInput, char t) throws DukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"Carlintyj"},"content":"        if (isEmpty) {","lastModifiedDate":"2023-09-18"},{"lineNumber":105,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"Carlintyj"},"content":"            return new AddCommand(userInput, t);","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"Carlintyj"},"content":"    private static FindCommand getFindCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"Carlintyj"},"content":"        if (!userInput.equals(\"find\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"Carlintyj"},"content":"            String searchItem \u003d userInput.substring(5);","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"Carlintyj"},"content":"            return new FindCommand(searchItem);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"OOPS!!! The task to be found cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"Carlintyj"},"content":"    private static DeleteCommand getDeleteCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"Carlintyj"},"content":"        if (!userInput.equals(\"delete\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"Carlintyj"},"content":"            int index \u003d Integer.parseInt(userInput.substring(7)) - 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"Carlintyj"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"OOPS!!! Invalid index to be deleted!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"Carlintyj"},"content":"    private static UnmarkCommand getUnmarkCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"Carlintyj"},"content":"        if (!userInput.equals(\"unmark\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"Carlintyj"},"content":"            try {","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"Carlintyj"},"content":"                int index \u003d Integer.parseInt(userInput.substring(7)) - 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"Carlintyj"},"content":"                return new UnmarkCommand(index);","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"Carlintyj"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"Carlintyj"},"content":"                throw new DukeException(\"OOPS!!! Invalid task to be unmarked!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"OOPS!!! Invalid task to be unmarked!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":142,"author":{"gitId":"Carlintyj"},"content":"    private static MarkCommand getMarkCommand(String userInput) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"Carlintyj"},"content":"        if (!userInput.equals(\"mark\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"Carlintyj"},"content":"            try {","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"Carlintyj"},"content":"                int index \u003d Integer.parseInt(userInput.substring(5)) - 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"Carlintyj"},"content":"                return new MarkCommand(index);","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"Carlintyj"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"Carlintyj"},"content":"                throw new DukeException(\"OOPS!!! Invalid task to be marked!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"Carlintyj"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(\"OOPS!!! Invalid task to be marked!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":154}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":" * Manages the reading and updating of tasks from/to a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    protected String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @param filePath The path to the file used for storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    private void readFile(File f) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        if (!f.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"            f.getParentFile().mkdirs(); // Creates parent directories if they don\u0027t exist","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"            f.createNewFile(); // Creates the file itself","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"     * Loads tasks from the file and returns them as an ArrayList.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"     * @throws DukeException If there\u0027s an error while loading tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"        return loadTasks(f);","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"    private ArrayList\u003cTask\u003e loadTasks(File f) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"            return processFile(f);","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"    private ArrayList\u003cTask\u003e processFile(File f) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"        readFile(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"            String str \u003d s.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"            String[] task \u003d str.split(\" \\\\| \");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"            String taskId \u003d task[0]; // T or D or E","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"            String taskDescription \u003d task[2];","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"            boolean isMark \u003d task[1].equals(\"1\");","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"            switch (taskId) {","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"Carlintyj"},"content":"            case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"Carlintyj"},"content":"                processTodo(taskArr, taskDescription, isMark);","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"Carlintyj"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"Carlintyj"},"content":"            case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"Carlintyj"},"content":"                processDeadline(taskArr, task, taskDescription, isMark);","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"Carlintyj"},"content":"                break;","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"Carlintyj"},"content":"            case \"E\":","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"Carlintyj"},"content":"                processEvent(taskArr, task, taskDescription, isMark);","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"Carlintyj"},"content":"                break;","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"Carlintyj"},"content":"            default:","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"Carlintyj"},"content":"        return taskArr;","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"Carlintyj"},"content":"    private static void processEvent(ArrayList\u003cTask\u003e taskArr, String[] task, String taskDescription, boolean isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"Carlintyj"},"content":"        String[] time \u003d task[3].split(\" to \");","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"Carlintyj"},"content":"        Event eventTask \u003d new Event(taskDescription,","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"Carlintyj"},"content":"                LocalDateTime.parse(time[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"Carlintyj"},"content":"                LocalDateTime.parse(time[1], DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"Carlintyj"},"content":"        if (isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"Carlintyj"},"content":"            eventTask.markAsDone();","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"Carlintyj"},"content":"        taskArr.add(eventTask);","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"Carlintyj"},"content":"    private static void processDeadline(ArrayList\u003cTask\u003e taskArr, String[] task, String taskDescription, boolean isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"Carlintyj"},"content":"        Deadline deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"Carlintyj"},"content":"            DateTimeFormatter altInputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"Carlintyj"},"content":"            LocalDateTime byDateTime \u003d LocalDateTime.parse(task[3], altInputFormatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"Carlintyj"},"content":"            deadline \u003d new Deadline(taskDescription, byDateTime);","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"Carlintyj"},"content":"            if (isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"Carlintyj"},"content":"                deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"Carlintyj"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"Carlintyj"},"content":"            taskArr.add(deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"Carlintyj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"Carlintyj"},"content":"            System.out.println(\"Invalid Date Time: \" + e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"Carlintyj"},"content":"    private static void processTodo(ArrayList\u003cTask\u003e taskArr, String taskDescription, boolean isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"Carlintyj"},"content":"        Todo todo \u003d new Todo(taskDescription);","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"Carlintyj"},"content":"        if (isMark) {","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"Carlintyj"},"content":"            todo.markAsDone();","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"Carlintyj"},"content":"        taskArr.add(todo);","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"Carlintyj"},"content":"     * Updates the contents of the file with the tasks from the provided TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"Carlintyj"},"content":"     * @param taskList The TaskList containing tasks to be updated in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"Carlintyj"},"content":"    public void updateFileContents(TaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"Carlintyj"},"content":"            FileWriter fw \u003d initialiseFileWriter();","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"Carlintyj"},"content":"            processFileContent(taskList, fw);","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"Carlintyj"},"content":"            fw.close();","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"Carlintyj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"Carlintyj"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"Carlintyj"},"content":"    private static void processFileContent(TaskList taskList, FileWriter fw) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"Carlintyj"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"Carlintyj"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"Carlintyj"},"content":"            processIndividualTask(fw, task);","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":142,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"Carlintyj"},"content":"    private static void processIndividualTask(FileWriter fw, Task task) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"Carlintyj"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"Carlintyj"},"content":"            loadTodoTask(fw, task);","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"Carlintyj"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"Carlintyj"},"content":"            loadDeadlineTask(fw, task);","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"Carlintyj"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"Carlintyj"},"content":"            loadEventTask(fw, task);","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":153,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":154,"author":{"gitId":"Carlintyj"},"content":"    private static void loadEventTask(FileWriter fw, Task task) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":155,"author":{"gitId":"Carlintyj"},"content":"        String originalTask \u003d task.writeFileString();","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"Carlintyj"},"content":"        String taskType \u003d originalTask.substring(1, 2); // Extract \"E\"","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"Carlintyj"},"content":"        String taskStatus \u003d originalTask.substring(4, 5); // Extract \" \"","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"Carlintyj"},"content":"        String description \u003d originalTask.substring(7, originalTask.indexOf(\" (from:\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"Carlintyj"},"content":"        String startTime \u003d originalTask.substring(originalTask.indexOf(\"(from: \") + 7,","lastModifiedDate":"2023-09-05"},{"lineNumber":160,"author":{"gitId":"Carlintyj"},"content":"                originalTask.indexOf(\" to:\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":161,"author":{"gitId":"Carlintyj"},"content":"        String endTime \u003d originalTask.substring(originalTask.indexOf(\"to: \") + 4,","lastModifiedDate":"2023-09-05"},{"lineNumber":162,"author":{"gitId":"Carlintyj"},"content":"                originalTask.indexOf(\")\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":163,"author":{"gitId":"Carlintyj"},"content":"        String convertedTask \u003d taskType + \" | \" + (taskStatus.equals(\" \") ? \"0\" : \"1\") + \" | \"","lastModifiedDate":"2023-09-05"},{"lineNumber":164,"author":{"gitId":"Carlintyj"},"content":"                + description + \" | \" + startTime + \" to \" + endTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":165,"author":{"gitId":"Carlintyj"},"content":"        fw.write(convertedTask + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":168,"author":{"gitId":"Carlintyj"},"content":"    private static void loadDeadlineTask(FileWriter fw, Task task) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"Carlintyj"},"content":"        String originalTask \u003d task.writeFileString();","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"Carlintyj"},"content":"        String taskType \u003d originalTask.substring(1, 2); // Extract \"D\"","lastModifiedDate":"2023-09-12"},{"lineNumber":171,"author":{"gitId":"Carlintyj"},"content":"        String taskStatus \u003d originalTask.substring(4, 5); // Extract \"X\"","lastModifiedDate":"2023-09-12"},{"lineNumber":172,"author":{"gitId":"Carlintyj"},"content":"        String description \u003d originalTask.substring(7, originalTask.indexOf(\" (by:\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"Carlintyj"},"content":"        String date \u003d originalTask.substring(originalTask.indexOf(\"(by: \") + 5,","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"Carlintyj"},"content":"                originalTask.indexOf(\")\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"Carlintyj"},"content":"        String convertedTask \u003d taskType + \" | \" + (taskStatus.equals(\"X\") ? \"1\" : \"0\") + \" | \"","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"Carlintyj"},"content":"                + description + \" | \" + date;","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"Carlintyj"},"content":"        fw.write(convertedTask + \"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"Carlintyj"},"content":"    private static void loadTodoTask(FileWriter fw, Task task) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"Carlintyj"},"content":"        String taskType \u003d task.toString().substring(1, 2); // Extract \"T\"","lastModifiedDate":"2023-09-12"},{"lineNumber":183,"author":{"gitId":"Carlintyj"},"content":"        String taskStatus \u003d task.toString().substring(4, 5);","lastModifiedDate":"2023-09-12"},{"lineNumber":184,"author":{"gitId":"Carlintyj"},"content":"        String description \u003d task.toString().substring(7);","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"Carlintyj"},"content":"        String convertedTask \u003d taskType + \" | \" + (taskStatus.equals(\" \") ? \"0\" : \"1\") + \" | \"","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"Carlintyj"},"content":"                + description;","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"Carlintyj"},"content":"        fw.write(convertedTask + \"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"Carlintyj"},"content":"    private FileWriter initialiseFileWriter() throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"Carlintyj"},"content":"        FileWriter file \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"Carlintyj"},"content":"        file.write(\"\");","lastModifiedDate":"2023-09-12"},{"lineNumber":193,"author":{"gitId":"Carlintyj"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-12"},{"lineNumber":194,"author":{"gitId":"Carlintyj"},"content":"        return fw;","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":197}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":" * Represents a task with a specific deadline in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    protected LocalDateTime byDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Deadline object with the specified description and due date.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * @param byDate The due date and time of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"    public Deadline(String description, LocalDateTime byDate) {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Deadline task for display purposes.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Deadline task.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"                + byDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Deadline task for writing to a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"     * The date and time are formatted differently for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Deadline task for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    public String writeFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        String format \u003d byDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"                + format + \")\";","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":" * Represents a task with a specific Event in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Event object with the specified description, start and end time.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @param from The start date and time of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     * @param to The end date and time of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Event task for display purposes.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Event task.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"))","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"                + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Deadline task for writing to a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"     * The date and time are formatted differently for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Event task for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"    public String writeFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"        String toFormat \u003d to.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"        String fromFormat \u003d from.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + fromFormat","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"                + \" to: \" + toFormat + \")\";","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":51}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":" * Represents a generic task in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Task object with the specified description.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"     * @return The status icon of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     * Marks the task as done by setting the \u0027isDone\u0027 flag to true.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"     * Marks the task as not done by setting the \u0027isDone\u0027 flag to false.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the task for display purposes.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the task for writing to a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"     * This method is used to format the task for storage in a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the task for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"    public String writeFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":62}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":" * Represents a list of tasks in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":" * This class provides methods like adding, deleting, marking, and retrieving tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    protected ArrayList\u003cTask\u003e arrTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a TaskList object with an existing list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"     * @param arrTask An ArrayList of tasks to initialize the TaskList with.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    public TaskList(ArrayList\u003cTask\u003e arrTask) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"        this.arrTask \u003d arrTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"     * Constructs an empty TaskList object.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"        this.arrTask \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * Returns the number of tasks in the TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    public int size() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        return arrTask.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index of the task to mark as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"    public void mark(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"        arrTask.get(index).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index of the task to mark as undone.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        arrTask.get(index).markAsUndone();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"     * Returns a formatted string representation of the task at the specified index for display.","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index of the task to retrieve the display string for.","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the task for display purposes.","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    public String getPrint(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        return arrTask.get(index).toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"Carlintyj"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"Carlintyj"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"Carlintyj"},"content":"        this.arrTask.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"Carlintyj"},"content":"     * Deletes a task at the specified index from the TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"Carlintyj"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"Carlintyj"},"content":"        this.arrTask.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"Carlintyj"},"content":"     * Retrieves a task at the specified index from the TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"Carlintyj"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Carlintyj"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"Carlintyj"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"Carlintyj"},"content":"        return this.arrTask.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"Carlintyj"},"content":"     * Returns true or false if the task exists in the task list.","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"Carlintyj"},"content":"     * @param taskString The string of the task to be searched","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"Carlintyj"},"content":"     * @return True if the task is in the list, else false.","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"Carlintyj"},"content":"    public boolean contains(String taskString) {","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"Carlintyj"},"content":"        boolean isContain \u003d false;","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"Carlintyj"},"content":"        for (int i \u003d 0; i \u003c arrTask.size(); i++) {","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"Carlintyj"},"content":"            isContain \u003d isContain || arrTask.get(i).toString().equals(taskString);","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"Carlintyj"},"content":"            arrTask.get(i).isDone \u003d !arrTask.get(i).isDone;","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"Carlintyj"},"content":"            isContain \u003d isContain || arrTask.get(i).toString().equals(taskString);","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"Carlintyj"},"content":"            arrTask.get(i).isDone \u003d !arrTask.get(i).isDone;","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"Carlintyj"},"content":"        return isContain;","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":109}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":" * Represents a task with a specific Todo in the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"     * Constructs a Todo object with the specified description.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Todo task for display purposes.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Event task.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * Returns a string representation of the Deadline task for writing to a file.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     * The date and time are formatted differently for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     * @return A formatted string representation of the Todo task for file storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    public String writeFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        return super.writeFileString();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":37}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"    private void flip() {","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"        Label label \u003d (Label) getChildren().get(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        label.setStyle(\"-fx-background-color: #FFFFFF;\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"                + \"    -fx-background-radius: 20px;\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"                + \"    -fx-text-fill: black;\");","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"Carlintyj"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"Carlintyj"},"content":"        db.flip();","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"Carlintyj"},"content":"        return db;","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":66}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    private Duke duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"            stage.show();","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":32}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"     * Initialises the Main Window","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"                DialogBox.getDukeDialog(ui.showWelcome(), dukeImage)","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"        );","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"        );","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":59}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":" * Represents the user interface of the Duke application.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":" * This class is responsible for displaying messages and reading user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"    private String botName \u003d \"CARL BOT\";","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"    private String message \u003d \"\";","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"     * Displays a message in the message card.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"     * @return String of message.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"    public String sendMessage(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"        return this.message \u003d message;","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"     * Displays a welcome message.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"     * @return The welcome message to be displayed.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"    public String showWelcome() {","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"        return botName + \":\\nHello! I\u0027m \" + botName","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"                + \"\\nWhat can I do for you?\\n\"","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"                + \"Type \\\"help\\\" to begin\";","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"     * Displays a welcome message.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"     * @return The welcome message to be displayed.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    public String displayMessage() {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        return botName + \":\\n\" + this.message;","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":45}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"396.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17.0.7\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"incoming-bubble\" stylesheets\u003d\"@../values/styles.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"            \u003cFont name\u003d\"KoHo Regular\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"90.0\" fitWidth\u003d\"90.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"\u003cAnchorPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../values/styles.css\" xmlns\u003d\"http://javafx.com/javafx/17.0.7\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"72.0\" prefWidth\u003d\"396.0\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"            \u003cImageView fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"               \u003cimage\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"                  \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"               \u003c/image\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"               \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"                  \u003cInsets left\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"               \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"            \u003c/ImageView\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"            \u003cLabel prefHeight\u003d\"72.0\" prefWidth\u003d\"76.0\" text\u003d\"Carl Bot\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"                  \u003cFont name\u003d\"KoHo Regular\" size\u003d\"20.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"               \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"                  \u003cInsets left\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"               \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"            \u003cCircle fill\u003d\"#50c984\" radius\u003d\"4.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"            \u003cLabel prefHeight\u003d\"72.0\" prefWidth\u003d\"76.0\" text\u003d\"Online\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"                  \u003cFont name\u003d\"KoHo Regular\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"               \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"                  \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"               \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"         \u003c/children\u003e\u003c/HBox\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"3.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"347.0\" promptText\u003d\"Type something to send ...\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hvalue\u003d\"1.0\" layoutY\u003d\"71.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" pannable\u003d\"true\" prefHeight\u003d\"487.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"         \u003ccontent\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"483.0\" prefWidth\u003d\"396.0\" styleClass\u003d\"background-color\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"         \u003c/content\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"      \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"39.0\" layoutX\u003d\"361.0\" layoutY\u003d\"564.0\" onMouseClicked\u003d\"#handleUserInput\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"         \u003cimage\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"            \u003cImage url\u003d\"@../images/send-message.png\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"         \u003c/image\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"      \u003c/ImageView\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Carlintyj":57}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"    public void AddSingleTodo() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo read book\", \u0027T\u0027)","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"                .execute(testList, new Ui(), new Storage(\"data/tasks.txt\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(1, testList.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    public void AddManyTasks() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo read book\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"event project meeting /from 2019-09-02 18:00 /to 2019-09-02 19:00\", \u0027E\u0027)","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"                .execute(testList, ui, storage);","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"deadline return book /by 2019-09-02 18:00\", \u0027D\u0027)","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"                .execute(testList, ui, storage);","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo join sports\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo homework\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo buy food\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(6, testList.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    public void InvalidDate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"                new AddCommand(\"event project meeting /from 2019-09-02 18:00 /to 2019-09 19:00\", \u0027E\u0027)","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"                        .execute(testList, ui, storage));","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"    public void ExitTest() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        Command c \u003d new AddCommand(\"todo read book\", \u0027T\u0027);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"        c.execute(testList, new Ui(), new Storage(\"data/tasks.txt\"));;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"        boolean isExit \u003d c.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(false, isExit);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":58}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"public class MarkCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"    public void SingleMark() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo read book\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Carlintyj"},"content":"        new MarkCommand(0).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(\"[T][X] read book\", testList.getPrint(0));","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Carlintyj"},"content":"    public void ManyTasksMark() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo read book\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"event project meeting /from 2019-09-02 18:00 /to 2019-09-02 19:00\", \u0027E\u0027)","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Carlintyj"},"content":"                .execute(testList, ui, storage);","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"deadline return book /by 2019-09-02 18:00\", \u0027D\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo join sports\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo homework\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo buy food\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Carlintyj"},"content":"        new MarkCommand(2).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(\"[D][X] return book  (by: Sep 02 2019 18:00)\", testList.getPrint(2));","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Carlintyj"},"content":"    public void InvalidMarkIndex() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Carlintyj"},"content":"        assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Carlintyj"},"content":"                new MarkCommand(0).execute(testList, ui, storage));","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Carlintyj"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Carlintyj"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Carlintyj"},"content":"    public void ExitTest() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Carlintyj"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Carlintyj"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Carlintyj"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Carlintyj"},"content":"        new AddCommand(\"todo read book\", \u0027T\u0027).execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Carlintyj"},"content":"        Command c \u003d new MarkCommand(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Carlintyj"},"content":"        c.execute(testList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(\"[T][X] read book\", testList.getPrint(0));","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Carlintyj"},"content":"        boolean isExit \u003d c.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Carlintyj"},"content":"        assertEquals(false, isExit);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Carlintyj"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Carlintyj"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":61}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"T | 0 | read book","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"D | 1 | return book  | 2019-09-02 18:00","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"T | 0 | join sports club","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Carlintyj":3}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"T | 0 | read book","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"D | 1 | return book  | 2019-09-02 18:00","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"T | 0 | join sports club","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Carlintyj":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Carlintyj"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Carlintyj"},"content":"deadline return book /by 2019-09-02 18:00","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Carlintyj"},"content":"event project meeting /from 2019-09-02 18:00 /to 2019-09-02 19:00","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Carlintyj"},"content":"todo join sports club","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Carlintyj"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Carlintyj"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Carlintyj"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Carlintyj"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Carlintyj"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Carlintyj"},"content":"unmark 7","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Carlintyj"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Carlintyj"},"content":"deadline","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Carlintyj"},"content":"blah","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Carlintyj"},"content":"delete 3","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Carlintyj"},"content":"delete 10","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Carlintyj"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Carlintyj"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Carlintyj":17}}]
