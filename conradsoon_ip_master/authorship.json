[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"    mainClass.set(\"deterministicparrot.DeterministicParrot\")","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"mainClassName \u003d \u0027deterministicparrot.DeterministicParrot\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"    archiveBaseName \u003d \"deterministicparrot\"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"conradsoon":5,"-":40}},{"path":"src/main/java/deterministicparrot/DPUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" * Utility class for date and time formatting and parsing in the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"public class DPUtils {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"     * Formats a LocalDateTime object into a string representation using the pattern \"MMM d yyyy\".","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"     * @param dateTime The LocalDateTime object to be formatted.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"     * @return A formatted string representation of the LocalDateTime.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"    public static String dPFormatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"     * Formats a LocalDateTime object into a string representation using the pattern \"yyyy-MM-dd\".","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"     * This format is suitable for saving dates in files.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"     * @param dateTime The LocalDateTime object to be formatted.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"     * @return A formatted string representation of the LocalDateTime.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"    public static String saveFormatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"     * Tries to parse a string representation of a date and time into a LocalDateTime object.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"     * The supported format is \"yyyy-MM-dd\u0027T\u0027HH:mm:ss\".","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"     * @param dateTime The string representation of the date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"     * @return A LocalDateTime object parsed from the input string.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"     * @throws DateTimeParseException If the input string is not in the expected format.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"    public static LocalDateTime dPTryParseDateTime(String dateTime) throws DateTimeParseException {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"        return LocalDateTime.parse(dateTime + \"T00:00:00\", DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":43}},{"path":"src/main/java/deterministicparrot/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"     * The deadline for this task.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     * Constructs a Deadline object with the given task description and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"     * @param by The deadline of the task in string format.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"     * @throws DateTimeParseException If the provided deadline is in an invalid date format.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"    public Deadline(String description, String by) throws DateTimeParseException {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"        super(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"            this.by \u003d DPUtils.dPTryParseDateTime(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"            throw new IllegalArgumentException(\"Invalid date format for \u0027by\u0027. Please provide a valid date format.\", e);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"     * Returns a string representation of the Deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"     * @return A string containing the task type, description, and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), DPUtils.dPFormatDateTime(this.by));","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":40}},{"path":"src/main/java/deterministicparrot/DeterministicParrot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"import java.util.*;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" * Main class for the Deterministic Parrot task management application.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"public class DeterministicParrot {","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    //static variable storing the path to data file","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"    //init by setting input and output","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"    private Storage storage \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"    private boolean endParrot \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"     * Constructs a DeterministicParrot object.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"     * Initializes the task list and sets up command handlers.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    public DeterministicParrot(){","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"        this.initCommandHandlers();","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"     * Initializes command handlers for various user commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"    private void initCommandHandlers() {","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"list\", args -\u003e printList());","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"bye\", args -\u003e bye());","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"mark\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"            markAsDone(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"unmark\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"            markAsUndone(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"todo\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"            addToDo(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"deadline\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"            addDeadline(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"event\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"            addEvent(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"delete\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"            deleteTask(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"        parser.registerHandler(\"find\", args -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"            findTask(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"     * Saves the task list to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"     * @throws FileNotFoundException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"    private void dumpTaskListToFile() throws FileNotFoundException {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"        storage.save(this.taskList.serialize());","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"conradsoon"},"content":"     * Adds a task to the list and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"conradsoon"},"content":"     * @param t The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while adding the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"conradsoon"},"content":"    private void addToList(Task t) throws Exception{","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"conradsoon"},"content":"        this.taskList.addTask(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"     \" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"       \" + t);","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"     \" + \"Now you have \" + this.taskList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"conradsoon"},"content":"        dumpTaskListToFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"conradsoon"},"content":"     * Marks a task as done and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"conradsoon"},"content":"     * @param args The arguments passed to the mark command.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while marking the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"conradsoon"},"content":"    private void markAsDone(String args[]) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"conradsoon"},"content":"        if(args.length \u003c 2){","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"conradsoon"},"content":"        int i;","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"conradsoon"},"content":"            i \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"conradsoon"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d this.taskList.markAsDone(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"    \" + \"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"       \" + t);","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"conradsoon"},"content":"        dumpTaskListToFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":100,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"conradsoon"},"content":"     * Marks a task as undone and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"conradsoon"},"content":"     * @param toks The arguments passed to the unmark command.","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while marking the task as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"conradsoon"},"content":"    private void markAsUndone(String toks[]) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"conradsoon"},"content":"        if(toks.length \u003c 2){","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"conradsoon"},"content":"        int i;","lastModifiedDate":"2023-08-21"},{"lineNumber":111,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"conradsoon"},"content":"            i \u003d Integer.parseInt(toks[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"conradsoon"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d this.taskList.markAsUndone(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"    \" + \"OK, I\u0027ve marked this task as not done yet:\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"       \" + t);","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"conradsoon"},"content":"        dumpTaskListToFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":121,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":122,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"conradsoon"},"content":"     * Adds a \"ToDo\" task to the list and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"conradsoon"},"content":"     * @param args The arguments passed to the todo command.","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while adding the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"conradsoon"},"content":"    private void addToDo(String[] args) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"conradsoon"},"content":"        if (args.length \u003c 2) {","lastModifiedDate":"2023-08-21"},{"lineNumber":130,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":131,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":132,"author":{"gitId":"conradsoon"},"content":"        String taskDescription \u003d String.join(\" \", Arrays.copyOfRange(args, 1, args.length));","lastModifiedDate":"2023-08-21"},{"lineNumber":133,"author":{"gitId":"conradsoon"},"content":"        ToDo t \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-08-21"},{"lineNumber":134,"author":{"gitId":"conradsoon"},"content":"        addToList(t);","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":136,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":137,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"conradsoon"},"content":"     * Adds a \"Deadline\" task to the list and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"conradsoon"},"content":"     * @param args The arguments passed to the deadline command.","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while adding the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"conradsoon"},"content":"    private void addDeadline(String[] args) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"conradsoon"},"content":"        int byIndex \u003d Arrays.asList(args).indexOf(\"/by\");","lastModifiedDate":"2023-08-21"},{"lineNumber":145,"author":{"gitId":"conradsoon"},"content":"        if (byIndex \u003d\u003d -1 || byIndex \u003d\u003d args.length - 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":146,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Invalid deadline format. Use /by to specify deadline time.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":147,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":148,"author":{"gitId":"conradsoon"},"content":"        String taskName \u003d String.join(\" \", Arrays.copyOfRange(args, 1, byIndex));","lastModifiedDate":"2023-08-21"},{"lineNumber":149,"author":{"gitId":"conradsoon"},"content":"        String deadline \u003d String.join(\" \", Arrays.copyOfRange(args, byIndex + 1, args.length));","lastModifiedDate":"2023-08-21"},{"lineNumber":150,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":151,"author":{"gitId":"conradsoon"},"content":"        Deadline t \u003d new Deadline(taskName, deadline);","lastModifiedDate":"2023-08-21"},{"lineNumber":152,"author":{"gitId":"conradsoon"},"content":"        addToList(t);","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":154,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"conradsoon"},"content":"     * Adds an \"Event\" task to the list and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"conradsoon"},"content":"     * @param args The arguments passed to the event command.","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while adding the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"conradsoon"},"content":"    private void addEvent(String[] args) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"conradsoon"},"content":"        int fromIndex \u003d Arrays.asList(args).indexOf(\"/from\");","lastModifiedDate":"2023-08-21"},{"lineNumber":163,"author":{"gitId":"conradsoon"},"content":"        int toIndex \u003d Arrays.asList(args).indexOf(\"/to\");","lastModifiedDate":"2023-08-21"},{"lineNumber":164,"author":{"gitId":"conradsoon"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1 || toIndex \u003c\u003d fromIndex || fromIndex \u003d\u003d args.length - 1 || toIndex \u003d\u003d args.length - 1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Invalid event format. Use /from and /to to specify event time.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":167,"author":{"gitId":"conradsoon"},"content":"        String eventName \u003d String.join(\" \", Arrays.copyOfRange(args, 1, fromIndex));","lastModifiedDate":"2023-08-21"},{"lineNumber":168,"author":{"gitId":"conradsoon"},"content":"        String startTime \u003d String.join(\" \", Arrays.copyOfRange(args, fromIndex + 1, toIndex));","lastModifiedDate":"2023-08-21"},{"lineNumber":169,"author":{"gitId":"conradsoon"},"content":"        String endTime \u003d String.join(\" \", Arrays.copyOfRange(args, toIndex + 1, args.length));","lastModifiedDate":"2023-08-21"},{"lineNumber":170,"author":{"gitId":"conradsoon"},"content":"        Event t \u003d new Event(eventName, startTime, endTime);","lastModifiedDate":"2023-08-21"},{"lineNumber":171,"author":{"gitId":"conradsoon"},"content":"        addToList(t);","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":173,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"conradsoon"},"content":"     * Deletes a task from the list and updates the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"conradsoon"},"content":"     * @param args The arguments passed to the delete command.","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while deleting the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"conradsoon"},"content":"    private void deleteTask(String args[]) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"conradsoon"},"content":"        if(args.length \u003c 2){","lastModifiedDate":"2023-08-21"},{"lineNumber":182,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":183,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":184,"author":{"gitId":"conradsoon"},"content":"        int i;","lastModifiedDate":"2023-08-21"},{"lineNumber":185,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":186,"author":{"gitId":"conradsoon"},"content":"            i \u003d Integer.parseInt(args[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":187,"author":{"gitId":"conradsoon"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":188,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":189,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":190,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d this.taskList.deleteTask(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"    \" + \"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"       \" + t);","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"     \" + \"Now you have \" + this.taskList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"conradsoon"},"content":"        dumpTaskListToFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":196,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"conradsoon"},"content":"     * Displays the list of tasks in the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"conradsoon"},"content":"    private void printList(){","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"     \" + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(this.taskList.formatAsString());","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":203,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"conradsoon"},"content":"     * Performs necessary actions before exiting the application.","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs during the exit process.","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":209,"author":{"gitId":"conradsoon"},"content":"    private void bye() throws Exception{","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"conradsoon"},"content":"        dumpTaskListToFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"conradsoon"},"content":"        this.endParrot \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"conradsoon"},"content":"        this.ui.bye();","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":214,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":215,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"conradsoon"},"content":"     * Polls for user input and handles commands until the application is exited.","lastModifiedDate":"2023-09-01"},{"lineNumber":217,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":218,"author":{"gitId":"conradsoon"},"content":"    private void poll() {","lastModifiedDate":"2023-08-21"},{"lineNumber":219,"author":{"gitId":"conradsoon"},"content":"        this.ui.greet();","lastModifiedDate":"2023-09-01"},{"lineNumber":220,"author":{"gitId":"conradsoon"},"content":"        try{","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"conradsoon"},"content":"            this.taskList \u003d TaskList.deserialize(storage.load());","lastModifiedDate":"2023-09-01"},{"lineNumber":222,"author":{"gitId":"conradsoon"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":223,"author":{"gitId":"conradsoon"},"content":"            this.ui.println(\"     \" + \"No saved task list found. Starting with empty task list.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"conradsoon"},"content":"            this.taskList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":225,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":226,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"conradsoon"},"content":"        while (true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":228,"author":{"gitId":"conradsoon"},"content":"            if(this.endParrot){","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"conradsoon"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":230,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"conradsoon"},"content":"            String input \u003d this.ui.readCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"conradsoon"},"content":"            if (input.isEmpty()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":233,"author":{"gitId":"conradsoon"},"content":"                continue; // Skip empty input","lastModifiedDate":"2023-08-21"},{"lineNumber":234,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":235,"author":{"gitId":"conradsoon"},"content":"            this.ui.printDash();","lastModifiedDate":"2023-09-01"},{"lineNumber":236,"author":{"gitId":"conradsoon"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":237,"author":{"gitId":"conradsoon"},"content":"                this.parser.handleCommand(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"conradsoon"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"conradsoon"},"content":"                this.ui.printError(e);","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":241,"author":{"gitId":"conradsoon"},"content":"            this.ui.printDash();","lastModifiedDate":"2023-09-01"},{"lineNumber":242,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":243,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":244,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"conradsoon"},"content":"    private void findTask(String args[]) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":246,"author":{"gitId":"conradsoon"},"content":"        if(args.length \u003c 2){","lastModifiedDate":"2023-09-01"},{"lineNumber":247,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Please provide a search term.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":248,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":249,"author":{"gitId":"conradsoon"},"content":"        String searchTerm \u003d String.join(\" \", Arrays.copyOfRange(args, 1, args.length));","lastModifiedDate":"2023-09-01"},{"lineNumber":250,"author":{"gitId":"conradsoon"},"content":"        List\u003cTaskList.SearchResult\u003e results \u003d this.taskList.findTask(searchTerm);","lastModifiedDate":"2023-09-01"},{"lineNumber":251,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(\"     \" + \"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":252,"author":{"gitId":"conradsoon"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":253,"author":{"gitId":"conradsoon"},"content":"        for(int i \u003d 0; i \u003c results.size(); i++){","lastModifiedDate":"2023-09-01"},{"lineNumber":254,"author":{"gitId":"conradsoon"},"content":"            sb.append(\"     \" + results.get(i).index + \". \" + results.get(i).task + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":255,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":256,"author":{"gitId":"conradsoon"},"content":"        this.ui.println(sb.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":257,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":258,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":259,"author":{"gitId":"conradsoon"},"content":"     * Main method to start the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":260,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":261,"author":{"gitId":"conradsoon"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2023-09-01"},{"lineNumber":262,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":263,"author":{"gitId":"conradsoon"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":264,"author":{"gitId":"conradsoon"},"content":"        DeterministicParrot parrot \u003d new DeterministicParrot();","lastModifiedDate":"2023-08-21"},{"lineNumber":265,"author":{"gitId":"conradsoon"},"content":"        parrot.poll();","lastModifiedDate":"2023-08-21"},{"lineNumber":266,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":267,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"conradsoon":267}},{"path":"src/main/java/deterministicparrot/DeterministicParrotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":" * Custom exception class for the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":" * This exception is thrown to indicate errors specific to the application.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"public class DeterministicParrotException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"     * Constructs a new DeterministicParrotException with the specified detail message.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"     * @param message The detail message that describes the exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"    public DeterministicParrotException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":16}},{"path":"src/main/java/deterministicparrot/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":" * Represents an event task in the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" * An event task has a name and start and end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    protected LocalDateTime timeStart;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"    protected LocalDateTime timeEnd;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"     * Constructs an Event object with the specified name, start time, and end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * @param name      The name of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     * @param timeStart The start time of the event in string format.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"     * @param timeEnd   The end time of the event in string format.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"     * @throws DateTimeParseException If the input time strings are not in the expected format.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"     * @throws IllegalArgumentException If the start time is after the end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    public Event(String name, String timeStart, String timeEnd) throws DateTimeParseException {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"        super(name);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"            this.timeStart \u003d DPUtils.dPTryParseDateTime(timeStart);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"            throw new IllegalArgumentException(\"Invalid date format for \u0027timeStart\u0027. Please provide a valid date.\", e);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"            this.timeEnd \u003d DPUtils.dPTryParseDateTime(timeEnd);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"            throw new IllegalArgumentException(\"Invalid date format for \u0027timeEnd\u0027. Please provide a valid date.\", e);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"        if (this.timeStart.isAfter(this.timeEnd)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"            throw new IllegalArgumentException(\"\u0027timeStart\u0027 cannot be after \u0027timeEnd\u0027.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"     * Returns a string representation of the Event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"     * @return A formatted string containing the task type, name, and start and end times.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), DPUtils.dPFormatDateTime(this.timeStart), DPUtils.dPFormatDateTime(this.timeEnd));","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":51}},{"path":"src/main/java/deterministicparrot/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.util.Map;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":" * Parser class for handling user commands in the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"    public Parser() {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"     * Functional interface for a checked consumer that can throw exceptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * @param \u003cT\u003e The type of input to the consumer.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    @FunctionalInterface","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"    interface CheckedConsumer\u003cT\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"        void accept(T t) throws Exception;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"    private Map\u003cString, CheckedConsumer\u003cString[]\u003e\u003e commandHandlers \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"     * Registers a command handler for a specific command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"     * @param command The command to be registered.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"     * @param handler The command handler function.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"    public void registerHandler(String command, CheckedConsumer\u003cString[]\u003e handler) {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"        this.commandHandlers.put(command, handler);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"     * Handles a user command by invoking the appropriate command handler.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"     * @param input The user input containing the command and arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If an error occurs while handling the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"    public void handleCommand(String input) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"        String[] tokens \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"        CheckedConsumer\u003cString[]\u003e cmdHandler \u003d this.commandHandlers.get(tokens[0]);","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"        if (cmdHandler !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"            cmdHandler.accept(tokens);","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":51}},{"path":"src/main/java/deterministicparrot/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.io.File;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" * Storage class for loading and saving data to/from files in the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"    private static final String DATA_FILE_PATH \u003d \"./data/data.txt\";","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     * Constructs a new Storage object.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"    public Storage() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"     * Loads data from the file and returns the raw string content.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"     * @return The raw string content read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"     * @throws FileNotFoundException If the data file cannot be found.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"    public String load() throws FileNotFoundException {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"        File file \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"        StringBuilder rawData \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"        if (file.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"            try (Scanner fileScanner \u003d new Scanner(file)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"                while (fileScanner.hasNext()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"                    rawData.append(fileScanner.nextLine()).append(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"            createEmptyDataFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"        return rawData.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"     * Writes the provided raw string content to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"     * @param rawData The raw string content to be saved to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"     * @throws FileNotFoundException If the data file cannot be found.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"    public void save(String rawData) throws FileNotFoundException {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"        try (PrintWriter fileWriter \u003d new PrintWriter(DATA_FILE_PATH)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"            fileWriter.print(rawData); // Using print to avoid adding an additional newline","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"     * Creates the necessary directories and an empty data file if they don\u0027t exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"     * @throws FileNotFoundException If the data file cannot be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"    private void createEmptyDataFile() throws FileNotFoundException {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"        File file \u003d new File(DATA_FILE_PATH);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"        if (!file.getParentFile().exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"        try (PrintWriter fileWriter \u003d new PrintWriter(DATA_FILE_PATH)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"conradsoon"},"content":"            // Create an empty file","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":69}},{"path":"src/main/java/deterministicparrot/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":" * Represents a task in the Deterministic Parrot application.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" * This is an abstract class that serves as the base for different types of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"abstract public class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    private String name;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"     * Constructs a Task object with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"        this.name \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"     * Gets the name (description) of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"    public String getName() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"        return this.name;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"     * Gets the completion status of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"     * @return True if the task is marked as done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"     * Marks the task as not done (undone).","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"     * Returns a string representation of the task, including its completion status.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"     * @return A formatted string indicating the completion status and name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"        return \"[\" + (this.isDone ? \"X\" : \" \") + \"] \" + this.name;","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":65}},{"path":"src/main/java/deterministicparrot/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.util.List;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":" * Represents a list of tasks that can be managed and manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"    public class SearchResult{","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"        public int index;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"        public Task task;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"     * Constructs a TaskList with the given list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"     * @param tasks The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"        this.list \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"     * Formats the tasks in the TaskList as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"     * @return A formatted string representing the tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"    public String formatAsString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        for (int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"            sb.append(\"     \" + (i + 1) + \". \" + this.list.get(i) + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"     * Serializes the TaskList to a string format.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"     * @return A serialized string representation of the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"    public String serialize() {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"        for (Task task : this.list) {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"            if (task instanceof ToDo) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"                sb.append(\"T | \").append(task.getIsDone() ? \"1\" : \"0\").append(\" | \").append(task.getName()).append(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"                sb.append(\"D | \").append(task.getIsDone() ? \"1\" : \"0\").append(\" | \").append(task.getName()).append(\" | \").append(DPUtils.saveFormatDateTime(deadline.by)).append(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"                sb.append(\"E | \").append(task.getIsDone() ? \"1\" : \"0\").append(\" | \").append(task.getName()).append(\" | \").append(DPUtils.saveFormatDateTime(event.timeStart)).append(\" \").append(DPUtils.saveFormatDateTime(event.timeEnd)).append(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"conradsoon"},"content":"     * Deserializes a string representation to create a TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"conradsoon"},"content":"     * @param rawData The serialized string representing the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"conradsoon"},"content":"     * @return A deserialized TaskList object.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"conradsoon"},"content":"     * @throws Exception If there\u0027s an error during deserialization.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"conradsoon"},"content":"    public static TaskList deserialize(String rawData) throws Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"conradsoon"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"conradsoon"},"content":"        String[] lines \u003d rawData.split(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"conradsoon"},"content":"        for (String line : lines) {","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"conradsoon"},"content":"            String[] data \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"conradsoon"},"content":"            switch (data[0]) {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"conradsoon"},"content":"                case \"T\":","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"conradsoon"},"content":"                    ToDo todo \u003d new ToDo(data[2]);","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"conradsoon"},"content":"                    if (data[1].equals(\"1\")) todo.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"conradsoon"},"content":"                    tasks.add(todo);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"conradsoon"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"conradsoon"},"content":"                case \"D\":","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"conradsoon"},"content":"                    Deadline deadline \u003d new Deadline(data[2], data[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"conradsoon"},"content":"                    if (data[1].equals(\"1\")) deadline.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"conradsoon"},"content":"                    tasks.add(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"conradsoon"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"conradsoon"},"content":"                case \"E\":","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"conradsoon"},"content":"                    String[] time \u003d data[3].split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"conradsoon"},"content":"                    Event event \u003d new Event(data[2], time[0], time[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"conradsoon"},"content":"                    if (data[1].equals(\"1\")) event.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"conradsoon"},"content":"                    tasks.add(event);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"conradsoon"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"conradsoon"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"conradsoon"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"conradsoon"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"conradsoon"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"conradsoon"},"content":"        return this.list.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"conradsoon"},"content":"     * Checks if the provided index is valid and throws an exception if not.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"conradsoon"},"content":"     * @param idx The index to check.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"conradsoon"},"content":"     * @throws DeterministicParrotException If the index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"conradsoon"},"content":"    private void checkIfValidIdx(int idx) throws DeterministicParrotException {","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"conradsoon"},"content":"        if (idx \u003c\u003d 0 || idx \u003e list.size()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"conradsoon"},"content":"            throw new DeterministicParrotException(\"Invalid task number.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"conradsoon"},"content":"     * Gets a task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"conradsoon"},"content":"     * @param idx The index of the task to retrieve.","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"conradsoon"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"conradsoon"},"content":"     * @throws DeterministicParrotException If the index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"conradsoon"},"content":"    public Task getTask(int idx) throws DeterministicParrotException {","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"conradsoon"},"content":"        checkIfValidIdx(idx);","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"conradsoon"},"content":"        return this.list.get(idx - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"conradsoon"},"content":"     * Deletes a task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"conradsoon"},"content":"     * @param idx The index of the task to delete.","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"conradsoon"},"content":"     * @return The deleted task.","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"conradsoon"},"content":"     * @throws DeterministicParrotException If the index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"conradsoon"},"content":"    public Task deleteTask(int idx) throws DeterministicParrotException {","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"conradsoon"},"content":"        checkIfValidIdx(idx);","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d this.list.remove(idx - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"conradsoon"},"content":"        return t;","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"conradsoon"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"conradsoon"},"content":"     * @param t The task to add.","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"conradsoon"},"content":"     * @return The new size of the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"conradsoon"},"content":"    public int addTask(Task t) {","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"conradsoon"},"content":"        this.list.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"conradsoon"},"content":"        return getSize();","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"conradsoon"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"conradsoon"},"content":"     * @param idx The index of the task to mark as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"conradsoon"},"content":"     * @return The task that was marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"conradsoon"},"content":"     * @throws DeterministicParrotException If the index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"conradsoon"},"content":"    public Task markAsDone(int idx) throws DeterministicParrotException {","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d getTask(idx);","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"conradsoon"},"content":"        t.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"conradsoon"},"content":"        return t;","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"conradsoon"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"conradsoon"},"content":"     * @param idx The index of the task to mark as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"conradsoon"},"content":"     * @return The task that was marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"conradsoon"},"content":"     * @throws DeterministicParrotException If the index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"conradsoon"},"content":"    public Task markAsUndone(int idx) throws DeterministicParrotException {","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"conradsoon"},"content":"        Task t \u003d getTask(idx);","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"conradsoon"},"content":"        t.markAsUndone();","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"conradsoon"},"content":"        return t;","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"conradsoon"},"content":"    public List\u003cSearchResult\u003e findTask(String keyword){","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"conradsoon"},"content":"        List\u003cSearchResult\u003e results \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"conradsoon"},"content":"        for(int i \u003d 0; i \u003c this.list.size(); i++){","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"conradsoon"},"content":"            Task t \u003d this.list.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"conradsoon"},"content":"            if(t.getName().contains(keyword)){","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"conradsoon"},"content":"                SearchResult sr \u003d new SearchResult();","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"conradsoon"},"content":"                sr.index \u003d i+1;","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"conradsoon"},"content":"                sr.task \u003d t;","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"conradsoon"},"content":"                results.add(sr);","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"conradsoon"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"conradsoon"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"conradsoon"},"content":"        return results;","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":196}},{"path":"src/main/java/deterministicparrot/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":" * Represents a task of type \"To-Do\".","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":"     * Constructs a ToDo task with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"     * @param s The description of the ToDo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"    public ToDo(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * Returns a formatted string representation of the ToDo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"     * @return A string representation of the ToDo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"conradsoon":25}},{"path":"src/main/java/deterministicparrot/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":" * Represents the user interface for interacting with the application.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    private Scanner s;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"    private PrintWriter pw;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"     * Constructs a Ui instance with the provided Scanner and PrintWriter.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"     * @param s The Scanner to read input from the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"     * @param pw The PrintWriter to output messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"    public Ui(Scanner s, PrintWriter pw) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"        this.s \u003d s;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"        this.pw \u003d pw;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"     * Constructs a Ui instance with default System.in and System.out.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"    public Ui() {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"        this.s \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"        this.pw \u003d new PrintWriter(System.out, true);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"     * Reads a command input from the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        return s.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"    public void greet() {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"        this.printDash();","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(\"     \" + \"Hello! I\u0027m deterministicparrot.DeterministicParrot\");","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(\"     \" + \"What can I do for you?\");","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"        this.printDash();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"     * Displays a goodbye message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"    public void bye() {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(\"     \" + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"     * Reads and trims a line of input from the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"     * @return The trimmed user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"    public String readLine() {","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"        return this.s.nextLine().trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"conradsoon"},"content":"     * Prints a string followed by a new line.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"conradsoon"},"content":"     * @param s The string to be printed.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"conradsoon"},"content":"    public void println(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"conradsoon"},"content":"     * Prints an error message from an exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"conradsoon"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"conradsoon"},"content":"     * @param e The exception containing the error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"conradsoon"},"content":"    public void printError(Exception e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"conradsoon"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"conradsoon"},"content":"     * Prints a dashed line separator.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"conradsoon"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"conradsoon"},"content":"    public void printDash() {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"conradsoon"},"content":"        this.pw.println(\"    ____________________________________________________________\");","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":92}},{"path":"src/test/java/deterministicparrot/DeterministicParrotIntegrationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"public class DeterministicParrotIntegrationTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"    private final PrintStream originalErr \u003d System.err;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    @AfterEach","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"        System.setOut(originalOut);","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"        System.setErr(originalErr);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"    public void testDeterministicParrotFlow() {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"        //TODO: make this test run in a temporary directory","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"        String simulatedUserInput \u003d \"todo test\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"                \"deadline test2 /by 2023-01-02\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"                \"event test3 /from 2020-01-01 /to 2020-01-02\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"                \"list\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"                \"bye\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"        System.setIn(new ByteArrayInputStream(simulatedUserInput.getBytes()));","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"conradsoon"},"content":"        DeterministicParrot.main(new String[]{});","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"conradsoon"},"content":"        String expectedOutput \u003d \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"conradsoon"},"content":"                \"     Hello! I\u0027m deterministicparrot.DeterministicParrot\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"conradsoon"},"content":"                \"     What can I do for you?\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"conradsoon"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"conradsoon"},"content":"                \"       [T][ ] test\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"conradsoon"},"content":"                \"     Now you have 1 tasks in the list.\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"conradsoon"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"conradsoon"},"content":"                \"       [D][ ] test2 (by: Jan 2 2023)\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"conradsoon"},"content":"                \"     Now you have 2 tasks in the list.\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"conradsoon"},"content":"                \"     Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"conradsoon"},"content":"                \"       [E][ ] test3 (from: Jan 1 2020 to: Jan 2 2020)\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"conradsoon"},"content":"                \"     Now you have 3 tasks in the list.\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"conradsoon"},"content":"                \"     Here are the tasks in your list:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"conradsoon"},"content":"                \"     1. [T][ ] test\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"conradsoon"},"content":"                \"     2. [D][ ] test2 (by: Jan 2 2023)\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"conradsoon"},"content":"                \"     3. [E][ ] test3 (from: Jan 1 2020 to: Jan 2 2020)\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"conradsoon"},"content":"                \"\\n\"+","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"conradsoon"},"content":"                \"     Bye. Hope to see you again soon!\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"conradsoon"},"content":"                \"    ____________________________________________________________\\n\"; // the entire expected output as shown in your example","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"conradsoon"},"content":"        assertEquals(expectedOutput, outContent.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":72}},{"path":"src/test/java/deterministicparrot/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"package deterministicparrot;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"conradsoon"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"conradsoon"},"content":"public class EventTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"conradsoon"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"conradsoon"},"content":"    public void createEvent_validInput_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"conradsoon"},"content":"        Event event \u003d new Event(\"Birthday Party\", \"2023-09-02\", \"2023-09-02\");","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"conradsoon"},"content":"        assertEquals(\"[E][ ] Birthday Party (from: Sep 2 2023 to: Sep 2 2023)\", event.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"conradsoon"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"conradsoon"},"content":"    public void createEvent_invalidTimeStartFormat_throwsIllegalArgumentException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"conradsoon"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"conradsoon"},"content":"            Event event \u003d new Event(\"Birthday Party\", \"02-09-2023\", \"2023-09-02\");","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"conradsoon"},"content":"    public void createEvent_invalidTimeEndFormat_throwsIllegalArgumentException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"conradsoon"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"conradsoon"},"content":"            Event event \u003d new Event(\"Birthday Party\", \"2023-09-02\", \"02-09-2023\");","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"conradsoon"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"conradsoon"},"content":"    public void createEvent_timeStartAfterTimeEnd_throwsIllegalArgumentException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"conradsoon"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"conradsoon"},"content":"            Event event \u003d new Event(\"Birthday Party\", \"2023-09-03\", \"2023-09-02\");","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"conradsoon"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"conradsoon"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"conradsoon"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"conradsoon"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"conradsoon":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"todo borrow book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"conradsoon"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"conradsoon"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"conradsoon"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"conradsoon"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"conradsoon":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"conradsoon"},"content":"#!/usr/bin/env zsh","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"conradsoon"},"content":"java -classpath ../bin DeterministicParrot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"conradsoon":2,"-":36}}]
