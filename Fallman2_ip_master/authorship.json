[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"checkstyle {","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    archiveBaseName \u003d \"puke\"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    mainClassName \u003d \"puke.Main\"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Fallman2":21,"-":41}},{"path":"src/main/java/puke/Puke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import puke.managers.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" * A chatbot that uses overly complicated sentences.","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"public class Puke {","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * List of tasks stored by the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * Constructor for the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException when an error occurs with the file reader.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public Puke() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList(DataHandler.loadDatabase());","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            new File(\"ListData.txt\").createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    /*","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     * Runs the program","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        ui.startup();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            String command \u003d ui.command();","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"            String input \u003d ui.input();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            ui.line();","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"            Command next;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                next \u003d Parser.parse(command, input);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"            } catch (PukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                next \u003d new ErrorCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"            next.execute(tasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"            isExit \u003d next.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        new Puke().run();","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"*/","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        Command next;","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        String[] inputComponents \u003d input.split(\" \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        String command \u003d inputComponents[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        String rest;","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"            rest \u003d inputComponents[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"            rest \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"            next \u003d Parser.parse(command, rest);","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"            next \u003d new ErrorCommand();","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        return next.execute(tasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Fallman2":76,"-":1}},{"path":"src/main/java/puke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, clears the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public ClearCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by returning the corresponding message.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid, an error message is printed instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @return The message for clearing all tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"                DataHandler.clearAll();","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"                return \"Well I certainly hope you had meant to do that because I am not going too ask for your \"","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"                        + \"confirmation. As per the aforementioned instructions, I shall now purge all of the tasks \"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"                        + \"that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"                return \"Well I certainly hope you had meant to do that because I am not going too ask for your \"","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"                        + \"confirmation. As per the aforementioned instructions, I shall now purge all of the tasks \"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"                        + \"that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ClearCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ClearCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":51}},{"path":"src/main/java/puke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Class that represents an action to be taken by the chatbot.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * All Commands can be executed to print its corresponding message and carry out corresponding actions.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    protected static final String ERROR_MESSAGE \u003d \"Unfortunately, the circumstances preceding this has necessitated \"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"            + \"that I issue an apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    protected boolean isValid;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final boolean exit;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    Command(boolean exit, boolean valid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.isValid \u003d valid;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public abstract String execute(TaskList tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        return this.exit;","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":25}},{"path":"src/main/java/puke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a Deadline Task","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new DeadlineCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public DeadlineCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Deadline(this.rest));","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                + \"alongside the stipulated time that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * DeadlineCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof DeadlineCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"            return new Deadline(this.rest).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":78}},{"path":"src/main/java/puke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, deletes a task in the task list","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new DeleteCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public DeleteCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid due to the index being out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            Task hold \u003d tl.delete(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(hold, tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(Task task, TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        return \"I have acknowledged your request to have the task allocated to the specific index at which \"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                + \"you have mentioned removed from the collection of all\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                + \"such tasks, colloquially known as your To Do list.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + \"The task in question that has been deleted is: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + task","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"As of this current moment, there are a total of \"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \" occurrences of tasks in your list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() as this one.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof DeleteCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     * Returns a string representing this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     * @return a String","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        return \"delete \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":72}},{"path":"src/main/java/puke/command/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the error message.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ErrorCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    public ErrorCommand() {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"        super(false, false);","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * Returns the boolean representing whether another Object is an instance of an ErrorCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * @return boolean","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ErrorCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":35}},{"path":"src/main/java/puke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a new Event task.","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new EventCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public EventCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Event(this.rest));","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require participation for a set period of time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                + \"alongside this stipulated duration that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * EventCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof EventCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"            return new Event(this.rest).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":78}},{"path":"src/main/java/puke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the exit message.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public ExitCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        super(rest.isEmpty(), rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            return \"It appears that the user has decided to close the program as indicated by the command of \"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"                    + \"which this is the function being issued and therefore, \"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"                    + \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ExitCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ExitCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":41}},{"path":"src/main/java/puke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, looks for tasks in the task list that match the keywords provided.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    private final String key;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"     * Creates a new FindCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    public FindCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        this.key \u003d rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     * Executes the command, printing out the corresponding message from the UI while printing each matching","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * task in the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @param tl the task list","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            return \"As per the instructions provided, I shall initiate a search into your list of items, of which \"","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"                    + \"we have previously declared to be known as tasks due too their relatively \"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"                    + \"urgent need of attention within a specified or unspecified frame of time, for those of which \"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"                    + \"have an alphabetical similarity to the frame of reference that you have provided.\\n\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                    + tl.find(key);","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":37}},{"path":"src/main/java/puke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the string representation of the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public ListCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @return The message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        return \"Here is the collection of items, previously designated to be known as Tasks, \"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"                + \"that you have inputted over a previous unspecified period of time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"                + \"that may or may not require urgent attention, but will nevertheless necessitate \"","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                + \"some level of action within an either \"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"                + \"indicated or non indicated time period.\\n\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"                + tl.printOut();","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ListCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ListCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":46}},{"path":"src/main/java/puke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the message to mark a task as complete.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"     * Creates a new MarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    public MarkCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            tl.mark(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            return generateMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        return \"I have been made aware of your desire to indicate that the task numbered \"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                + index","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"                + \" has been since been achieved as of the time at which you have stipulated as so.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of MarkCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof MarkCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        return \"mark \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":63}},{"path":"src/main/java/puke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a new Todo task","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new ToDoCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public TodoCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.desc \u003d rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            tl.add(new ToDo(this.desc));","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"                + \"but with no such time being specified and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of said tasks that require action. \"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * TodoCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof TodoCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"            return new ToDo(this.desc).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":77}},{"path":"src/main/java/puke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, marks a task as undone.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    private int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"     * Creates a new UnmarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    public UnmarkCommand(String rest) {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d Integer.parseInt(rest.substring(1));","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d -1;","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            tl.unmark(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return \"Very well. I have acknowledged your request to unmark the task of \"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"                    + \"specified index as having been completed and \"","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"                    + \"will now proceed to set said task of specified index to be considered as \"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                    + \"having not yet been completed.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of UnmarkCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof UnmarkCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        return \"unmark \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":65}},{"path":"src/main/java/puke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    private void flip() {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    public static DialogBox getPukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * Returns the startup dialog","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     * @param img puke image","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     * @return startup dialog","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"    public static DialogBox startup(Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"        var db \u003d new DialogBox(\"Greetings, I am Puke\", img);","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":72}},{"path":"src/main/java/puke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":14}},{"path":"src/main/java/puke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.Puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * a","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private final Puke puke \u003d new Puke();","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public Main() throws IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setPuke(puke);","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":34}},{"path":"src/main/java/puke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.Puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    private Puke puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    private final Image pukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Puke.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * Initializes the Main Window","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        dialogContainer.getChildren().add(DialogBox.startup(pukeImage));","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public void setPuke(Puke p) {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        puke \u003d p;","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        String response \u003d puke.getResponse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"                DialogBox.getPukeDialog(response, pukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":57}},{"path":"src/main/java/puke/managers/DataHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" * A class that handles the storage of the task list into ListData.txt.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"public class DataHandler {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     * Interprets a line from the ListData.txt file used to store events.","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @param input a line from the file","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @return a corresponding task.","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid task is detected.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    public static Task translate(String input) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        String[] split \u003d input.split(\"/\");","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        Task output;","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        if (split[0].equals(\"[T]\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            output \u003d new ToDo(split[2]);","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[D]\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            output \u003d Deadline.construct(split[2], split[3]);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[E]\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            output \u003d Event.construct(split[2], split[3], split[4]);","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        if (split[1].equals(\"0\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            output.unmark();","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        } else if (split[1].equals(\"1\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"            output.mark();","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * Updates the ListData.txt file with the latest list of tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * @param taskList The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the file writer.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public static void writeToDatabase(TaskList taskList) throws IOException {","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        for (Task item:taskList.getList()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"            output.append(item.write()).append(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        fw.write(output.toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"     * Loads the events stored in the ListData.txt file when the program is run.","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * If an invalid line is detected, it is skipped.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * @return The Task List","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the file is not found.","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"    public static ArrayList\u003cTask\u003e loadDatabase() throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        Scanner sc;","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"            sc \u003d new Scanner(new File(\"ListData.txt\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"                output.add(DataHandler.translate(sc.nextLine()));","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"                continue;","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"     * Clears all stored tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the FileWriter.","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"    public static void clearAll() throws IOException {","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":102}},{"path":"src/main/java/puke/managers/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.command.ClearCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.command.DeadlineCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.command.DeleteCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import puke.command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import puke.command.ExitCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.command.FindCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import puke.command.TodoCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import puke.command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" * A class that takes in input and parses it to return a command.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"public class Parser {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     * Parses the command string as input from the UI and returns its corresponding command","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @param command First token of input from the UI","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @param line Remaining input from the UI on the same line","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * @return Corresponding command","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid command or line is parsed","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public static Command parse(String command, String line) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"                return new ExitCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"                return new ListCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"                return new MarkCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"                return new UnmarkCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                return new TodoCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"                return new DeadlineCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                return new EventCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                return new DeleteCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"clearall\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                return new ClearCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"find\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                return new FindCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                return new ErrorCommand();","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"            return new ErrorCommand();","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":57}},{"path":"src/main/java/puke/managers/PukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":" * An exception class that represents any invalid formatting encountered by Puke.","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"public class PukeException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"     * Creates the exception.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public PukeException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        super(\"Unfortunately, the circumstances preceding this has necessitated that I issue an apology \"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"                + \", for the input that I have received is unrecognised.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":14}},{"path":"src/main/java/puke/managers/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A class that stores Tasks in a list.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class TaskList {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Lists down the tasks stored in this list in a String format.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @return the String representation of the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    public String printOut() {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            i++;","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public Task get(int index) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return list.get(index);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        return this.list;","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        this.list.add(t);","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * Deletes the task at the specified index from the list and returns it.","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task to be deleted.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * @return the task that was deleted.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index was used.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public Task delete(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        Task hold;","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"            hold \u003d list.get(index - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"            list.remove(index - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"            return hold;","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of each task in the list that matches the key.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     * @param key the keyword to match the tasks with.","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * @return the String representation of the tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    public String find(String key) {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"            if (s.getDescription().contains(key)) {","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"                sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"                i++;","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task in question.","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"    public void mark(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).mark();","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as undone.","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task in question.","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"    public void unmark(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).unmark();","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"    public int size() {","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        return list.size();","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"    public void clear() {","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"        this.list.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":118}},{"path":"src/main/java/puke/managers/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A class that handles all messages printed in the UI","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Ui {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String SEPARATOR \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    public Ui() {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     * Returns the first token from a line of input.","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * @return Command string.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    public String command() {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        return sc.next();","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * Returns the remainder of the line of input after the command string has been removed.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @return Remainder of line.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    public String input() {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"     * Prints the separator line.","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    public void line() {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * Prints the welcome logo and message.","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    public void startup() {","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                + \"| |_| | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                + \"| ___/| |_| |    | __/\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                + \"| |    \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"                + \"|_|\";","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        System.out.println(\"Salutations! I hereby would like to inform you that my identity is that of\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"                + logo","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"                + \"\\nAn exceedingly verbose conversation simulation program.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * Returns the separator line used after each command.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     * @return the separator line as a string.","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    public static String separator() {","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        return SEPARATOR;","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * Returns the default error message.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     * @return the error message as a string.","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"    public static String errorMessage() {","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        return \"Unfortunately, the circumstances preceding this has necessitated that I issue\"","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"                + \" an apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"     * Returns the exit message.","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"     * @return The exit message.","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"    public String exit() {","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        return \"It appears that the user has decided to close the program as indicated by the command of \"","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"                + \"which this is the function being issued and therefore,\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"                + \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for listing tasks in the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"     * @return The message for listing tasks in the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"    public String list() {","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        return \"Here is the collection of items, previously designated to be known as Tasks, \"","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"                + \"that you have inputted over a previous unspecified period of time\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"                + \"that may or may not require urgent attention, but will nevertheless necessitate \"","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"                + \"some level of action within an either\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"                + \"indicated or non indicated time period.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for marking a task as done.","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"     * @param index Index of the task that has been marked.","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"     * @return The message indicating that the task has been done.","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"    public String mark(int index) {","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"        return \"I have been made aware of your desire to indicate that the task numbered \"","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"                + index","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"                + \" has been since been achieved as of the time at which you hve stipulated as so.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for marking a task as undone.","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"     * @return The message indicating that that task has been unmarked.","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"    public String unmark() {","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"        return \"Very well. I have acknowledged your request to unmark the task of \"","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"                + \"specified index as having been completed and\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"                + \"will now proceed to set said task of specified index to be considered as \"","lastModifiedDate":"2023-09-04"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"                + \"having not yet been completed.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new to do task has been added to the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-09-04"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"    public String toDo(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-04"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"                + \"but with no such time being specified and inserted it into \"","lastModifiedDate":"2023-09-04"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of said tasks that require action.\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-04"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-04"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-04"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new Deadline task has been added to the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-09-04"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"    public String deadline(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-04"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"                + \"alongside the stipulated time that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-04"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-04"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-04"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-04"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new Event task has been added to the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-09-04"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"    public String event(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require participation for a set period of time \"","lastModifiedDate":"2023-09-04"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"                + \"alongside this stipulated duration that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-04"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-04"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-04"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-04"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a Task has been removed from the list","lastModifiedDate":"2023-09-04"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"     * @param hold The task that was removed.","lastModifiedDate":"2023-09-04"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"    public String delete(Task hold, TaskList tl) {","lastModifiedDate":"2023-09-04"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        return \"I have acknowledged your request to have the task allocated to the specific index at which \"","lastModifiedDate":"2023-09-04"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"                + \"you have mentioned removed from the collection of all\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"                + \"such tasks, colloquially known as your To Do list.\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"                + \"The task in question that has been deleted is: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"                + hold","lastModifiedDate":"2023-09-04"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"                + \"As of this current moment, there are a total of \"","lastModifiedDate":"2023-09-04"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-04"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"                + \" occurrences of tasks in your list.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that all tasks have been cleared from the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"    public String clear() {","lastModifiedDate":"2023-09-04"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"        return \"Well I certainly hope you had meant to do that because I am not going too ask for your confirmation. \"","lastModifiedDate":"2023-09-04"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"                + \"As per the aforementioned instructions, I shall now\"","lastModifiedDate":"2023-09-04"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"                + \"purge all of the tasks that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that the find command has been executed.","lastModifiedDate":"2023-09-04"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-09-04"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"    public String find() {","lastModifiedDate":"2023-09-04"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"        return \"As per the instructions provided, I shall initiate a search into your list of items, of which \"","lastModifiedDate":"2023-09-04"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"                + \"we have previously declared to be known as tasks due too their relatively \\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"                + \"urgent need of attention within a specified or unspecified frame of time, for those of which have \"","lastModifiedDate":"2023-09-04"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"                + \"an alphabetical similarity to the frame of reference that you have provided.\";","lastModifiedDate":"2023-09-04"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":221}},{"path":"src/main/java/puke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Task class that has a deadline attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String tag \u003d \"[D]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with a set deadline.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param all All strings from the remainder of the input after being split","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public Deadline(String[] all) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            this.date \u003d LocalDateTime.parse(all[1].split(\"by \")[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * Creates a Deadline Task using input from the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @param date The date of the deadline.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @return The Deadline task.","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    public static Deadline construct(String desc, String date) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[2];","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"by \" + date;","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        return new Deadline(container);","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.date;","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        return super.toString() + \" (by: \" + this.date + \")\";","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":62}},{"path":"src/main/java/puke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Task class that has a start and end time attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String tag \u003d \"[E]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * Creates a task with a start and end time","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param all All Strings from the remainder of the input line after the command string.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public Event(String[] all) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            this.from \u003d LocalDateTime.parse(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            this.to \u003d LocalDateTime.parse(all[2].split(\"to \")[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            System.out.println(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * Creates an Event task using data stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @param desc Description of the event","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     * @param from Start date and time of the event.","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     * @param to Ending date and time of the event.","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"     * @return The Event task.","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    public static Event construct(String desc, String from, String to) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[3];","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"from \" + from;","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        container[2] \u003d \"to \" + to;","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        return new Event(container);","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.from + \"/\"","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"                + this.to;","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        return super.toString()","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"                + \" (from: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"                + this.from","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"                + \" \"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"                + \"to: \"","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"                + this.to","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"                + \")\";","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":74}},{"path":"src/main/java/puke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A class that represents an action that has to be tracked and carried out at a specified or unspecified time.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    protected String tag;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    protected boolean done;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    protected String description;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    protected Task(String tag, String description) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        if (tag.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as done","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    public void mark() {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as undone","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    public void unmark() {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        return description;","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the task that can be stored and","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"     * read later when the program is initiated again.","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        int checked \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        if (this.done) {","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"            checked \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%d/%s\", this.tag, checked , this.description);","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation to be displayed in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        String status \u003d \"[ ]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        if (done) {","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"            status \u003d \"[X]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s%s %s\", this.tag, status, this.description);","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":67}},{"path":"src/main/java/puke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Task class that does not have a specific time attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    private static final String tag \u003d \"[T]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with no set deadline or time period.","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    public ToDo(String desc) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        super(tag, desc);","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":20}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"249.0\" prefWidth\u003d\"680.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" prefHeight\u003d\"219.0\" prefWidth\u003d\"562.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Fallman2":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"686.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"puke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"609.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"610.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" onMouseReleased\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"686.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"684.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Fallman2":19}},{"path":"src/test/java/puke/PukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.command.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.managers.Ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class PukeTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    public void ParserTests() throws PukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ExitCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ExitCommand(\"\"), Parser.parse(\"bye\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ListCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ListCommand(\"\"), Parser.parse(\"list\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing MarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new MarkCommand(\"3\"), Parser.parse(\"mark\", \" 3\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing UnmarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new UnmarkCommand(\"4\"), Parser.parse(\"unmark\", \" 4\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing TodoCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new TodoCommand(\"borrow book\"), Parser.parse(\"todo\", \" borrow book\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeadlineCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeadlineCommand(\"return book /by 2019-12-01T10:00\"), Parser.parse(\"deadline\", \" return book /by 2019-12-01T10:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing EventCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new EventCommand(\"project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"), Parser.parse(\"event\", \" project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeleteCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeleteCommand(\"5\"), Parser.parse(\"delete\", \" 5\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ClearCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ClearCommand(\"\"), Parser.parse(\"clearall\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 1","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ErrorCommand(), Parser.parse(\"bye\", \"123\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 2","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ErrorCommand(), Parser.parse(\"todo\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Fallman2":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"deadline return book /by 2019-12-01T10:00","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"event project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"Inv","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"list 2","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"mark 24","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"deadline","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"event","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"bye","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Fallman2":19}}]
