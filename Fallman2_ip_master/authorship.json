[{"path":"ListData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"[D]/0/ return book/2019-12-01T10:00","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"[E]/0/ project meeting/2023-08-30T14:00/2023-08-30T16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"[T]/0/ Cry","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Fallman2":3}},{"path":"src/main/java/Puke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.util.*;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class Puke {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    public static String separator \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public static String errorMessage \u003d \"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    public static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"                + \"| |_| | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"                + \"| ___/| |_| |    | __/\\n\"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"                + \"| |    \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"                + \"|_|\";","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        System.out.println(\"Salutations! I hereby would like to inform you that my identity is that of\\n\" + logo +","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"                \"\\nAn exceedingly verbose conversation simulation program.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            list \u003d DataHandler.loadDatabase();","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception FileNotFoundException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            new File(\"ListData.txt\").createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        while (true) {","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            String command \u003d sc.next();","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Here is the collection of items, previously designated to be known as Tasks, that you have inputted over a previous unspecified period of time\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                        \"that may or may not require urgent attention, but will nevertheless necessitate some level of action within an either\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                        \"indicated or not indicated time period.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                int i \u003d 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                for (Task s : list) {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(String.format(\"%d. %s\", i, s.toString()));","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                    i++;","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"                int index \u003d sc.nextInt();","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"                if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"                    list.get(index - 1).mark();","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"I have been made aware of your desire to indicate that the task numbered \" + index +","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"                        \" has been since been achieved as of the time at which you hve stipulated as so.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"                int index \u003d sc.nextInt();","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"                if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"                    list.get(index - 1).unmark();","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Very well. I have acknowledged your request to unmark the task of specified index as having been completed and\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"                        \"will now proceed to set said task of specified index to be considered as having not yet been completed.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"                    list.add(new ToDo(sc.nextLine()));","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Understood. I have hereby created a task known to require doing at a future time but with no such time being specified and inserted it into \" +","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"                        \"the overall collection of said tasks that require action.\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"                        \"Here is a display of the added deadline task: \" + list.get(list.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"                        \"You now, in total, have \" + list.size() + \" of these tasks recorded within said collection.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"                    list.add(new Deadline(sc.nextLine().split(\" /\")));","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Understood. I have hereby created a task known to require doing at a future time alongside the stipulated time that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"                        \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"                        \"Here is a display of the added deadline task: \" + list.get(list.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"                        \"You now, in total, have \" + list.size() + \" of these tasks recorded within said collection.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"                    list.add(new Event(sc.nextLine().split(\" /\")));","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Understood. I have hereby created a task known to require participation for a set period of time alongside this stipulated duration that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"                        \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"                        \"Here is a display of the added deadline task: \" + list.get(list.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"                        \"You now, in total, have \" + list.size() + \" of these tasks recorded within said collection.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"                Task hold;","lastModifiedDate":"2023-08-22"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"                    int index \u003d sc.nextInt();","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"                    hold \u003d list.get(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"                    if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"                        System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"                        System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"                        continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"                    }","lastModifiedDate":"2023-08-22"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"                    list.remove(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"                } catch (Exception e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-22"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"I have acknowledged your request to have the task allocated to the specific index at which you have mentioned removed from the collection of all\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"                        \"such tasks, colloquially known as your To Do list.\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"                        \"The task in question that has been deleted is: \" + hold + \"\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"                        \"As of this current moment, there are a total of \" + list.size() + \" occurrences of tasks in your list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"                DataHandler.writeToDatabase(list);","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"clearall\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"                if (!sc.nextLine().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"                    System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"                    continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"                list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"                DataHandler.clearAll();","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Well I certainly hope you had meant to do that because I am not going too ask for your confirmation. As per the aforementioned instructions, I shall now\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"                        \"purge all of the tasks that you have previously recorded and designated as requiring attention.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"            } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"                System.out.println(\"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"                System.out.println(separator);","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"        System.out.println(\"It appears that the user has decided to close the program as indicated by the command of which this is the function being issued and therefore,\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"                \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"    protected String tag;","lastModifiedDate":"2023-08-22"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"    protected boolean done;","lastModifiedDate":"2023-08-22"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"    protected Task(String tag, String description) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-08-22"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"        if (tag.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"    public void mark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"        int checked \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"        if (this.done) {","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"            checked \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%d/%s\", this.tag, checked , this.description);","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"        String status \u003d \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"        if (done) {","lastModifiedDate":"2023-08-22"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"            status \u003d \"[X]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s%s%s\", this.tag, status, this.description);","lastModifiedDate":"2023-08-22"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"    private final static String tag \u003d \"[T]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"    public ToDo(String desc) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"        super(tag, desc);","lastModifiedDate":"2023-08-22"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"    private final static String tag \u003d \"[D]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"    public Deadline(String[] all) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"            this.date \u003d LocalDateTime.parse(all[1].split(\"by \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":230,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":231,"author":{"gitId":"Fallman2"},"content":"    public static Deadline construct(String desc, String date) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":233,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":234,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"by \" + date;","lastModifiedDate":"2023-08-30"},{"lineNumber":235,"author":{"gitId":"Fallman2"},"content":"        return new Deadline(container);","lastModifiedDate":"2023-08-30"},{"lineNumber":236,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":238,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":239,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.date;","lastModifiedDate":"2023-08-30"},{"lineNumber":241,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":242,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":243,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":244,"author":{"gitId":"Fallman2"},"content":"        return super.toString() + \" (by: \" + this.date + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":245,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":246,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":247,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":248,"author":{"gitId":"Fallman2"},"content":"class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":249,"author":{"gitId":"Fallman2"},"content":"    private static final String tag \u003d \"[E]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":250,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":251,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":252,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":253,"author":{"gitId":"Fallman2"},"content":"    public Event(String[] all) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":254,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":255,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"Fallman2"},"content":"            this.from \u003d LocalDateTime.parse(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":257,"author":{"gitId":"Fallman2"},"content":"            this.to \u003d LocalDateTime.parse(all[2].split(\"to \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":258,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":259,"author":{"gitId":"Fallman2"},"content":"            System.out.println(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":261,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":262,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":263,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":264,"author":{"gitId":"Fallman2"},"content":"    public static Event construct(String desc, String from, String to) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[3];","lastModifiedDate":"2023-08-30"},{"lineNumber":266,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":267,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"from \" + from;","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"Fallman2"},"content":"        container[2] \u003d \"to \" + to;","lastModifiedDate":"2023-08-30"},{"lineNumber":269,"author":{"gitId":"Fallman2"},"content":"        return new Event(container);","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":271,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":272,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":273,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":274,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.from + \"/\" + this.to;","lastModifiedDate":"2023-08-30"},{"lineNumber":275,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":276,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":277,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":278,"author":{"gitId":"Fallman2"},"content":"        return super.toString() + \" (from: \" + this.from + \" \" +","lastModifiedDate":"2023-08-22"},{"lineNumber":279,"author":{"gitId":"Fallman2"},"content":"                \"to: \" + this.to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":280,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":281,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":282,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":283,"author":{"gitId":"Fallman2"},"content":"class PukeException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":284,"author":{"gitId":"Fallman2"},"content":"    public PukeException() {","lastModifiedDate":"2023-08-22"},{"lineNumber":285,"author":{"gitId":"Fallman2"},"content":"        super(\"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":286,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":287,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":288,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":289,"author":{"gitId":"Fallman2"},"content":"class DataHandler {","lastModifiedDate":"2023-08-30"},{"lineNumber":290,"author":{"gitId":"Fallman2"},"content":"    public static Task translate(String input) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":291,"author":{"gitId":"Fallman2"},"content":"        String[] split \u003d input.split(\"/\");","lastModifiedDate":"2023-08-30"},{"lineNumber":292,"author":{"gitId":"Fallman2"},"content":"        Task output;","lastModifiedDate":"2023-08-30"},{"lineNumber":293,"author":{"gitId":"Fallman2"},"content":"        if (split[0].equals(\"[T]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":294,"author":{"gitId":"Fallman2"},"content":"            output \u003d new ToDo(split[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":295,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[D]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":296,"author":{"gitId":"Fallman2"},"content":"            output \u003d Deadline.construct(split[2], split[3]);","lastModifiedDate":"2023-08-30"},{"lineNumber":297,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[E]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":298,"author":{"gitId":"Fallman2"},"content":"            output \u003d Event.construct(split[2], split[3], split[4]);","lastModifiedDate":"2023-08-30"},{"lineNumber":299,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":300,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":301,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":302,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":303,"author":{"gitId":"Fallman2"},"content":"        if (split[1].equals(\"0\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":304,"author":{"gitId":"Fallman2"},"content":"            output.unmark();","lastModifiedDate":"2023-08-30"},{"lineNumber":305,"author":{"gitId":"Fallman2"},"content":"        } else if (split[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":306,"author":{"gitId":"Fallman2"},"content":"            output.mark();","lastModifiedDate":"2023-08-30"},{"lineNumber":307,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":308,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":309,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":310,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":311,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-08-30"},{"lineNumber":312,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":313,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":314,"author":{"gitId":"Fallman2"},"content":"    public static void writeToDatabase(TaskList taskList) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":315,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":316,"author":{"gitId":"Fallman2"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":317,"author":{"gitId":"Fallman2"},"content":"        for (Task item:taskList.getList()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":318,"author":{"gitId":"Fallman2"},"content":"            output.append(item.write()).append(\"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":319,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":320,"author":{"gitId":"Fallman2"},"content":"        fw.write(output.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":321,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":322,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":323,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":324,"author":{"gitId":"Fallman2"},"content":"    public static ArrayList\u003cTask\u003e loadDatabase() throws FileNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":325,"author":{"gitId":"Fallman2"},"content":"        Scanner sc \u003d new Scanner(new File(\"ListData.txt\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":326,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":327,"author":{"gitId":"Fallman2"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":328,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":329,"author":{"gitId":"Fallman2"},"content":"                output.add(DataHandler.translate(sc.nextLine()));","lastModifiedDate":"2023-08-30"},{"lineNumber":330,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":331,"author":{"gitId":"Fallman2"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":332,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":333,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":334,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-08-30"},{"lineNumber":335,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":336,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":337,"author":{"gitId":"Fallman2"},"content":"    public static void clearAll() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":338,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":339,"author":{"gitId":"Fallman2"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":340,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":341,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":342,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":343,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":344,"author":{"gitId":"Fallman2"},"content":"class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":345,"author":{"gitId":"Fallman2"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-30"},{"lineNumber":346,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":347,"author":{"gitId":"Fallman2"},"content":"    TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":348,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-08-30"},{"lineNumber":349,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":350,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":351,"author":{"gitId":"Fallman2"},"content":"    TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":352,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-30"},{"lineNumber":353,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":354,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":355,"author":{"gitId":"Fallman2"},"content":"    String printOut() {","lastModifiedDate":"2023-08-30"},{"lineNumber":356,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":357,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":358,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":359,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-08-30"},{"lineNumber":360,"author":{"gitId":"Fallman2"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":361,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":362,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":363,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":364,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":365,"author":{"gitId":"Fallman2"},"content":"    Task get(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":366,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":367,"author":{"gitId":"Fallman2"},"content":"            return list.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":368,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":369,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":370,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":371,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":372,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":373,"author":{"gitId":"Fallman2"},"content":"    ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":374,"author":{"gitId":"Fallman2"},"content":"        return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":375,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":376,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":377,"author":{"gitId":"Fallman2"},"content":"    void add(Task t) {","lastModifiedDate":"2023-08-30"},{"lineNumber":378,"author":{"gitId":"Fallman2"},"content":"        this.list.add(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":379,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":380,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":381,"author":{"gitId":"Fallman2"},"content":"    Task delete(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":382,"author":{"gitId":"Fallman2"},"content":"        Task hold;","lastModifiedDate":"2023-08-30"},{"lineNumber":383,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":384,"author":{"gitId":"Fallman2"},"content":"            hold \u003d list.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":385,"author":{"gitId":"Fallman2"},"content":"            list.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":386,"author":{"gitId":"Fallman2"},"content":"            return hold;","lastModifiedDate":"2023-08-30"},{"lineNumber":387,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":388,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":389,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":390,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":391,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":392,"author":{"gitId":"Fallman2"},"content":"    void mark(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":393,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":394,"author":{"gitId":"Fallman2"},"content":"            list.get(index).mark();","lastModifiedDate":"2023-08-30"},{"lineNumber":395,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":396,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":397,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":398,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":399,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":400,"author":{"gitId":"Fallman2"},"content":"    void unmark(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":401,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":402,"author":{"gitId":"Fallman2"},"content":"            list.get(index).unmark();","lastModifiedDate":"2023-08-30"},{"lineNumber":403,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":404,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":405,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":406,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":407,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":408,"author":{"gitId":"Fallman2"},"content":"    int size() {","lastModifiedDate":"2023-08-30"},{"lineNumber":409,"author":{"gitId":"Fallman2"},"content":"        return list.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":410,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":411,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":412,"author":{"gitId":"Fallman2"},"content":"    void clear() {","lastModifiedDate":"2023-08-30"},{"lineNumber":413,"author":{"gitId":"Fallman2"},"content":"        this.list.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":414,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":415,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":416,"author":{"gitId":"Fallman2"},"content":"    boolean inRange(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":417,"author":{"gitId":"Fallman2"},"content":"        return i \u003e 0 \u0026\u0026 i \u003c\u003d this.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":418,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":419,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":420,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":421,"author":{"gitId":"Fallman2"},"content":"abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":422,"author":{"gitId":"Fallman2"},"content":"    private final boolean exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":423,"author":{"gitId":"Fallman2"},"content":"    protected boolean valid;","lastModifiedDate":"2023-08-30"},{"lineNumber":424,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":425,"author":{"gitId":"Fallman2"},"content":"    Command(boolean exit, boolean valid) {","lastModifiedDate":"2023-08-30"},{"lineNumber":426,"author":{"gitId":"Fallman2"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":427,"author":{"gitId":"Fallman2"},"content":"        this.valid \u003d valid;","lastModifiedDate":"2023-08-30"},{"lineNumber":428,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":429,"author":{"gitId":"Fallman2"},"content":"    abstract void execute(TaskList tl, Ui ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":430,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":431,"author":{"gitId":"Fallman2"},"content":"    boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":432,"author":{"gitId":"Fallman2"},"content":"        return this.exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":433,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":434,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":435,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":436,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":437,"author":{"gitId":"Fallman2"},"content":"class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":438,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":439,"author":{"gitId":"Fallman2"},"content":"    ExitCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":440,"author":{"gitId":"Fallman2"},"content":"        super(rest.isEmpty(), rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":441,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":442,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":443,"author":{"gitId":"Fallman2"},"content":"        if (!super.valid) {","lastModifiedDate":"2023-08-30"},{"lineNumber":444,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":445,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":446,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":447,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.exit());","lastModifiedDate":"2023-08-30"},{"lineNumber":448,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":449,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":450,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":451,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":452,"author":{"gitId":"Fallman2"},"content":"class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":453,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":454,"author":{"gitId":"Fallman2"},"content":"    ListCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":455,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":456,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":457,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":458,"author":{"gitId":"Fallman2"},"content":"        if (!super.valid) {","lastModifiedDate":"2023-08-30"},{"lineNumber":459,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":460,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":461,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":462,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.list());","lastModifiedDate":"2023-08-30"},{"lineNumber":463,"author":{"gitId":"Fallman2"},"content":"            System.out.println(tl.printOut());","lastModifiedDate":"2023-08-30"},{"lineNumber":464,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":465,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":466,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":467,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":468,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":469,"author":{"gitId":"Fallman2"},"content":"class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":470,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":471,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":472,"author":{"gitId":"Fallman2"},"content":"    MarkCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":473,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":474,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-30"},{"lineNumber":475,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":476,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":477,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":478,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":479,"author":{"gitId":"Fallman2"},"content":"            tl.mark(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":480,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.mark(this.index));","lastModifiedDate":"2023-08-30"},{"lineNumber":481,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":482,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":483,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":484,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":485,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":486,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":487,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":488,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":489,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":490,"author":{"gitId":"Fallman2"},"content":"class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":491,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":492,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":493,"author":{"gitId":"Fallman2"},"content":"    UnmarkCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":494,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":495,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-30"},{"lineNumber":496,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":497,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":498,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":499,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":500,"author":{"gitId":"Fallman2"},"content":"            tl.unmark(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":501,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.unmark(this.index));","lastModifiedDate":"2023-08-30"},{"lineNumber":502,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":503,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":504,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":505,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":506,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":507,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":508,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":509,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":510,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":511,"author":{"gitId":"Fallman2"},"content":"class TodoCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":512,"author":{"gitId":"Fallman2"},"content":"    private final String desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":513,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":514,"author":{"gitId":"Fallman2"},"content":"    TodoCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":515,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":516,"author":{"gitId":"Fallman2"},"content":"        this.desc \u003d rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":517,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":518,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":519,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":520,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":521,"author":{"gitId":"Fallman2"},"content":"            tl.add(new ToDo(this.desc));","lastModifiedDate":"2023-08-30"},{"lineNumber":522,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.toDo(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":523,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":524,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":525,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":526,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":527,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":528,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":529,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":530,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":531,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":532,"author":{"gitId":"Fallman2"},"content":"class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":533,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":534,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":535,"author":{"gitId":"Fallman2"},"content":"    DeadlineCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":536,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":537,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":538,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":539,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":540,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":541,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":542,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Deadline(this.rest));","lastModifiedDate":"2023-08-30"},{"lineNumber":543,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.deadline(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":544,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":545,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":546,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":547,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":548,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":549,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":550,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":551,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":552,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":553,"author":{"gitId":"Fallman2"},"content":"class EventCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":554,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":555,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":556,"author":{"gitId":"Fallman2"},"content":"    EventCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":557,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":558,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":559,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":560,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":561,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":562,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":563,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Event(this.rest));","lastModifiedDate":"2023-08-30"},{"lineNumber":564,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.event(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":565,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":566,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":567,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":568,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":569,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":570,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":571,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":572,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":573,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":574,"author":{"gitId":"Fallman2"},"content":"class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":575,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":576,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":577,"author":{"gitId":"Fallman2"},"content":"    DeleteCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":578,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":579,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-30"},{"lineNumber":580,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":581,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":582,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":583,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":584,"author":{"gitId":"Fallman2"},"content":"            Task hold \u003d tl.delete(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":585,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.delete(hold, tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":586,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":587,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":588,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":589,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":590,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":591,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":592,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":593,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":594,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":595,"author":{"gitId":"Fallman2"},"content":"class ClearCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":596,"author":{"gitId":"Fallman2"},"content":"    ClearCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":597,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":598,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":599,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":600,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":601,"author":{"gitId":"Fallman2"},"content":"        if (!super.valid) {","lastModifiedDate":"2023-08-30"},{"lineNumber":602,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":603,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":604,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":605,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":606,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":607,"author":{"gitId":"Fallman2"},"content":"                DataHandler.clearAll();","lastModifiedDate":"2023-08-30"},{"lineNumber":608,"author":{"gitId":"Fallman2"},"content":"                System.out.println(ui.clear());","lastModifiedDate":"2023-08-30"},{"lineNumber":609,"author":{"gitId":"Fallman2"},"content":"                System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":610,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":611,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":612,"author":{"gitId":"Fallman2"},"content":"                System.out.println(ui.clear());","lastModifiedDate":"2023-08-30"},{"lineNumber":613,"author":{"gitId":"Fallman2"},"content":"                System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":614,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":615,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":616,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":617,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":618,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":619,"author":{"gitId":"Fallman2"},"content":"class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":620,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":621,"author":{"gitId":"Fallman2"},"content":"    Parser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":622,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":623,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":624,"author":{"gitId":"Fallman2"},"content":"    Command parse(String command, String line, TaskList tl) {","lastModifiedDate":"2023-08-30"},{"lineNumber":625,"author":{"gitId":"Fallman2"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":626,"author":{"gitId":"Fallman2"},"content":"            return new ExitCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":627,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":628,"author":{"gitId":"Fallman2"},"content":"            return new ListCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":629,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":630,"author":{"gitId":"Fallman2"},"content":"            return new MarkCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":631,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":632,"author":{"gitId":"Fallman2"},"content":"            return new UnmarkCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":633,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":634,"author":{"gitId":"Fallman2"},"content":"            return new TodoCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":635,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":636,"author":{"gitId":"Fallman2"},"content":"            return new DeadlineCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":637,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":638,"author":{"gitId":"Fallman2"},"content":"            return new EventCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":639,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":640,"author":{"gitId":"Fallman2"},"content":"            return new DeleteCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":641,"author":{"gitId":"Fallman2"},"content":"        } else if (command.equals(\"clearall\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":642,"author":{"gitId":"Fallman2"},"content":"            return new ClearCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":643,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":644,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.errorMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":645,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":646,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":647,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":648,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":649,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":650,"author":{"gitId":"Fallman2"},"content":"class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":651,"author":{"gitId":"Fallman2"},"content":"    public static String errorMessage \u003d \"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":652,"author":{"gitId":"Fallman2"},"content":"    public static String separator \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":653,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":654,"author":{"gitId":"Fallman2"},"content":"    Ui() {}","lastModifiedDate":"2023-08-30"},{"lineNumber":655,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":656,"author":{"gitId":"Fallman2"},"content":"    void startup() {","lastModifiedDate":"2023-08-30"},{"lineNumber":657,"author":{"gitId":"Fallman2"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":658,"author":{"gitId":"Fallman2"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":659,"author":{"gitId":"Fallman2"},"content":"                + \"| |_| | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":660,"author":{"gitId":"Fallman2"},"content":"                + \"| ___/| |_| |    | __/\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":661,"author":{"gitId":"Fallman2"},"content":"                + \"| |    \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":662,"author":{"gitId":"Fallman2"},"content":"                + \"|_|\";","lastModifiedDate":"2023-08-30"},{"lineNumber":663,"author":{"gitId":"Fallman2"},"content":"        System.out.println(\"Salutations! I hereby would like to inform you that my identity is that of\\n\" + logo +","lastModifiedDate":"2023-08-30"},{"lineNumber":664,"author":{"gitId":"Fallman2"},"content":"                \"\\nAn exceedingly verbose conversation simulation program.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":665,"author":{"gitId":"Fallman2"},"content":"        System.out.println(separator);","lastModifiedDate":"2023-08-30"},{"lineNumber":666,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":667,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":668,"author":{"gitId":"Fallman2"},"content":"    String exit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":669,"author":{"gitId":"Fallman2"},"content":"        return \"It appears that the user has decided to close the program as indicated by the command of which this is the function being issued and therefore,\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":670,"author":{"gitId":"Fallman2"},"content":"                \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":671,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":672,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":673,"author":{"gitId":"Fallman2"},"content":"    String list() {","lastModifiedDate":"2023-08-30"},{"lineNumber":674,"author":{"gitId":"Fallman2"},"content":"        return \"Here is the collection of items, previously designated to be known as Tasks, that you have inputted over a previous unspecified period of time\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":675,"author":{"gitId":"Fallman2"},"content":"                \"that may or may not require urgent attention, but will nevertheless necessitate some level of action within an either\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":676,"author":{"gitId":"Fallman2"},"content":"                \"indicated or not indicated time period.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":677,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":678,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":679,"author":{"gitId":"Fallman2"},"content":"    String mark(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":680,"author":{"gitId":"Fallman2"},"content":"        return \"I have been made aware of your desire to indicate that the task numbered \" + index +","lastModifiedDate":"2023-08-30"},{"lineNumber":681,"author":{"gitId":"Fallman2"},"content":"                \" has been since been achieved as of the time at which you hve stipulated as so.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":682,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":683,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":684,"author":{"gitId":"Fallman2"},"content":"    String unmark(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":685,"author":{"gitId":"Fallman2"},"content":"        return \"Very well. I have acknowledged your request to unmark the task of specified index as having been completed and\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":686,"author":{"gitId":"Fallman2"},"content":"                \"will now proceed to set said task of specified index to be considered as having not yet been completed.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":687,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":688,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":689,"author":{"gitId":"Fallman2"},"content":"    String toDo(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":690,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time but with no such time being specified and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":691,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of said tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":692,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":693,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":694,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":695,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":696,"author":{"gitId":"Fallman2"},"content":"    String deadline(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":697,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time alongside the stipulated time that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":698,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":699,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":700,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":701,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":702,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":703,"author":{"gitId":"Fallman2"},"content":"    String event(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":704,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require participation for a set period of time alongside this stipulated duration that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":705,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":706,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":707,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":708,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":709,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":710,"author":{"gitId":"Fallman2"},"content":"    String delete(Task hold, TaskList tl) {","lastModifiedDate":"2023-08-30"},{"lineNumber":711,"author":{"gitId":"Fallman2"},"content":"        return \"I have acknowledged your request to have the task allocated to the specific index at which you have mentioned removed from the collection of all\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":712,"author":{"gitId":"Fallman2"},"content":"                \"such tasks, colloquially known as your To Do list.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":713,"author":{"gitId":"Fallman2"},"content":"                \"The task in question that has been deleted is: \" + hold + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":714,"author":{"gitId":"Fallman2"},"content":"                \"As of this current moment, there are a total of \" + tl.size() + \" occurrences of tasks in your list.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":715,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":716,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":717,"author":{"gitId":"Fallman2"},"content":"    String clear() {","lastModifiedDate":"2023-08-30"},{"lineNumber":718,"author":{"gitId":"Fallman2"},"content":"        return \"Well I certainly hope you had meant to do that because I am not going too ask for your confirmation. As per the aforementioned instructions, I shall now\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":719,"author":{"gitId":"Fallman2"},"content":"                \"purge all of the tasks that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":720,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":721,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Fallman2":717,"-":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"deadline return book /by 2019-12-01T10:00","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"event project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"Inv","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"list 2","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"mark 24","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"deadline","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"event","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"bye","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Fallman2":19}}]
