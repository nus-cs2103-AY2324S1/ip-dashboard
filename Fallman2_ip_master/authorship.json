[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    archiveBaseName \u003d \"puke\"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    mainClassName \u003d \"puke.Main\"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Fallman2":2,"-":41}},{"path":"src/main/java/puke/Puke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"public class Puke {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private final Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    public Puke() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList(DataHandler.loadDatabase());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"            new File(\"ListData.txt\").createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        ui.startup();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            String command \u003d ui.command();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            String input \u003d ui.input();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            ui.line();","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            Command next;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"                next \u003d Parser.parse(command, input);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            } catch (PukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"                next \u003d new ErrorCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            next.execute(tasks, ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            isExit \u003d next.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        new Puke().run();","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    protected String tag;","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    protected boolean done;","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    protected Task(String tag, String description) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        if (tag.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    public void mark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * Unmarks a task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        return description;","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the task that can be stored and read later when the program is initiated again.","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        int checked \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        if (this.done) {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"            checked \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%d/%s\", this.tag, checked , this.description);","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation to be displayed in the to do list.","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        String status \u003d \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"        if (done) {","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"            status \u003d \"[X]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s%s %s\", this.tag, status, this.description);","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    private final static String tag \u003d \"[T]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with no set deadline or time period.","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"    public ToDo(String desc) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"        super(tag, desc);","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"    private final static String tag \u003d \"[D]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with a set deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"     * @param all All strings from the remainder of the input after being split","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"    public Deadline(String[] all) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"            this.date \u003d LocalDateTime.parse(all[1].split(\"by \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"     * Creates a Deadline Task using input from the ListData.txt file.","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"     * @param date The date of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"     * @return The Deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"    public static Deadline construct(String desc, String date) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"by \" + date;","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"        return new Deadline(container);","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.date;","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"        return super.toString() + \" (by: \" + this.date + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"    private static final String tag \u003d \"[E]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"     * Creates a task with a start and end time","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"     * @param all All Strings from the remainder of the input line after the command string.","lastModifiedDate":"2023-08-31"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"    public Event(String[] all) throws PukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"        super(tag, all[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"            this.from \u003d LocalDateTime.parse(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"            this.to \u003d LocalDateTime.parse(all[2].split(\"to \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"            System.out.println(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-22"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"     * Creates an Event task using data stored in the ListData.txt file.","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"     * @param desc Description of the event","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"     * @param from Start date and time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"     * @param to Ending date and time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"     * @return The Event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"    public static Event construct(String desc, String from, String to) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[3];","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"from \" + from;","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"        container[2] \u003d \"to \" + to;","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"        return new Event(container);","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-08-31"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-08-31"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"        return super.write() + \"/\" + this.from + \"/\" + this.to;","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-08-31"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-08-31"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":230,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":231,"author":{"gitId":"Fallman2"},"content":"        return super.toString() + \" (from: \" + this.from + \" \" +","lastModifiedDate":"2023-08-22"},{"lineNumber":232,"author":{"gitId":"Fallman2"},"content":"                \"to: \" + this.to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":233,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":234,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":235,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":236,"author":{"gitId":"Fallman2"},"content":"class PukeException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":237,"author":{"gitId":"Fallman2"},"content":"    public PukeException() {","lastModifiedDate":"2023-08-22"},{"lineNumber":238,"author":{"gitId":"Fallman2"},"content":"        super(\"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":239,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":240,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":241,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":242,"author":{"gitId":"Fallman2"},"content":"class DataHandler {","lastModifiedDate":"2023-08-30"},{"lineNumber":243,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":244,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":245,"author":{"gitId":"Fallman2"},"content":"     * Interprets a line from the ListData.txt file used to store events.","lastModifiedDate":"2023-08-31"},{"lineNumber":246,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":247,"author":{"gitId":"Fallman2"},"content":"     * @param input a line from the file","lastModifiedDate":"2023-08-31"},{"lineNumber":248,"author":{"gitId":"Fallman2"},"content":"     * @return a corresponding task.","lastModifiedDate":"2023-08-31"},{"lineNumber":249,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid task is detected.","lastModifiedDate":"2023-08-31"},{"lineNumber":250,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":251,"author":{"gitId":"Fallman2"},"content":"    public static Task translate(String input) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":252,"author":{"gitId":"Fallman2"},"content":"        String[] split \u003d input.split(\"/\");","lastModifiedDate":"2023-08-30"},{"lineNumber":253,"author":{"gitId":"Fallman2"},"content":"        Task output;","lastModifiedDate":"2023-08-30"},{"lineNumber":254,"author":{"gitId":"Fallman2"},"content":"        if (split[0].equals(\"[T]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":255,"author":{"gitId":"Fallman2"},"content":"            output \u003d new ToDo(split[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[D]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":257,"author":{"gitId":"Fallman2"},"content":"            output \u003d Deadline.construct(split[2], split[3]);","lastModifiedDate":"2023-08-30"},{"lineNumber":258,"author":{"gitId":"Fallman2"},"content":"        } else if (split[0].equals(\"[E]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":259,"author":{"gitId":"Fallman2"},"content":"            output \u003d Event.construct(split[2], split[3], split[4]);","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":261,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":262,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":263,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"Fallman2"},"content":"        if (split[1].equals(\"0\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"Fallman2"},"content":"            output.unmark();","lastModifiedDate":"2023-08-30"},{"lineNumber":266,"author":{"gitId":"Fallman2"},"content":"        } else if (split[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":267,"author":{"gitId":"Fallman2"},"content":"            output.mark();","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":269,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":271,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":272,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-08-30"},{"lineNumber":273,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":274,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":275,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":276,"author":{"gitId":"Fallman2"},"content":"     * Updates the ListData.txt file with the latest list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":277,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":278,"author":{"gitId":"Fallman2"},"content":"     * @param taskList The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":279,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the file writer.","lastModifiedDate":"2023-08-31"},{"lineNumber":280,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":281,"author":{"gitId":"Fallman2"},"content":"    public static void writeToDatabase(TaskList taskList) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":282,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":283,"author":{"gitId":"Fallman2"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":284,"author":{"gitId":"Fallman2"},"content":"        for (Task item:taskList.getList()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":285,"author":{"gitId":"Fallman2"},"content":"            output.append(item.write()).append(\"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":286,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":287,"author":{"gitId":"Fallman2"},"content":"        fw.write(output.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":288,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":289,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":290,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":291,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":292,"author":{"gitId":"Fallman2"},"content":"     * Loads the events stored in the ListData.txt file when the program is run.","lastModifiedDate":"2023-08-31"},{"lineNumber":293,"author":{"gitId":"Fallman2"},"content":"     * If an invalid line is detected, it is skipped.","lastModifiedDate":"2023-08-31"},{"lineNumber":294,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":295,"author":{"gitId":"Fallman2"},"content":"     * @return The Task List","lastModifiedDate":"2023-08-31"},{"lineNumber":296,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the file is not found.","lastModifiedDate":"2023-08-31"},{"lineNumber":297,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":298,"author":{"gitId":"Fallman2"},"content":"    public static ArrayList\u003cTask\u003e loadDatabase() throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":299,"author":{"gitId":"Fallman2"},"content":"        Scanner sc;","lastModifiedDate":"2023-08-30"},{"lineNumber":300,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":301,"author":{"gitId":"Fallman2"},"content":"            sc \u003d new Scanner(new File(\"ListData.txt\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":302,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":303,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":304,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":305,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":306,"author":{"gitId":"Fallman2"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":307,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":308,"author":{"gitId":"Fallman2"},"content":"                output.add(DataHandler.translate(sc.nextLine()));","lastModifiedDate":"2023-08-30"},{"lineNumber":309,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":310,"author":{"gitId":"Fallman2"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":311,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":312,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":313,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-08-30"},{"lineNumber":314,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":315,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":316,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":317,"author":{"gitId":"Fallman2"},"content":"     * Clears all stored tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":318,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":319,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the FileWriter.","lastModifiedDate":"2023-08-31"},{"lineNumber":320,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":321,"author":{"gitId":"Fallman2"},"content":"    public static void clearAll() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":322,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":323,"author":{"gitId":"Fallman2"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":324,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":325,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":326,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":327,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":328,"author":{"gitId":"Fallman2"},"content":"class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":329,"author":{"gitId":"Fallman2"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-31"},{"lineNumber":330,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":331,"author":{"gitId":"Fallman2"},"content":"    TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":332,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-08-30"},{"lineNumber":333,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":334,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":335,"author":{"gitId":"Fallman2"},"content":"    TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":336,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-30"},{"lineNumber":337,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":338,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":339,"author":{"gitId":"Fallman2"},"content":"    String printOut() {","lastModifiedDate":"2023-08-30"},{"lineNumber":340,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":341,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":342,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":343,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-08-30"},{"lineNumber":344,"author":{"gitId":"Fallman2"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":345,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":346,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":347,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":348,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":349,"author":{"gitId":"Fallman2"},"content":"    Task get(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":350,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":351,"author":{"gitId":"Fallman2"},"content":"            return list.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":352,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":353,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":354,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":355,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":356,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":357,"author":{"gitId":"Fallman2"},"content":"    ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":358,"author":{"gitId":"Fallman2"},"content":"        return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":359,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":360,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":361,"author":{"gitId":"Fallman2"},"content":"    void add(Task t) {","lastModifiedDate":"2023-08-30"},{"lineNumber":362,"author":{"gitId":"Fallman2"},"content":"        this.list.add(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":363,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":364,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":365,"author":{"gitId":"Fallman2"},"content":"    Task delete(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":366,"author":{"gitId":"Fallman2"},"content":"        Task hold;","lastModifiedDate":"2023-08-30"},{"lineNumber":367,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":368,"author":{"gitId":"Fallman2"},"content":"            hold \u003d list.get(index - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":369,"author":{"gitId":"Fallman2"},"content":"            list.remove(index - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":370,"author":{"gitId":"Fallman2"},"content":"            return hold;","lastModifiedDate":"2023-08-30"},{"lineNumber":371,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":372,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":373,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":374,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":375,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":376,"author":{"gitId":"Fallman2"},"content":"    String find(String key) {","lastModifiedDate":"2023-08-31"},{"lineNumber":377,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-31"},{"lineNumber":378,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":379,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":380,"author":{"gitId":"Fallman2"},"content":"            if (s.getDescription().contains(key)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":381,"author":{"gitId":"Fallman2"},"content":"                sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":382,"author":{"gitId":"Fallman2"},"content":"                i++;","lastModifiedDate":"2023-08-31"},{"lineNumber":383,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":384,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":385,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":386,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":387,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":388,"author":{"gitId":"Fallman2"},"content":"    void mark(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":389,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":390,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).mark();","lastModifiedDate":"2023-08-30"},{"lineNumber":391,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":392,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":393,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":394,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":395,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":396,"author":{"gitId":"Fallman2"},"content":"    void unmark(int index) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":397,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":398,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).unmark();","lastModifiedDate":"2023-08-30"},{"lineNumber":399,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":400,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":401,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":402,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":403,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":404,"author":{"gitId":"Fallman2"},"content":"    int size() {","lastModifiedDate":"2023-08-30"},{"lineNumber":405,"author":{"gitId":"Fallman2"},"content":"        return list.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":406,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":407,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":408,"author":{"gitId":"Fallman2"},"content":"    void clear() {","lastModifiedDate":"2023-08-30"},{"lineNumber":409,"author":{"gitId":"Fallman2"},"content":"        this.list.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":410,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":411,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":412,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":413,"author":{"gitId":"Fallman2"},"content":"abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":414,"author":{"gitId":"Fallman2"},"content":"    private final boolean exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":415,"author":{"gitId":"Fallman2"},"content":"    protected boolean isValid;","lastModifiedDate":"2023-08-31"},{"lineNumber":416,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":417,"author":{"gitId":"Fallman2"},"content":"    Command(boolean exit, boolean valid) {","lastModifiedDate":"2023-08-30"},{"lineNumber":418,"author":{"gitId":"Fallman2"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":419,"author":{"gitId":"Fallman2"},"content":"        this.isValid \u003d valid;","lastModifiedDate":"2023-08-31"},{"lineNumber":420,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":421,"author":{"gitId":"Fallman2"},"content":"    abstract void execute(TaskList tl, Ui ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":422,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":423,"author":{"gitId":"Fallman2"},"content":"    boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":424,"author":{"gitId":"Fallman2"},"content":"        return this.exit;","lastModifiedDate":"2023-08-30"},{"lineNumber":425,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":426,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":427,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":428,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":429,"author":{"gitId":"Fallman2"},"content":"class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":430,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":431,"author":{"gitId":"Fallman2"},"content":"    ExitCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":432,"author":{"gitId":"Fallman2"},"content":"        super(rest.isEmpty(), rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":433,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":434,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":435,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":436,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":437,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-08-31"},{"lineNumber":438,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":439,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":440,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":441,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":442,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":443,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-08-31"},{"lineNumber":444,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":445,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":446,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":447,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.exit());","lastModifiedDate":"2023-08-30"},{"lineNumber":448,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":449,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":450,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":451,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":452,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ExitCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":453,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":454,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":455,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":456,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":457,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":458,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":459,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ExitCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":460,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":461,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":462,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":463,"author":{"gitId":"Fallman2"},"content":"class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":464,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":465,"author":{"gitId":"Fallman2"},"content":"    ListCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":466,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":467,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":468,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":469,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":470,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":471,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-08-31"},{"lineNumber":472,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":473,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":474,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":475,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":476,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":477,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-08-31"},{"lineNumber":478,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":479,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":480,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":481,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.list());","lastModifiedDate":"2023-08-30"},{"lineNumber":482,"author":{"gitId":"Fallman2"},"content":"            System.out.println(tl.printOut());","lastModifiedDate":"2023-08-30"},{"lineNumber":483,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":484,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":485,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":486,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":487,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":488,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ListCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":489,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":490,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-08-31"},{"lineNumber":491,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean","lastModifiedDate":"2023-08-31"},{"lineNumber":492,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":493,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":494,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":495,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ListCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":496,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":497,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":498,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":499,"author":{"gitId":"Fallman2"},"content":"class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":500,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":501,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":502,"author":{"gitId":"Fallman2"},"content":"    MarkCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":503,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":504,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-30"},{"lineNumber":505,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":506,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":507,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":508,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":509,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":510,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":511,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":512,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":513,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":514,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":515,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":516,"author":{"gitId":"Fallman2"},"content":"            tl.mark(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":517,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.mark(this.index));","lastModifiedDate":"2023-08-30"},{"lineNumber":518,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":519,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":520,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":521,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":522,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":523,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":524,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":525,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":526,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":527,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of MarkCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":528,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":529,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-08-31"},{"lineNumber":530,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":531,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":532,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":533,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":534,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof MarkCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":535,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":536,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":537,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":538,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-08-31"},{"lineNumber":539,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":540,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":541,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":542,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":543,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":544,"author":{"gitId":"Fallman2"},"content":"        return \"mark \" + this.index;","lastModifiedDate":"2023-08-31"},{"lineNumber":545,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":546,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":547,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":548,"author":{"gitId":"Fallman2"},"content":"class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":549,"author":{"gitId":"Fallman2"},"content":"    private int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":550,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":551,"author":{"gitId":"Fallman2"},"content":"    UnmarkCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":552,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":553,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":554,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d Integer.parseInt(rest.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":555,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":556,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d -1;","lastModifiedDate":"2023-08-30"},{"lineNumber":557,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":558,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":559,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":560,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":561,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":562,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":563,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":564,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":565,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":566,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":567,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":568,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":569,"author":{"gitId":"Fallman2"},"content":"            tl.unmark(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":570,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.unmark());","lastModifiedDate":"2023-08-31"},{"lineNumber":571,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":572,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":573,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":574,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":575,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":576,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":577,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":578,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":579,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":580,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of UnmarkCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":581,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":582,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-08-31"},{"lineNumber":583,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":584,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":585,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":586,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":587,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof UnmarkCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":588,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":589,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":590,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":591,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-08-31"},{"lineNumber":592,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":593,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":594,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":595,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":596,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":597,"author":{"gitId":"Fallman2"},"content":"        return \"unmark \" + this.index;","lastModifiedDate":"2023-08-31"},{"lineNumber":598,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":599,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":600,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":601,"author":{"gitId":"Fallman2"},"content":"class TodoCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":602,"author":{"gitId":"Fallman2"},"content":"    private final String desc;","lastModifiedDate":"2023-08-30"},{"lineNumber":603,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":604,"author":{"gitId":"Fallman2"},"content":"    TodoCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":605,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":606,"author":{"gitId":"Fallman2"},"content":"        this.desc \u003d rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":607,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":608,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":609,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":610,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":611,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":612,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":613,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":614,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":615,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":616,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":617,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":618,"author":{"gitId":"Fallman2"},"content":"            tl.add(new ToDo(this.desc));","lastModifiedDate":"2023-08-30"},{"lineNumber":619,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.toDo(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":620,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":621,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":622,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":623,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":624,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":625,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":626,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":627,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":628,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":629,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of EventCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":630,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":631,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":632,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":633,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":634,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":635,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":636,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof TodoCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":637,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":638,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":639,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":640,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-08-31"},{"lineNumber":641,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":642,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":643,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-08-31"},{"lineNumber":644,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":645,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":646,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":647,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":648,"author":{"gitId":"Fallman2"},"content":"            return new ToDo(this.desc).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":649,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":650,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":651,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":652,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":653,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":654,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":655,"author":{"gitId":"Fallman2"},"content":"class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":656,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":657,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":658,"author":{"gitId":"Fallman2"},"content":"    DeadlineCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":659,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":660,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":661,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":662,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":663,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":664,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":665,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":666,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":667,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":668,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":669,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":670,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":671,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":672,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Deadline(this.rest));","lastModifiedDate":"2023-08-30"},{"lineNumber":673,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.deadline(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":674,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":675,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":676,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":677,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":678,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":679,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":680,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":681,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":682,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":683,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of EventCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":684,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":685,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":686,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":687,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":688,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":689,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":690,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof DeadlineCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":691,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":692,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":693,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":694,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-08-31"},{"lineNumber":695,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":696,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":697,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-08-31"},{"lineNumber":698,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":699,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":700,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":701,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":702,"author":{"gitId":"Fallman2"},"content":"            return new Deadline(this.rest).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":703,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":704,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":705,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":706,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":707,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":708,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":709,"author":{"gitId":"Fallman2"},"content":"class EventCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":710,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-08-30"},{"lineNumber":711,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":712,"author":{"gitId":"Fallman2"},"content":"    EventCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":713,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":714,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":715,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":716,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":717,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":718,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":719,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":720,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":721,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":722,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":723,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":724,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":725,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":726,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Event(this.rest));","lastModifiedDate":"2023-08-30"},{"lineNumber":727,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.event(tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":728,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":729,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":730,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":731,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":732,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":733,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":734,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":735,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":736,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":737,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of EventCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":738,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":739,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":740,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":741,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":742,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":743,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":744,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof EventCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":745,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":746,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":747,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":748,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-08-31"},{"lineNumber":749,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":750,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":751,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-08-31"},{"lineNumber":752,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":753,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":754,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":755,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":756,"author":{"gitId":"Fallman2"},"content":"            return new Event(this.rest).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":757,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":758,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":759,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":760,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":761,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":762,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":763,"author":{"gitId":"Fallman2"},"content":"class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":764,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":765,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":766,"author":{"gitId":"Fallman2"},"content":"    DeleteCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":767,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":768,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-30"},{"lineNumber":769,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":770,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":771,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":772,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":773,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid due to the index being out of bounds, prints an error message instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":774,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":775,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":776,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":777,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":778,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":779,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":780,"author":{"gitId":"Fallman2"},"content":"            Task hold \u003d tl.delete(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":781,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.delete(hold, tl));","lastModifiedDate":"2023-08-30"},{"lineNumber":782,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":783,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-08-30"},{"lineNumber":784,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-30"},{"lineNumber":785,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":786,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":787,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":788,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":789,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":790,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":791,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() as this one.","lastModifiedDate":"2023-08-31"},{"lineNumber":792,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":793,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":794,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":795,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":796,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":797,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":798,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof DeleteCommand \u0026\u0026 other.toString().equals(this.toString()));","lastModifiedDate":"2023-08-31"},{"lineNumber":799,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":800,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":801,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":802,"author":{"gitId":"Fallman2"},"content":"     * Returns a string representing this command.","lastModifiedDate":"2023-08-31"},{"lineNumber":803,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":804,"author":{"gitId":"Fallman2"},"content":"     * @return a String","lastModifiedDate":"2023-08-31"},{"lineNumber":805,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":806,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":807,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":808,"author":{"gitId":"Fallman2"},"content":"        return \"delete \" + this.index;","lastModifiedDate":"2023-08-31"},{"lineNumber":809,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":810,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":811,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":812,"author":{"gitId":"Fallman2"},"content":"class ClearCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":813,"author":{"gitId":"Fallman2"},"content":"    ClearCommand(String rest) {","lastModifiedDate":"2023-08-30"},{"lineNumber":814,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-08-30"},{"lineNumber":815,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":816,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":817,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":818,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":819,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid, an error message is printed instead.","lastModifiedDate":"2023-08-31"},{"lineNumber":820,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":821,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":822,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":823,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":824,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":825,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-08-31"},{"lineNumber":826,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":827,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":828,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":829,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":830,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":831,"author":{"gitId":"Fallman2"},"content":"                DataHandler.clearAll();","lastModifiedDate":"2023-08-30"},{"lineNumber":832,"author":{"gitId":"Fallman2"},"content":"                System.out.println(ui.clear());","lastModifiedDate":"2023-08-30"},{"lineNumber":833,"author":{"gitId":"Fallman2"},"content":"                System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":834,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":835,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-08-30"},{"lineNumber":836,"author":{"gitId":"Fallman2"},"content":"                System.out.println(ui.clear());","lastModifiedDate":"2023-08-30"},{"lineNumber":837,"author":{"gitId":"Fallman2"},"content":"                System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":838,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":839,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":840,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":841,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":842,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":843,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ClearCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":844,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-08-31"},{"lineNumber":845,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":846,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":847,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-08-31"},{"lineNumber":848,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":849,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":850,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":851,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ClearCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":852,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":853,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":854,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":855,"author":{"gitId":"Fallman2"},"content":"class ErrorCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":856,"author":{"gitId":"Fallman2"},"content":"    ErrorCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":857,"author":{"gitId":"Fallman2"},"content":"        super(false, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":858,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":859,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":860,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":861,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":862,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-08-31"},{"lineNumber":863,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":864,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":865,"author":{"gitId":"Fallman2"},"content":"     * @param ui The UI.","lastModifiedDate":"2023-08-31"},{"lineNumber":866,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":867,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":868,"author":{"gitId":"Fallman2"},"content":"        System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":869,"author":{"gitId":"Fallman2"},"content":"        System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":870,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":871,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":872,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":873,"author":{"gitId":"Fallman2"},"content":"     * Returns the boolean representing whether another Object is an instance of an ErrorCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":874,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-08-31"},{"lineNumber":875,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":876,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-08-31"},{"lineNumber":877,"author":{"gitId":"Fallman2"},"content":"     * @return boolean","lastModifiedDate":"2023-08-31"},{"lineNumber":878,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":879,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":880,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-08-31"},{"lineNumber":881,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ErrorCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":882,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":883,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":884,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":885,"author":{"gitId":"Fallman2"},"content":"class FindCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":886,"author":{"gitId":"Fallman2"},"content":"    private final String key;","lastModifiedDate":"2023-08-31"},{"lineNumber":887,"author":{"gitId":"Fallman2"},"content":"    FindCommand(String rest) {","lastModifiedDate":"2023-08-31"},{"lineNumber":888,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-08-31"},{"lineNumber":889,"author":{"gitId":"Fallman2"},"content":"        this.key \u003d rest;","lastModifiedDate":"2023-08-31"},{"lineNumber":890,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":891,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":892,"author":{"gitId":"Fallman2"},"content":"    void execute(TaskList tl, Ui ui) {","lastModifiedDate":"2023-08-31"},{"lineNumber":893,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":894,"author":{"gitId":"Fallman2"},"content":"            System.out.println(ui.find());","lastModifiedDate":"2023-08-31"},{"lineNumber":895,"author":{"gitId":"Fallman2"},"content":"            System.out.println(tl.find(this.key));","lastModifiedDate":"2023-08-31"},{"lineNumber":896,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":897,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-08-31"},{"lineNumber":898,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.ERROR_MESSAGE);","lastModifiedDate":"2023-08-31"},{"lineNumber":899,"author":{"gitId":"Fallman2"},"content":"            System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":900,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":901,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":902,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":903,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":904,"author":{"gitId":"Fallman2"},"content":"class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":905,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":906,"author":{"gitId":"Fallman2"},"content":"     * Parses the command string as input from the UI and returns its corresponding command","lastModifiedDate":"2023-08-31"},{"lineNumber":907,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":908,"author":{"gitId":"Fallman2"},"content":"     * @param command First token of input from the UI","lastModifiedDate":"2023-08-31"},{"lineNumber":909,"author":{"gitId":"Fallman2"},"content":"     * @param line Remaining input from the UI on the same line","lastModifiedDate":"2023-08-31"},{"lineNumber":910,"author":{"gitId":"Fallman2"},"content":"     * @return Corresponding command","lastModifiedDate":"2023-08-31"},{"lineNumber":911,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid command or line is parsed","lastModifiedDate":"2023-08-31"},{"lineNumber":912,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":913,"author":{"gitId":"Fallman2"},"content":"    public static Command parse(String command, String line) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":914,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":915,"author":{"gitId":"Fallman2"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":916,"author":{"gitId":"Fallman2"},"content":"                return new ExitCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":917,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":918,"author":{"gitId":"Fallman2"},"content":"                return new ListCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":919,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":920,"author":{"gitId":"Fallman2"},"content":"                return new MarkCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":921,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":922,"author":{"gitId":"Fallman2"},"content":"                return new UnmarkCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":923,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":924,"author":{"gitId":"Fallman2"},"content":"                return new TodoCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":925,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":926,"author":{"gitId":"Fallman2"},"content":"                return new DeadlineCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":927,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":928,"author":{"gitId":"Fallman2"},"content":"                return new EventCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":929,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":930,"author":{"gitId":"Fallman2"},"content":"                return new DeleteCommand(line.substring(1));","lastModifiedDate":"2023-08-30"},{"lineNumber":931,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"clearall\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":932,"author":{"gitId":"Fallman2"},"content":"                return new ClearCommand(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":933,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"find\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":934,"author":{"gitId":"Fallman2"},"content":"                return new FindCommand(line.substring(1));","lastModifiedDate":"2023-08-31"},{"lineNumber":935,"author":{"gitId":"Fallman2"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":936,"author":{"gitId":"Fallman2"},"content":"                return new ErrorCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":937,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":938,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":939,"author":{"gitId":"Fallman2"},"content":"            return new ErrorCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":940,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":941,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":942,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":943,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":944,"author":{"gitId":"Fallman2"},"content":"class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":945,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":946,"author":{"gitId":"Fallman2"},"content":"    public static String ERROR_MESSAGE \u003d \"Unfortunately, the circumstances preceding this has necessitated that I issue and apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":947,"author":{"gitId":"Fallman2"},"content":"    public static String SEPARATOR \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-31"},{"lineNumber":948,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":949,"author":{"gitId":"Fallman2"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-08-31"},{"lineNumber":950,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":951,"author":{"gitId":"Fallman2"},"content":"    Ui() {","lastModifiedDate":"2023-08-30"},{"lineNumber":952,"author":{"gitId":"Fallman2"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":953,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":954,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":955,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":956,"author":{"gitId":"Fallman2"},"content":"     * Returns the first token from a line of input.","lastModifiedDate":"2023-08-31"},{"lineNumber":957,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":958,"author":{"gitId":"Fallman2"},"content":"     * @return Command string.","lastModifiedDate":"2023-08-31"},{"lineNumber":959,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":960,"author":{"gitId":"Fallman2"},"content":"    public String command() {","lastModifiedDate":"2023-08-31"},{"lineNumber":961,"author":{"gitId":"Fallman2"},"content":"        return sc.next();","lastModifiedDate":"2023-08-30"},{"lineNumber":962,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":963,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":964,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":965,"author":{"gitId":"Fallman2"},"content":"     * Returns the remainder of the line of input after the command string has been removed.","lastModifiedDate":"2023-08-31"},{"lineNumber":966,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":967,"author":{"gitId":"Fallman2"},"content":"     * @return Remainder of line.","lastModifiedDate":"2023-08-31"},{"lineNumber":968,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":969,"author":{"gitId":"Fallman2"},"content":"    public String input() {","lastModifiedDate":"2023-08-31"},{"lineNumber":970,"author":{"gitId":"Fallman2"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":971,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":972,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":973,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":974,"author":{"gitId":"Fallman2"},"content":"     * Prints the separator line.","lastModifiedDate":"2023-08-31"},{"lineNumber":975,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":976,"author":{"gitId":"Fallman2"},"content":"    public void line() {","lastModifiedDate":"2023-08-31"},{"lineNumber":977,"author":{"gitId":"Fallman2"},"content":"        System.out.println(Ui.SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":978,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":979,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":980,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":981,"author":{"gitId":"Fallman2"},"content":"     * Prints the welcome logo and message.","lastModifiedDate":"2023-08-31"},{"lineNumber":982,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":983,"author":{"gitId":"Fallman2"},"content":"    void startup() {","lastModifiedDate":"2023-08-30"},{"lineNumber":984,"author":{"gitId":"Fallman2"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":985,"author":{"gitId":"Fallman2"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":986,"author":{"gitId":"Fallman2"},"content":"                + \"| |_| | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":987,"author":{"gitId":"Fallman2"},"content":"                + \"| ___/| |_| |    | __/\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":988,"author":{"gitId":"Fallman2"},"content":"                + \"| |    \\\\__,_|_|\\\\_\\\\___|\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":989,"author":{"gitId":"Fallman2"},"content":"                + \"|_|\";","lastModifiedDate":"2023-08-30"},{"lineNumber":990,"author":{"gitId":"Fallman2"},"content":"        System.out.println(\"Salutations! I hereby would like to inform you that my identity is that of\\n\" + logo +","lastModifiedDate":"2023-08-30"},{"lineNumber":991,"author":{"gitId":"Fallman2"},"content":"                \"\\nAn exceedingly verbose conversation simulation program.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":992,"author":{"gitId":"Fallman2"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-08-31"},{"lineNumber":993,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":994,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":995,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":996,"author":{"gitId":"Fallman2"},"content":"     * Returns the exit message.","lastModifiedDate":"2023-08-31"},{"lineNumber":997,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":998,"author":{"gitId":"Fallman2"},"content":"     * @return The exit message.","lastModifiedDate":"2023-08-31"},{"lineNumber":999,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1000,"author":{"gitId":"Fallman2"},"content":"    String exit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":1001,"author":{"gitId":"Fallman2"},"content":"        return \"It appears that the user has decided to close the program as indicated by the command of which this is the function being issued and therefore,\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1002,"author":{"gitId":"Fallman2"},"content":"                \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1003,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1004,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1005,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1006,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for listing tasks in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1007,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1008,"author":{"gitId":"Fallman2"},"content":"     * @return The message for listing tasks in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1009,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1010,"author":{"gitId":"Fallman2"},"content":"    String list() {","lastModifiedDate":"2023-08-30"},{"lineNumber":1011,"author":{"gitId":"Fallman2"},"content":"        return \"Here is the collection of items, previously designated to be known as Tasks, that you have inputted over a previous unspecified period of time\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1012,"author":{"gitId":"Fallman2"},"content":"                \"that may or may not require urgent attention, but will nevertheless necessitate some level of action within an either\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1013,"author":{"gitId":"Fallman2"},"content":"                \"indicated or not indicated time period.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1014,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1015,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1016,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1017,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for marking a task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":1018,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1019,"author":{"gitId":"Fallman2"},"content":"     * @param index Index of the task that has been marked.","lastModifiedDate":"2023-08-31"},{"lineNumber":1020,"author":{"gitId":"Fallman2"},"content":"     * @return The message indicating that the task has been done.","lastModifiedDate":"2023-08-31"},{"lineNumber":1021,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1022,"author":{"gitId":"Fallman2"},"content":"    String mark(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":1023,"author":{"gitId":"Fallman2"},"content":"        return \"I have been made aware of your desire to indicate that the task numbered \" + index +","lastModifiedDate":"2023-08-30"},{"lineNumber":1024,"author":{"gitId":"Fallman2"},"content":"                \" has been since been achieved as of the time at which you hve stipulated as so.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1025,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1026,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1027,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1028,"author":{"gitId":"Fallman2"},"content":"     * Returns the message for unmarking a task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":1029,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1030,"author":{"gitId":"Fallman2"},"content":"     * @return The message indicating that that task has been unmarked.","lastModifiedDate":"2023-08-31"},{"lineNumber":1031,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1032,"author":{"gitId":"Fallman2"},"content":"    String unmark() {","lastModifiedDate":"2023-08-31"},{"lineNumber":1033,"author":{"gitId":"Fallman2"},"content":"        return \"Very well. I have acknowledged your request to unmark the task of specified index as having been completed and\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1034,"author":{"gitId":"Fallman2"},"content":"                \"will now proceed to set said task of specified index to be considered as having not yet been completed.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1035,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1036,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1037,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1038,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new to do task has been added to the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1039,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1040,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1041,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-08-31"},{"lineNumber":1042,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-08-31"},{"lineNumber":1043,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1044,"author":{"gitId":"Fallman2"},"content":"    String toDo(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":1045,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time but with no such time being specified and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1046,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of said tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1047,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1048,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1049,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1050,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1051,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1052,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new Deadline task has been added to the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1053,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1054,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1055,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-08-31"},{"lineNumber":1056,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-08-31"},{"lineNumber":1057,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1058,"author":{"gitId":"Fallman2"},"content":"    String deadline(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":1059,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time alongside the stipulated time that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1060,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1061,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1062,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1063,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1064,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1065,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1066,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a new Event task has been added to the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1067,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1068,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1069,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-08-31"},{"lineNumber":1070,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the task or values used in the list are out of bounds.","lastModifiedDate":"2023-08-31"},{"lineNumber":1071,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1072,"author":{"gitId":"Fallman2"},"content":"    String event(TaskList tl) throws PukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":1073,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require participation for a set period of time alongside this stipulated duration that you have indicated and inserted it into \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1074,"author":{"gitId":"Fallman2"},"content":"                \"the overall collection of these tasks that require action.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1075,"author":{"gitId":"Fallman2"},"content":"                \"Here is a display of the added deadline task: \" + tl.get(tl.size() - 1) + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1076,"author":{"gitId":"Fallman2"},"content":"                \"You now, in total, have \" + tl.size() + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1077,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1078,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1079,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1080,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that a Task has been removed from the list","lastModifiedDate":"2023-08-31"},{"lineNumber":1081,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1082,"author":{"gitId":"Fallman2"},"content":"     * @param hold The task that was removed.","lastModifiedDate":"2023-08-31"},{"lineNumber":1083,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1084,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-08-31"},{"lineNumber":1085,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1086,"author":{"gitId":"Fallman2"},"content":"    String delete(Task hold, TaskList tl) {","lastModifiedDate":"2023-08-30"},{"lineNumber":1087,"author":{"gitId":"Fallman2"},"content":"        return \"I have acknowledged your request to have the task allocated to the specific index at which you have mentioned removed from the collection of all\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1088,"author":{"gitId":"Fallman2"},"content":"                \"such tasks, colloquially known as your To Do list.\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1089,"author":{"gitId":"Fallman2"},"content":"                \"The task in question that has been deleted is: \" + hold + \"\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1090,"author":{"gitId":"Fallman2"},"content":"                \"As of this current moment, there are a total of \" + tl.size() + \" occurrences of tasks in your list.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1091,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1092,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":1093,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":1094,"author":{"gitId":"Fallman2"},"content":"     * Returns the message indicating that all tasks have been cleared from the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":1095,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":1096,"author":{"gitId":"Fallman2"},"content":"     * @return The message.","lastModifiedDate":"2023-08-31"},{"lineNumber":1097,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":1098,"author":{"gitId":"Fallman2"},"content":"    String clear() {","lastModifiedDate":"2023-08-30"},{"lineNumber":1099,"author":{"gitId":"Fallman2"},"content":"        return \"Well I certainly hope you had meant to do that because I am not going too ask for your confirmation. As per the aforementioned instructions, I shall now\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":1100,"author":{"gitId":"Fallman2"},"content":"                \"purge all of the tasks that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":1101,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":1102,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":1103,"author":{"gitId":"Fallman2"},"content":"    String find() {","lastModifiedDate":"2023-08-31"},{"lineNumber":1104,"author":{"gitId":"Fallman2"},"content":"        return \"As per the instructions provided, I shall initiate a search into your list of items, of which we have previously declared to be known as tasks due too their relatively \\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":1105,"author":{"gitId":"Fallman2"},"content":"                \"urgent need of attention within a specified or unspecified frame of time, for those of which have an alphabetical similarity to the frame of reference that you have provided.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":1106,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":1107,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"Fallman2":1105,"-":2}},{"path":"src/test/java/puke/PukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"public class PukeTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public void ParserTests() throws PukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ExitCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ExitCommand(\"\"), Parser.parse(\"bye\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ListCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ListCommand(\"\"), Parser.parse(\"list\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing MarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new MarkCommand(\"3\"), Parser.parse(\"mark\", \" 3\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing UnmarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new UnmarkCommand(\"4\"), Parser.parse(\"unmark\", \" 4\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing TodoCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new TodoCommand(\"borrow book\"), Parser.parse(\"todo\", \" borrow book\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeadlineCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeadlineCommand(\"return book /by 2019-12-01T10:00\"), Parser.parse(\"deadline\", \" return book /by 2019-12-01T10:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing EventCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new EventCommand(\"project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"), Parser.parse(\"event\", \" project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeleteCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeleteCommand(\"5\"), Parser.parse(\"delete\", \" 5\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ClearCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ClearCommand(\"\"), Parser.parse(\"clearall\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 1","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        //assertEquals(new ErrorCommand(), Parser.parse(\"bye\", \"123\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 2","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ErrorCommand(), Parser.parse(\"todo\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    public void UiMessageTests() {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        //Testing of Ui Exit Message","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"It appears that the user has decided to close the program as indicated by the command of which this is the function being issued and therefore,\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\", new Ui().exit());","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Fallman2":41}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"deadline return book /by 2019-12-01T10:00","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"event project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"Inv","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"list 2","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"mark 24","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"deadline","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"event","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"bye","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Fallman2":19}}]
