[{"path":"ListData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"[T]/1/borrow book/good","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"[D]/1/return book/2019-12-01T10:00/bad","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"[E]/0/project meeting/2023-08-30T14:00/2023-08-30T16:00/ugly","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":3}},{"path":"backups/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"249.0\" prefWidth\u003d\"680.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" prefHeight\u003d\"219.0\" prefWidth\u003d\"562.0\" text\u003d\"Label\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Fallman2":16}},{"path":"backups/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"710.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"puke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"633.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"634.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" onMouseReleased\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"710.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"700.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":19}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"checkstyle {","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    archiveBaseName \u003d \"puke\"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    mainClassName \u003d \"puke.Puke\"","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Fallman2":21,"-":41}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"# Puke Bot User Guide","lastModifiedDate":"2023-09-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"# Features ","lastModifiedDate":"2023-09-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"## Task List","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"Puke features a task list which allows you to create, mark and delete tasks.","lastModifiedDate":"2023-09-19"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"There are three different types of tasks that can be added to the task list:","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"1. ToDo Tasks - Standard tasks that can be marked done or undone.","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"2. Deadline Tasks - Tasks with an associated deadline.","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"3. Event Tasks - Tasks that last a certain period of time, requiring a start and end time.","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"### Creating Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"To create a task, the task details have to be input in a specific format.","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"ToDo Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"- `todo (task description)`","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"- `todo delete gym`","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"Deadline Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"- `deadline (task description) /by (date and time of deadline)`","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"- `deadline hit the lawyer /by 2019-12-01T10:00`","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"Event Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"- `event (task description) /from (starting date and time) /to (end date and time)`","lastModifiedDate":"2023-09-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"- `event Facebook up /from 2023-08-30T14:00 /to 2023-08-30T16:00`","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"### Viewing Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"Tasks can be viewed at any time by inputting the following command:","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"- `list`","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"Do note that adding any other input after \"list\" will result in an error.","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"### Marking and Unmarking Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"Tasks can be marked as done and unmarked afterwards","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"- `mark (task index)`","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"- `unmark (task index)`","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"- `mark 2`","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"- `unmark 902351`","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"### Finding Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"Specific tasks can be searched for via the use of a key word or keywords. the following command returns","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"all tasks that contain the specified keywords:","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"- `find (keywords)`","lastModifiedDate":"2023-09-19"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"- `find the reason why we\u0027re still here`","lastModifiedDate":"2023-09-19"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"Leaving the keywords as empty will return an error instead.","lastModifiedDate":"2023-09-19"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"The order of the keywords as well as spaces will matter.","lastModifiedDate":"2023-09-19"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"### Deleting Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"Tasks can be easily deleted using the following command:","lastModifiedDate":"2023-09-19"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"- `delete (task index)`","lastModifiedDate":"2023-09-19"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"- `delete 42`","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"The index must be positive and returns an error if it is negative, out of range or is not an integer.","lastModifiedDate":"2023-09-19"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"Additionally, all tasks can be cleared immediately using the following command:","lastModifiedDate":"2023-09-19"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"- `clearall`","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"Do note that there is no confirmation for this command, and it is done immediately after input.","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"### Adding Tags","lastModifiedDate":"2023-09-19"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"Tags can be added to tasks to signify that a task is important. However, there is no additional","lastModifiedDate":"2023-09-19"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"functionality such as searching by tags for now.","lastModifiedDate":"2023-09-19"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"- `addTag (task index) (tag)`","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"Example: ","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"- `addTag 2 reoccurring`","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"### Data Saving","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"Puke Bot automatically saves all recorded tasks in a .txt file which is created automatically.","lastModifiedDate":"2023-09-19"}],"authorContributionMap":{"Fallman2":78,"-":13}},{"path":"src/main/java/puke/Puke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import puke.gui.Main;","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.managers.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" * A chatbot that uses overly complicated sentences.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"public class Puke {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     * List of tasks stored by the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * Constructor for the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException when an error occurs with the file reader.","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public Puke() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList(DataHandler.loadDatabase());","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            boolean created \u003d new File(\"ListData.txt\").createNewFile();","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            assert created;","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        Command next;","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        String[] inputComponents \u003d input.split(\" \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        String command \u003d inputComponents[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        String rest;","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"            rest \u003d inputComponents[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"            rest \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"            next \u003d Parser.parse(command, rest);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"            next \u003d new ErrorCommand();","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        return next.execute(tasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Fallman2":56,"-":1}},{"path":"src/main/java/puke/command/AddTagCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * Command class to add a tag to a task","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class AddTagCommand extends Command {","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String TAG_MESSAGE \u003d \"Very well. I shall now proceed to allocate the specified word, \"","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"colloquially known as a tag, to the activity that you had previously indicated to be of note, previously\"","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"stated to be known as a task, for the purpose of some sort of indication or marking.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    private final String tag;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * Creates a command to add a tag","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the line","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public AddTagCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        String[] inputs \u003d rest.split(\" \", 2);","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        this.index \u003d Integer.parseInt(inputs[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        this.tag \u003d inputs[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by returning the appropriate message for adding a tag","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @param tl the TaskList","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @return the message string","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            tl.addTag(this.index, tag);","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            return generateMessage();","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        boolean isAddTagCommand \u003d other instanceof AddTagCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        return isAddTagCommand \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        return \"addTag \" + this.index;","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage() {","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        return TAG_MESSAGE;","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Fallman2":58}},{"path":"src/main/java/puke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, clears the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String CLEAR_MESSAGE \u003d \"Well I certainly hope you had meant to do that because I am not \"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"going too ask for your confirmation. As per the aforementioned instructions, I shall now purge all of \"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"the tasks that you have previously recorded and designated as requiring attention.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * Creates a new ClearCommand that when executed, clears the task list.","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if the format of the input is incorrect","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public ClearCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (!rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by returning the corresponding message.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid, an error message is printed instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @return The message for clearing all tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        if (!isValid) {","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"                DataHandler.clearAll();","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"                return CLEAR_MESSAGE;","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                tl.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                return CLEAR_MESSAGE;","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ClearCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ClearCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":60}},{"path":"src/main/java/puke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Class that represents an action to be taken by the chatbot.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * All Commands can be executed to print its corresponding message and carry out corresponding actions.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    protected static final String ERROR_MESSAGE \u003d \"Unfortunately, the circumstances preceding this has necessitated \"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"            + \"that I issue an apology for the input that I have received is unrecognised.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    protected boolean isValid;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final boolean isExit;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    Command(boolean exit, boolean valid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        this.isExit \u003d exit;","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.isValid \u003d valid;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public abstract String execute(TaskList tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean representing whether the command causes the program to be closed","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @return the isExit boolean","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        return this.isExit;","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":29}},{"path":"src/main/java/puke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a Deadline Task","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new DeadlineCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public DeadlineCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Deadline(this.rest));","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + \"alongside the stipulated time that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * DeadlineCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof DeadlineCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"            return new Deadline(this.rest).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":83}},{"path":"src/main/java/puke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, deletes a task in the task list","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * Creates a new DeleteCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    public DeleteCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * If the command is invalid due to the index being out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            Task hold \u003d tl.delete(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(hold, tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(Task task, TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        return \"I have acknowledged your request to have the task allocated to the specific index at which \"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"you have mentioned removed from the collection of all\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + \"such tasks, colloquially known as your To Do list.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \"The task in question that has been deleted is: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                + task","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                + \"As of this current moment, there are a total of \"","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"                + \" occurrences of tasks in your list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() as this one.","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof DeleteCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * Returns a string representing this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     * @return a String","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        return \"delete \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":79}},{"path":"src/main/java/puke/command/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the error message.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ErrorCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    public ErrorCommand() {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"        super(false, false);","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * Returns the Error Message","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @return the Error Message","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public static String getErrorMessage() {","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        return ERROR_MESSAGE;","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * Returns the boolean representing whether another Object is an instance of an ErrorCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * Used in testing.","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     * @return boolean","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ErrorCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":42}},{"path":"src/main/java/puke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a new Event task.","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String[] rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new EventCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid input line is provided","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    public EventCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        this.rest \u003d rest.split(\" /\");","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            tl.add(new Event(rest));","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require participation for a set period of time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"alongside this stipulated duration that you have indicated and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of these tasks that require action.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     * EventCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof EventCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"            return new Event(this.rest).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":84}},{"path":"src/main/java/puke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the exit message.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public static final String EXIT_MESSAGE \u003d \"It appears that the user has decided to close the program as indicated \"","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"            + \"by the command of which this is the function being issued and therefore, \"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"I shall bid thee farewell and wish thee great fortune in your future endeavors.\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"Any input henceforth will close the certain and definite article of which has been known as PukeBot.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * Creates a new ExitCommand","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the line","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if the format of the input is incorrect","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public ExitCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        super(rest.isEmpty(), rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        if (!rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            return EXIT_MESSAGE;","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ExitCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ExitCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":52}},{"path":"src/main/java/puke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, looks for tasks in the task list that match the keywords provided.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    private static final String FIND_MESSAGE \u003d \"As per the instructions provided, I shall initiate a search into your \"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"            + \"list of items, of which we have previously declared to be known as tasks due too their relatively \"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"urgent need of attention within a specified or unspecified frame of time, for those of which \"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"have an alphabetical similarity to the frame of reference that you have provided.\\n\\n\";","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private final String key;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * Creates a new FindCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid input line is provided","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public FindCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        this.key \u003d rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        if (!rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * Executes the command, printing out the corresponding message from the UI while printing each matching","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * task in the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param tl the task list","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return FIND_MESSAGE","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"                    + tl.find(key);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        return \"find \" + key;","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof FindCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":54}},{"path":"src/main/java/puke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the string representation of the task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    private static final String LIST_MESSAGE \u003d \"Here is the collection of items, previously designated to be known \"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"            + \"as Tasks, that you have input over a previous unspecified period of time \"","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"that may or may not require urgent attention, but will nevertheless necessitate \"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"some level of action within an either \"","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"            + \"indicated or non indicated time period.\\n\\n\";","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * Creates a ListCommand","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid input line is provided","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public ListCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(false, rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        if (!rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @return The message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        if (!super.isValid) {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        return LIST_MESSAGE","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + tl.printOut();","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object is an instance of ListCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        return (other instanceof ListCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":56}},{"path":"src/main/java/puke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, prints the message to mark a task as complete.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private final int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     * Creates a new MarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid input line is provided","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public MarkCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            tl.mark(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            return generateMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        return \"I have been made aware of your desire to indicate that the task numbered \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + index","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \" has been since been achieved as of the time at which you have stipulated as so.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of MarkCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof MarkCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        return \"mark \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":71}},{"path":"src/main/java/puke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, creates a new Todo task","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private final String desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * Creates a new ToDoCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public TodoCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        super(false, !rest.isEmpty());","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.desc \u003d rest;","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        if (rest.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            tl.add(new ToDo(this.desc));","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return generateMessage(tl);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception PukeException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    private String generateMessage(TaskList tl) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        return \"Understood. I have hereby created a task known to require doing at a future time \"","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                + \"but with no such time being specified and inserted it into \"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"                + \"the overall collection of said tasks that require action. \"","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                + \"Here is a display of the added deadline task: \\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"                + tl.get(tl.size() - 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                + \"You now, in total, have \"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                + tl.size()","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"                + \" of these tasks recorded within said collection.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString as this command and is an instance of","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     * TodoCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object.","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     * @return A boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof TodoCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of this command.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     * @throws RuntimeException If an incorrect format is used","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"            return new ToDo(this.desc).toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        } catch (PukeException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":82}},{"path":"src/main/java/puke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Command class that when executed, marks a task as undone.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String UNMARK_MESSAGE \u003d \"Very well. I have acknowledged your request to unmark the task of \"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"            + \"specified index as having been completed and will now proceed to set said task of specified index to be \"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"            + \"considered as having not yet been completed.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private int index;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * Creates a new UnmarkCommand","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param rest the rest of the input line.","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid input line is provided","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public UnmarkCommand(String rest) throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(false, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            this.index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * Executes the command by printing out the corresponding message.","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * If the command is in the wrong format or an index is out of bounds, prints an error message instead.","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @param tl The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @return the message String.","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    public String execute(TaskList tl) {","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            tl.unmark(this.index);","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            DataHandler.writeToDatabase(tl);","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            return UNMARK_MESSAGE;","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"            return ERROR_MESSAGE;","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     * Returns a boolean indicating if the other object has the same toString() and is an instance of UnmarkCommand.","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * @param other Another object","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * @return a boolean.","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof UnmarkCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        boolean isSameCommand \u003d other.toString().equals(toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the command","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * @return a String.","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        return \"unmark \" + this.index;","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":69}},{"path":"src/main/java/puke/gui/ErrorDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"public class ErrorDialogBox extends HBox {","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    private Text dialog;","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    private ErrorDialogBox(String text, Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ErrorDialogBox.fxml\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public static ErrorDialogBox getErrorDialog(Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        return new ErrorDialogBox(ErrorCommand.getErrorMessage(), img);","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":41}},{"path":"src/main/java/puke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.Puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * Main class of the GUI","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private final Puke puke \u003d new Puke();","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public Main() throws IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setPuke(puke);","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            stage.setTitle(\"PukeBot\");","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":35}},{"path":"src/main/java/puke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.Puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import puke.command.ExitCommand;","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    private Puke puke;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    private final Image pukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Puke.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * Initializes the Main Window","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        assert (userImage !\u003d null);","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        assert (pukeImage !\u003d null);","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        dialogContainer.getChildren().add(PukeDialogBox.startup(pukeImage));","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    public void setPuke(Puke p) {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        puke \u003d p;","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Puke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        String response \u003d puke.getResponse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        dialogContainer.getChildren().add(UserDialogBox.getUserDialog(input, userImage));","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        if (isExit) {","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"            Platform.exit();","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        if (response.equals(ExitCommand.EXIT_MESSAGE)) {","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"            isExit \u003d true;","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"            dialogContainer.getChildren().add(PukeDialogBox.getPukeDialog(response, pukeImage));","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        } else if (response.equals(ErrorCommand.getErrorMessage())) {","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"            dialogContainer.getChildren().add(ErrorDialogBox.getErrorDialog(pukeImage));","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"            dialogContainer.getChildren().add(PukeDialogBox.getPukeDialog(response, pukeImage));","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":71}},{"path":"src/main/java/puke/gui/PukeDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"public class PukeDialogBox extends HBox {","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    private static final String STARTUP_MESSAGE \u003d \"Salutations! I hereby would like to inform you that my identity is \"","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"            + \"that of Puke, an exceedingly verbose conversation simulation program.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    private Text dialog;","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    private PukeDialogBox(String text, Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/PukeDialogBox.fxml\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public static PukeDialogBox getPukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        return new PukeDialogBox(text, img);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * Returns the startup dialog","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * @param img puke image","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * @return startup dialog","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    public static PukeDialogBox startup(Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        return new PukeDialogBox(STARTUP_MESSAGE, img);","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"Fallman2":52}},{"path":"src/main/java/puke/gui/UserDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.gui;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"public class UserDialogBox extends HBox {","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    private static final String STARTUP_MESSAGE \u003d \"Salutations! I hereby would like to inform you that my identity is \"","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"            + \"that of Puke, an exceedingly verbose conversation simulation program.\";","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    private Text dialog;","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    @FXML","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    private UserDialogBox(String text, Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public static UserDialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        return new UserDialogBox(text, img);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":42}},{"path":"src/main/java/puke/managers/DataHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.io.File;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" * A class that handles the storage of the task list into ListData.txt.","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"public class DataHandler {","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Interprets a line from the ListData.txt file used to store events.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @param input a line from the file","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * @return a corresponding task.","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid task is detected.","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public static Task translate(String input) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        String[] splitInput \u003d input.split(\"/\");","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        Task output;","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        if (splitInput[0].equals(\"[T]\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            output \u003d translateToDo(splitInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        } else if (splitInput[0].equals(\"[D]\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            output \u003d translateDeadline(splitInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        } else if (splitInput[0].equals(\"[E]\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            output \u003d translateEvent(splitInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        if (splitInput[1].equals(\"1\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            output.mark();","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        } else if (!splitInput[1].equals(\"0\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    private static Task translateToDo(String[] splitInput) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        if (splitInput.length \u003e 3) {","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"            return ToDo.construct(splitInput[2],","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                    Arrays.copyOfRange(splitInput, 3, splitInput.length));","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"            return ToDo.construct(splitInput[2], new String[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    private static Task translateDeadline(String[] splitInput) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        if (splitInput.length \u003e 4) {","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"            return Deadline.construct(splitInput[2], splitInput[3],","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"                    Arrays.copyOfRange(splitInput, 4, splitInput.length));","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"            return Deadline.construct(splitInput[2], splitInput[3], new String[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    private static Task translateEvent(String[] splitInput) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        if (splitInput.length \u003e 5) {","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"            return Event.construct(splitInput[2], splitInput[3], splitInput[4],","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"                    Arrays.copyOfRange(splitInput, 5, splitInput.length));","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"            return Event.construct(splitInput[2], splitInput[3], splitInput[4], new String[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"     * Updates the ListData.txt file with the latest list of tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"     * @param taskList The task list.","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the file writer.","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"    public static void writeToDatabase(TaskList taskList) throws IOException {","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        for (Task item:taskList.getList()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"            output.append(item.write()).append(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        fw.write(output.toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"     * Loads the events stored in the ListData.txt file when the program is run.","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"     * If an invalid line is detected, it is skipped.","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"     * @return The Task List","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If the file is not found.","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"    public static ArrayList\u003cTask\u003e loadDatabase() throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        Scanner sc;","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"            sc \u003d new Scanner(new File(\"ListData.txt\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"                output.add(DataHandler.translate(sc.nextLine()));","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"                continue;","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"     * Clears all stored tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"     * @throws IOException If an error occurs with the FileWriter.","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    public static void clearAll() throws IOException {","lastModifiedDate":"2023-09-04"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"        FileWriter fw \u003d new FileWriter(\"ListData.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"        fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":124}},{"path":"src/main/java/puke/managers/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.command.AddTagCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.command.ClearCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.command.DeadlineCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.command.DeleteCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import puke.command.ErrorCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import puke.command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import puke.command.ExitCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import puke.command.FindCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import puke.command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import puke.command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import puke.command.TodoCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import puke.command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" * A class that takes in input and parses it to return a command.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"public class Parser {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Parses the command string as input from the UI and returns its corresponding command","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     * @param command First token of input from the UI","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * @param line Remaining input from the UI on the same line","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @return Corresponding command","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an invalid command or line is parsed","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    public static Command parse(String command, String line) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                return new ExitCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"                return new ListCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"mark\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"                return new MarkCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"unmark\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"                return new UnmarkCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"                return new TodoCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"                return new DeadlineCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                return new EventCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"delete\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"                return new DeleteCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"clearall\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"                return new ClearCommand(line);","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"find\")) {","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                return new FindCommand(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"            } else if (command.equals(\"addTag\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                return new AddTagCommand(line);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"                return new ErrorCommand();","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"            return new ErrorCommand();","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":60}},{"path":"src/main/java/puke/managers/PukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":" * An exception class that represents any invalid formatting encountered by Puke.","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"public class PukeException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"     * Creates the exception.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    public PukeException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"        super(\"Unfortunately, the circumstances preceding this has necessitated that I issue an apology \"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"                + \", for the input that I have received is unrecognised.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":14}},{"path":"src/main/java/puke/managers/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.managers;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A class that stores Tasks in a list.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class TaskList {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * Lists down the tasks stored in this list in a String format.","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @return the String representation of the list.","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    public String printOut() {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"            i++;","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public Task get(int index) throws PukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            return list.get(index);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        return this.list;","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        this.list.add(t);","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * Deletes the task at the specified index from the list and returns it.","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task to be deleted.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * @return the task that was deleted.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index was used.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public Task delete(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        Task hold;","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"            hold \u003d list.get(index - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"            list.remove(index - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"            return hold;","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of each task in the list that matches the key.","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"     * @param key the keyword to match the tasks with.","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * @return the String representation of the tasks.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    public String find(String key) {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        for (Task s : list) {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"            if (s.getDescription().contains(key)) {","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"                sb.append(String.format(\"%d. %s\\n\", i, s.toString()));","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"                i++;","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task in question.","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"    public void mark(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).mark();","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as undone.","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"     * @param index of the task in question.","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an invalid index is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"    public void unmark(int index) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).unmark();","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"    public int size() {","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        return list.size();","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"    public void clear() {","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"        this.list.clear();","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"     * Adds a new tag to a task in the tasklist","lastModifiedDate":"2023-09-13"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"     * @param index the index of the task","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"     * @param tag the tag to be added","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"    public void addTag(int index, String tag) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"            list.get(index - 1).addTag(tag);","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":130}},{"path":"src/main/java/puke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Task class that has a deadline attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final String DEADLINE_LABEL \u003d \"[D]\";","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private static final int CONSTRUCT_SIZE \u003d 2;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with a set deadline.","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     * @param all All strings from the remainder of the input after being split","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public Deadline(String[] all) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        super(DEADLINE_LABEL, all[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            date \u003d LocalDateTime.parse(all[1].split(\"by \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with a set deadline but with preset tags","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param all All strings from the remainder of the input after being split","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * @param tags All tags that the task has","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    public Deadline(String[] all, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        super(DEADLINE_LABEL, all[0], tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            date \u003d LocalDateTime.parse(all[1].split(\"by \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * Creates a Deadline Task using input from the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task.","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"     * @param date The date of the deadline.","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * @return The Deadline task.","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    public static Deadline construct(String desc, String date, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[CONSTRUCT_SIZE];","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"by \" + date;","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        return new Deadline(container, tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%s%s\", super.write(), date, super.writeTags());","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s (by: %s) %s\", super.toString(), date, super.printTags());","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof Deadline;","lastModifiedDate":"2023-09-18"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        boolean isSameTask \u003d toString().equals(other.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":84}},{"path":"src/main/java/puke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":" * A Task class that has a start and end time attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    private static final int CONSTRUCT_SIZE \u003d 3;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    private static final String EVENT_LABEL \u003d \"[E]\";","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"     * Creates a task with a start and end time","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"     * @param all All Strings from the remainder of the input line after the command string.","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public Event(String[] all) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        super(EVENT_LABEL, all[0]);","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            from \u003d LocalDateTime.parse(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            to \u003d LocalDateTime.parse(all[2].split(\"to \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     * Creates a task with a start and end time but with preset tags","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"     * @param all All Strings from the remainder of the input line after the command string.","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * @param tags All tags that the task has","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public Event(String[] all, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        super(EVENT_LABEL, all[0], tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            from \u003d LocalDateTime.parse(all[1].split(\"from \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            to \u003d LocalDateTime.parse(all[2].split(\"to \")[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception DateTimeParseException) {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"     * Creates an Event task using data stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * @param desc Description of the event","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     * @param from Start date and time of the event.","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @param to Ending date and time of the event.","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * @return The Event task.","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is detected e.g. the file is corrupted.","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public static Event construct(String desc, String from, String to, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        String[] container \u003d new String[CONSTRUCT_SIZE];","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        container[0] \u003d desc;","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        container[1] \u003d \"from \" + from;","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        container[2] \u003d \"to \" + to;","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        return new Event(container, tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is stored in the ListData.txt file.","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%s/%s%s\", super.write(), from, to, super.writeTags());","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the Deadline task that is used for Displaying in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s (from: %s to: %s) %s\", super.toString(), from, to, super.printTags());","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof Event;","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        boolean isSameTask \u003d toString().equals(other.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":89}},{"path":"src/main/java/puke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":" * A class that represents an action that has to be tracked and carried out at a specified or unspecified time.","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"public class Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    protected String label;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    protected String description;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    protected ArrayList\u003cString\u003e tags;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    protected Task(String label, String description) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        this.label \u003d label;","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        this.tags \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        if (label.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    protected Task(String label, String description, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        this.label \u003d label;","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        this.tags \u003d new ArrayList\u003cString\u003e(List.of(tags));","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        if (label.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as done","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public void mark() {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        assert (!isDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * Marks a task as undone","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    public void unmark() {","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        assert (isDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        return description;","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"     * Adds a tag to this task","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"     * @param tag the tag to add","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    public void addTag(String tag) {","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        tags.add(tag);","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"     * Returns a sequence of all tags in order as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"     * @return the string representation","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    public String printTags() {","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        for (String a: tags) {","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"            output.append(String.format(\"#%s \", a));","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        return output.toString();","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the task that can be stored and","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"     * read later when the program is initiated again.","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        int checked \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"        if (isDone) {","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"            checked \u003d 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s/%d/%s\", label, checked , description);","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation of the tags of the task to be stored.","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation of the tags","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"    public String writeTags() {","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        for (String tag: tags) {","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"            sb.append(\"/\").append(tag);","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"     * Returns a String representation to be displayed in the to do list.","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"     * @return a String representation.","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"        String status \u003d \"[ ]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"        if (isDone) {","lastModifiedDate":"2023-09-18"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"            status \u003d \"[X]\";","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s%s %s\", label, status, this.description);","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":114}},{"path":"src/main/java/puke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":" * A Task class that does not have a specific time attached to it.","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"    private static final String TODO_LABEL \u003d \"[T]\";","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with no set deadline or time period.","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    public ToDo(String desc) throws PukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        super(TODO_LABEL, desc);","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"            throw new PukeException();","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"     * Creates a Task with no set deadline or time period but has preset tags","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"     * @param desc The description of the task","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * @param tags All preset tags","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException If an incorrect format is used.","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public ToDo(String desc, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        super(TODO_LABEL, desc, tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"     * Constructs a to do object from data from ListData.txt","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"     * @param desc The task description","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"     * @param tags The tags that the task has","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"     * @return The to do object","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"     * @throws PukeException if an incorrect format is used.","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    public static ToDo construct(String desc, String[] tags) throws PukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        return new ToDo(desc, tags);","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     * Returns the string representation of a to do task to be stored in the ListData.txt file","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * @return the string representation.","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    public String write() {","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        return super.write() + super.writeTags();","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     * Returns the string representation of this to do task","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * @return the String representation","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        return String.format(\"%s %s\", super.toString(), super.printTags());","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        boolean isInstance \u003d other instanceof ToDo;","lastModifiedDate":"2023-09-18"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        boolean isSameTask \u003d toString().equals(other.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        return isInstance \u0026\u0026 isSameTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"Fallman2":66}},{"path":"src/main/resources/view/ErrorDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Polygon?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Rectangle?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"75.0\" prefWidth\u003d\"686.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"      \u003cPolygon fill\u003d\"#ff6767\" points\u003d\"22.0, -46.0, 22.0, -60.0, 0.0, -46.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"      \u003cStackPane alignment\u003d\"TOP_RIGHT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"75.0\" prefWidth\u003d\"561.0\" style\u003d\"-fx-background-color: #ff6767; -fx-padding: 5;\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"            \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"560.13671875\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"      \u003c/StackPane\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"716.0\" style\u003d\"-fx-background-color: #393939;\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"puke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"640.0\" style\u003d\"-fx-background-color: #393939; -fx-border-color: #ffffff; -fx-text-fill: #ffffff;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"640.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #393939; -fx-border-color: #ffffff;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"716.0\" style\u003d\"-fx-background-color: #393939;\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"558.0\" prefWidth\u003d\"715.0\" style\u003d\"-fx-background-color: #393939;\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"      \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"Fallman2":19}},{"path":"src/main/resources/view/PukeDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Polygon?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Rectangle?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"106.0\" prefWidth\u003d\"696.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"      \u003cPolygon fill\u003d\"#75f3ff\" points\u003d\"22.0, -46.0, 22.0, -60.0, 0.0, -46.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"      \u003cStackPane alignment\u003d\"TOP_RIGHT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"75.0\" prefWidth\u003d\"571.0\" style\u003d\"-fx-background-color: #75f3ff; -fx-padding: 5;\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"            \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"560.13671875\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"      \u003c/StackPane\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":26}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Polygon?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.shape.Rectangle?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"75.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"      \u003cStackPane alignment\u003d\"TOP_RIGHT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"75.0\" prefWidth\u003d\"320.0\" style\u003d\"-fx-background-color: #40ff89; -fx-padding: 5;\"\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"            \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"560.13671875\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"      \u003c/StackPane\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"      \u003cPolygon fill\u003d\"#40ff89\" points\u003d\"0.0, -43.0, 21.0, -43.0, 0.0, -60.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#393939\" height\u003d\"75.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" width\u003d\"9.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":26}},{"path":"src/test/java/puke/DataHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.DataHandler;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"public class DataHandlerTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    public void DataHandlerTests() throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        String firstInput \u003d \"[T]/0/borrow book/good\";","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        String secondInput \u003d \"[D]/0/return book/2019-12-01T10:00/bad\";","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        String secondInput2 \u003d \"return book/by 2019-12-01T10:00\";","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        String[] splitInput2 \u003d secondInput2.split(\"/\");","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        String thirdInput \u003d \"[E]/0/project meeting/2023-08-30T14:00/2023-08-30T16:00/ugly\";","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        String thirdInput3 \u003d \"project meeting/from 2023-08-30T14:00/to 2023-08-30T16:00\";","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        String[] splitInput3 \u003d thirdInput3.split(\"/\");","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        //Testing translateToDo","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        String[] tags1 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        tags1[0] \u003d \"good\";","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ToDo(\"borrow book\", tags1), DataHandler.translate(firstInput));","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        //Testing translateDeadline","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        String[] tags2 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        tags2[0] \u003d \"bad\";","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new Deadline(splitInput2, tags2), DataHandler.translate(secondInput));","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        //Testing translateEvent","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        String[] tags3 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        tags3[0] \u003d \"ugly\";","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new Event(splitInput3, tags3), DataHandler.translate(thirdInput));","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":38}},{"path":"src/test/java/puke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Deadline;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    public void DeadlineTests() throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"        String[] tags1 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        tags1[0] \u003d \"bad\";","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        String objectInput \u003d \"return book /by 2019-12-01T10:00\";","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        Deadline testObject \u003d new Deadline(objectInput.split(\"/\"), tags1);","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        //Testing Write","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[D]/0/return book /2019-12-01T10:00/bad\", testObject.write());","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        //Testing toString()","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[D][ ] return book  (by: 2019-12-01T10:00) #bad \", testObject.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":23}},{"path":"src/test/java/puke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.Event;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class EventTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    public void EventTests() throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"        String[] tags1 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"        tags1[0] \u003d \"ugly\";","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        String objectInput \u003d \"project meeting /from 2023-08-30T14:00/to 2023-08-30T16:00\";","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        String[] objectSplit \u003d objectInput.split(\"/\");","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        Event testObject \u003d new Event(objectSplit, tags1);","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        //Testing Write","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[E]/0/project meeting /2023-08-30T14:00/2023-08-30T16:00/ugly\", testObject.write());","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        //Testing toString()","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[E][ ] project meeting  (from: 2023-08-30T14:00 to: 2023-08-30T16:00) #ugly \", testObject.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":23}},{"path":"src/test/java/puke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.command.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    public void ParserTests() throws PukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ExitCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ExitCommand(\"\"), Parser.parse(\"bye\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ListCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ListCommand(\"\"), Parser.parse(\"list\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing MarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new MarkCommand(\"3\"), Parser.parse(\"mark\", \"3\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing UnmarkCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new UnmarkCommand(\"4\"), Parser.parse(\"unmark\", \"4\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing TodoCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new TodoCommand(\"borrow book\"), Parser.parse(\"todo\", \"borrow book\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeadlineCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeadlineCommand(\"return book /by 2019-12-01T10:00\"), Parser.parse(\"deadline\", \"return book /by 2019-12-01T10:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing EventCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new EventCommand(\"project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"), Parser.parse(\"event\", \"project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing DeleteCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new DeleteCommand(\"5\"), Parser.parse(\"delete\", \"5\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ClearCommand","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ClearCommand(\"\"), Parser.parse(\"clearall\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing AddTagCommand","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new AddTagCommand(\"1 nop\"), Parser.parse(\"addTag\", \"1 nop\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 1","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ErrorCommand(), Parser.parse(\"bye\", \"123\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        //Testing Parsing ErrorCommand 2","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        assertEquals(new ErrorCommand(), Parser.parse(\"todo\", \"\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Fallman2":39}},{"path":"src/test/java/puke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.managers.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import puke.task.Task;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    public void TaskListTests() throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        TaskList testList1 \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cTask\u003e listInput \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        listInput.add(new ToDo(\"a\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        TaskList testList2 \u003d new TaskList(listInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        //Testing printing of empty TaskList","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList1.printOut(), \"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        //Testing printing of TaskList with 1 task","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList2.printOut(), \"1. [T][ ] a \\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        //Testing marking of TaskList","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        testList2.mark(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList2.printOut(), \"1. [T][X] a \\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        //Testing un-marking of TaskList","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        testList2.unmark(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList2.printOut(), \"1. [T][ ] a \\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        //Testing of adding a task to TaskList","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        testList1.add(new ToDo(\"a\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList1.printOut(), testList2.printOut());","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        //Testing of getting TaskList size","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList1.size(), 1);","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        //Testing of clearing TaskList","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        testList1.clear();","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList1.size(), 0);","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        //Testing of deleting item","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        testList2.delete(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList2.printOut(), testList1.printOut());","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        //Testing of adding tag","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        testList1.add(new ToDo(\"a\"));","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        testList1.addTag(1, \"b\");","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        assertEquals(testList1.printOut(), \"1. [T][ ] a #b \\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":48}},{"path":"src/test/java/puke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package puke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import puke.managers.PukeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import puke.task.ToDo;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"public class ToDoTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"    public void ToDoTests() throws PukeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"        String[] tags1 \u003d new String[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"        tags1[0] \u003d \"good\";","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"        ToDo testObject \u003d new ToDo(\"a\", tags1);","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"        //Testing Write","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[T]/0/a/good\", testObject.write());","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"        //Testing toString()","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        assertEquals(\"[T][ ] a #good \", testObject.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"Fallman2":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"deadline return book /by 2019-12-01T10:00","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"event project meeting /from 2023-08-30T14:00 /to 2023-08-30T16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"Inv","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"list 2","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"mark 24","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"deadline","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"event","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"bye","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Fallman2":19}}]
