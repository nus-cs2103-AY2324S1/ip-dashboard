[{"path":"src/main/java/CCException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"public class CCException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"    public CCException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":5}},{"path":"src/main/java/ChatterChicken.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"public class ChatterChicken {","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"    public static final String LINE \u003d \"\\n    _____________________________________________________________________________\\n\";","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"    public static final String INDENT \u003d \"      \";","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"    public static final String INDENT_BIG \u003d \"        \";","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"    public static final String PATH \u003d \"src/main/data/task-list.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"    private static TaskList tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"     * Displays a greeting message to the user to introduce ChatterChicken.","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"    private void greet() {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"        System.out.println(LINE","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"                + INDENT + \"Hello! I\u0027m ChatterChicken!\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"                + INDENT + \"What can I do for you?\"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"                + LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"     * Displays a farewell message to the user as they exit the ChatterChicken application.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"    private void exit() {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"        System.out.println(LINE + INDENT + \"Bye. Hope to see you again soon!\" + LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"     * Parses the input command and performs corresponding actions based on the provided input.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"     * This method handles various commands such as listing tasks, marking/unmarking tasks, deleting tasks,","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"     * and adding new tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"     * @param input The input command provided by the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If an error occurs during parsing or execution of the command.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"    private void parseInput(String input) throws CCException {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"        int space \u003d input.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"        String action;","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"        if (space \u003d\u003d -1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"            action \u003d input;","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"            action \u003d input.substring(0, input.indexOf(\u0027 \u0027));","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"        switch (action) {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"            case \"list\":","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"                tasks.printList();","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"                tasks.markTask(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"                tasks.unmarkTask(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"                tasks.deleteTask(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"            case \"event\":","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"                tasks.addTask(Parser.parseInput(action, input));","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"tllshan"},"content":"            default:","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"tllshan"},"content":"                throw new CCException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :\u003c\");","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"tllshan"},"content":"     * Initiates the main loop of the ChatterChicken application.","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"tllshan"},"content":"     * The method reads user input, processes commands, and provides responses until the user chooses to  exit.","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"tllshan"},"content":"     * Exceptions are caught and displayed.","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"tllshan"},"content":"    private void run() {","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"tllshan"},"content":"        try (Scanner sc \u003d new Scanner(System.in)) {","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"tllshan"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"tllshan"},"content":"            greet();","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"tllshan"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"tllshan"},"content":"            while (!input.equals(\"bye\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"tllshan"},"content":"                parseInput(input);","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"tllshan"},"content":"                input \u003d sc.nextLine();","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"tllshan"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"tllshan"},"content":"        } catch (CCException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"tllshan"},"content":"            System.err.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"tllshan"},"content":"        exit();","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"tllshan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"tllshan"},"content":"        ChatterChicken chatterChicken \u003d new ChatterChicken();","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"tllshan"},"content":"        chatterChicken.run();","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":93}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"    private final LocalDate end;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"    public Deadline(String input, String name, LocalDate end) {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"        super(input, name);","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"     * Generates the formatted representation of the deadline task.","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"     * The format includes the task status, task type, description, and end time.","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"     * @return The formatted representation of the deadline task.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"    public String getTask() {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"        return String.format(\"[%s][D] %s (by: %s)\", super.checkDone(), super.getName(), super.formatDate(end));","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":21}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"    private final LocalDate start;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"    private final LocalDate end;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"    public Event(String input, String name, LocalDate start, LocalDate end) {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"        super(input, name);","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"     * Generates the formatted representation of the event task.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"     * The format includes the task status, task type, description, start time, and end time.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"     * @return The formatted representation of the event task.","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    public String getTask() {","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"        return String.format(\"[%s][E] %s (from: %s to: %s)\",","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"                super.checkDone(),","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"                super.getName(),","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"                super.formatDate(start),","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"                super.formatDate(end));","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":28}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"    public static Task parseInput (String type, String input) throws CCException {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"        switch (type) {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"                task \u003d parseToDo(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"                task \u003d parseDeadline(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"            case \"event\":","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"                task \u003d parseEvent(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"        return task;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"     * Parses the input string to create a new ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"     * The method extracts the task description from the input and creates a new ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"     * @param input The input string containing the todo description.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"todo todo_description\"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"     * @return A new ToDo task object created from the provided input.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If the input string is empty or if there is an error in task creation.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"    private static ToDo parseToDo (String input) throws CCException {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"        if (input.equals(\"todo\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"        return new ToDo(input, input.substring(\"todo\".length()).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"     * Parses the input string to create a new Deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"     * The method splits the input into fields, checks for the correct format, and extracts the task name","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"     * and deadline information to create a new Deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"     * @param input The input string containing the deadline description and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"deadline deadline_description /by end_time\"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"     * @return A new Deadline task object created from the provided input.","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If the input format is incorrect or if there are empty fields.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"    private static Deadline parseDeadline(String input) throws CCException {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"        String[] fields \u003d input.split(\"/\");","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"        if (fields.length !\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Incorrect format for deadline.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"        if (!fields[0].startsWith(\"deadline \") || !fields[1].startsWith(\"by \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Incorrect format for deadline.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"        String name \u003d fields[0].substring(\"deadline\".length()).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"        String end \u003d fields[1].substring(\"by\".length()).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"        if (name.isEmpty() || end.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Empty field for deadline detected.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"        return new Deadline(input, name, parseDate(end));","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"tllshan"},"content":"     * Parses the input string to create a new Event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"tllshan"},"content":"     * The method splits the input into fields, checks for the correct format, and extracts the task name,","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"tllshan"},"content":"     * start time, and end time information to create  a new Event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"tllshan"},"content":"     * @param input The input string containing the event description and start and end timings.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"event event_description /from start_time /to end_time","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"tllshan"},"content":"     * @return A new Event task object created from the provided input.","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If the input format is incorrect or if there are empty fields.","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"tllshan"},"content":"    private static Event parseEvent(String input) throws CCException{","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"tllshan"},"content":"        String[] fields \u003d input.split(\"/\");","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"tllshan"},"content":"        if (fields.length !\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Incorrect format for event.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"tllshan"},"content":"        if (!fields[0].startsWith(\"event \") || !fields[1].startsWith(\"from \") || !fields[2].startsWith(\"to \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Incorrect format for event.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"tllshan"},"content":"        String name \u003d fields[0].substring(\"event\".length()).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"tllshan"},"content":"        String start \u003d fields[1].substring(\"from\".length()).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"tllshan"},"content":"        String end \u003d fields[2].substring(\"to\".length()).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"tllshan"},"content":"        if (name.isEmpty() || start.isEmpty() || end.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"OOPS!!! Empty field for event detected.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"tllshan"},"content":"        return new Event(input, name, parseDate(start), parseDate(end));","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"tllshan"},"content":"    private static LocalDate parseDate(String date) {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"tllshan"},"content":"            return LocalDate.parse(date);","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"tllshan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"tllshan"},"content":"            System.out.println(\"Error parsing date: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"tllshan"},"content":"        return null;","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"tllshan":98}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.io.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"     * Loads tasks from the data file and populates the task list with them.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"     * If the data file doesn\u0027t exist, a new file is created.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"     * Any errors during loading or task addition are caught and handled.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"    public static ArrayList\u003cTask\u003e loadTasksFromFile() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"            File dataFile \u003d Paths.get(ChatterChicken.PATH).toAbsolutePath().toFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"            if (!dataFile.exists()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"                dataFile.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"                BufferedReader reader \u003d new BufferedReader(new FileReader(dataFile));","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"                String currLine \u003d reader.readLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"                ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"                while (currLine !\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"                    String taskType \u003d currLine.substring(0, currLine.indexOf(\u0027 \u0027));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"                    Task task \u003d Parser.parseInput(taskType, currLine);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"                    taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"                    currLine \u003d reader.readLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"                reader.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"                return taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"            System.err.println(\"An error occurred while loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"        } catch (CCException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"            System.err.println(\"An error occurred while adding tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"        return null;","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"     * Saves the provided task to the data file in its original user input format.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"     * @param task The task to be saved to the data file.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"    public static void saveTaskToFile(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"            File dataFile \u003d Paths.get(ChatterChicken.PATH).toAbsolutePath().toFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile, true));","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"            writer.append(task.getTaskInput() + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"            writer.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"            System.err.println(\"An error occurred while saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"tllshan":54}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"    private final String input;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"    private final String name;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"    public Task(String input, String name) {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"    public String getName() {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"        return this.name;","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"    public abstract String getTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"    public String getTaskInput() {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"        return this.input;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"    protected String checkDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"    public String formatDate(LocalDate date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"        return date.format(formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":38}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":" * The List class represents a collection of tasks managed by the ChatterChicken task manager.","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":" * This class is responsible for adding, marking, unmarking, and deleting tasks, as well as printing","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":" * the list of tasks along with their respective indexes.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":" * Tasks can be of different types: ToDo, Deadline, and Event.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"public class TaskList {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"        this.taskList \u003d Storage.loadTasksFromFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"     * Adds a new task to the task list based on the provided task type and input.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"     * Depending on the task type (todo, deadline, event) a corresponding task is parsed from the input and","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"     * added to the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"     * @param type The type of the task to be added (todo, deadline, event).","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"     * @param input The input containing task details and information.","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If there is an error in parsing the input or adding the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"    public void addTask(Task task) throws CCException {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"        Storage.saveTaskToFile(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"        System.out.println(ChatterChicken.LINE","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"                + ChatterChicken.INDENT + \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"                + ChatterChicken.INDENT_BIG + task.getTask() + \"\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"                + ChatterChicken.INDENT + \"Now you have \" + taskList.size() + \" tasks in the list.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"                + ChatterChicken.LINE);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"     * Marks a task as done based on the provided input.","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"     * The method attempts to retrieve the task from the list using the provided input, marks it as done,","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"     * and displays a confirmation message.","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"     * @param input The input containing task information to mark as done.","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"mark task_index\"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If there is an error in marking the task, or if the input is invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"    public void markTask(String input) throws CCException {","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"            Task task \u003d taskList.get(getIndex(input));","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"            task.setDone(true);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"            System.out.println(ChatterChicken.LINE","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT + \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT_BIG + task.getTask()","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"tllshan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"Invalid input for marking list of length \" + taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"tllshan"},"content":"     * Unmarks a previously marked task as not done based on the provided input.","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"tllshan"},"content":"     * The method attempts to retrieve the task from the list using the provided input, marks it as undone,","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"tllshan"},"content":"     * and displays a confirmation message.","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"tllshan"},"content":"     * @param input The input containing task information to unmark.","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"unmark task_index\"","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If there is an error in unmarking the task, or if the input is invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"tllshan"},"content":"    public void unmarkTask(String input) throws CCException {","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"tllshan"},"content":"            Task task \u003d taskList.get(getIndex(input));","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tllshan"},"content":"            task.setDone(false);","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"tllshan"},"content":"            System.out.println(ChatterChicken.LINE","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT + \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT_BIG + task.getTask()","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"tllshan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"Invalid input for list of length \" + taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"tllshan"},"content":"     * Deletes a task from the task list based on the provided input.","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"tllshan"},"content":"     * The method attempts to retrieve the task index from the input, removes the task from the list,","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"tllshan"},"content":"     * and displays a confirmation message.","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"tllshan"},"content":"     * @param input The input containing task information to be deleted.","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"tllshan"},"content":"     *              The input should be in the format \"delete task_index\".","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"tllshan"},"content":"     * @throws CCException If there is an error in deleting the task or if the input is invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"tllshan"},"content":"    public void deleteTask(String input) throws CCException {","lastModifiedDate":"2023-08-24"},{"lineNumber":100,"author":{"gitId":"tllshan"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":101,"author":{"gitId":"tllshan"},"content":"            int index \u003d getIndex(input);","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"tllshan"},"content":"            Task task \u003d taskList.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tllshan"},"content":"            taskList.remove(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"tllshan"},"content":"            System.out.println(ChatterChicken.LINE","lastModifiedDate":"2023-08-24"},{"lineNumber":105,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT + \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":106,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT_BIG + task.getTask() + \"\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":107,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.INDENT + \"Now you have \" + taskList.size() + \" tasks in your list.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tllshan"},"content":"                    + ChatterChicken.LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"tllshan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"tllshan"},"content":"            throw new CCException(\"Invalid input for list of length \" + taskList.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":114,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"tllshan"},"content":"     * Retrieves the index of a task based on the provided input.","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"tllshan"},"content":"     * @param input The input containing task information and index as the last character.","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"tllshan"},"content":"     * @return The index of the task parsed from the input.","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"tllshan"},"content":"    private int getIndex(String input) {","lastModifiedDate":"2023-08-24"},{"lineNumber":121,"author":{"gitId":"tllshan"},"content":"        return input.charAt(input.length() - 1) - \u00270\u0027 - 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":122,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":124,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"tllshan"},"content":"     * Prints the list of tasks with their respective indexes.","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"tllshan"},"content":"    public void printList() {","lastModifiedDate":"2023-08-24"},{"lineNumber":128,"author":{"gitId":"tllshan"},"content":"        System.out.println(ChatterChicken.LINE + ChatterChicken.INDENT + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":129,"author":{"gitId":"tllshan"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"tllshan"},"content":"            System.out.println(ChatterChicken.INDENT_BIG + (i + 1) + \".\" + taskList.get(i).getTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":132,"author":{"gitId":"tllshan"},"content":"        System.out.println(ChatterChicken.LINE);","lastModifiedDate":"2023-08-24"},{"lineNumber":133,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":134,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":134}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"    public ToDo(String input, String name) {","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"        super(input, name);","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"     * Generates the formatted representation of the todo task.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"     * The format includes the task status, task type, and description.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"     * @return The formatted representation of the todo task.","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"    public String getTask() {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"        return String.format(\"[%s][T] %s\", super.checkDone(), super.getName());","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"deadline return book /by 2023-01-09","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"event holiday /from 2023-12-02 /to 2023-12-25","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"tllshan":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"java -classpath ..\\bin ChatterChicken \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tllshan":1,"-":20}}]
