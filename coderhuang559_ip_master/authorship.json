[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"coderhuang559":2,"-":41}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     * Initializes a new Deadline object with the specified description and deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"     * @param name The description of the deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"     * @param by          The deadline of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    public Deadline(String name, LocalDateTime by) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"        super(name);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the type of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"     * @return The type of the task (in this case, \"D\" for Deadline).","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"    public String getType() {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        return \"D\";","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the description of the task, along with the formatted deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted description of the task including the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        String formattedBy \u003d this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"        return super.toString() + \" | \" + formattedBy ;","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the formatted deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted deadline in the format \"d MMM yyyy h:mma\".","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"    public String getByFormatted() {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the deadline of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"     * @return The deadline of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"        return this.by;","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"     * Generates the status and task name representation of the deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"     * @return A string representation of the deadline task\u0027s status, name, and deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"    public String statusAndTask() {","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"        return \"[D]\" + statusString() + \" \" + super.toString() + \" (by: \" + getByFormatted() + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"coderhuang559":73}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import exceptions.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import exceptions.FileUnloadableException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"import exceptions.ParseTaskFromStringException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":" * Duke is a task management application that allows users to manage their tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":" * It provides features to add, mark, unmark, and delete tasks, and also displays the list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"    static ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    static TaskList taskList \u003d  new TaskList(taskArray);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a Duke instance with the specified file path for task storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"     * @param filePath The file path for task storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"            ui.printLoadingError();","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"        } catch (IOException e){","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(\"Something went wrong while loading saved task file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"     * Runs the Duke application, handling user interactions and task management.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"    public void run() {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"        // Send welcome message","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"        Ui.printWelcomeMessage();","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"            taskList \u003d new TaskList(Storage.load());","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"            if (taskList.listTasks() \u003d\u003d \"\") {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"                System.out.println(\"There are no tasks in your list at the moment. Add some!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"                System.out.println(taskList.listTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(\"There are no tasks in your list at the moment. Add some!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"        } catch (FileUnloadableException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(\"File cannot be loaded.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(\"e.getMessage\");","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"        } catch (ParseTaskFromStringException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"        // Implement function to read user input via keyboard","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"        String userInput;","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"        while(true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"            userInput \u003d scanner.nextLine().trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"            Parser.parseInput(userInput, tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"                break;","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"        scanner.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"     * The main method to start the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"        new Duke(\"tasks.txt\").run();","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"coderhuang559":87,"-":2}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":" * Represents an event task that has a start and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     * Initializes a new Event object with the specified task name, start time, and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"     * @param taskName The name of the event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"     * @param start    The start time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"     * @param end      The end time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"    public Event(String taskName, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"        super(taskName);","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the type of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"     * @return The type of the task (in this case, \"E\" for Event).","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    public String getType() {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"        return \"E\";","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the description of the task, along with the formatted start and end times.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted description of the event task including start and end times.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"        String formattedStart \u003d this.start.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"        String formattedEnd \u003d this.end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"        return super.toString() + \" | \" + formattedStart + \" | \" + formattedEnd;","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the formatted start time.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted start time in the format \"d MMM yyyy h:mma\".","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"    public String getStartFormatted() {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"        return this.start.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the formatted end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted end time in the format \"d MMM yyyy h:mma\".","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"    public String getEndFormatted() {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"        return this.end.format(DateTimeFormatter.ofPattern(\"d MMM yyyy h:mma\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the start time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"     * @return The start time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"        return this.start;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the end time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"     * @return The end time of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"    public LocalDateTime getEnd() {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"        return this.end;","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"     * Generates the status and task name representation of the event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"     * @return A string representation of the event task\u0027s status, name, start time, and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"coderhuang559"},"content":"    public String statusAndTask() {","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"coderhuang559"},"content":"        return \"[E]\" + statusString() + \" \" + super.toString() +","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"coderhuang559"},"content":"                \" (from: \" + getStartFormatted() + \")(to: \" + getEndFormatted() + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"coderhuang559":95}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import exceptions.InvalidInputException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import exceptions.EmptyTaskException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"import exceptions.EmptyDateException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"import exceptions.OutOfRangeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"import java.util.Objects;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":" * The Parser class handles the parsing of user input and corresponding actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"     * Parses the user input and performs corresponding actions on the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The input provided by the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     * @param taskList  The TaskList instance used to manage tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"    public static void parseInput(String userInput, TaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"                if (Objects.equals(userInput, \"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"                    Ui.printExitMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"                    System.exit(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"                } else if (Objects.equals(userInput, \"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"                    String listTasks \u003d taskList.listTasks();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"                    if (listTasks !\u003d \"\") {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(listTasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"                    } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(\"There are no tasks in your list at the moment. Add some!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"                    String foundTasks \u003d taskList.find(userInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"                    if (foundTasks !\u003d \"\") {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(foundTasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"                    } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"                        System.out.println(\"There are no matching tasks in your list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"                    taskList.markTask(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"                    taskList.unmarkTask(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"                    if (userInput.equals(\"todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"                        throw new EmptyTaskException(\"todo\");","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"                    }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"                    taskList.makeToDo(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"                    if (userInput.equals(\"deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"                        throw new EmptyTaskException(\"deadline\");","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"                    } else if (userInput.endsWith(\"/by\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"                        throw new EmptyDateException(\"deadline\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"                    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"                    taskList.makeDeadline(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"                    if (userInput.equals(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"                        throw new EmptyTaskException(\"event\");","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"                    }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"                    taskList.makeEvent(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"                } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"                    taskList.deleteTask(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"                    taskList.updateTaskFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"                else {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"                    throw new InvalidInputException(\"Invalid Input\");","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"            } catch (InvalidInputException | EmptyTaskException | EmptyDateException | OutOfRangeException |","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"                     IOException | DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"coderhuang559":91}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import exceptions.FileUnloadableException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import exceptions.ParseTaskFromStringException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":" * The Storage class handles reading and writing tasks to/from a file.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    private static String filePath \u003d \"tasks.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a Storage instance with the specified file path.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"     * @param filePath The path to the file storing tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"     * Converts a date string to a LocalDateTime object.","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"     * @param by The date string to be converted.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"     * @return The LocalDateTime object representing the date.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"     * @throws DateTimeParseException If the date string is in an invalid format.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"    public static LocalDateTime saveAsDate(String by) throws DateTimeParseException {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"            // Try to parse the input as \"yyyy-MM-dd\" format","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"            return LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"            by +\u003d \" 0000\";","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"            // If parsing as \"yyyy-MM-dd\" format fails, try to parse as \"yyyy-MM-dd HHmm\" format","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"            return LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"     * Generates the content for the task file based on a list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"     * @param taskArray The list of tasks to generate content for.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"    public static void generateTaskFileContent(ArrayList\u003cTask\u003e taskArray) throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"            content.append(writeTaskLine(task));","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"        writeToFile(\"tasks.txt\", content.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"     * Writes the given text to the specified file path.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"     * @param filePath The path of the file to write to.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"     * @param textToAdd The text content to be added to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"        fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"     * Generates a formatted string representation of a Task object for writing to the task file.","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"     * @param task The Task object to generate the formatted string for.","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"     * @return The formatted string representation of the Task object.","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"    private static String writeTaskLine(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"        Boolean isDone \u003d task.isDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"        String taskLine \u003d task.getType() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + task.getDescription() + \"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"        return taskLine;","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"     * Loads tasks from the file and returns them as a list of Task objects.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"coderhuang559"},"content":"     * @return A list of Task objects read from the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"coderhuang559"},"content":"     * @throws IOException If an I/O error occurs while reading the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"coderhuang559"},"content":"     * @throws FileUnloadableException If the file cannot be loaded.","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"coderhuang559"},"content":"     * @throws ParseTaskFromStringException If task parsing from string encounters an error.","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"coderhuang559"},"content":"    public static ArrayList\u003cTask\u003e load() throws IOException, FileUnloadableException, ParseTaskFromStringException {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"coderhuang559"},"content":"        ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"coderhuang559"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(filePath))) {","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"coderhuang559"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"coderhuang559"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"coderhuang559"},"content":"                Task task \u003d parseTaskFromString(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"coderhuang559"},"content":"                taskArray.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"coderhuang559"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"coderhuang559"},"content":"        return taskArray;","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"coderhuang559"},"content":"     * Parses a task from a string representation and returns the corresponding Task object.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"coderhuang559"},"content":"     * @param line The string representation of the task to be parsed.","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"coderhuang559"},"content":"     * @return A Task object representing the parsed task.","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"coderhuang559"},"content":"     * @throws ParseTaskFromStringException If an error occurs during task parsing.","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"coderhuang559"},"content":"    public static Task parseTaskFromString(String line) throws ParseTaskFromStringException {","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"coderhuang559"},"content":"        if (parts.length \u003c 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"coderhuang559"},"content":"            throw new ParseTaskFromStringException(line);","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"coderhuang559"},"content":"        String taskType \u003d parts[0].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"coderhuang559"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"coderhuang559"},"content":"        String taskDescription \u003d parts[2].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"coderhuang559"},"content":"        if (taskType.equals(\"T\") \u0026\u0026 parts.length \u003d\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"coderhuang559"},"content":"            Task task \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"coderhuang559"},"content":"            setStatus(task, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"coderhuang559"},"content":"            return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"coderhuang559"},"content":"        } else if (taskType.equals(\"D\") \u0026\u0026 parts.length \u003d\u003d 4) {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"coderhuang559"},"content":"            LocalDateTime by \u003d Storage.saveAsDate(parts[3].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"coderhuang559"},"content":"            Task task \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"coderhuang559"},"content":"            setStatus(task, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"coderhuang559"},"content":"            return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"coderhuang559"},"content":"        } else if (taskType.equals(\"E\") \u0026\u0026 parts.length \u003d\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"coderhuang559"},"content":"            LocalDateTime start \u003d Storage.saveAsDate(parts[3].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"coderhuang559"},"content":"            LocalDateTime end \u003d Storage.saveAsDate(parts[4].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"coderhuang559"},"content":"            Task task \u003d new Event(taskDescription, start, end);","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"coderhuang559"},"content":"            setStatus(task, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"coderhuang559"},"content":"            return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"coderhuang559"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"coderhuang559"},"content":"            // Handle unrecognized task type","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"coderhuang559"},"content":"            throw new ParseTaskFromStringException(line);","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"coderhuang559"},"content":"     * Sets the status of a Task object based on whether it is marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"coderhuang559"},"content":"     * @param task The Task object for which to set the status.","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"coderhuang559"},"content":"     * @param isDone Whether the task is marked as done (true) or not (false).","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"coderhuang559"},"content":"    private static void setStatus(Task task, boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"coderhuang559"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"coderhuang559"},"content":"            task.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"coderhuang559"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"coderhuang559"},"content":"            task.unmarkDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"coderhuang559":157}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * Represents a general task with a name and completion status.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"    protected String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"    protected boolean status;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     * Initializes a new Task object with the specified task name and default status (not done).","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"        this.status \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     * Marks the task as done by setting its status to true.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"        this.status \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"     * Marks the task as not done by setting its status to false.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        this.status \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"    public String getName() {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        return this.taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the type of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"     * @return The type of the task. (Override this method in subclasses to provide specific types)","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"    public String getType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"        return \"No task type\";","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"     * @return true if the task is marked as done, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"        return this.status;","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"     * Generates the status representation of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"     * @return A string representation of the task\u0027s status.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"    public String statusString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"        String statusString;","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"        if (this.status) {","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"            statusString \u003d \"X\";","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"            statusString \u003d \" \";","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"        return \"[\" + statusString + \"]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"        return \"Task\";","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"     * Generates the status and task name representation of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"     * @return A string representation of the task\u0027s status and name.","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"coderhuang559"},"content":"    public String statusAndTask() {","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"coderhuang559"},"content":"        return \"[Task]\" + statusString() + \" \" + this.taskName;","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"coderhuang559"},"content":"     * Generates a string representation of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"coderhuang559"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"coderhuang559"},"content":"        return this.taskName;","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"coderhuang559":106}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import exceptions.EmptyTaskException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import exceptions.EmptyDateException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"import exceptions.OutOfRangeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"import java.lang.reflect.Array;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":" * The TaskList class manages the list of tasks in the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":" * It provides methods to add, mark, unmark, delete, and list tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"public class TaskList {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    private static ArrayList\u003cTask\u003e taskArray;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a TaskList instance with an empty task array.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"        taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a TaskList instance with the specified task array.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"     * @param tasks The initial task array.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        taskArray \u003d tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"     * Lists the tasks stored in the task array.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"     * @return A string containing the list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"     public static String listTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"        String inputArrayString \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        int num \u003d 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"            inputArrayString +\u003d num + \". \" + task.statusAndTask() + \"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"            num++;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"        return inputArrayString;","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"     * Marks a task as done based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the task to be marked.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"     * @throws EmptyTaskException If the user input is missing task details.","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"     * @throws OutOfRangeException If the task index is out of the array range.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"     * @throws IOException If an I/O error occurs while updating the task file.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"    public static void markTask(String userInput) throws EmptyTaskException, OutOfRangeException, IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"        if (userInput.equals(\"mark\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyTaskException(\"mark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"        int taskIndex \u003d Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"        if (taskIndex \u003e\u003d taskArray.size() || taskIndex \u003c 0 || taskArray.get(taskIndex) \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"            throw new OutOfRangeException(\"Mark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"        Task currentTask \u003d taskArray.get(taskIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"        currentTask.markDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(currentTask.statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"     * Unmarks a task as done based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the task to be unmarked.","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"     * @throws EmptyTaskException If the user input is missing task details.","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"     * @throws OutOfRangeException If the task index is out of the array range.","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"    public static void unmarkTask(String userInput) throws EmptyTaskException, OutOfRangeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"        if (userInput.equals(\"unmark\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyTaskException(\"unmark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"        int taskIndex \u003d Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"        if (taskIndex \u003e\u003d taskArray.size() || taskIndex \u003c 0 || taskArray.get(taskIndex) \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"            throw new OutOfRangeException(\"Unmark\");","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"        Task currentTask \u003d taskArray.get(taskIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"        currentTask.unmarkDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(currentTask.statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"coderhuang559"},"content":"     * Adds a ToDo task based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"coderhuang559"},"content":"    public static void makeToDo(String userInput) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"coderhuang559"},"content":"        String taskName \u003d userInput.substring(\"todo\".length()).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"coderhuang559"},"content":"        taskArray.add(new ToDo(taskName));","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(taskArray.get(taskArray.size() - 1).statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Now you have \" + taskArray.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"coderhuang559"},"content":"     * Adds a Deadline task based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the Deadline task.","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"coderhuang559"},"content":"     * @throws EmptyDateException If the user input is missing the task deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"coderhuang559"},"content":"    public static void makeDeadline(String userInput) throws EmptyDateException {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"coderhuang559"},"content":"        String description \u003d userInput.substring(\"deadline\".length()).trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d description.split(\"/by\");","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"coderhuang559"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyDateException(\"deadline\");","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"coderhuang559"},"content":"        String[] deadlineParts \u003d {parts[0].trim(), parts[1].trim()};","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"coderhuang559"},"content":"        String taskName \u003d deadlineParts[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"coderhuang559"},"content":"        LocalDateTime by \u003d Storage.saveAsDate(deadlineParts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"coderhuang559"},"content":"        taskArray.add(new Deadline(taskName, by));","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(taskArray.get(taskArray.size() - 1).statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Now you have \" + taskArray.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"coderhuang559"},"content":"     * Adds an Event task based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the Event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"coderhuang559"},"content":"     * @throws EmptyDateException If the user input is missing the event start or end date.","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"coderhuang559"},"content":"    public static void makeEvent(String userInput) throws EmptyDateException {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"coderhuang559"},"content":"        String description \u003d userInput.substring(\"event\".length()).trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"coderhuang559"},"content":"        String[] partsA \u003d description.split(\"/from\");","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"coderhuang559"},"content":"        String taskName \u003d partsA[0].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"coderhuang559"},"content":"        String[] partsB \u003d partsA[1].split(\"/to\");","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"coderhuang559"},"content":"        if (partsB.length \u003d\u003d 1 || partsB[0].trim().isEmpty() || partsB[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyDateException(\"event\");","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"coderhuang559"},"content":"        String start \u003d partsB[0].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"coderhuang559"},"content":"        String end \u003d partsB[1].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"coderhuang559"},"content":"        String[] eventParts \u003d {taskName, start, end};","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"coderhuang559"},"content":"        LocalDateTime startDateTime \u003d Storage.saveAsDate(eventParts[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"coderhuang559"},"content":"        LocalDateTime endDateTime \u003d Storage.saveAsDate(eventParts[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"coderhuang559"},"content":"        taskArray.add(new Event(taskName, startDateTime, endDateTime));","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(taskArray.get(taskArray.size() - 1).statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Now you have \" + taskArray.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"coderhuang559"},"content":"     * Deletes a task based on user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The user input specifying the task to be deleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"coderhuang559"},"content":"     * @throws EmptyTaskException If the user input is missing task details.","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"coderhuang559"},"content":"     * @throws OutOfRangeException If the task index is out of the array range.","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"coderhuang559"},"content":"    public static void deleteTask(String userInput) throws EmptyTaskException, OutOfRangeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"coderhuang559"},"content":"        if (userInput.equals(\"delete\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyTaskException(\"delete\");","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"coderhuang559"},"content":"        int taskIndex \u003d Integer.parseInt(parts[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"coderhuang559"},"content":"        if (taskIndex \u003e\u003d taskArray.size() || taskIndex \u003c 0 || taskArray.get(taskIndex) \u003d\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"coderhuang559"},"content":"            throw new OutOfRangeException(\"Delete\");","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"coderhuang559"},"content":"        Task currentTask \u003d taskArray.get(taskIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"coderhuang559"},"content":"        taskArray.remove(currentTask);","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(currentTask.statusAndTask());","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Now you have \" + taskArray.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"coderhuang559"},"content":"     * Updates the task file with the current task array.","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":179,"author":{"gitId":"coderhuang559"},"content":"     * @throws IOException If an I/O error occurs while updating the task file.","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"coderhuang559"},"content":"    public static void updateTaskFile() throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"coderhuang559"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"coderhuang559"},"content":"            Storage.generateTaskFileContent(taskArray);","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"coderhuang559"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"coderhuang559"},"content":"            System.out.println(\"Something went wrong while updating the task file: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":190,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves a task from the task array based on its index.","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"coderhuang559"},"content":"     * @param userInput The index of the task to retrieve.","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"coderhuang559"},"content":"     * @return The retrieved task.","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"coderhuang559"},"content":"    public String find(String userInput) throws EmptyTaskException {","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"coderhuang559"},"content":"        if (userInput.equals(\"find\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"coderhuang559"},"content":"            throw new EmptyTaskException(\"find\");","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"coderhuang559"},"content":"        String[] parts \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"coderhuang559"},"content":"        String keyword \u003d parts[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"coderhuang559"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"coderhuang559"},"content":"        for (Task task : taskArray) {","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"coderhuang559"},"content":"            if (task.getName().contains(keyword)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"coderhuang559"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"coderhuang559"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"coderhuang559"},"content":"        String foundTasksString \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":208,"author":{"gitId":"coderhuang559"},"content":"        int num \u003d 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"coderhuang559"},"content":"        for (Task task : foundTasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":210,"author":{"gitId":"coderhuang559"},"content":"            foundTasksString +\u003d num + \". \" + task.statusAndTask() + \"\\n\";","lastModifiedDate":"2023-08-31"},{"lineNumber":211,"author":{"gitId":"coderhuang559"},"content":"            num++;","lastModifiedDate":"2023-08-31"},{"lineNumber":212,"author":{"gitId":"coderhuang559"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":213,"author":{"gitId":"coderhuang559"},"content":"        return foundTasksString;","lastModifiedDate":"2023-08-31"},{"lineNumber":214,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":215,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":216,"author":{"gitId":"coderhuang559"},"content":"    public Task getTask(int i) {","lastModifiedDate":"2023-08-31"},{"lineNumber":217,"author":{"gitId":"coderhuang559"},"content":"         return taskArray.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":218,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":219,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"coderhuang559":219}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The ToDo class represents a task of type \"ToDo\" that the user wants to do.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a ToDo task with the specified task name.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     * @param taskName The name of the ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    public ToDo(String taskName) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"        super(taskName);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the type of the task, which is \"T\" for ToDo.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     * @return The task type.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    public String getType() {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"        return \"T\";","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"     * @return The description of the ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"        return super.toString();","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"     * Generates a formatted string representation of the task\u0027s status and description.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted string displaying the status and description of the ToDo task.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"    public String statusAndTask() {","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"        return \"[T]\" + statusString() + \" \" + super.toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"coderhuang559":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The Ui class is responsible for handling user interface interactions, such as displaying messages and prompts.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a Ui object.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    public Ui() {}","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     * Prints a welcome message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    public static void printWelcomeMessage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Hello! I\u0027m BbabBBB\");","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * Prints a farewell message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"    public static void printExitMessage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"     * Prints an error message indicating a problem with loading tasks from a file.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"    public void printLoadingError() {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"        System.out.println(\"Error loading tasks from file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"coderhuang559":35}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The DukeException class is a custom exception class that serves as the base class for all exceptions","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" * specific to the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"coderhuang559":17}},{"path":"src/main/java/exceptions/EmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The EmptyDateException class is a custom exception that is thrown when the date for a task (e.g., deadline or event)","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" * is found to be empty or missing.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"public class EmptyDateException extends DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"    private String msg;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     * Constructs an EmptyDateException with the specified task type for which the date is empty.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The task type associated with the exception (e.g., \"deadline\" or \"event\").","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    public EmptyDateException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"        this.msg \u003d msg;","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * Returns a string representation of the exception message.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted error message indicating that the date of the specified task type cannot be empty.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"        return \"☹ OOPS!!! The date of a(n) \" + this.msg + \" cannot be empty.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"coderhuang559":30}},{"path":"src/main/java/exceptions/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The EmptyTaskException class is a custom exception that is thrown when the description of a task (e.g., todo, deadline, or event)","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" * is found to be empty or missing.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"public class EmptyTaskException extends DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"    private String msg;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     * Constructs an EmptyTaskException with the specified task type for which the description is empty.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The task type associated with the exception (e.g., \"todo\", \"deadline\", or \"event\").","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"    public EmptyTaskException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"        this.msg \u003d msg;","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * Returns a string representation of the exception message.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted error message indicating that the description of the specified task type cannot be empty.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"        return \"☹ OOPS!!! The description of a(n) \" + this.msg + \" cannot be empty.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"coderhuang559":30}},{"path":"src/main/java/exceptions/FileUnloadableException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The FileUnloadableException class is a custom exception that is thrown when there is an issue with loading or unloading a file.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class FileUnloadableException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a FileUnloadableException with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    public FileUnloadableException(String msg) {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"coderhuang559":16}},{"path":"src/main/java/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The InvalidInputException class is a custom exception that is thrown when the user provides an invalid input to the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class InvalidInputException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"     * Constructs an InvalidInputException with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"    public InvalidInputException(String msg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"     * Returns a user-friendly error message indicating that the input provided is invalid.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"coderhuang559":26}},{"path":"src/main/java/exceptions/OutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The OutOfRangeException class is a custom exception that is thrown when an index or number is out of the valid range.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class OutOfRangeException extends DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"    String msg;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     * Constructs an OutOfRangeException with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"    public OutOfRangeException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"        this.msg \u003d msg;","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     * Returns a user-friendly error message indicating that a number is out of the valid range.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"        return \"☹ OOPS!!! \" + this.msg + \" number out of range.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"coderhuang559":28}},{"path":"src/main/java/exceptions/ParseTaskFromStringException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"package exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":" * The ParseTaskFromStringException class is a custom exception that is thrown when there is an issue parsing task data from a string.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"public class ParseTaskFromStringException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"    String msg;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"     * Constructs a ParseTaskFromStringException with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"     * @param msg The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"    public ParseTaskFromStringException(String msg) {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"        super(msg);","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"        this.msg \u003d msg;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"     * Returns an error message indicating that saved task data has been corrupted and cannot be parsed from the given string.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"     * @return A formatted error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"        return \"Saved task data has been corrupted. Cannot parse task from: \" + this.msg;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"coderhuang559":28}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"import duke.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"import exceptions.ParseTaskFromStringException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"public class StorageTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    public void validToDo_parseTaskFromString() throws ParseTaskFromStringException {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"        ToDo toDo \u003d (ToDo) Storage.parseTaskFromString(\"T | 1 | eat\");","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"        assertTrue(toDo.isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(\"eat\", toDo.getName());","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"    public void validDeadline_parseTaskFromString() throws ParseTaskFromStringException {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"        Deadline deadline \u003d (Deadline) Storage.parseTaskFromString(\"D | 0 | sleep | 2023-12-12 1410\");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(deadline.isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(\"sleep\", deadline.getName());","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(LocalDateTime.of(2023, 12, 12, 14, 10), deadline.getBy());","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    public void validEvent_parseTaskFromString() throws ParseTaskFromStringException {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"        Event event \u003d (Event) Storage.parseTaskFromString(\"E | 0 | Mary\u0027s wedding | 2023-09-09 1800 | 2023-09-10 0000\");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(\"Mary\u0027s wedding\", event.getName());","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(LocalDateTime.of(2023, 9, 9, 18, 0), event.getStart());","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        assertEquals(LocalDateTime.of(2023, 9, 10, 0, 0), event.getEnd());","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"    public void missingTypeField_parseTaskFromString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"0 | Prepare for interview\");","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"1 | Get parcel | 2023-12-12 1410\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"0 | Team meeting | 2023-09-09 1800 | 2023-09-10 0000\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"    public void missingStatusField_parseTaskFromString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"T | Prepare for interview\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"D | Get parcel | 2023-12-12 1410\");","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"E | Team meeting | 2023-09-09 1800 | 2023-09-10 0000\");","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"    public void missingNameFields_parseTaskFromString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"T | 0\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"D | 0 | 2023-12-12 1410\");","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"E | 0 | 2023-09-09 1800 | 2023-09-10 0000\");","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"    public void missingDeadlineFields_by_parseTaskFromString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"D | 0 | eat\");","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"    public void missingEventFields_startEnd_parseTaskFromString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"E | 0 | eat\");","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(ParseTaskFromStringException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"coderhuang559"},"content":"            Storage.parseTaskFromString(\"E | 0 | Gym session | 2023-09-10 0000\");","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"coderhuang559"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"coderhuang559":89}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"import exceptions.EmptyTaskException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"import exceptions.OutOfRangeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"    public void firstTaskIndex_markTask() throws EmptyTaskException, OutOfRangeException, IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"        // Create a TaskList instance and add some tasks to it","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 4\");","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"coderhuang559"},"content":"        // Mark the first task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"coderhuang559"},"content":"        taskList.markTask(\"mark 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"coderhuang559"},"content":"        assertTrue(taskList.getTask(0).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(1).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(2).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(3).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"coderhuang559"},"content":"    public void lastTaskIndex_markTask() throws EmptyTaskException, OutOfRangeException, IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"coderhuang559"},"content":"        // Create a TaskList instance and add some tasks to it","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"coderhuang559"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 4\");","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"coderhuang559"},"content":"        // Mark the first task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"coderhuang559"},"content":"        taskList.markTask(\"mark 4\");","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(0).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(1).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(2).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"coderhuang559"},"content":"        assertTrue(taskList.getTask(3).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"coderhuang559"},"content":"    public void middleTaskIndex_markTask() throws EmptyTaskException, OutOfRangeException, IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"coderhuang559"},"content":"        // Create a TaskList instance and add some tasks to it","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"coderhuang559"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 4\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"coderhuang559"},"content":"        // Mark the first task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"coderhuang559"},"content":"        taskList.markTask(\"mark 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(0).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"coderhuang559"},"content":"        assertTrue(taskList.getTask(1).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(2).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"coderhuang559"},"content":"        assertFalse(taskList.getTask(3).isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"coderhuang559"},"content":"    public void tooLargeTaskIndex_markTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"coderhuang559"},"content":"        // Create a TaskList instance and add some tasks to it","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"coderhuang559"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"coderhuang559"},"content":"        // Mark the second task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(OutOfRangeException.class, () -\u003e taskList.markTask(\"mark 4\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(OutOfRangeException.class, () -\u003e taskList.markTask(\"mark 100\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"coderhuang559"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"coderhuang559"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"coderhuang559"},"content":"    public void tooSmallTaskIndex_markTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"coderhuang559"},"content":"        // Create a TaskList instance and add some tasks to it","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"coderhuang559"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"coderhuang559"},"content":"        taskList.makeToDo(\"Task 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"coderhuang559"},"content":"        // Mark the second task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(OutOfRangeException.class, () -\u003e taskList.markTask(\"mark 0\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"coderhuang559"},"content":"        assertThrows(OutOfRangeException.class, () -\u003e taskList.markTask(\"mark -57\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"coderhuang559"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"coderhuang559"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"coderhuang559":85}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"coderhuang559"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"coderhuang559"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"coderhuang559"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"coderhuang559"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"coderhuang559"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"coderhuang559"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"coderhuang559"},"content":"mark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"coderhuang559"},"content":"deadline eat /by","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"coderhuang559"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"coderhuang559"},"content":"event wedding /from /to 8pm","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"coderhuang559"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"coderhuang559"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"coderhuang559"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"coderhuang559"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"coderhuang559":14}}]
