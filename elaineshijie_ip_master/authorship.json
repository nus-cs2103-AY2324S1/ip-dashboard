[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"elaineshijie":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":42,"elaineshijie":5}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.datafile.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.LemonException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":" * Duke is the class representing a chatbot named Lemon.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"     * Constructor of Duke that represents the chatbot Lemon with a given filepath that","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"     * stores the tasks that are added by the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"     * @param filePath the file path that stores the task details.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"            tasks \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     * Run the chatbot named Lemon.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"    public void run() {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"        ui.welcomeMessage();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"        while (isRunning) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"            //System.out.println(\"in while loop\");","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"            //System.out.println(\"Received input: \" + input); // Provide feedback to the user","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"            if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"                isRunning \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"                //System.out.println(\"parsing soon\");","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"                try {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"                    Parser.parseTasks(input, tasks, storage, ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"                } catch (LemonException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"        ui.bye();","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"elaineshijie":63,"-":3}},{"path":"src/main/java/seedu/duke/datafile/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.datafile;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidDeadlineException;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidEventException;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.LemonException;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":" * The Storage class is responsible for handling the storage and retrieval of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":" * in a text file. It provides methods to save tasks to a file and load tasks from a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"public class Storage {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"    private final String filePath;","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new Storage object with a default file path.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"     * The default file path is \"./datafile/tasks.txt\".","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"    public Storage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        this.filePath \u003d \"./datafile/tasks.txt\";","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new Storage object with a custom file path.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"     * @param filePath The path of the file where tasks will be stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"     * Saves a list of tasks to the specified file.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks An ArrayList of Task objects to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"                System.out.println(\"Creating new file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"            writeToFile(filePath, \"\");","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"            if (tasks.size() \u003e 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"                    addToFile(filePath, tasks.get(i).addDataFormat() + \"\\n\");","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elaineshijie"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elaineshijie"},"content":"            System.out.println(\"Issues saving tasks to storage.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elaineshijie"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elaineshijie"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elaineshijie"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elaineshijie"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"elaineshijie"},"content":"    private static void addToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"elaineshijie"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elaineshijie"},"content":"        fw.write(textToAdd + System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elaineshijie"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"elaineshijie"},"content":"     * Loads tasks from the data file and returns them as an ArrayList of Tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"elaineshijie"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"elaineshijie"},"content":"     * @throws LemonException If the file cannot be found or there is an issue","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"elaineshijie"},"content":"     *                       loading tasks from the file.","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"elaineshijie"},"content":"    public ArrayList\u003cTask\u003e loadFile() throws LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"elaineshijie"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elaineshijie"},"content":"        File dataFile \u003d new File(filePath);","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"elaineshijie"},"content":"        Scanner scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elaineshijie"},"content":"        // if there is no storage - no tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elaineshijie"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"elaineshijie"},"content":"            System.out.println(\"File doesn\u0027t exist?\");","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elaineshijie"},"content":"            return tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elaineshijie"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elaineshijie"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elaineshijie"},"content":"                scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elaineshijie"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elaineshijie"},"content":"                    String[] input \u003d scanner.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elaineshijie"},"content":"                    String taskType \u003d input[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elaineshijie"},"content":"                    switch(taskType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elaineshijie"},"content":"                    case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elaineshijie"},"content":"                        boolean isDoneT \u003d checkDone(input[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elaineshijie"},"content":"                        String descriptionT \u003d input[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elaineshijie"},"content":"                        Task toAddTaskT \u003d new Todo(descriptionT, isDoneT);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elaineshijie"},"content":"                        tasks.add(toAddTaskT);","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elaineshijie"},"content":"                        break;","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"elaineshijie"},"content":"                    case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"elaineshijie"},"content":"                        boolean isDoneD \u003d checkDone(input[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"elaineshijie"},"content":"                        String descriptionD \u003d input[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elaineshijie"},"content":"                        String by \u003d input [3];","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elaineshijie"},"content":"                        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"elaineshijie"},"content":"                            Task toAddTaskD \u003d new Deadline(descriptionD, by, isDoneD);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"elaineshijie"},"content":"                            tasks.add(toAddTaskD);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elaineshijie"},"content":"                        } catch (InvalidDeadlineException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"elaineshijie"},"content":"                            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"elaineshijie"},"content":"                        }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"elaineshijie"},"content":"                        break;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elaineshijie"},"content":"                    case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elaineshijie"},"content":"                        boolean isDoneE \u003d checkDone(input[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elaineshijie"},"content":"                        String descriptionE \u003d input[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elaineshijie"},"content":"                        String fromE \u003d input[3];","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elaineshijie"},"content":"                        String toE \u003d input[4];","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"elaineshijie"},"content":"                        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"elaineshijie"},"content":"                            Task toAddTaskE \u003d new Event(descriptionE, fromE, toE, isDoneE);","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"elaineshijie"},"content":"                            tasks.add(toAddTaskE);","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"elaineshijie"},"content":"                        } catch (InvalidEventException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"elaineshijie"},"content":"                            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"elaineshijie"},"content":"                        }","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"elaineshijie"},"content":"                        break;","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"elaineshijie"},"content":"                    default:","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"elaineshijie"},"content":"                        throw new LemonException(\"Failure to load file!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":134,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"elaineshijie"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elaineshijie"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elaineshijie"},"content":"                throw new LemonException(\"Storage file not available!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elaineshijie"},"content":"        return tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elaineshijie"},"content":"    private static boolean checkDone(String isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"elaineshijie"},"content":"        return isDone.equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elaineshijie":149}},{"path":"src/main/java/seedu/duke/exceptions/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The InvalidDeadlineException is thrown when a command that creates a deadline","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * task is not in the correct format.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class InvalidDeadlineException extends LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public InvalidDeadlineException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! Please add a deadline with /by \u0026 date in format yyyy-mm-dd!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The InvalidEventException is thrown when a command that creates a event","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * task is not in the correct format.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class InvalidEventException extends LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public InvalidEventException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! Please add a start and end of the event with /from \u0026 /to!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The InvalidTaskException is thrown when a command is invalid.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"public class InvalidTaskException extends LemonException {","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"     * Constructor of InvalidTaskException with the invalid command by user\u0027s input.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"     * @param message the invalid command input.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"    public InvalidTaskException(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! I\u0027m sorry, but I don\u0027t know what\"","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"                + message + \"means :-( \\n Please add todo/ deadline \"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"                + \"/ event before your task description~ or other commands like mark, unmark \u0026 delete\");","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"elaineshijie":17}},{"path":"src/main/java/seedu/duke/exceptions/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The InvalidTaskIndexException is thrown when a mark/ unmark command is called","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * on a task that does not exists.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class InvalidTaskIndexException extends LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public InvalidTaskIndexException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! There are no tasks associated with this task number!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/InvalidTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The InvalidTodoException is thrown when a command that creates a Todo","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * task is not in the correct format.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class InvalidTodoException extends LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public InvalidTodoException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/KeywordNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The KeywordNotFoundException is thrown when there are no task with","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * the corresponding keyword as task description.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class KeywordNotFoundException extends LemonException {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public KeywordNotFoundException(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(message);","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/LemonException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The LemonException wraps all exceptions thrown by the commands from the users\u0027 input.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"public class LemonException extends Exception {","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"    public LemonException(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"        super(message);","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/exceptions/NoTasksException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.exceptions;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * The NoTasksException is thrown when the list command is used and there are no tasks in","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class NoTasksException extends LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public NoTasksException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(\":( OPPS!!! There are no tasks to show in the list!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":11}},{"path":"src/main/java/seedu/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.datafile.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidDeadlineException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidEventException;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidTaskException;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidTodoException;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.KeywordNotFoundException;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.LemonException;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.NoTasksException;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":" * The parser class handles all the processing of commands from the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"    enum Commands {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        BYE,","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"        MARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"        UNMARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"        DELETE,","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"        LIST,","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"        TODO,","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"        DEADLINE,","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"        EVENT,","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"        FIND","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"     * Calls methods from ui, tasks, storage to handle the actions corresponding to the commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"     * @param input the command input by user.","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks a TaskList with the tasks by user.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"     * @param tasksData the Storage that loads, add and delete tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"     * @param ui the Ui object that deals with user input \u0026 output messages to users.","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"     * @throws LemonException thrown when commands are invalid.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"    public static void parseTasks(String input, TaskList tasks, Storage tasksData, Ui ui) throws LemonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"input is: \" + input);","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"        if (!input.equals(\"bye\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"            String commandType \u003d input.split(\" \")[0].toUpperCase();","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"                Commands command \u003d Commands.valueOf(commandType);","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"                switch (command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"                case LIST:","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"                    if (tasks.getTasksSize() \u003c 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"                        throw new NoTasksException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"                    ui.listAll(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"                case MARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"                    try {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"                        int indexToMark \u003d Integer.valueOf(input.split(\" \")[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"elaineshijie"},"content":"                        String taskDescription \u003d tasks.markTask(indexToMark - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"elaineshijie"},"content":"                        tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"elaineshijie"},"content":"                        ui.markPrint(taskDescription, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"elaineshijie"},"content":"                        break;","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"elaineshijie"},"content":"                    } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidTaskIndexException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"elaineshijie"},"content":"                case UNMARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"elaineshijie"},"content":"                    try {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"elaineshijie"},"content":"                        int indexToUnmark \u003d Integer.valueOf(input.split(\" \")[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"elaineshijie"},"content":"                        String unmarkTaskDescription \u003d tasks.unmarkTask(indexToUnmark - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"elaineshijie"},"content":"                        tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"elaineshijie"},"content":"                        ui.unmarkPrint(unmarkTaskDescription, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"elaineshijie"},"content":"                        break;","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"elaineshijie"},"content":"                    } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidTaskIndexException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"elaineshijie"},"content":"                case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"elaineshijie"},"content":"                    String[] taskSplit \u003d input.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"elaineshijie"},"content":"                    if (taskSplit.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidTodoException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"elaineshijie"},"content":"                    String taskDescription \u003d taskSplit[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"elaineshijie"},"content":"                    String taskDescriptionTodo \u003d tasks.addTasks(new Todo(taskDescription));","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"elaineshijie"},"content":"                    tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"elaineshijie"},"content":"                    ui.addTasks(taskDescriptionTodo, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"elaineshijie"},"content":"                case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"elaineshijie"},"content":"                    String task \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"elaineshijie"},"content":"                    String[] getDeadlineArray \u003d task.split(\"/by \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"elaineshijie"},"content":"                    if (getDeadlineArray.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidDeadlineException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"elaineshijie"},"content":"                    String taskDesc \u003d getDeadlineArray[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"elaineshijie"},"content":"                    String by \u003d getDeadlineArray[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"elaineshijie"},"content":"                    Task newDeadlineTask \u003d new Deadline(taskDesc, by);","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"elaineshijie"},"content":"                    String taskDescriptionDeadline \u003d tasks.addTasks(newDeadlineTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"elaineshijie"},"content":"                    tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"elaineshijie"},"content":"                    ui.addTasks(taskDescriptionDeadline, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"elaineshijie"},"content":"                case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"elaineshijie"},"content":"                    String inputTask \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"elaineshijie"},"content":"                    String[] getEventFromArray \u003d inputTask.split(\"/from \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"elaineshijie"},"content":"                    if (getEventFromArray.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidEventException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"elaineshijie"},"content":"                    String taskDetails \u003d getEventFromArray[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"elaineshijie"},"content":"                    String[] getEventToArray \u003d getEventFromArray[1].split(\" /to \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"elaineshijie"},"content":"                    if (getEventToArray.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidEventException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"elaineshijie"},"content":"                    String from \u003d getEventToArray[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"elaineshijie"},"content":"                    String to \u003d getEventToArray[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"elaineshijie"},"content":"                    Task newEventTask \u003d new Event(taskDetails, from, to);","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"elaineshijie"},"content":"                    String taskDescriptionEvent \u003d tasks.addTasks(newEventTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"elaineshijie"},"content":"                    tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"elaineshijie"},"content":"                    ui.addTasks(taskDescriptionEvent, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"elaineshijie"},"content":"                case DELETE:","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"elaineshijie"},"content":"                    int inputDelete \u003d Integer.valueOf(input.split(\" \", 2)[1]) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"elaineshijie"},"content":"                    try {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"elaineshijie"},"content":"                        Task taskToDelete \u003d tasks.getTask(inputDelete);","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"elaineshijie"},"content":"                        String taskDescriptionDelete \u003d tasks.deleteTask(taskToDelete);","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"elaineshijie"},"content":"                        tasksData.saveTasks(tasks.getTaskList());","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"elaineshijie"},"content":"                        ui.deletePrint(taskDescriptionDelete, tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"elaineshijie"},"content":"                    } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"elaineshijie"},"content":"                        throw new InvalidTaskIndexException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"elaineshijie"},"content":"                case FIND:","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"elaineshijie"},"content":"                    String[] commandSplit \u003d input.split(\" \", 2);","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"elaineshijie"},"content":"                    if (commandSplit.length \u003c 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"elaineshijie"},"content":"                        throw new KeywordNotFoundException(\"No Keywords to find!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"elaineshijie"},"content":"                    String keyword \u003d input.split(\" \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"elaineshijie"},"content":"                    ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findKeyword(keyword);","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"elaineshijie"},"content":"                    if (matchingTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"elaineshijie"},"content":"                        throw new KeywordNotFoundException(\"No Tasks found!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"elaineshijie"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"elaineshijie"},"content":"                    ui.listMatching(matchingTasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"elaineshijie"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"elaineshijie"},"content":"                default:","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"elaineshijie"},"content":"                    throw new InvalidTaskException(\" \" + input + \" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"elaineshijie"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"elaineshijie"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"elaineshijie"},"content":"                throw new InvalidTaskException(\" \" + input + \" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"elaineshijie":154}},{"path":"src/main/java/seedu/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasklist;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":" * The TaskList class represents a collection of tasks and provides methods","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":" * for editing tasks, such as adding, marking, unmarking, deleting, and retrieving tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"public class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new TaskList with an empty list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new TaskList with an existing list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The ArrayList of tasks to initialize the TaskList with.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"     * @return String representation of the task that was marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidTaskIndexException If the provided index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"    public String markTask(Integer index) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"            Task toMark \u003d tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"            toMark.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"            return toMark.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidTaskIndexException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"     * Unmarks a task at the specified index as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"     * @return String representation of the task that was marked as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidTaskIndexException If the provided index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"    public String unmarkTask(Integer index) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"            Task toMark \u003d tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"            toMark.markAsUndone();","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"            return toMark.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidTaskIndexException(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"elaineshijie"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"elaineshijie"},"content":"     * @param taskToAdd The Task object to be added to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"elaineshijie"},"content":"     * @return String representation of the task that was added.","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"elaineshijie"},"content":"    public String addTasks(Task taskToAdd) {","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"elaineshijie"},"content":"        tasks.add(taskToAdd);","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"elaineshijie"},"content":"        return taskToAdd.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"elaineshijie"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"elaineshijie"},"content":"     * @param taskToDelete The Task object to be deleted from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"elaineshijie"},"content":"     * @return String representation of the task that was deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"elaineshijie"},"content":"    public String deleteTask(Task taskToDelete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"elaineshijie"},"content":"        tasks.remove(taskToDelete);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"elaineshijie"},"content":"        return taskToDelete.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"elaineshijie"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"elaineshijie"},"content":"     * @return Integer that represents the number of tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"elaineshijie"},"content":"    public Integer getTasksSize() {","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"elaineshijie"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"elaineshijie"},"content":"     * Retrieves a task at the specified index from the Arraylist of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"elaineshijie"},"content":"     * @param i The index of the task to retrieve.","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"elaineshijie"},"content":"     * @return The Task object at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidTaskIndexException If the provided index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"elaineshijie"},"content":"    public Task getTask(Integer i) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"elaineshijie"},"content":"            return tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"elaineshijie"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidTaskIndexException(\"Invalid Task Number.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"elaineshijie"},"content":"     * Returns the entire list of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":114,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"elaineshijie"},"content":"     * @return An ArrayList containing all the tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"elaineshijie"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"elaineshijie"},"content":"        return this.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":122,"author":{"gitId":"elaineshijie"},"content":"     * Returns an ArrayList of Tasks with task description that matches the keyword.","lastModifiedDate":"2023-09-05"},{"lineNumber":123,"author":{"gitId":"elaineshijie"},"content":"     * @param keyword the keyword to find.","lastModifiedDate":"2023-09-05"},{"lineNumber":124,"author":{"gitId":"elaineshijie"},"content":"     * @return An ArrayList of tasks with the matching keyword in task description.","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":126,"author":{"gitId":"elaineshijie"},"content":"    public ArrayList\u003cTask\u003e findKeyword(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"elaineshijie"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"elaineshijie"},"content":"        for (Task task : this.getTaskList()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"elaineshijie"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"elaineshijie"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"elaineshijie"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"elaineshijie":135}},{"path":"src/main/java/seedu/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasks;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidDeadlineException;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":" * Taken from the Partial Solution given on https://nus-cs2103-ay2324s1.github.io/website/schedule/week2/project.html","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":" * A child class of duke.Tasks, it represents  tasks with a deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"     * Constructor of Deadline object which represents a task with a deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"     * @param description the task description","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"     * @param by the deadline of the task","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidDeadlineException thrown when the deadline is invalid","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"    public Deadline(String description, String by) throws InvalidDeadlineException {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"            this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidDeadlineException(\"Invalid data\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"     * Constructor of Deadline object which represents a task with a deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"     * This constructor can set isDone of the object and is used to load the","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"     * task list after Lemon is started.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"     * @param description the Deadline task\u0027s description","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     * @param by the deadline of the task","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"     * @param isDone the completion status of the task","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidDeadlineException","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"    public Deadline(String description, String by, boolean isDone) throws InvalidDeadlineException {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"            this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidDeadlineException(\"Invalid data\");","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"    public String addDataFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"        return \"D \" + super.addDataFormat() + \" | \" + by;","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":59}},{"path":"src/main/java/seedu/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasks;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidEventException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":" * A child class of duke.Tasks, it represents tasks with a start time \u0026 end time.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"    protected LocalDate start;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"    protected LocalDate end;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"     * Constructor to create an Event object which represents a task with start \u0026 end times.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"     * @param description the Event\u0027s description","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"     * @param start the start date of the description","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"     * @param end the end date of the description","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidEventException thrown when the start \u0026 end date is not in the correct format.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"    public Event(String description, String start, String end) throws InvalidEventException {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"            this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"            this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidEventException(\"Invalid date\");","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     * Constructor to create an Event object which represents a task with a start and end time.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"     * This constructor can set isDone of the object and is used to load the","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"     * task list after Lemon is started.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"     * @param description the task description","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"     * @param start the start time of the event","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"     * @param end the end time of the event","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"     * @param isDone boolean representing whether the task is completed","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"     * @throws InvalidEventException if the command does not have a start, end time","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"    public Event(String description, String start, String end, boolean isDone) throws InvalidEventException {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"            this.start \u003d LocalDate.parse(start);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"            this.end \u003d LocalDate.parse(end);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidEventException(\"Invalid date\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"    public String addDataFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"        return \"E \" + super.addDataFormat() + \" | \" + start + \" | \" + end;","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":64}},{"path":"src/main/java/seedu/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasks;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * Taken from the Partial Solution given on https://nus-cs2103-ay2324s1.github.io/website/schedule/week2/project.html.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" * A class of duke.Tasks to create tasks that need to be in list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"public class Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new Task object with a description.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new Task object with a description and marked status.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"     * @param description String description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"     * @param isDone      Boolean indicating whether the task is done (true) or undone (false).","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"     * Returns a status icon representing the completion status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"     * @return String which is a status icon (\"X\" if done, \" \" if undone).","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"     * Returns a formatted string representation of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"     * The format has the status icon and the task\u0027s description.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"     * @return String that represents the task and its completion status.","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"     * Returns a formatted string representation of the task\u0027s status for data storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"     * The format has a 1 for done and a 0 for undone and the task\u0027s description.","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"     * @return String that represents the task to be stored in data file.","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"    public String addDataFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"            return \"| 1 | \" + this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"            return \"| 0 | \" + this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elaineshijie"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"elaineshijie"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"elaineshijie"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"elaineshijie"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"elaineshijie"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"elaineshijie"},"content":"        return this.description;","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":76}},{"path":"src/main/java/seedu/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasks;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":" * A child class of duke.Tasks, it represents tasks to complete.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"    public String addDataFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"        return \"T \" + super.addDataFormat();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":25}},{"path":"src/main/java/seedu/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasklist.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":" * The Ui class is responsible for handling user interface interactions and displaying messages to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"     * Constructs a new Ui object.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    public Ui() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"     * Displays a welcome message when the application starts.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"    public void welcomeMessage() {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Hello! I\u0027m Lemon!\" + \"\\nWhat can I do for you?\");","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"     * Displays an error message when there is an issue loading the storage file with tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Error loading storage file!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"     * Displays a message after marking a task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"     * @param toMarkTask The task that was marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"    public void markPrint(String toMarkTask, TaskList tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n \" + toMarkTask + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Now you have \" + tasks.getTasksSize() + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"     * Displays a message after unmarking a task as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"     * @param toUnmarkTask The task that was marked as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"    public void unmarkPrint(String toUnmarkTask, TaskList tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n \" + toUnmarkTask + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Now you have \" + tasks.getTasksSize() + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"     * Displays a message after deleting a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"     * @param toDeleteTask The task that was deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list without the deleted task.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"elaineshijie"},"content":"    public void deletePrint(String toDeleteTask, TaskList tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + toDeleteTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Now you have \" + tasks.getTasksSize() + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"elaineshijie"},"content":"     * Displays a message after adding a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"elaineshijie"},"content":"     * @param toAddTask The task that was added.","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list with the added task.","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"elaineshijie"},"content":"    public void addTasks(String toAddTask, TaskList tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \" + toAddTask);","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Now you have \" + tasks.getTasksSize() + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"elaineshijie"},"content":"     * Lists all tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"elaineshijie"},"content":"    public void listAll(TaskList tasks) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"elaineshijie"},"content":"            for (int i \u003d 0; i \u003c tasks.getTasksSize(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"elaineshijie"},"content":"                System.out.println(i + 1 + \". \" + tasks.getTask(i).toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"elaineshijie"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"elaineshijie"},"content":"            System.out.println(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"elaineshijie"},"content":"        } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"elaineshijie"},"content":"            throw new InvalidTaskIndexException(\"Invalid task index\");","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"elaineshijie"},"content":"     * Lists all tasks in the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"elaineshijie"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"elaineshijie"},"content":"     * @param tasks The TaskList object containing the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"elaineshijie"},"content":"    public void listMatching(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"elaineshijie"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"elaineshijie"},"content":"            System.out.println(i + 1 + \". \" + tasks.get(i).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"\\n\");","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"elaineshijie"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"elaineshijie"},"content":"     * Displays a farewell message when the user exits the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"elaineshijie"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"elaineshijie"},"content":"    public void bye() {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"elaineshijie"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"elaineshijie":115}},{"path":"src/test/java/seedu/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.datafile.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.LemonException;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasks.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"        tasks.addTasks(new Todo(\"Jump 20 times\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"    public void listTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"            Parser.parseTasks(\"list\", tasks, storage, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(tasks.getTasksSize(), 1);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"    public void markTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"            tasks.getTask(0).markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(\"[T][X] Jump 20 times\",","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"                    this.tasks.getTask(0).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"    public void invalidCommand() {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"            Parser.parseTasks(\"??\", tasks, storage, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"elaineshijie"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(\":( OPPS!!! I\u0027m sorry, but I don\u0027t know what ?? means :-( \\n \"","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"elaineshijie"},"content":"                    + \"Please add todo/ deadline / event before your task description~ or other commands \"","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"elaineshijie"},"content":"                    + \"like mark, unmark \u0026 delete\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"elaineshijie":62}},{"path":"src/test/java/seedu/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"package seedu.duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.exceptions.LemonException;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"import seedu.duke.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"public class TaskTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"elaineshijie"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"elaineshijie"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"elaineshijie"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"elaineshijie"},"content":"        tasks.addTasks(new Todo(\"Jump 20 times\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"elaineshijie"},"content":"    public void toDoTask() {","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(\"[T][ ] Jump 20 times\", this.tasks.getTask(0).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"elaineshijie"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"elaineshijie"},"content":"    public void deadlineTask() {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"elaineshijie"},"content":"            tasks.addTasks(new Deadline(\"Quiz\", \"2022-10-15\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(\"[D][ ] Quiz (by: Oct 15 2022)\", this.tasks.getTask(1).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"elaineshijie"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"elaineshijie"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"elaineshijie"},"content":"    public void eventTask() {","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"elaineshijie"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"elaineshijie"},"content":"            tasks.addTasks(new Event(\"Welcome Tea\", \"2022-10-15\", \"2022-10-21\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"elaineshijie"},"content":"            assertEquals(\"[E][ ] Welcome Tea (from: 2022-10-15 to: 2022-10-21)\", this.tasks.getTask(1).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"elaineshijie"},"content":"        } catch (LemonException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"elaineshijie"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"elaineshijie"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"elaineshijie"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"elaineshijie"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"elaineshijie"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"elaineshijie":53}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elaineshijie"},"content":"todo drink water","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"elaineshijie"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"elaineshijie"},"content":"deadline quiz /by 27 Aug","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"elaineshijie"},"content":"event welcome tea","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elaineshijie"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"elaineshijie"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"elaineshijie"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"elaineshijie"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elaineshijie"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elaineshijie"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elaineshijie"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elaineshijie"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elaineshijie"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"elaineshijie"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elaineshijie":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"elaineshijie"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"elaineshijie":1}}]
