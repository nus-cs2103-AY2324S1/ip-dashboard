[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    mainClass.set(\"taskmate.Launcher\")","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    archiveBaseName \u003d \"taskmate\"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"elhy1999":17}},{"path":"src/main/java/taskmate/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.Main;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":13}},{"path":"src/main/java/taskmate/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The AddCommand class is an abstract parent class to three other commands that deal with adding new tasks specified by","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * the user. The three other commands are:","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * 1. \"todo \u003cname\u003e\"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * 2. \"deadline \u003cname\u003e /by \u003cdate\u003e\"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * 3. \"event \u003cname\u003e /from \u003cdate\u003e /to \u003cdate\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" *","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    String name;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":13}},{"path":"src/main/java/taskmate/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The Command class is an abstract class that represents a command given by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    String getType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        return this.commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * Returns the boolean instance attribute `isExit` which denotes whether the Command object is a `bye` command.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * This value is `true` if the instance is of the `ExitCommand` class, and `false` otherwise.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * @return boolean isExit.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    public boolean getIsExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Carries out the command represented by each of the Command child classes","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * Returns a `String` that represents the Command instance\u0027s command type","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * @return String command type.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        return this.commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        return this.getType();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":51}},{"path":"src/main/java/taskmate/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * The DeadlineCommand class is the child class of the AddCommand class. It represents a \"deadline\" tasks given by the","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * user in the following form: \"deadline \u003cname\u003e /by \u003cdate\u003e\".","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    LocalDate by;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * DeadlineCommand constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a `LocalDate` instance.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    DeadlineCommand(String name, LocalDate by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * DeadlineCommand constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a String in the form \"YYYY-mm-dd\" to be parsed to a","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    public DeadlineCommand(String name, String by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     * Executes the `deadline` command by the user by creating a new Deadline instance and adding it into the user\u0027s","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"     * task list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        Task newDeadlineTask \u003d new Deadline(name, by);","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newDeadlineTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newDeadlineTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":66}},{"path":"src/main/java/taskmate/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The DeleteCommand class is a child class of the Command class. It represents the `delete \u003cdeleteIndex\u003e` command which","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * deletes tasks from the task list.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    int deleteIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * DeleteCommand constructor that allows the developer to specify the index of the task to be removed.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * @param deleteIndex the index of the task to be removed from the task list. This index is 1-based, which means","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * the deleteIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    public DeleteCommand(int deleteIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Delete\";","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        this.deleteIndex \u003d deleteIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * Executes the `delete` command by the user by attempting to retrieve the task to be deleted from the task list and","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * removing it. If the task cannot be found (i.e. invalid deleteIndex), a failure message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user that the delete command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            Task taskToMark \u003d tasks.getTask(this.deleteIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            tasks.removeTask(this.deleteIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"            // print message when deleting","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulDeleteResponse(taskToMark, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":53}},{"path":"src/main/java/taskmate/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * The EventCommand class is the child class of the AddCommand class. It represents an \"event\" tasks given by the","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * user in the following form: \"event \u003cname\u003e /from \u003cdate\u003e /to \u003cdate\u003e\".","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class EventCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    LocalDate from, to;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * EventCommand constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must be","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param from the date that the event task starts.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * @param to the date that the event task ends.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    EventCommand(String name, LocalDate from, LocalDate to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * EventCommand constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * be String instances in the form \"YYYY-mm-dd\" to be parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @param from the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     * @param to the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    public EventCommand(String name, String from, String to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        this.from \u003d LocalDate.parse(from);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        this.to \u003d LocalDate.parse(to);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"     * Executes the `event` command by the user by creating a new Event instance and adding it into the user\u0027s task","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     * list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        Task newEventTask \u003d new Event(name, from, to);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newEventTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newEventTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":73}},{"path":"src/main/java/taskmate/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The ExitCommand class is a child class of the Command class. It represents the `bye` command which stops the","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * application and saves the undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * ExitCommand constructor that allows the user to stop the application and save the undeleted tasks to the","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * Note: This is the only command that has a value of `true` in the isExit instance attribute.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Exit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * Executes the `bye` command by the user by attempting to save the undeleted tasks to the disk using the `storage`","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * instance. If the writing process encounters an exception, a failure message is printed by the `ui` instance to","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * inform the user that the command failed to write the undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * Lastly, a farewell message is printed out by the `ui` object to the user, which lists the undeleted tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        // Exit procedure","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        // 1. Write incomplete tasks to disk","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        String saveTaskText \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"            storage.writeToFile(saveTaskText);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            ui.printSaveFailResponse(System.getProperty(\"user.dir\") +","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"                    storage.getSaveFilePath().substring(1).replace(\"/\", \"\\\\\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        // 2. Print exit message","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        ui.farewellUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":52}},{"path":"src/main/java/taskmate/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    String query;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    public FindCommand(String query) {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        this.query \u003d query.toLowerCase();","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Find\";","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        for (Task t : tasks.getAllTasks()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"            boolean isMatchingTask \u003d t.toString().toLowerCase().contains(this.query);","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"            if (isMatchingTask) {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        ui.printMatchingTasks(matchingTasks);","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"elhy1999":31}},{"path":"src/main/java/taskmate/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The HelpCommand class is a child class of the Command class. It represents the `help` command which allows the user","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" * to view the list of available commands and how each command should be formatted.","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     * HelpCommand constructor that allows the user to create a `help` command that guides them to use TaskMate.","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    public HelpCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Help\";","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * Executes the `help` command by the user by printing out the list of available commands and how each command","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * should be formatted.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        ui.printInputSpecifications(storage.getAbsoluteSaveFilePath());","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":35}},{"path":"src/main/java/taskmate/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The ListCommand class is a child class of the Command class. It represents the `list` command which allows the","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" * user to view the list of undeleted tasks, the status of each task (i.e. whether the task has been marked as","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * completed), and the type of each task (i.e. Todo, Deadline, or Event).","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * ListCommand constructor creates a `list` command that provides information about each task.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public ListCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"List\";","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * Executes the `list` command by the user by printing out the list of undeleted tasks, the status of each task (i.e.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     *  * whether the task has been marked as completed), and the type of each task (i.e. Todo, Deadline, or Event).","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        ui.printAllTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":36}},{"path":"src/main/java/taskmate/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The MarkCommand class is a child class of the Command class. It represents the `mark \u003cmarkIndex\u003e` command which","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * marks tasks in the task list as completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    int markIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * MarkCommand constructor that allows the developer to specify the index of the task to be marked as completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * @param markIndex the index of the task to be marked from the task list. This index is 1-based, which means","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * the markIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    public MarkCommand(int markIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Mark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        this.markIndex \u003d markIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * Executes the `mark` command by the user by attempting to retrieve the task to be marked from the task list and","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * marking it. If the task cannot be found (i.e. invalid markIndex), a failure message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user that the mark command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            Task taskToMark \u003d tasks.getTask(this.markIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            tasks.markAsDone(taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            // print message when marking","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulMarkResponse(taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":54}},{"path":"src/main/java/taskmate/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The TodoCommand class is the child class of the AddCommand class. It represents a \"todo\" tasks given by the user in","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * the following form: \"todo \u003cname\u003e\".","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class TodoCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * TodoCommand constructor that allows the developer to specify the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the todo task.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public TodoCommand(String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"todo\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Executes the `todo` command by the user by creating a new Todo instance and adding it into the user\u0027s task","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new to-do task","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        Task newTodoTask \u003d new Todo(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newTodoTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newTodoTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":49}},{"path":"src/main/java/taskmate/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The UnmarkCommand class is a child class of the Command class. It represents the `unmark \u003cunmarkIndex\u003e` command which","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * marks tasks in the task list as incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    String commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    int unmarkIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * UnmarkCommand constructor that allows the developer to specify the index of the task to be marked as incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * @param unmarkIndex the index of the task to be unmarked from the task list. This index is 1-based, which means","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * the unmarkIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    public UnmarkCommand(int unmarkIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Unmark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        this.unmarkIndex \u003d unmarkIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * Executes the `unmark` command by the user by attempting to retrieve the task to be unmarked from the task list","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * and unmarking it. If the task cannot be found (i.e. invalid unmarkIndex), a failure message is printed by the","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * `ui` instance to inform the user that the unmark command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            Task taskToUnmark \u003d tasks.getTask(this.unmarkIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            tasks.markAsNotDone(taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            // print message when unmarking","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulUnmarkResponse(taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":53}},{"path":"src/main/java/taskmate/exceptions/EmptyByException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyByException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `deadline` command incorrectly, leaving the \"by\" clause of the `deadline` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyByException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyDescriptionException class is a child class of the InvalidDescriptionException class. It is thrown when the","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * user formats their task commands incorrectly, leaving the \"name\" clause of the command empty. The task commands","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * relevant to this EmptyDescriptionException class are the `todo`, `deadline`, and `event` commands.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class EmptyDescriptionException extends InvalidDescriptionException {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/EmptyFromException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyFromException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, leaving the \"from\" clause of the `event` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyFromException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/EmptyToException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyToException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, leaving the \"to\" clause of the `event` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyToException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/InvalidByException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidByException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `deadline` command incorrectly, not writing the \"by\" clause of the `deadline` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"by\" clause empty. In such a case, an EmptyByException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidByException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/InvalidCommandTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidCommandTypeException class is a child class of the Exception class. It is thrown when the user specifies","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * an unidentified command. The list of identifiable commands can be found from the CommandTypes enum from the TaskMate","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * class.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class InvalidCommandTypeException extends Exception{","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidDescriptionException class is a child class of the Exception class. It is thrown when there are any issues","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * to do with the \"name\" clause of \"task commands\" such as empty \"name\" clauses. These task commands relevant to are the","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * `todo`, `deadline`, and `event` commands.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class InvalidDescriptionException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/InvalidFromException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidFromException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, not writing the \"from\" clause of the `event` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"from\" clause empty. In such a case, an EmptyFromException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidFromException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/InvalidToException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidToException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, not writing the \"to\" clause of the `event` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"to\" clause empty. In such a case, an EmptyToException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidToException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/NoDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The NoDataException class is a child class of the Exception class. It is thrown when there is an issue with reading","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * the file from the disk that stores the undeleted tasks. In particular, this exception is thrown when the file exists","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * on the disk, and it can be located, but the file content is empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * It is thrown by one of the TaskList constructor when reading the file contents from the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class NoDataException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/NotAnIntegerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The NotAnIntegerException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `mark`, `unmark`, or `delete` commands incorrectly, specifying the \"markIndex\", \"unmarkIndex\", or \"deleteIndex\"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * clauses respectively by using a non-integer value.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class NotAnIntegerException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The TaskNotFoundException class is a child class of the Exception class. It is thrown when the user inputs their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `mark`, `unmark`, or `delete` commands incorrectly, specifying the \"markIndex\", \"unmarkIndex\", or \"deleteIndex\"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * clauses with an integer that is outside the range of task indexes.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * For example, if there are n tasks in the task list and the user specifies an integer smaller than 1 or greater","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * than n, this exception will be thrown.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":11}},{"path":"src/main/java/taskmate/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.main;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.ui.MainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final TaskMate taskMate \u003d new TaskMate();","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setTaskMate(taskMate);","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":33}},{"path":"src/main/java/taskmate/main/TaskMate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.main;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.*;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"public class TaskMate {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    static String CHATBOT_NAME \u003d \"TaskMate\";","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    static String DEFAULT_SAVE_TASK_FILE_PATH \u003d \"./data/saved_tasks.txt\";","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    public enum COMMAND_TYPES {","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        list, bye, todo, deadline, event, mark, unmark, delete, help, find","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    private Parser parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    TaskMate(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        this.ui \u003d new Ui(CHATBOT_NAME);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        // Load existing tasks from disk","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            String fileContents \u003d storage.readFromFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            this.tasks \u003d new TaskList(fileContents);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"            ui.printFileNotFoundResponse(storage.getSaveFilePath());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        } catch (NoDataException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"            ui.printNoDataResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    TaskMate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        this.ui \u003d new Ui(CHATBOT_NAME);","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        this.storage \u003d new Storage(DEFAULT_SAVE_TASK_FILE_PATH);","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        // Load existing tasks from disk","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            String fileContents \u003d storage.readFromFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            this.tasks \u003d new TaskList(fileContents);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"            ui.printFileNotFoundResponse(storage.getSaveFilePath());","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        } catch (NoDataException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"            ui.printNoDataResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        new TaskMate().run();","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        // Greets user","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        ui.greetUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        ui.promptUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        // Reading user input","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        String userInput;","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        Command command;","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        while (true) {","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"            userInput \u003d ui.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"            // Parse user input","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"                command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"                command.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"                if (command.getIsExit()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"            } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"                ui.printInvalidCommandTypeExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e); // todo: Remove for production code","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"            } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"                ui.printInvalidCommandTypeExceptionResponse(); // todo: Add new message for chatbot","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e); // todo: Remove for production code","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"            } catch (EmptyByException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"                ui.printEmptyByExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e); // todo: Remove for production code","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"            } catch (InvalidByException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"                ui.printInvalidByExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"            } catch (InvalidToException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"                ui.printInvalidToExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"            } catch (EmptyToException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"                ui.printEmptyToExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"            } catch (InvalidFromException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"                ui.printInvalidFromExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"            } catch (EmptyFromException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"                ui.printEmptyFromExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"            } catch (NotAnIntegerException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"                ui.printNotAnIntegerExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"    public String getGreetReponse() {","lastModifiedDate":"2023-09-09"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"        ui.greetUser();","lastModifiedDate":"2023-09-09"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"        return ui.popStoredMessage();","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        // Parse user input","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"            command.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidCommandTypeExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidCommandTypeExceptionResponse(); // todo: Add new message for chatbot","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        } catch (EmptyByException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyByExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidByException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidByExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidToException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidToExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"        } catch (EmptyToException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyToExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidFromException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidFromExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"        } catch (EmptyFromException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyFromExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        } catch (NotAnIntegerException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"            ui.printNotAnIntegerExceptionResponse();","lastModifiedDate":"2023-09-09"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"        return ui.popStoredMessage();","lastModifiedDate":"2023-09-09"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":145}},{"path":"src/main/java/taskmate/tools/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.*;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.*;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.TaskMate;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    public static Command parse(String userInput) throws InvalidCommandTypeException, EmptyDescriptionException, EmptyByException, InvalidByException, InvalidToException, EmptyToException, InvalidFromException, EmptyFromException, NotAnIntegerException {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"        String commandType \u003d getCommandType(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        // bye","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        if (commandType.equals(TaskMate.COMMAND_TYPES.bye.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        // help","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.help.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        // list","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.list.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        // unmark i","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.unmark.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"            checkValidUnmarkCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"            int indexToUnmark \u003d Integer.parseInt(userInput.substring(TaskMate.COMMAND_TYPES.unmark.toString().length()).trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"            indexToUnmark -\u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"            return new UnmarkCommand(indexToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        // mark i","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.mark.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            checkValidMarkCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            int indexToMark \u003d Integer.parseInt(userInput.substring(TaskMate.COMMAND_TYPES.mark.toString().length()).trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            indexToMark -\u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"            return new MarkCommand(indexToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        // to-do description","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.todo.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"            checkValidTodoCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"            return new TodoCommand(userInput.substring(TaskMate.COMMAND_TYPES.todo.toString().length()+1)); // +1 because we do not want the task name to start from the space character","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        // deadline description /by date","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.deadline.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"            checkValidDeadlineCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            userInput \u003d userInput.substring(TaskMate.COMMAND_TYPES.deadline.toString().length()+1); // +1 because we do not want the task name to start from the space character","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            String[] splitUserInput \u003d userInput.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            return new DeadlineCommand(","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"                    splitUserInput[0],","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"                    splitUserInput[1].replace(\"by \", \"\")","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"            );","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        // event description /from date /to date","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.event.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"            checkValidEventCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"            userInput \u003d userInput.substring(TaskMate.COMMAND_TYPES.event.toString().length()+1); // +1 because we do not want the task name to start from the space character","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"            String[] splitUserInput \u003d userInput.split(\" /\");","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"            return new EventCommand(","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"                    splitUserInput[0],","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"                    splitUserInput[1].replace(\"from \", \"\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"                    splitUserInput[2].replace(\"to \", \"\")","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"            );","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        // delete i","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.delete.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"            checkValidDeleteCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"            int indexToDelete \u003d Integer.parseInt(userInput.substring(TaskMate.COMMAND_TYPES.delete.toString().length()).trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"            indexToDelete -\u003d 1; // subtract 1 as the arraylist is zero-indexed","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"            return new DeleteCommand(indexToDelete);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.COMMAND_TYPES.find.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"            checkValidFindCommand(userInput);","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"            String query \u003d userInput.substring(TaskMate.COMMAND_TYPES.find.toString().length()).trim();","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"            return new FindCommand(query);","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        // Invalid input","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    static String getCommandType(String userInput) throws InvalidCommandTypeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        // Returns the type of command input by the user","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        // Possible values: \"to\\-do\", \"deadline\", \"event\", \"bye\", \"list\", \"mark\", \"unmark\", \"find\"","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        for (TaskMate.COMMAND_TYPES type : TaskMate.COMMAND_TYPES.values()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"            String typeString \u003d type.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"            if (userInput.startsWith(typeString)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"                return typeString;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"        throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"    static void checkValidTodoCommand(String userInput) throws InvalidCommandTypeException, EmptyDescriptionException {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        // Checks if \"to-do\" command is valid by checking if there is text coming after the word \"to-do\"","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.COMMAND_TYPES.todo.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.COMMAND_TYPES.todo.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"    static void checkValidDeadlineCommand(String userInput) throws InvalidCommandTypeException, EmptyDescriptionException, EmptyByException, InvalidByException {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"        // Checks if \"deadline\" command is valid by checking if there is text coming after the word \"deadline\"","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"        // Additionally, checks if there is a \"/by \" substring within userInput, and if the date after \"/by \" substring","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"        // can be parsed into a date","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.COMMAND_TYPES.deadline.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.COMMAND_TYPES.deadline.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(\"/by \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyByException();","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"                String delimiter \u003d \"/by \";","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"                String byInput \u003d userInput.substring(userInput.indexOf(delimiter) + delimiter.length());","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"                LocalDate.parse(byInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidByException();","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"    static void checkValidEventCommand(String userInput) throws InvalidCommandTypeException, EmptyDescriptionException, EmptyFromException, InvalidFromException, EmptyToException, InvalidToException {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"        // Checks if \"deadline\" command is valid by checking if there is text coming after the word \"deadline\"","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"        // Additionally, checks if there are \"/from \" and \"/to \" substrings within userInput, and if the dates after","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"        // \"/from \" and \"/to \" substrings can be parsed into a date","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"        String fromDelimiter \u003d \"/from \";","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"        String toDelimiter \u003d \"/to \";","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.COMMAND_TYPES.event.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.COMMAND_TYPES.event.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(fromDelimiter)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyFromException();","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(toDelimiter)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyToException();","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"            // Testing from clause","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"                System.out.println(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"                String fromInput \u003d userInput.substring(userInput.indexOf(fromDelimiter) + fromDelimiter.length(), userInput.indexOf(toDelimiter)).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"                LocalDate.parse(fromInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidFromException();","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"            // Testing to clause","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"                String toInput \u003d userInput.substring(userInput.indexOf(toDelimiter) + toDelimiter.length()).trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"                LocalDate.parse(toInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidToException();","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"    static void checkValidMarkCommand(String userInput) throws InvalidCommandTypeException, NotAnIntegerException {","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"        // Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"        // by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"        // followed by an integer","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"        // Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.COMMAND_TYPES.mark.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"        indexWithinList \u003d userInput.substring(TaskMate.COMMAND_TYPES.mark.toString().length()).trim();","lastModifiedDate":"2023-09-03"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"    static void checkValidUnmarkCommand(String userInput) throws InvalidCommandTypeException, NotAnIntegerException {","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"        // Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"        // by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"        // followed by an integer","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"        // Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.COMMAND_TYPES.unmark.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"        indexWithinList \u003d userInput.substring(TaskMate.COMMAND_TYPES.unmark.toString().length()).trim();","lastModifiedDate":"2023-09-03"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"    static void checkValidDeleteCommand(String userInput) throws InvalidCommandTypeException, NotAnIntegerException {","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"        // Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"        // by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"        // followed by an integer","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"        // Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"        if (userInput.startsWith(TaskMate.COMMAND_TYPES.delete.toString())) {","lastModifiedDate":"2023-09-03"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"            indexWithinList \u003d userInput.substring(TaskMate.COMMAND_TYPES.delete.toString().length()).trim();","lastModifiedDate":"2023-09-03"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"elhy1999"},"content":"    static boolean checkStringIsInteger(String s) {","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"        // Returns true if String s can be parsed into an Integer object, and false otherwise","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"            Integer.parseInt(s);","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"elhy1999"},"content":"            return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"elhy1999"},"content":"        return true;","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"    static void checkValidFindCommand(String userInput) throws EmptyDescriptionException, InvalidCommandTypeException {","lastModifiedDate":"2023-09-03"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"        boolean isStartingWithFind \u003d userInput.startsWith(TaskMate.COMMAND_TYPES.find + \" \");","lastModifiedDate":"2023-09-03"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"        boolean hasEmptyQuery \u003d userInput.substring(TaskMate.COMMAND_TYPES.find.toString().length()).trim().isEmpty();","lastModifiedDate":"2023-09-03"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"        if (!isStartingWithFind) {","lastModifiedDate":"2023-09-03"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-09-03"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"        } else if (hasEmptyQuery) {","lastModifiedDate":"2023-09-03"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-09-03"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":223,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":224}},{"path":"src/main/java/taskmate/tools/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    String saveFilePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"        this.saveFilePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    public String getSaveFilePath() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        return this.saveFilePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public String getAbsoluteSaveFilePath() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        return System.getProperty(\"user.dir\") +","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"                this.getSaveFilePath().substring(1).replace(\"/\", \"\\\\\");","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    public String readFromFile() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        Path filePath \u003d Path.of(saveFilePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        return Files.readString(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    public void writeToFile(String text) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            Files.createDirectories(Paths.get(getDirectoryPath(saveFilePath)));","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace(System.out);","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        FileWriter fw \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        fw.write(text);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    static String getDirectoryPath(String filePath) {","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        Path directoryPath \u003d path.getParent();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        if (directoryPath !\u003d null) {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            return directoryPath.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            return null;","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":54}},{"path":"src/main/java/taskmate/tools/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.NoDataException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    int numTotalTasks \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    int numIncompleteTasks \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public TaskList(String contentsFromDisk) throws NoDataException {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        if (contentsFromDisk.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"            throw new NoDataException();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        String[] lines \u003d contentsFromDisk.split(\"\\\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        String taskType, name, by, from, to, delimiter, delimiter2;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        boolean taskIsDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        for (String line: lines) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"            taskType \u003d line.substring(1,2);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            taskIsDone \u003d line.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"                // To-do task","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"                name \u003d line.substring(7);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d new Todo(name, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"                this.addTask(newTask, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"            } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"                // Deadline","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"                delimiter \u003d \"(by: \";","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"                int indexOfByParam \u003d line.lastIndexOf(delimiter);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"                name \u003d line.substring(7, indexOfByParam);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"                by \u003d line.substring(indexOfByParam + delimiter.length(), line.length() - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d new Deadline(name, by, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"                this.addTask(newTask, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"                // Event","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"                delimiter \u003d \"(from: \";","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"                delimiter2 \u003d \" to: \";","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"                int indexOfFromParam \u003d line.lastIndexOf(delimiter);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"                int indexOfToParam \u003d line.lastIndexOf(delimiter2);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"                name \u003d line.substring(7, indexOfFromParam);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"                from \u003d line.substring(indexOfFromParam + delimiter.length(), indexOfToParam);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"                to   \u003d line.substring(indexOfToParam + delimiter2.length(), line.length() - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d new Event(name, from, to, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"                this.addTask(newTask, taskIsDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"                // Invalid event","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"                System.out.println(\"Invalid task: \" + line);","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"            System.out.println(\"Found and loaded saved task: \" + line);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        this.tasks.add(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        numTotalTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        numIncompleteTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"    public void addTask(Task t, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        this.addTask(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"        if (!isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"            return;","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"            this.markAsDone(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"            System.out.println(e); // todo: Assert that t can be found within tasks so that can remove try catch","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"    public void removeTask(int i) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"        if (i \u003e tasks.size() | i \u003c 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"        Task t \u003d tasks.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        tasks.remove(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        if (t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"        numTotalTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"    public void markAsDone(Task t) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"        if (!this.tasks.contains(t)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        if (!t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"            t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"    public void markAsNotDone(Task t) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"        if (!this.tasks.contains(t)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"        if (t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"            t.markAsNotDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-09-03"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"    public int getNumTotalTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"        return this.numTotalTasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"    public int getNumIncompleteTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        return this.numIncompleteTasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"    public Task getTask(int i) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        if (i \u003e\u003d tasks.size() | i \u003c 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"        return tasks.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"    public String formatAllTasksForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"        String returnString \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        for (Task t : getAllTasks()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"            returnString +\u003d t.formatTaskForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"            returnString +\u003d \"\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"        return returnString;","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":145}},{"path":"src/main/java/taskmate/tools/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"    static String HORIZONTAL_LINE \u003d \"--------------------\";","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    String chatbotName;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    Scanner sc;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    String storedMessage;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    public Ui(String chatbotName) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        this.chatbotName \u003d chatbotName;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    public void setStoredMessage(String s) {","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        this.storedMessage \u003d s;","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public String popStoredMessage() {","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        String s \u003d this.storedMessage;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.storedMessage \u003d null;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        return s;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    public String nextLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    public void greetUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Hello I\u0027m \" + chatbotName + \"\\n\\nPlease call for `help` if you need anything!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public void promptUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Input your command below:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    public void farewellUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    void printMessage(String text) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        // prints text with horizontal lines above and below it","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        System.out.println(text);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        System.out.println();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        this.setStoredMessage(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    public void printAllTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        String allTasksString \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        for (int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"            Task newTask \u003d tasks.getAllTasks().get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"            allTasksString +\u003d (i + 1) + \".\" + newTask.toString() + \"\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        printMessage(allTasksString);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    public void printInputSpecifications(String fileSavePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Please enter your commands:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Adding Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Todo tasks: todo \u003cdescription\u003e\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Deadline tasks: deadline \u003cdescription\u003e /by \u003cdate\u003e\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"3. Event tasks: event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\n\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Marking and Unmarking Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Marking tasks as completed: mark \u003cinteger\u003e\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Unmarking tasks are uncompleted: unmark \u003cinteger\u003e\\n\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Deleting Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. delete \u003cinteger\u003e\\n\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Others:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Quit: bye\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Manual: help\\n\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"FYI: Your data is saved locally in: \" + fileSavePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidCommandTypeExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulDeleteResponse(Task taskToDelete, int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Noted. I\u0027ve removed this task:\\n  \" + taskToDelete.toString() + \"\\nNow you have \" + numTotalTasks + \" task(s) in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulMarkResponse(Task taskToMark) {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulUnmarkResponse(Task taskToUnmark) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\" + taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulAddTaskResponse(Task newTask, int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Got it. I\u0027ve added this task:\\n  \" + newTask + \"\\nNow you have \" + numTotalTasks + \" task(s) in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidMarkOrUnmarkResponse(int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"☹ OOPS!!! The description of a mark/unmark must be between 1 and \" + numTotalTasks + \".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyByExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"By clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyToExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"To clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyFromExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"From clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidByExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"By clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidToExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"To clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidFromExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"From clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyTodoDescriptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidDeleteResponse(int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"☹ OOPS!!! The description of a delete must be between 1 and \" + numTotalTasks + \".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"    public void printNotAnIntegerExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Please enter a valid integer (E.g. mark 1, unmark 8, delete 3)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"    public void printFileNotFoundResponse(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"No previous datafile found in \" + filePath + \". Creating new task list for you!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"    public void printTaskNotFoundExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"☹ OOPS!!! No such task exists in your task list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"    public void printNoDataResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"        /*","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"        Prints message for when the file exists in the user\u0027s data directory. However, no data is found there.","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"         */","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Datafile located. However, it is empty. Creating a new task list for you!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"    public void printSaveFailResponse(String savePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"        System.out.println(\"Failed to write to \" + savePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"    public void printMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-09-03"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"            Task newTask \u003d matchingTasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"            message +\u003d (i + 1) + \".\" + newTask.toString() + \"\\n\";","lastModifiedDate":"2023-09-03"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-09-03"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":173}},{"path":"src/main/java/taskmate/tools/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * The Deadline class is a child class of the Task class that represents a \u0027Deadline\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    LocalDate by;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a String in the form \"YYYY-mm-dd\" to be parsed to a","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a `LocalDate` instance.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, LocalDate by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, a date that represents the date","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * that this task must be completed, and a boolean that represents if the task has been completed. This date must be","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * a String in the form \"YYYY-mm-dd\" to be parsed to a `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, String by, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        return \"Deadline\";","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    String getByFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    String getBy() {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        return this.by.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        return \"[D][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (by: \" + this.getByFormatted() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        return \"[D][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (by: \" + this.getBy() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":74}},{"path":"src/main/java/taskmate/tools/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * The Event class is a child class of the Task class that represents a \u0027Event\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    LocalDate startDatetime;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    LocalDate endDatetime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     * be String instances in the form \"YYYY-mm-dd\" to be parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, String startDatetime, String endDatetime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d LocalDate.parse(startDatetime);","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d LocalDate.parse(endDatetime);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must be","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, LocalDate startDatetime, LocalDate endDatetime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d startDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d endDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, a date that represents the date that this task ends, and a boolean that","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"     * represents if the task has been completed. These dates must be String instances in the form \"YYYY-mm-dd\" to be","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     * parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, String startDatetime, String endDatetime, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d LocalDate.parse(startDatetime);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d LocalDate.parse(endDatetime);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, a date that represents the date that this task ends, and a boolean that","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"     * represents if the task has been completed. These dates must be `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts.","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends.","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"    Event(String name, LocalDate startDatetime, LocalDate endDatetime, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d startDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d endDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        return \"Event\";","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"    String getStartDatetimeFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"        return this.startDatetime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"    String getEndDatetimeFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"        return this.endDatetime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"    String getStartDatetime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        return this.startDatetime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"    String getEndDatetime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"        return this.endDatetime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"        return \"[E][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (from: \" + this.getStartDatetimeFormatted() + \" to: \" + this.getEndDatetimeFormatted() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"        return \"[E][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (from: \" + this.getStartDatetime() + \" to: \" + this.getEndDatetime() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":106}},{"path":"src/main/java/taskmate/tools/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The Task class is an abstract class that represents a task specified by the user. It can be of type `Todo`,","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `Deadline`, or `Event`.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"    String name;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"     * Task constructor that allows the developer to specify the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    Task(String name) {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * Task constructor that allows the developer to specify the name of the task and whether the task has been","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    Task(String name, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * Sets the isDone instance attribute to true.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * Sets the isDone instance attribute to false.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"     * Gets the isDone instance attribute.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"     * @return a String object representing the name of the Task instance.","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        return this.name;","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"     * Gets the type of the task. It can be of type `Todo`, `Deadline`, or `Event`.","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"    abstract String getTaskType();","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"     * Formats the Task instance in a way that is written to the disk. The format is as follows:","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"     * `[A][B] \u003cname\u003e ...`","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"     * A: A character representing the task type (\u0027T\u0027 for \u0027Todo\u0027, \u0027D\u0027 for \u0027Deadline\u0027, \u0027E\u0027 for \u0027Event\u0027).","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"     * B: A character representing if the task has been completed. \u0027X\u0027 for completed, \u0027 \u0027 for incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"     * \u003cname\u003e: The name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"     * ...: Other information about the task such as the \"by\" clause (for \u0027Deadline\u0027 type tasks), and \"from\" \u0026 \"to\"","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"     * clauses (for \u0027Event\u0027 type tasks).","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"     * Example 1:","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"     * [T][ ] Read book","lastModifiedDate":"2023-09-03"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"     * Example 2:","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"     * [D][X] Complete CS2103 Assignment (by: 2023-01-01)","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"     * Example 3:","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"     * [E][ ] Attend career fair (from: 2023-01-02 to: 2023-01-03)","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"     * @return a String that formats the information about the Task instance to be written to the disk. The type of","lastModifiedDate":"2023-09-03"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"     * information is explained above.","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"    public abstract String formatTaskForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"    // String format to save the task to disk","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":92}},{"path":"src/main/java/taskmate/tools/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The Todo class is a child class of the Task class that represents a \u0027Todo\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"        return \"Todo\";","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        return \"[T][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        return this.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":28}},{"path":"src/main/java/taskmate/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    public static DialogBox getTaskMateDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":61}},{"path":"src/main/java/taskmate/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.TaskMate;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    private TaskMate t;","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    private final Image dukeImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public void setTaskMate(TaskMate t) {","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        this.t \u003d t;","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        String response \u003d t.getResponse(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"                DialogBox.getTaskMateDialog(response, dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"            System.exit(0);","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":59}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"taskmate.ui.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"         \u003ccontent\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"                  \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"109.0\" prefWidth\u003d\"400.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"                        \u003cImageView fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"                           \u003cimage\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"                              \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"                           \u003c/image\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"                        \u003c/ImageView\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"                        \u003cLabel ellipsisString\u003d\"\" text\u003d\"Hello I\u0027m TaskMate! Please call for `help` if you need anything!\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"                           \u003copaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"                              \u003cInsets /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"                           \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"                     \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"                     \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"                  \u003c/HBox\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"               \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"         \u003c/content\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":44}},{"path":"src/test/java/taskmate/tools/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    public void addTaskTest() { // todo: Change to stubs","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"        Task todoTask \u003d new Todo(\"This is a todo task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask \u003d new Deadline(\"This is a COMPLETED deadline task\", \"2023-01-01\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        Task eventTask \u003d new Event(\"This is an event task\", \"2024-12-02\", \"1987-01-02\");","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(todoTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"[T][ ] This is a todo task\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"                \"[D][X] This is a COMPLETED deadline task (by: 2023-01-01)\\n\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"                \"[E][ ] This is an event task (from: 2024-12-02 to: 1987-01-02)\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":30}},{"path":"src/test/java/taskmate/tools/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"    public void nameTest() {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"        String name1 \u003d \"This is test 1\";","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"        Task t1 \u003d new Todo(name1);","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"        assertEquals(name1, t1.getTaskName());","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"        String name2 \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"        Task t2 \u003d new Todo(name2);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        assertEquals(name2, t2.getTaskName());","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":17}},{"path":"text-ui-test/EXPECTED2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"Hello I\u0027m TaskMate","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"What can I do for you?","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"  [T][ ] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"Now you have 1 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"  [D][ ] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"  [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"Now you have 3 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"  [T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"  [D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"  [E][X] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"[ ] [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"  [T][ ] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"Now you have 4 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"  [T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"Now you have 5 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"3.[E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"4.[T][ ] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"5.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"  [T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"3.[E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"4.[T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"5.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"  [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"Now you have 4 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"3.[T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"4.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-08-24"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":99}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"event project meeting (from: Monday to: Friday) /from 2023-01-01 /to 2024-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"event project meeting (from: Monday to: Friday) /from 2023-01-01 /to 2024-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"deadline read paper (by: 2023-01-01) /by 2023-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":7}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"event project meeting /from 2023-08-31 /to 2025-12-12","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"mark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"unmark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"todo join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"java -classpath ..\\bin TaskMate \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"elhy1999":1}},{"path":"text-ui-test/runtest2.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"@ECHO OFF","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"REM delete output from previous run","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    exit /b 1","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":")","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"java -classpath ..\\bin TaskMate \u003c input2.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"REM compare the output to the expected output","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"FC ACTUAL.TXT EXPECTED2.TXT","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":21}}]
