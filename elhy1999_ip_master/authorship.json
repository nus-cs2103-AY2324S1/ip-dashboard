[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"checkstyle {","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    mainClass.set(\"taskmate.Launcher\")","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    archiveBaseName \u003d \"taskmate\"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"elhy1999":22}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"# TaskMate - Your Personal Task-Tracking Assistant","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"TaskMate is a desktop application designed for task management, ideally utilized through a Command-Line Interface (CLI),","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"all the while retaining the advantages of a Graphical User Interface (GUI). It is recommended to follow along with the","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"commands in this guide in a step-by-step manner as the expected output assumes you have been following the commands","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"sequentially.","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"## Downloading TaskMate","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"You may choose the release version of TaskMate from [this link](https://github.com/elhy1999/ip/releases). Please","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"download the `taskmate.jar` file **into a clean folder**. Next, run the `.jar` file either by double-clicking on the","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"application, or running `java -jar taskmate.jar` in your terminal.","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"Note: A new `data/` folder will be created in the directory where you installed TaskMate. This folder contains your task","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"data so that when you exit the application, your data is saved locally.","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"![TaskMate GUI](https://elhy1999.github.io/ip/Ui.png \"TaskMate Gui\")","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"### Add Task","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"TaskMate supports adding three different categories of tasks:","lastModifiedDate":"2023-09-19"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"1. todo: A task without any date/time attached to it (e.g., learn HTML/CSS one day)","lastModifiedDate":"2023-09-19"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"2. deadline: A task that needs to be done before a specific date/time (e.g., purchase anniversary gift by 2023-09-19)","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"3. event: A task that start at a specific date/time and ends at a specific date/time","lastModifiedDate":"2023-09-19"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"   (e.g., learning journey 2023-09-23 to 2023-09-24)","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"### Delete Task","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"TaskMate permits you to delete tasks from your task-list that you no longer wish to keep.","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"### Listing All Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"TaskMate enables you to list down the tasks in your task-list, along with accompanying information","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"indicating whether each task has been completed or not.","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"### Finding Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"TaskMate enables you to find tasks within your task list by using keywords / keyphrases found in the tasks\u0027 names","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"or dates.","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"### Mark \u0026 Unmark Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"TaskMate offers the capability to mark tasks in your task-list as completed, and subsequently, if desired, to revert","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"(unmark) them back to an incomplete status.","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"### Updating Tasks","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"TaskMate allows you to change (update) information about existing tasks in your task-list.","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"### Call for \"help\"!!!","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"In case you\u0027ve forgotten the syntax of available commands, simply call for help, and TaskMate will provide a detailed","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"list of each command along with its corresponding syntax.","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"### Saving your data","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"When you close TaskMate using the `bye` command, TaskMate automatically saves your task data onto your computer so that","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"when you boot TaskMate up again in the future, this data will be loaded and you will not need to retype all your tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"from scratch.","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"### Graphical User Interface (GUI)","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"TaskMate has a GUI which offers a more aesthetically pleasing experience. It is able to provide you with information","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"about the name of each task, the index of each task, any dates associated to it (usually in brackets next to the task\u0027s","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"name), the type of the task (i.e. todo, deadline, or event), as well as whether it has been completed. Take the","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"following as an example:","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"1.[T][ ] learn HTML/CSS one day","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"2.[D][ ] purchase anniversary gift (by: Sep 19 2023)","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"3.[E][X] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"In the example above, we see the index of each task on the left. Next to the index, we see the task type in squared","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"brackets (i.e. `[T]`, `[D]`, and `[E]` representing *todo*, *deadline*, and *event* respectively). Next to that, we see","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"another set of squared brackets indicating if the task has been marked as completed or not (an `X` indicates that it","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"has been completed). To the right of this indicator, we see the task name. For *deadline* and *event* tasks, there are","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"also dates associated to each task, which are in round brackets to the right of the task name.","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"### `todo` - Add a *todo* task to your task-list","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"This command creates a *todo* task for you and adds it to your task-list. Note that a *todo* task is a task **without","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"any dates** associated to it.","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `todo \u003cname\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"`\u003cname\u003e`: The name of the *todo* task","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"#### Example of usage: ","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"`todo learn HTML/CSS one day`","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"The *todo* task should appear in your task-list.","lastModifiedDate":"2023-09-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":104,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"   [T][ ] learn HTML/CSS one day","lastModifiedDate":"2023-09-19"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"Now you have 1 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"### `deadline` - Add a *deadline* task to your task-list","lastModifiedDate":"2023-09-19"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"This command creates a *deadline* task for you and adds it to your task-list. Note that a *deadline* task is a task that","lastModifiedDate":"2023-09-19"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"has a date representing a deadline attached to it. This date must be in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-19"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `deadline \u003cname\u003e /by: \u003cby\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"`\u003cname\u003e`: The name of the *deadline* task","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"`\u003cby\u003e`: A datetime representing **by when** does the task have to be completed. This datetime has to be in the","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"YYYY-mm-dd format","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"`deadline purchase anniversary gift /by 2023-09-19`","lastModifiedDate":"2023-09-19"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"The *deadline* task should appear in your task-list.","lastModifiedDate":"2023-09-19"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"   [D][ ] purchase anniversary gift (by: Sep 19 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"### `event` - Add an *event* task to your task-list","lastModifiedDate":"2023-09-19"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"This command creates a *event* task for you and adds it to your task-list. Note that an *event* task is a task that","lastModifiedDate":"2023-09-19"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"has two dates representing the start-date and the end-date attached to it. These dates must be in the \"YYYY-mm-dd\"","lastModifiedDate":"2023-09-19"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"format.","lastModifiedDate":"2023-09-19"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `event \u003cname\u003e /from: \u003cfrom\u003e /to \u003cto\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"`\u003cname\u003e`: The name of the *deadline* task","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"`\u003cfrom\u003e`: A datetime representing the date which the event **starts from**. This datetime has to be in the YYYY-mm-dd","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"format","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"`\u003cto\u003e`: A datetime representing the date which the event **lasts to**. This datetime has to be in the YYYY-mm-dd format","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"`event learning journey /from 2023-09-23 /to 2023-09-24`","lastModifiedDate":"2023-09-19"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"The *event* task should appear in your task-list.","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"   [E][ ] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"Now you have 3 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"### `mark` - mark a task in your task-list as complete","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"This command adds a label \u0027X\u0027 next to your task that represents if the task has been completed.","lastModifiedDate":"2023-09-19"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `mark \u003cindex\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"`\u003cindex\u003e`: An integer from 1 to the number of tasks available which represents the task you wish to mark as complete. To","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"view the index of the task you wish to mark, use the `list` command. (See also: `list`)","lastModifiedDate":"2023-09-20"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"#### Example of usage (1):","lastModifiedDate":"2023-09-20"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"`mark 3`","lastModifiedDate":"2023-09-19"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome (1):","lastModifiedDate":"2023-09-20"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"The third task (*event* task) should be marked with an \u0027X\u0027 next to it.","lastModifiedDate":"2023-09-19"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-09-19"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"   [E][X] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"#### Example of usage (2):","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"`mark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome (2):","lastModifiedDate":"2023-09-20"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"The first task (*todo* task) should be marked with an \u0027X\u0027 next to it.","lastModifiedDate":"2023-09-20"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-09-20"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"   [T][X] learn HTML/CSS one day","lastModifiedDate":"2023-09-20"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"### `unmark` - label a task in your task-list as incomplete","lastModifiedDate":"2023-09-20"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"This command removes the label \u0027X\u0027 next to your task (if it exists. Otherwise, this command does nothing).","lastModifiedDate":"2023-09-20"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `unmark \u003cindex\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"`\u003cindex\u003e`: An integer from 1 to the number of tasks available which represents the task you wish to revert back to the","lastModifiedDate":"2023-09-20"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"\"incomplete\" status. To view the index of the task you wish to unmark, use the `list` command. (See also: `list`)","lastModifiedDate":"2023-09-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"`unmark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"The third task (*event* task) should be marked with an \u0027X\u0027 next to it.","lastModifiedDate":"2023-09-20"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-09-20"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"[T][ ] learn HTML/CSS one day ","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"### `list` - lists down all the tasks in your task-list","lastModifiedDate":"2023-09-19"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"This command lists down the tasks you have in your task-list. It also tells you whether those tasks have been marked as","lastModifiedDate":"2023-09-19"},{"lineNumber":225,"author":{"gitId":"elhy1999"},"content":"completed.","lastModifiedDate":"2023-09-19"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":227,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `list`","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":229,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":231,"author":{"gitId":"elhy1999"},"content":"`list`","lastModifiedDate":"2023-09-19"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":233,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":234,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":235,"author":{"gitId":"elhy1999"},"content":"You should see all the remaining tasks in your list.","lastModifiedDate":"2023-09-19"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":237,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":238,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-09-19"},{"lineNumber":239,"author":{"gitId":"elhy1999"},"content":"1.[T][ ] learn HTML/CSS one day","lastModifiedDate":"2023-09-19"},{"lineNumber":240,"author":{"gitId":"elhy1999"},"content":"2.[D][ ] purchase anniversary gift (by: Sep 19 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":241,"author":{"gitId":"elhy1999"},"content":"3.[E][X] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":242,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":243,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":244,"author":{"gitId":"elhy1999"},"content":"### `find` - finds all the tasks in your list that match a specific keyword / keyphrase","lastModifiedDate":"2023-09-19"},{"lineNumber":245,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":246,"author":{"gitId":"elhy1999"},"content":"This command lists down the tasks in your task-list that contain a keyword / keyphrase that you specify. It also tells","lastModifiedDate":"2023-09-19"},{"lineNumber":247,"author":{"gitId":"elhy1999"},"content":"you whether those tasks have been marked as completed.","lastModifiedDate":"2023-09-19"},{"lineNumber":248,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":249,"author":{"gitId":"elhy1999"},"content":"Note: This keyword / keyphrase could be a substring from the tasks\u0027 name, or a substring from the tasks\u0027 dates.","lastModifiedDate":"2023-09-19"},{"lineNumber":250,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":251,"author":{"gitId":"elhy1999"},"content":"Note: This matching is **case-insensitive**","lastModifiedDate":"2023-09-19"},{"lineNumber":252,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":253,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `find \u003cquery\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":254,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":255,"author":{"gitId":"elhy1999"},"content":"`\u003cquery\u003e`: A String representing the keyword / keyphrase you which to find matches on","lastModifiedDate":"2023-09-20"},{"lineNumber":256,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":257,"author":{"gitId":"elhy1999"},"content":"#### Example of usage (1):","lastModifiedDate":"2023-09-20"},{"lineNumber":258,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":259,"author":{"gitId":"elhy1999"},"content":"`find sep`","lastModifiedDate":"2023-09-19"},{"lineNumber":260,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":261,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome (1):","lastModifiedDate":"2023-09-20"},{"lineNumber":262,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":263,"author":{"gitId":"elhy1999"},"content":"You should see all the matching tasks that contain \"sep\" (case-insensitive) in your task-list.","lastModifiedDate":"2023-09-19"},{"lineNumber":264,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":265,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":266,"author":{"gitId":"elhy1999"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-19"},{"lineNumber":267,"author":{"gitId":"elhy1999"},"content":"1.[D][ ] purchase anniversary gift (by: Sep 19 2023) ","lastModifiedDate":"2023-09-19"},{"lineNumber":268,"author":{"gitId":"elhy1999"},"content":"2.[E][X] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":269,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":270,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":271,"author":{"gitId":"elhy1999"},"content":"#### Example of usage (2):","lastModifiedDate":"2023-09-20"},{"lineNumber":272,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":273,"author":{"gitId":"elhy1999"},"content":"`find learn`","lastModifiedDate":"2023-09-19"},{"lineNumber":274,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":275,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome (2):","lastModifiedDate":"2023-09-20"},{"lineNumber":276,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":277,"author":{"gitId":"elhy1999"},"content":"You should see all the matching tasks that contain \"sep\" (case-insensitive) in your task-list.","lastModifiedDate":"2023-09-19"},{"lineNumber":278,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":279,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":280,"author":{"gitId":"elhy1999"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-19"},{"lineNumber":281,"author":{"gitId":"elhy1999"},"content":"1.[T][ ] learn HTML/CSS one day ","lastModifiedDate":"2023-09-19"},{"lineNumber":282,"author":{"gitId":"elhy1999"},"content":"2.[E][X] learning journey (from: Sep 23 2023 to: Sep 24 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":283,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":284,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":285,"author":{"gitId":"elhy1999"},"content":"### `delete` - Delete a task from your task-list","lastModifiedDate":"2023-09-19"},{"lineNumber":286,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":287,"author":{"gitId":"elhy1999"},"content":"This command deletes a task from your task-list. The task is specified by the task number associated to it. You can get","lastModifiedDate":"2023-09-19"},{"lineNumber":288,"author":{"gitId":"elhy1999"},"content":"the task number by calling `list`. (See also: `list` command)","lastModifiedDate":"2023-09-19"},{"lineNumber":289,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":290,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `delete \u003cindex\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":291,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":292,"author":{"gitId":"elhy1999"},"content":"`\u003cindex\u003e`: An integer from 1 to the number of tasks available which represents the task you wish to delete. To view the","lastModifiedDate":"2023-09-20"},{"lineNumber":293,"author":{"gitId":"elhy1999"},"content":"index of the task you wish to delete, use the `list` command. (See also: `list`)","lastModifiedDate":"2023-09-20"},{"lineNumber":294,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":295,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":296,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":297,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":298,"author":{"gitId":"elhy1999"},"content":"`delete 1`","lastModifiedDate":"2023-09-19"},{"lineNumber":299,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":300,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":301,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":302,"author":{"gitId":"elhy1999"},"content":"Task 1 should be removed from your task-list.","lastModifiedDate":"2023-09-19"},{"lineNumber":303,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":304,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":305,"author":{"gitId":"elhy1999"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":306,"author":{"gitId":"elhy1999"},"content":"   [T][ ] learn HTML/CSS one day","lastModifiedDate":"2023-09-19"},{"lineNumber":307,"author":{"gitId":"elhy1999"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":308,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":309,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":310,"author":{"gitId":"elhy1999"},"content":"### `update` - Update information about an existing task in your task-list","lastModifiedDate":"2023-09-20"},{"lineNumber":311,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":312,"author":{"gitId":"elhy1999"},"content":"This command updates / changes information about a task from your task-list. The task is specified by the task number","lastModifiedDate":"2023-09-20"},{"lineNumber":313,"author":{"gitId":"elhy1999"},"content":"associated to it. You can get the task number by calling `list`. (See also: `list` command)","lastModifiedDate":"2023-09-20"},{"lineNumber":314,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":315,"author":{"gitId":"elhy1999"},"content":"You may chain all the attributes you wish to update","lastModifiedDate":"2023-09-20"},{"lineNumber":316,"author":{"gitId":"elhy1999"},"content":"into a single command. See the example below which demonstrates changing the /name and /from attribute of a single","lastModifiedDate":"2023-09-20"},{"lineNumber":317,"author":{"gitId":"elhy1999"},"content":"*event* task.","lastModifiedDate":"2023-09-20"},{"lineNumber":318,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":319,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `update \u003cindex\u003e \u003cTAG\u003e \u003cnewValue\u003e ...`","lastModifiedDate":"2023-09-20"},{"lineNumber":320,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":321,"author":{"gitId":"elhy1999"},"content":"`\u003cindex\u003e`: An integer from 1 to the number of tasks available which represents the task you wish to delete. To view the","lastModifiedDate":"2023-09-20"},{"lineNumber":322,"author":{"gitId":"elhy1999"},"content":"index of the task you wish to delete, use the `list` command. (See also: `list`)","lastModifiedDate":"2023-09-20"},{"lineNumber":323,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":324,"author":{"gitId":"elhy1999"},"content":"`\u003cTAG\u003e`: This tag represents which task attribute you which to update. Reference the table below for valid `\u003cTAG\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":325,"author":{"gitId":"elhy1999"},"content":"values for each task type:","lastModifiedDate":"2023-09-20"},{"lineNumber":326,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":327,"author":{"gitId":"elhy1999"},"content":"| Task Type | Possible `\u003cTAG\u003e` values |","lastModifiedDate":"2023-09-20"},{"lineNumber":328,"author":{"gitId":"elhy1999"},"content":"|-|-|","lastModifiedDate":"2023-09-20"},{"lineNumber":329,"author":{"gitId":"elhy1999"},"content":"| todo | /name |","lastModifiedDate":"2023-09-20"},{"lineNumber":330,"author":{"gitId":"elhy1999"},"content":"| deadline | /name, /by |","lastModifiedDate":"2023-09-20"},{"lineNumber":331,"author":{"gitId":"elhy1999"},"content":"| event | /name, /from, /to |","lastModifiedDate":"2023-09-20"},{"lineNumber":332,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":333,"author":{"gitId":"elhy1999"},"content":"`\u003cnewValue\u003e`: The new value you which to change the task\u0027s `\u003cTAG\u003e` attribute to. Note that if `\u003cTAG\u003e` is /by, /from, or","lastModifiedDate":"2023-09-20"},{"lineNumber":334,"author":{"gitId":"elhy1999"},"content":"/to, then `\u003cnewValue\u003e` must be a datetime of the form YYYY-mm-dd.","lastModifiedDate":"2023-09-20"},{"lineNumber":335,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":336,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":337,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":338,"author":{"gitId":"elhy1999"},"content":"`update 2 /from 2023-09-21 /name learning journey to Science Centre`","lastModifiedDate":"2023-09-20"},{"lineNumber":339,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":340,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":341,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":342,"author":{"gitId":"elhy1999"},"content":"The /from and /name attributes of the *event* task should be updated to the new values.","lastModifiedDate":"2023-09-20"},{"lineNumber":343,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":344,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":345,"author":{"gitId":"elhy1999"},"content":"Updates successfully made to task 2:","lastModifiedDate":"2023-09-20"},{"lineNumber":346,"author":{"gitId":"elhy1999"},"content":"name: learning journey to Science Centre","lastModifiedDate":"2023-09-20"},{"lineNumber":347,"author":{"gitId":"elhy1999"},"content":"from: 2023-09-21","lastModifiedDate":"2023-09-20"},{"lineNumber":348,"author":{"gitId":"elhy1999"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":349,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":350,"author":{"gitId":"elhy1999"},"content":"### `help` - lists down the available commands and their syntax","lastModifiedDate":"2023-09-20"},{"lineNumber":351,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":352,"author":{"gitId":"elhy1999"},"content":"This command is helpful for users in the beginning who may not be used to the syntax of TaskMate. If you wish to find","lastModifiedDate":"2023-09-20"},{"lineNumber":353,"author":{"gitId":"elhy1999"},"content":"the syntax of specific commands, call for `help` and TaskMate will assist you.","lastModifiedDate":"2023-09-20"},{"lineNumber":354,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":355,"author":{"gitId":"elhy1999"},"content":"Note: This command also gives you the absolute path of the folder where your tasks\u0027 data will be saved.","lastModifiedDate":"2023-09-20"},{"lineNumber":356,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":357,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `help`","lastModifiedDate":"2023-09-20"},{"lineNumber":358,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":359,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":360,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":361,"author":{"gitId":"elhy1999"},"content":"`help`","lastModifiedDate":"2023-09-20"},{"lineNumber":362,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":363,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":364,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":365,"author":{"gitId":"elhy1999"},"content":"You should see all the commands and their syntax. As the help page is pretty verbose, only part of the expected outcome","lastModifiedDate":"2023-09-20"},{"lineNumber":366,"author":{"gitId":"elhy1999"},"content":"is shown below.","lastModifiedDate":"2023-09-20"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":368,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":369,"author":{"gitId":"elhy1999"},"content":"Adding Tasks:","lastModifiedDate":"2023-09-20"},{"lineNumber":370,"author":{"gitId":"elhy1999"},"content":"1. Todo tasks: todo \u003cname\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":371,"author":{"gitId":"elhy1999"},"content":"2. Deadline tasks: deadline \u003cname\u003e /by \u003cdate\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":372,"author":{"gitId":"elhy1999"},"content":"3. Event tasks: event \u003cname\u003e /from \u003cdate\u003e /to \u003cdate\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":373,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":374,"author":{"gitId":"elhy1999"},"content":"Marking and Unmarking Tasks:","lastModifiedDate":"2023-09-20"},{"lineNumber":375,"author":{"gitId":"elhy1999"},"content":"1. Marking tasks as completed: mark \u003cinteger\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":376,"author":{"gitId":"elhy1999"},"content":"2. Unmarking tasks as incomplete: unmark \u003cinteger\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":377,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":378,"author":{"gitId":"elhy1999"},"content":"Deleting Tasks:","lastModifiedDate":"2023-09-20"},{"lineNumber":379,"author":{"gitId":"elhy1999"},"content":"1. delete \u003cinteger\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":380,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":381,"author":{"gitId":"elhy1999"},"content":"Updating Tasks:","lastModifiedDate":"2023-09-20"},{"lineNumber":382,"author":{"gitId":"elhy1999"},"content":"1. update \u003cinteger\u003e \u003cTAG\u003e \u003cnewValue\u003e ...","lastModifiedDate":"2023-09-20"},{"lineNumber":383,"author":{"gitId":"elhy1999"},"content":"...","lastModifiedDate":"2023-09-20"},{"lineNumber":384,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":385,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":386,"author":{"gitId":"elhy1999"},"content":"### `bye` - exit TaskMate and save your tasks to disk","lastModifiedDate":"2023-09-20"},{"lineNumber":387,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":388,"author":{"gitId":"elhy1999"},"content":"This command closes TaskMate and saves all information about your undeleted tasks to your laptop. When you boot up","lastModifiedDate":"2023-09-20"},{"lineNumber":389,"author":{"gitId":"elhy1999"},"content":"TaskMate again, your data will be loaded and you do not need to input all your tasks from scratch again. To view the","lastModifiedDate":"2023-09-20"},{"lineNumber":390,"author":{"gitId":"elhy1999"},"content":"location on your computer where your data will be stored, call for `help`. (See also: `help`)","lastModifiedDate":"2023-09-20"},{"lineNumber":391,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":392,"author":{"gitId":"elhy1999"},"content":"Note: If you do not call `bye` and close the application in any other way, **TaskMate will not save your data**.","lastModifiedDate":"2023-09-20"},{"lineNumber":393,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":394,"author":{"gitId":"elhy1999"},"content":"#### **Syntax**: `bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":395,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":396,"author":{"gitId":"elhy1999"},"content":"#### Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":397,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":398,"author":{"gitId":"elhy1999"},"content":"`bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":399,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":400,"author":{"gitId":"elhy1999"},"content":"#### Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":401,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":402,"author":{"gitId":"elhy1999"},"content":"TaskMate closes and your data is saved for future reference.","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"-":41,"elhy1999":361}},{"path":"src/main/java/taskmate/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.Main;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":13}},{"path":"src/main/java/taskmate/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The AddCommand class is an abstract parent class to three other commands that deal with adding new tasks specified by","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * the user. The three other commands are:","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * 1. \"todo `name`\"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * 2. \"deadline `name` /by `date`\"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * 3. \"event `name` /from `date` /to `date`\"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" *","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    protected String name;","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":13}},{"path":"src/main/java/taskmate/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The Command class is an abstract class that represents a command given by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    protected String commandType;","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    protected boolean isExit;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    String getType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"        assert this.commandType !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        return this.commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * Returns the boolean instance attribute `isExit` which denotes whether the Command object is a `bye` command.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * This value is `true` if the instance is of the `ExitCommand` class, and `false` otherwise.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @return boolean isExit.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    public boolean getIsExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * Carries out the command represented by each of the Command child classes","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * Returns a `String` that represents the Command instance\u0027s command type","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @return String command type.","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        assert this.commandType !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        return this.commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        return this.getType();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":54}},{"path":"src/main/java/taskmate/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * The DeadlineCommand class is the child class of the AddCommand class. It represents a \"deadline\" tasks given by the","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * user in the following form: \"deadline `name` /by `date`\".","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final LocalDate by;","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * DeadlineCommand constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a String in the form \"YYYY-mm-dd\" to be parsed to a","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    public DeadlineCommand(String name, String by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * Executes the `deadline` command by the user by creating a new Deadline instance and adding it into the user\u0027s","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * task list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * `ui` instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        assert super.name !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        assert this.by !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        Task newDeadlineTask \u003d new Deadline(name, by);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newDeadlineTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newDeadlineTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":56}},{"path":"src/main/java/taskmate/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The DeleteCommand class is a child class of the Command class. It represents the \"delete `deleteIndex`\" command which","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * deletes tasks from the task list.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    private final int deleteIndex;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * DeleteCommand constructor that allows the developer to specify the index of the task to be removed.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * @param deleteIndex the index of the task to be removed from the task list. This index is 1-based, which means the","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     *                    deleteIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public DeleteCommand(int deleteIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Delete\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.deleteIndex \u003d deleteIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Executes the `delete` command by the user by attempting to retrieve the task to be deleted from the task list and","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * removing it. If the task cannot be found (i.e. invalid deleteIndex), a failure message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user that the delete command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            Task taskToMark \u003d tasks.getTask(this.deleteIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            tasks.removeTask(this.deleteIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"            // print message after deleting","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulDeleteResponse(taskToMark, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":53}},{"path":"src/main/java/taskmate/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * The EventCommand class is the child class of the AddCommand class. It represents an \"event\" tasks given by the","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * user in the following form: \"event `name` /from `date` /to `date`\".","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class EventCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final LocalDate from;","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    private final LocalDate to;","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * EventCommand constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * be String instances in the form \"YYYY-mm-dd\" to be parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * @param from the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * @param to the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    public EventCommand(String name, String from, String to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        this.from \u003d LocalDate.parse(from);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"        this.to \u003d LocalDate.parse(to);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * Executes the `event` command by the user by creating a new Event instance and adding it into the user\u0027s task","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        assert super.name !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        assert this.from !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        assert this.to !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        Task newEventTask \u003d new Event(name, from, to);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newEventTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newEventTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":62}},{"path":"src/main/java/taskmate/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The ExitCommand class is a child class of the Command class. It represents the `bye` command which stops the","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * application and saves the undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     * ExitCommand constructor that allows the user to stop the application and save the undeleted tasks to the","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     * disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * Note: This is the only command that has a value of `true` in the isExit instance attribute.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Exit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * Executes the `bye` command by the user by attempting to save the undeleted tasks to the disk using the `storage`","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * instance. If the writing process encounters an exception, a failure message is printed by the `ui` instance to","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * inform the user that the command failed to write the undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * Lastly, a farewell message is printed out by the `ui` object to the user, which lists the undeleted tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        // Exit procedure","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        // 1. Write incomplete tasks to disk","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        String saveTaskText \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"            storage.writeToFile(saveTaskText);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"            String filePath \u003d getFormattedFilePath(storage);","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            ui.printSaveFailResponse(filePath);","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        // 2. Print exit message","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        ui.farewellUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    private String getFormattedFilePath(Storage storage) {","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        String filePath \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        filePath +\u003d storage.getSaveFilePath().substring(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        filePath \u003d filePath.replace(\"/\", \"\\\\\");","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        return filePath;","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":57}},{"path":"src/main/java/taskmate/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * The FindCommand class is a child class of the Command class. It represents the \"find `query`\" command which looks","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * for any undeleted tasks whose descriptions (or dates) match `query`.","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    private final String query;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * FindCommand constructor that allows the user to look for tasks that match `query`.","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    public FindCommand(String query) {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        this.query \u003d query.toLowerCase();","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Find\";","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        assert this.query !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        for (Task t : tasks.getAllTasks()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            boolean isMatchingTask \u003d t.toString().toLowerCase().contains(this.query);","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"            if (isMatchingTask) {","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        ui.printMatchingTasks(matchingTasks);","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"elhy1999":41}},{"path":"src/main/java/taskmate/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The HelpCommand class is a child class of the Command class. It represents the `help` command which allows the user","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" * to view the list of available commands and how each command should be formatted.","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"     * HelpCommand constructor that allows the user to create a `help` command that guides them to use TaskMate.","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    public HelpCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Help\";","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * Executes the `help` command by the user by printing out the list of available commands and how each command","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * should be formatted.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        ui.printInputSpecifications(storage.getAbsoluteSaveFilePath());","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":32}},{"path":"src/main/java/taskmate/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" * The ListCommand class is a child class of the Command class. It represents the `list` command which allows the","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * user to view the list of undeleted tasks, the status of each task (i.e. whether the task has been marked as","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * completed), and the type of each task (i.e. Todo, Deadline, or Event).","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     * ListCommand constructor creates a `list` command that provides information about each task.","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    public ListCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"List\";","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * Executes the `list` command by the user by printing out the list of undeleted tasks, the status of each task (ie.","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     *  * whether the task has been marked as completed), and the type of each task (i.e. Todo, Deadline, or Event).","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        ui.printAllTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":34}},{"path":"src/main/java/taskmate/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The MarkCommand class is a child class of the Command class. It represents the \"mark `markIndex`\" command which","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * marks tasks in the task list as completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    private final int markIndex;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * MarkCommand constructor that allows the developer to specify the index of the task to be marked as completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * @param markIndex the index of the task to be marked from the task list. This index is 1-based, which means","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     *                  the markIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public MarkCommand(int markIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Mark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.markIndex \u003d markIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Executes the `mark` command by the user by attempting to retrieve the task to be marked from the task list and","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * marking it. If the task cannot be found (i.e. invalid markIndex), a failure message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user that the mark command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            Task taskToMark \u003d tasks.getTask(this.markIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            tasks.markAsDone(taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"            // print message when marking","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulMarkResponse(taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":53}},{"path":"src/main/java/taskmate/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The TodoCommand class is the child class of the AddCommand class. It represents a \"todo\" tasks given by the user in","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * the following form: \"todo `name`\".","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class TodoCommand extends AddCommand {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"     * TodoCommand constructor that allows the developer to specify the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the todo task.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public TodoCommand(String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"todo\";","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * Executes the `todo` command by the user by creating a new Todo instance and adding it into the user\u0027s task","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * list, which is a TaskList instance `tasks`. Upon successful execution, a success message is printed by the `ui`","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * instance to inform the user about the successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        assert super.name !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        // 1. Create new to-do task","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        Task newTodoTask \u003d new Todo(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        // 2. Add to newTodoTask to tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(newTodoTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        // 3. Print successful task added message","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        ui.printSuccessfulAddTaskResponse(newTodoTask, tasks.getNumTotalTasks());","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":49}},{"path":"src/main/java/taskmate/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * The UnmarkCommand class is a child class of the Command class. It represents the \"unmark `unmarkIndex`\" command which","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * marks tasks in the task list as incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    private final int unmarkIndex;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * UnmarkCommand constructor that allows the developer to specify the index of the task to be marked as incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * @param unmarkIndex the index of the task to be unmarked from the task list. This index is 1-based, which means","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     *                    the unmarkIndex starts from 1 to the number of tasks available, rather than starting from 0.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    public UnmarkCommand(int unmarkIndex) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        this.commandType \u003d \"Unmark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.unmarkIndex \u003d unmarkIndex;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     * Executes the `unmark` command by the user by attempting to retrieve the task to be unmarked from the task list","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"     * and unmarking it. If the task cannot be found (i.e. invalid unmarkIndex), a failure message is printed by the","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * `ui` instance to inform the user that the unmark command failed to be executed.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * Upon successful execution, a success message is printed by the `ui` instance to inform the user about the","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * successful execution.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param tasks TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param ui Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            Task taskToUnmark \u003d tasks.getTask(this.unmarkIndex);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            tasks.markAsNotDone(taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"            // print message when unmarking","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulUnmarkResponse(taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":52}},{"path":"src/main/java/taskmate/commands/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.commands;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidDeadlineUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidEventUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidTodoUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":" * The UpdateCommand class is a child class of the Command class. It represents the \"update `int` `tag` `new_value`\"","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":" * command which updates task attributes in the task list.","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    private final HashMap\u003cString, String\u003e changes;","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    private final int updateIndex;","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     * UpdateCommand constructor that allows the developer to update the attributes of an existing task","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"     * @param updateIndex a one-indexed int that represents the task to be updated","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"     * @param changes a Hashmap that represents the changes to be made to the task","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    public UpdateCommand(int updateIndex, HashMap\u003cString, String\u003e changes) {","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        this.updateIndex \u003d updateIndex;","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        this.changes \u003d changes;","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * @param tasks   TaskList object that stores the list of undeleted tasks defined by the user.","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param ui      Ui object that deals with taking in user input and printing messages out to the user.","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param storage Storage object that saves undeleted tasks to the disk.","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            Task taskToUpdate \u003d tasks.getTask(this.updateIndex);","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            HashMap\u003cString, String\u003e successfulChanges \u003d tasks.updateTask(taskToUpdate, changes);","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            // print message after updating","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"            int zerothUpdateIndex \u003d updateIndex + 1; // convert from one-index to zero-index","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"            ui.printSuccessfulUpdateResponse(zerothUpdateIndex, successfulChanges);","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"            handleException(e, ui);","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    private void handleException(Exception e, Ui ui) {","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        if (e instanceof TaskNotFoundException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"            ui.printTaskNotFoundExceptionResponse();","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidTodoUpdateException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidTodoUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidDeadlineUpdateException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidDeadlineUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidEventUpdateException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidEventUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidToException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidToExceptionResponse();","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidByException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidByExceptionResponse();","lastModifiedDate":"2023-09-18"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidFromException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidFromExceptionResponse();","lastModifiedDate":"2023-09-18"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":73}},{"path":"src/main/java/taskmate/exceptions/ClauselessUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * ClauselessUpdateException is thrown when an update command is created, but there are no /name, /by, /from, or /to","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * clauses in the command.","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class ClauselessUpdateException extends InvalidDescriptionException {","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/EmptyByException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyByException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `deadline` command incorrectly, leaving the \"by\" clause of the `deadline` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyByException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyDescriptionException class is a child class of the InvalidDescriptionException class. It is thrown when the","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * user formats their task commands incorrectly, leaving the \"name\" clause of the command empty. The task commands","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * relevant to this EmptyDescriptionException class are the `todo`, `deadline`, and `event` commands.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class EmptyDescriptionException extends InvalidDescriptionException {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/EmptyFromException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyFromException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, leaving the \"from\" clause of the `event` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyFromException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/EmptyToException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The EmptyToException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, leaving the \"to\" clause of the `event` command empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class EmptyToException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/FileCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The FileCorruptedException class is a child class of the Exception class. It is thrown when the save file","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * is tampered with, causing some lines to be impossible to parse.","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class FileCorruptedException extends Exception {","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"    public FileCorruptedException(String message) {","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"        super(message);","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":11}},{"path":"src/main/java/taskmate/exceptions/InvalidAttributeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * InvalidAttributeException is raised when attempts are made to reference an attribute that does not exist","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"public class InvalidAttributeException extends InvalidDescriptionException {","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":7}},{"path":"src/main/java/taskmate/exceptions/InvalidByException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidByException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `deadline` command incorrectly, not writing the \"by\" clause of the `deadline` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"by\" clause empty. In such a case, an EmptyByException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidByException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/InvalidCommandTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidCommandTypeException class is a child class of the Exception class. It is thrown when the user specifies","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * an unidentified command. The list of identifiable commands can be found from the CommandTypes enum from the TaskMate","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * class.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class InvalidCommandTypeException extends Exception{","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/InvalidDeadlineUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * InvalidDeadlineUpdateException is raised when attempts are made to reference an attribute from a Deadline","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * task that does not exist","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class InvalidDeadlineUpdateException extends InvalidAttributeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidDescriptionException class is a child class of the Exception class. It is thrown when there are any issues","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * to do with the \"name\" clause of \"task commands\" such as empty \"name\" clauses. These task commands relevant to are the","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * `todo`, `deadline`, and `event` commands.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class InvalidDescriptionException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/InvalidEventUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * InvalidEventUpdateException is raised when attempts are made to reference an attribute from a Event","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * task that does not exist","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class InvalidEventUpdateException extends InvalidAttributeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/InvalidFromException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidFromException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, not writing the \"from\" clause of the `event` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"from\" clause empty. In such a case, an EmptyFromException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidFromException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/InvalidToException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The InvalidToException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `event` command incorrectly, not writing the \"to\" clause of the `event` command in the \"YYYY-mm-dd\" format.","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * This exception is not thrown when the user leaves the \"to\" clause empty. In such a case, an EmptyToException is","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * thrown instead.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class InvalidToException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/InvalidTodoUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * InvalidTodoUpdateException is raised when attempts are made to reference an attribute from a Todo","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * task that does not exist","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class InvalidTodoUpdateException extends InvalidAttributeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":8}},{"path":"src/main/java/taskmate/exceptions/NoDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The NoDataException class is a child class of the Exception class. It is thrown when there is an issue with reading","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * the file from the disk that stores the undeleted tasks. In particular, this exception is thrown when the file exists","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * on the disk, and it can be located, but the file content is empty.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * It is thrown by one of the TaskList constructor when reading the file contents from the disk.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"public class NoDataException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":10}},{"path":"src/main/java/taskmate/exceptions/NotAnIntegerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The NotAnIntegerException class is a child class of the Exception class. It is thrown when the user formats their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `mark`, `unmark`, or `delete` commands incorrectly, specifying the \"markIndex\", \"unmarkIndex\", or \"deleteIndex\"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * clauses respectively by using a non-integer value.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"public class NotAnIntegerException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":9}},{"path":"src/main/java/taskmate/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":" * The TaskNotFoundException class is a child class of the Exception class. It is thrown when the user inputs their","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":" * `mark`, `unmark`, or `delete` commands incorrectly, specifying the \"markIndex\", \"unmarkIndex\", or \"deleteIndex\"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":" * clauses with an integer that is outside the range of task indexes.","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":" * For example, if there are n tasks in the task list and the user specifies an integer smaller than 1 or greater","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * than n, this exception will be thrown.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":11}},{"path":"src/main/java/taskmate/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.main;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.ui.MainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * A GUI for TaskMate using FXML.","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final TaskMate taskMate \u003d new TaskMate();","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"            stage.setTitle(\"TaskMate GUI\");","lastModifiedDate":"2023-09-19"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setTaskMate(taskMate);","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":34}},{"path":"src/main/java/taskmate/main/TaskMate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.main;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.ClauselessUpdateException;","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.FileCorruptedException;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidCommandTypeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.NoDataException;","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.NotAnIntegerException;","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":" * TaskMate is the class whose objects represent task-tracking applications","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"public class TaskMate {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    private static final String CHATBOT_NAME \u003d \"TaskMate\";","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    private static final String DEFAULT_SAVE_TASK_FILE_PATH \u003d \"./data/saved_tasks.txt\";","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * An enum that represents the different command types which TaskMate supports","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    public enum CommandTypes {","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        list, bye, todo, deadline, event, mark, unmark, delete, help, find, update","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    TaskMate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        this.ui \u003d new Ui(CHATBOT_NAME);","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        this.storage \u003d new Storage(DEFAULT_SAVE_TASK_FILE_PATH);","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        // Load existing tasks from disk","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            String fileContents \u003d storage.readFromFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"            this.tasks \u003d new TaskList(fileContents);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"            handleException(e);","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        new TaskMate().run();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"     * Starts up TaskMate by greeting user and waiting for user command.","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"     * The method does not terminate until the user command \"bye\" is entered.","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        // Greets user","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        ui.greetUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        ui.promptUser();","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        // Reading user input","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        while (true) {","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"            String userInput \u003d ui.nextLine();","lastModifiedDate":"2023-09-18"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"            // Parse user input","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"                Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"                command.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"                if (command.getIsExit()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"                handleException(e);","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"    private void handleException(Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"        if (e instanceof ClauselessUpdateException) {","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"            ui.printClauselessUpdateExceptionResponse();","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof EmptyByException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyByExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidByException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidByExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidToException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidToExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof EmptyToException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyToExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidFromException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidFromExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof EmptyFromException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"            ui.printEmptyFromExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof NotAnIntegerException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            ui.printNotAnIntegerExceptionResponse();","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof IOException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"            ui.printFileNotFoundResponse(storage.getSaveFilePath());","lastModifiedDate":"2023-09-18"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof NoDataException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"            ui.printNoDataResponse();","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof FileCorruptedException) {","lastModifiedDate":"2023-09-18"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"            ui.printFileCorruptedResponse((FileCorruptedException) e);","lastModifiedDate":"2023-09-18"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        } else if (e instanceof InvalidCommandTypeException | e instanceof InvalidDescriptionException) {","lastModifiedDate":"2023-09-19"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidCommandTypeExceptionResponse();","lastModifiedDate":"2023-09-19"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"            ui.printInvalidCommandTypeExceptionResponse();","lastModifiedDate":"2023-09-19"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"     * Parses and executes the user\u0027s input and returns a String object that is TaskMate\u0027s reply to that user input.","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"     * @param userInput A String that represents the user\u0027s command","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"     * @return A String that represents TaskMate\u0027s reply to the user\u0027s command","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"        // Parse user input","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"            command.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"            handleException(e);","lastModifiedDate":"2023-09-18"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"        return ui.popStoredMessage();","lastModifiedDate":"2023-09-09"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":135}},{"path":"src/main/java/taskmate/tools/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-19"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.Command;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.DeadlineCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.DeleteCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.EventCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.ExitCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.FindCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.HelpCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.ListCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.MarkCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.TodoCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.UnmarkCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"import taskmate.commands.UpdateCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.ClauselessUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyDescriptionException;","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.EmptyToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidCommandTypeException;","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.NotAnIntegerException;","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.TaskMate;","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":" * This Parser class contains static methods that parse the user\u0027s input and maps it to Command objects, if possible.","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":" * Otherwise, in the case of invalid inputs, exceptions are thrown.","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * Reads the user input and returns a Command object that represents the input.","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param userInput A String object passed by the user representing their command to the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * @return A Command object that represents the String command passed by the user","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidCommandTypeException Thrown when the user passes an unrecognized command","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * @throws EmptyDescriptionException Thrown when the user does not provide a description for the command","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @throws EmptyByException Thrown when the user attempts to create a DeadlineCommand but does not specify the \"by\"","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     *                          clause","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidByException Thrown when the user attempts to create a DeadlineCommand but provides a \"by\" clause","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     *                          with incorrect formatting","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidToException Thrown when the user attempts to create a EventCommand but provides a \"to\" clause","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     *                           with incorrect formatting","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"     * @throws EmptyToException Thrown when the user attempts to create a EventCommand but does not specify the \"to\"","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     *                          clause","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidFromException Thrown when the user attempts to create a EventCommand but provides a \"from\" clause","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"     *                           with incorrect formatting","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"     * @throws EmptyFromException Thrown when the user attempts to create a EventCommand but does not specify the \"from\"","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"     *                          clause","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"     * @throws NotAnIntegerException Thrown when the user attempts to create mark/unmark/delete commands but does not","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     *                              specify an integer as the second argument","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    public static Command parse(String userInput) throws InvalidCommandTypeException, EmptyDescriptionException,","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"            EmptyByException, InvalidByException, InvalidToException, EmptyToException, InvalidFromException,","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"            EmptyFromException, NotAnIntegerException, ClauselessUpdateException {","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"        userInput \u003d userInput.trim(); // remove trailing whitespaces","lastModifiedDate":"2023-09-11"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        String commandType \u003d getCommandType(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        // bye","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        if (commandType.equals(TaskMate.CommandTypes.bye.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        // help","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.help.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        // list","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.list.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        // unmark i","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.unmark.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"            checkValidUnmarkCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"            int indexToUnmark \u003d getIndexToUnmark(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"            return new UnmarkCommand(indexToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        // mark i","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.mark.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"            checkValidMarkCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"            int indexToMark \u003d getIndexToMark(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"            return new MarkCommand(indexToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"        // to-do description","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.todo.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"            checkValidTodoCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"            String todoTaskName \u003d getTodoTaskName(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"            return new TodoCommand(todoTaskName);","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"        // deadline description /by date","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.deadline.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"            checkValidDeadlineCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"            String deadlineTaskName \u003d getDeadlineTaskName(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"            String deadlineTaskBy \u003d getDeadlineTaskBy(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"            return new DeadlineCommand(deadlineTaskName, deadlineTaskBy);","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"        // event description /from date /to date","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.event.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"            checkValidEventCommand(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"            String eventTaskName \u003d getEventTaskName(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"            String eventTaskFrom \u003d getEventTaskFrom(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"            String eventTaskTo \u003d getEventTaskTo(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"            return new EventCommand(eventTaskName, eventTaskFrom, eventTaskTo);","lastModifiedDate":"2023-09-18"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        // delete i","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.delete.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            checkValidDeleteCommand(userInput);","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"            int indexToDelete \u003d getIndexToDelete(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"            return new DeleteCommand(indexToDelete);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"        // find query","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.find.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"            checkValidFindCommand(userInput);","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"            String query \u003d getFindQuery(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"            return new FindCommand(query);","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"        // update i \u003cattribute\u003e \u003cchange\u003e \u003cattribute\u003e \u003cchange\u003e ...","lastModifiedDate":"2023-09-18"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"        } else if (commandType.equals(TaskMate.CommandTypes.update.toString())) {","lastModifiedDate":"2023-09-18"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"            checkValidUpdateCommand(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"            int indexToUpdate \u003d getIndexToUpdate(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"            HashMap\u003cString, String\u003e changes \u003d getChangesToUpdate(userInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"            return new UpdateCommand(indexToUpdate, changes);","lastModifiedDate":"2023-09-18"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"        // Invalid input","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"     * Returns the type of command input by the user","lastModifiedDate":"2023-09-18"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"     * Possible values: \"to\\-do\", \"deadline\", \"event\", \"bye\", \"list\", \"mark\", \"unmark\", \"find\"","lastModifiedDate":"2023-09-18"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"     * @param userInput a String object representing the raw user input","lastModifiedDate":"2023-09-18"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"     * @return a String object that represents the user input\u0027s command type","lastModifiedDate":"2023-09-18"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidCommandTypeException thrown when the command entered by the user is not recognized","lastModifiedDate":"2023-09-18"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"    public static String getCommandType(String userInput) throws InvalidCommandTypeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"        userInput \u003d userInput.trim();","lastModifiedDate":"2023-09-11"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"        for (TaskMate.CommandTypes type : TaskMate.CommandTypes.values()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"            String typeString \u003d type.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"            if (userInput.startsWith(typeString)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"                return typeString;","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"        throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"    private static int getIndexToUnmark(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"        int indexToUnmark \u003d Integer.parseInt(","lastModifiedDate":"2023-09-18"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"                userInput","lastModifiedDate":"2023-09-18"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"                        .substring(TaskMate.CommandTypes.unmark.toString().length())","lastModifiedDate":"2023-09-18"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"                        .trim());","lastModifiedDate":"2023-09-18"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"        indexToUnmark -\u003d 1;","lastModifiedDate":"2023-09-18"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"        return indexToUnmark;","lastModifiedDate":"2023-09-18"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"    private static int getIndexToMark(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"        int indexToMark \u003d Integer.parseInt(","lastModifiedDate":"2023-09-18"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"                userInput","lastModifiedDate":"2023-09-18"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"                        .substring(TaskMate.CommandTypes.mark.toString().length())","lastModifiedDate":"2023-09-18"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"                        .trim());","lastModifiedDate":"2023-09-18"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"        indexToMark -\u003d 1;","lastModifiedDate":"2023-09-18"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"        return indexToMark;","lastModifiedDate":"2023-09-18"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"    private static int getIndexToDelete(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"        int indexToDelete \u003d Integer.parseInt(","lastModifiedDate":"2023-09-18"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"                userInput","lastModifiedDate":"2023-09-18"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"                        .substring(TaskMate.CommandTypes.delete.toString().length())","lastModifiedDate":"2023-09-18"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"                        .trim());","lastModifiedDate":"2023-09-18"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"        indexToDelete -\u003d 1;","lastModifiedDate":"2023-09-18"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"        return indexToDelete;","lastModifiedDate":"2023-09-18"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"    private static int getIndexToUpdate(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"        int indexToUpdate \u003d Integer.parseInt(","lastModifiedDate":"2023-09-18"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"                userInput","lastModifiedDate":"2023-09-18"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"                        .substring(TaskMate.CommandTypes.update.toString().length())","lastModifiedDate":"2023-09-18"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"                        .trim()","lastModifiedDate":"2023-09-18"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"                        .split(\"\\\\s+\")[0]);","lastModifiedDate":"2023-09-18"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"        indexToUpdate -\u003d 1;","lastModifiedDate":"2023-09-18"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"        return indexToUpdate;","lastModifiedDate":"2023-09-18"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"    private static HashMap\u003cString, String\u003e getChangesToUpdate(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"        HashMap\u003cString, String\u003e changesMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-18"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"        // Use a regular expression to match \"update \u003cnumber\u003e \"","lastModifiedDate":"2023-09-19"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"        String pattern \u003d \"^update\\\\s\\\\d+\\\\s\";","lastModifiedDate":"2023-09-19"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"        String changesAsString \u003d userInput.replaceFirst(pattern, \"\");","lastModifiedDate":"2023-09-19"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"        // Extract the user-specified changes and store them in changesMap","lastModifiedDate":"2023-09-19"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"        String[] tokens \u003d changesAsString.split(\"\\\\s+\");","lastModifiedDate":"2023-09-19"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"        String[] clauses \u003d new String[] {\"/name\", \"/by\", \"/from\", \"/to\"};","lastModifiedDate":"2023-09-19"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"        String currentClause \u003d null;","lastModifiedDate":"2023-09-19"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"        for (String token : tokens) {","lastModifiedDate":"2023-09-19"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"            boolean equalsAtLeastOneClause \u003d Arrays.asList(clauses).contains(token);","lastModifiedDate":"2023-09-19"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"            if (equalsAtLeastOneClause) {","lastModifiedDate":"2023-09-19"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"                currentClause \u003d token.trim();","lastModifiedDate":"2023-09-19"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"            } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"                if (!changesMap.containsKey(currentClause)) {","lastModifiedDate":"2023-09-19"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"                    changesMap.put(currentClause, \"\");","lastModifiedDate":"2023-09-19"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"                }","lastModifiedDate":"2023-09-19"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"                String newValue \u003d changesMap.get(currentClause) + \" \" + token;","lastModifiedDate":"2023-09-19"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"                changesMap.put(currentClause, newValue.trim());","lastModifiedDate":"2023-09-19"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":203,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"        return changesMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":205,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"    private static String getFindQuery(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":208,"author":{"gitId":"elhy1999"},"content":"        return userInput","lastModifiedDate":"2023-09-18"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"                .substring(TaskMate.CommandTypes.find.toString().length())","lastModifiedDate":"2023-09-18"},{"lineNumber":210,"author":{"gitId":"elhy1999"},"content":"                .trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":212,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"    private static String getTodoTaskName(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.todo.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"        return userInput.substring(delimiter.length()).trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"    private static String getDeadlineTaskName(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.deadline.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"        String removedDeadlineWord \u003d userInput.substring(delimiter.length()).trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"        String deadlineTaskName \u003d removedDeadlineWord.split(\" /\")[0];","lastModifiedDate":"2023-09-18"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"        return deadlineTaskName.trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":223,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":225,"author":{"gitId":"elhy1999"},"content":"    private static String getDeadlineTaskBy(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":226,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.deadline.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":227,"author":{"gitId":"elhy1999"},"content":"        String removedDeadlineWord \u003d userInput.substring(delimiter.length()).trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":228,"author":{"gitId":"elhy1999"},"content":"        String deadlineTaskBy \u003d removedDeadlineWord.split(\" /\")[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":229,"author":{"gitId":"elhy1999"},"content":"        return deadlineTaskBy.replace(\"by\", \"\").trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":230,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":231,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":232,"author":{"gitId":"elhy1999"},"content":"    private static String getEventTaskName(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":233,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.event.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":234,"author":{"gitId":"elhy1999"},"content":"        String removedEventWord \u003d userInput.substring(delimiter.length()).trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":235,"author":{"gitId":"elhy1999"},"content":"        String eventTaskName \u003d removedEventWord.split(\"/\")[0];","lastModifiedDate":"2023-09-18"},{"lineNumber":236,"author":{"gitId":"elhy1999"},"content":"        return eventTaskName.trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":237,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":238,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":239,"author":{"gitId":"elhy1999"},"content":"    private static String getEventTaskFrom(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":240,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.event.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":241,"author":{"gitId":"elhy1999"},"content":"        String removedEventWord \u003d userInput.substring(delimiter.length()).trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":242,"author":{"gitId":"elhy1999"},"content":"        String eventTaskFrom \u003d removedEventWord.split(\"/\")[1];","lastModifiedDate":"2023-09-18"},{"lineNumber":243,"author":{"gitId":"elhy1999"},"content":"        return eventTaskFrom.replace(\"from\", \"\").trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":244,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":245,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":246,"author":{"gitId":"elhy1999"},"content":"    private static String getEventTaskTo(String userInput) {","lastModifiedDate":"2023-09-18"},{"lineNumber":247,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d TaskMate.CommandTypes.event.toString();","lastModifiedDate":"2023-09-18"},{"lineNumber":248,"author":{"gitId":"elhy1999"},"content":"        String removedEventWord \u003d userInput.substring(delimiter.length() + 1);","lastModifiedDate":"2023-09-18"},{"lineNumber":249,"author":{"gitId":"elhy1999"},"content":"        String eventTaskFrom \u003d removedEventWord.split(\"/\")[2];","lastModifiedDate":"2023-09-18"},{"lineNumber":250,"author":{"gitId":"elhy1999"},"content":"        return eventTaskFrom.replace(\"to\", \"\").trim();","lastModifiedDate":"2023-09-18"},{"lineNumber":251,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":252,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":253,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":254,"author":{"gitId":"elhy1999"},"content":"     * Checks if \"to-do\" command is valid by checking if there is text coming after the word \"to-do\"","lastModifiedDate":"2023-09-18"},{"lineNumber":255,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":256,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidTodoCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":257,"author":{"gitId":"elhy1999"},"content":"            EmptyDescriptionException {","lastModifiedDate":"2023-09-18"},{"lineNumber":258,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.CommandTypes.todo.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":259,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.CommandTypes.todo.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":261,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":262,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":263,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":266,"author":{"gitId":"elhy1999"},"content":"     * Checks if \"deadline\" command is valid by checking if there is text coming after the word \"deadline\"","lastModifiedDate":"2023-09-18"},{"lineNumber":267,"author":{"gitId":"elhy1999"},"content":"     * Additionally, checks if there is a \"/by \" substring within userInput, and if the date after \"/by \" substring","lastModifiedDate":"2023-09-18"},{"lineNumber":268,"author":{"gitId":"elhy1999"},"content":"     * can be parsed into a date","lastModifiedDate":"2023-09-18"},{"lineNumber":269,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":270,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidDeadlineCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":271,"author":{"gitId":"elhy1999"},"content":"            EmptyDescriptionException, EmptyByException, InvalidByException {","lastModifiedDate":"2023-09-12"},{"lineNumber":272,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.CommandTypes.deadline.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":273,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":274,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.CommandTypes.deadline.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":275,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":276,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(\"/by \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":277,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyByException();","lastModifiedDate":"2023-08-30"},{"lineNumber":278,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":279,"author":{"gitId":"elhy1999"},"content":"            String delimiter \u003d \"/by \";","lastModifiedDate":"2023-08-30"},{"lineNumber":280,"author":{"gitId":"elhy1999"},"content":"            String byInput \u003d userInput.substring(userInput.indexOf(delimiter) + delimiter.length());","lastModifiedDate":"2023-08-30"},{"lineNumber":281,"author":{"gitId":"elhy1999"},"content":"            boolean isValidDateFormat \u003d checkValidDateFormat(byInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":282,"author":{"gitId":"elhy1999"},"content":"            if (!isValidDateFormat) {","lastModifiedDate":"2023-09-18"},{"lineNumber":283,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidByException();","lastModifiedDate":"2023-08-30"},{"lineNumber":284,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":285,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":286,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":287,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":288,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":289,"author":{"gitId":"elhy1999"},"content":"     * Checks if \"deadline\" command is valid by checking if there is text coming after the word \"deadline\"","lastModifiedDate":"2023-09-18"},{"lineNumber":290,"author":{"gitId":"elhy1999"},"content":"     * Additionally, checks if there are \"/from \" and \"/to \" substrings within userInput, and if the dates after","lastModifiedDate":"2023-09-18"},{"lineNumber":291,"author":{"gitId":"elhy1999"},"content":"     * \"/from \" and \"/to \" substrings can be parsed into a date","lastModifiedDate":"2023-09-18"},{"lineNumber":292,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":293,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidEventCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":294,"author":{"gitId":"elhy1999"},"content":"            EmptyDescriptionException,","lastModifiedDate":"2023-09-18"},{"lineNumber":295,"author":{"gitId":"elhy1999"},"content":"            EmptyFromException, InvalidFromException, EmptyToException, InvalidToException {","lastModifiedDate":"2023-09-12"},{"lineNumber":296,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":297,"author":{"gitId":"elhy1999"},"content":"        String fromDelimiter \u003d \"/from \";","lastModifiedDate":"2023-08-30"},{"lineNumber":298,"author":{"gitId":"elhy1999"},"content":"        String toDelimiter \u003d \"/to \";","lastModifiedDate":"2023-08-30"},{"lineNumber":299,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":300,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.CommandTypes.event.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":301,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":302,"author":{"gitId":"elhy1999"},"content":"        } else if (userInput.substring(TaskMate.CommandTypes.event.toString().length()).isEmpty()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":303,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-08-30"},{"lineNumber":304,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(fromDelimiter)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":305,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyFromException();","lastModifiedDate":"2023-08-30"},{"lineNumber":306,"author":{"gitId":"elhy1999"},"content":"        } else if (!userInput.contains(toDelimiter)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":307,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyToException();","lastModifiedDate":"2023-08-30"},{"lineNumber":308,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":309,"author":{"gitId":"elhy1999"},"content":"            // Testing from clause","lastModifiedDate":"2023-08-30"},{"lineNumber":310,"author":{"gitId":"elhy1999"},"content":"            String fromInput \u003d userInput.substring(userInput.indexOf(fromDelimiter) + fromDelimiter.length(),","lastModifiedDate":"2023-09-12"},{"lineNumber":311,"author":{"gitId":"elhy1999"},"content":"                    userInput.indexOf(toDelimiter)).trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":312,"author":{"gitId":"elhy1999"},"content":"            boolean isValidDateFormat \u003d checkValidDateFormat(fromInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":313,"author":{"gitId":"elhy1999"},"content":"            if (!isValidDateFormat) {","lastModifiedDate":"2023-09-18"},{"lineNumber":314,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidFromException();","lastModifiedDate":"2023-08-30"},{"lineNumber":315,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":316,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":317,"author":{"gitId":"elhy1999"},"content":"            // Testing to clause","lastModifiedDate":"2023-08-30"},{"lineNumber":318,"author":{"gitId":"elhy1999"},"content":"            String toInput \u003d userInput.substring(userInput.indexOf(toDelimiter) + toDelimiter.length())","lastModifiedDate":"2023-09-12"},{"lineNumber":319,"author":{"gitId":"elhy1999"},"content":"                    .trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":320,"author":{"gitId":"elhy1999"},"content":"            isValidDateFormat \u003d checkValidDateFormat(toInput);","lastModifiedDate":"2023-09-18"},{"lineNumber":321,"author":{"gitId":"elhy1999"},"content":"            if (!isValidDateFormat) {","lastModifiedDate":"2023-09-18"},{"lineNumber":322,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidToException();","lastModifiedDate":"2023-08-30"},{"lineNumber":323,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":324,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":325,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":326,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":327,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":328,"author":{"gitId":"elhy1999"},"content":"     * Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-09-18"},{"lineNumber":329,"author":{"gitId":"elhy1999"},"content":"     * by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-09-18"},{"lineNumber":330,"author":{"gitId":"elhy1999"},"content":"     * followed by an integer","lastModifiedDate":"2023-09-18"},{"lineNumber":331,"author":{"gitId":"elhy1999"},"content":"     * Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-09-18"},{"lineNumber":332,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":333,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidMarkCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":334,"author":{"gitId":"elhy1999"},"content":"            NotAnIntegerException {","lastModifiedDate":"2023-09-18"},{"lineNumber":335,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":336,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":337,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.CommandTypes.mark.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":338,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":339,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":340,"author":{"gitId":"elhy1999"},"content":"        indexWithinList \u003d userInput.substring(TaskMate.CommandTypes.mark.toString().length()).trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":341,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":342,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":343,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":344,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":345,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":346,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":347,"author":{"gitId":"elhy1999"},"content":"     * Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-09-18"},{"lineNumber":348,"author":{"gitId":"elhy1999"},"content":"     * by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-09-18"},{"lineNumber":349,"author":{"gitId":"elhy1999"},"content":"     * followed by an integer","lastModifiedDate":"2023-09-18"},{"lineNumber":350,"author":{"gitId":"elhy1999"},"content":"     * Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-09-18"},{"lineNumber":351,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":352,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidUnmarkCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":353,"author":{"gitId":"elhy1999"},"content":"            NotAnIntegerException {","lastModifiedDate":"2023-09-18"},{"lineNumber":354,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":355,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":356,"author":{"gitId":"elhy1999"},"content":"        if (!userInput.startsWith(TaskMate.CommandTypes.unmark.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":357,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":358,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":359,"author":{"gitId":"elhy1999"},"content":"        indexWithinList \u003d userInput.substring(TaskMate.CommandTypes.unmark.toString().length()).trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":360,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":361,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":362,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":363,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":364,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":365,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":366,"author":{"gitId":"elhy1999"},"content":"     * Checks if the user input command is a valid \"mark\" or \"unmark\" command","lastModifiedDate":"2023-09-18"},{"lineNumber":367,"author":{"gitId":"elhy1999"},"content":"     * by checking if the command starts with \"mark\"/\"unmark\", followed by a whitespace,","lastModifiedDate":"2023-09-18"},{"lineNumber":368,"author":{"gitId":"elhy1999"},"content":"     * followed by an integer","lastModifiedDate":"2023-09-18"},{"lineNumber":369,"author":{"gitId":"elhy1999"},"content":"     * Note: Does not check if the integer is within the size of TaskList object","lastModifiedDate":"2023-09-18"},{"lineNumber":370,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":371,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidDeleteCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-18"},{"lineNumber":372,"author":{"gitId":"elhy1999"},"content":"            NotAnIntegerException {","lastModifiedDate":"2023-09-18"},{"lineNumber":373,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":374,"author":{"gitId":"elhy1999"},"content":"        String indexWithinList;","lastModifiedDate":"2023-08-30"},{"lineNumber":375,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":376,"author":{"gitId":"elhy1999"},"content":"        if (userInput.startsWith(TaskMate.CommandTypes.delete.toString())) {","lastModifiedDate":"2023-09-12"},{"lineNumber":377,"author":{"gitId":"elhy1999"},"content":"            indexWithinList \u003d userInput.substring(TaskMate.CommandTypes.delete.toString().length()).trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":378,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":379,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":380,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":381,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":382,"author":{"gitId":"elhy1999"},"content":"        if (!checkStringIsInteger(indexWithinList)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":383,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-08-30"},{"lineNumber":384,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":385,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":386,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":387,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":388,"author":{"gitId":"elhy1999"},"content":"     * Returns true if String s can be parsed into an Integer object, and false otherwise","lastModifiedDate":"2023-09-18"},{"lineNumber":389,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":390,"author":{"gitId":"elhy1999"},"content":"    private static boolean checkStringIsInteger(String s) {","lastModifiedDate":"2023-09-18"},{"lineNumber":391,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":392,"author":{"gitId":"elhy1999"},"content":"            Integer.parseInt(s);","lastModifiedDate":"2023-08-30"},{"lineNumber":393,"author":{"gitId":"elhy1999"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":394,"author":{"gitId":"elhy1999"},"content":"            return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":395,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":396,"author":{"gitId":"elhy1999"},"content":"        return true;","lastModifiedDate":"2023-08-30"},{"lineNumber":397,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":398,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":399,"author":{"gitId":"elhy1999"},"content":"    private static boolean checkValidDateFormat(String dateString) {","lastModifiedDate":"2023-09-18"},{"lineNumber":400,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":401,"author":{"gitId":"elhy1999"},"content":"            LocalDate.parse(dateString);","lastModifiedDate":"2023-09-18"},{"lineNumber":402,"author":{"gitId":"elhy1999"},"content":"            return true;","lastModifiedDate":"2023-09-18"},{"lineNumber":403,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":404,"author":{"gitId":"elhy1999"},"content":"            return false;","lastModifiedDate":"2023-09-18"},{"lineNumber":405,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":406,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":407,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":408,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidFindCommand(String userInput) throws EmptyDescriptionException,","lastModifiedDate":"2023-09-18"},{"lineNumber":409,"author":{"gitId":"elhy1999"},"content":"            InvalidCommandTypeException {","lastModifiedDate":"2023-09-18"},{"lineNumber":410,"author":{"gitId":"elhy1999"},"content":"        boolean isStartingWithFind \u003d userInput.startsWith(TaskMate.CommandTypes.find + \" \");","lastModifiedDate":"2023-09-12"},{"lineNumber":411,"author":{"gitId":"elhy1999"},"content":"        boolean hasEmptyQuery \u003d userInput.substring(TaskMate.CommandTypes.find.toString().length()).trim().isEmpty();","lastModifiedDate":"2023-09-12"},{"lineNumber":412,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":413,"author":{"gitId":"elhy1999"},"content":"        if (!isStartingWithFind) {","lastModifiedDate":"2023-09-03"},{"lineNumber":414,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-09-03"},{"lineNumber":415,"author":{"gitId":"elhy1999"},"content":"        } else if (hasEmptyQuery) {","lastModifiedDate":"2023-09-03"},{"lineNumber":416,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-09-03"},{"lineNumber":417,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":418,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":419,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":420,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":421,"author":{"gitId":"elhy1999"},"content":"     * Checks the following cases:","lastModifiedDate":"2023-09-19"},{"lineNumber":422,"author":{"gitId":"elhy1999"},"content":"     * 1. The update command starts with the word \"update\"","lastModifiedDate":"2023-09-19"},{"lineNumber":423,"author":{"gitId":"elhy1999"},"content":"     * 2. The update command has a description","lastModifiedDate":"2023-09-19"},{"lineNumber":424,"author":{"gitId":"elhy1999"},"content":"     * 3. The update command contains a slash (/)","lastModifiedDate":"2023-09-19"},{"lineNumber":425,"author":{"gitId":"elhy1999"},"content":"     * 4. The update command contains an integer after \"update \"","lastModifiedDate":"2023-09-19"},{"lineNumber":426,"author":{"gitId":"elhy1999"},"content":"     * Throws exception if any of the above are not fulfilled","lastModifiedDate":"2023-09-19"},{"lineNumber":427,"author":{"gitId":"elhy1999"},"content":"     * @param userInput a String object representing the raw update command from the user","lastModifiedDate":"2023-09-19"},{"lineNumber":428,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidCommandTypeException thrown when case 1 is not satisfied","lastModifiedDate":"2023-09-19"},{"lineNumber":429,"author":{"gitId":"elhy1999"},"content":"     * @throws EmptyDescriptionException thrown when case 2 is not satisfied","lastModifiedDate":"2023-09-19"},{"lineNumber":430,"author":{"gitId":"elhy1999"},"content":"     * @throws ClauselessUpdateException thrown when case 3 is not satisfied","lastModifiedDate":"2023-09-19"},{"lineNumber":431,"author":{"gitId":"elhy1999"},"content":"     * @throws NotAnIntegerException thrown when case 4 is not satisfied","lastModifiedDate":"2023-09-19"},{"lineNumber":432,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":433,"author":{"gitId":"elhy1999"},"content":"    private static void checkValidUpdateCommand(String userInput) throws InvalidCommandTypeException,","lastModifiedDate":"2023-09-19"},{"lineNumber":434,"author":{"gitId":"elhy1999"},"content":"            EmptyDescriptionException, ClauselessUpdateException, NotAnIntegerException {","lastModifiedDate":"2023-09-19"},{"lineNumber":435,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":436,"author":{"gitId":"elhy1999"},"content":"        String[] tokens \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-09-18"},{"lineNumber":437,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":438,"author":{"gitId":"elhy1999"},"content":"        boolean isStartingWithUpdate \u003d userInput.startsWith(TaskMate.CommandTypes.update + \" \");","lastModifiedDate":"2023-09-18"},{"lineNumber":439,"author":{"gitId":"elhy1999"},"content":"        if (!isStartingWithUpdate) {","lastModifiedDate":"2023-09-19"},{"lineNumber":440,"author":{"gitId":"elhy1999"},"content":"            throw new InvalidCommandTypeException();","lastModifiedDate":"2023-09-19"},{"lineNumber":441,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":442,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":443,"author":{"gitId":"elhy1999"},"content":"        boolean hasEmptyQuery \u003d userInput.substring(TaskMate.CommandTypes.update.toString().length()).trim().isEmpty();","lastModifiedDate":"2023-09-18"},{"lineNumber":444,"author":{"gitId":"elhy1999"},"content":"        if (hasEmptyQuery) {","lastModifiedDate":"2023-09-19"},{"lineNumber":445,"author":{"gitId":"elhy1999"},"content":"            System.out.println(\"test\"); // todo remove","lastModifiedDate":"2023-09-19"},{"lineNumber":446,"author":{"gitId":"elhy1999"},"content":"            throw new EmptyDescriptionException();","lastModifiedDate":"2023-09-19"},{"lineNumber":447,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":448,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":449,"author":{"gitId":"elhy1999"},"content":"        String[] clauses \u003d new String[] {\" /name \", \" /by \", \" /from \", \" /to \"};","lastModifiedDate":"2023-09-19"},{"lineNumber":450,"author":{"gitId":"elhy1999"},"content":"        boolean containsAtLeastOneClause \u003d Arrays.stream(clauses).anyMatch(userInput::contains);","lastModifiedDate":"2023-09-19"},{"lineNumber":451,"author":{"gitId":"elhy1999"},"content":"        if (!containsAtLeastOneClause) {","lastModifiedDate":"2023-09-19"},{"lineNumber":452,"author":{"gitId":"elhy1999"},"content":"            throw new ClauselessUpdateException();","lastModifiedDate":"2023-09-19"},{"lineNumber":453,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":454,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":455,"author":{"gitId":"elhy1999"},"content":"        boolean updateIndexIsInteger \u003d checkStringIsInteger(tokens[1]);","lastModifiedDate":"2023-09-19"},{"lineNumber":456,"author":{"gitId":"elhy1999"},"content":"        if (!updateIndexIsInteger) {","lastModifiedDate":"2023-09-18"},{"lineNumber":457,"author":{"gitId":"elhy1999"},"content":"            throw new NotAnIntegerException();","lastModifiedDate":"2023-09-18"},{"lineNumber":458,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":459,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":460,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":460}},{"path":"src/main/java/taskmate/tools/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":" * This Storage class contains the methods to save the task data to the user\u0027s machine.","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * Its `saveFilePath` attribute is the relative file path to save the tasks data with respect to the current working","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * directory.","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" * Note: If the \"/data/\" directory does not exist in the specified file path, it will be created.","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final String saveFilePath;","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * A constructor for Storage objects to store tasks data to the user\u0027s machine. It takes in a relative file path to","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * save the data.","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * @param filePath A String object representing the relative file path to save the user\u0027s task data","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        assert filePath !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        this.saveFilePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    public String getSaveFilePath() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        return this.saveFilePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"    public String getAbsoluteSaveFilePath() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        return System.getProperty(\"user.dir\")","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"                + this.getSaveFilePath().substring(1).replace(\"/\", \"\\\\\");","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * Reads task data from `saveFilePath` and if the data can be found, returns it as a String object. If the file","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     * cannot be found at the path, an IOException is thrown.","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * @return A String object that contains the file contents of the previously saved task data","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * @throws IOException This exception is thrown when the file cannot be found at the specified data path","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    public String readFromFile() throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        Path filePath \u003d Path.of(saveFilePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        return Files.readString(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     * Writes `text` to the file path. If the file path does not exist, this method creates the directory to save the","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"     * tasks data.","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"     * @param text A String object representing the task data to be written to the file","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"     * @throws IOException An IOException is thrown when the file cannot be written into that folder","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    public void writeToFile(String text) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        assert saveFilePath !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"            Files.createDirectories(Paths.get(getDirectoryPath(saveFilePath)));","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace(System.out);","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        FileWriter fw \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        fw.write(text);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"    private static String getDirectoryPath(String filePath) {","lastModifiedDate":"2023-09-18"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        Path directoryPath \u003d path.getParent();","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"        if (directoryPath !\u003d null) {","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"            return directoryPath.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"            return null;","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":81}},{"path":"src/main/java/taskmate/tools/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.FileCorruptedException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidDeadlineUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidEventUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidTodoUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.NoDataException;","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.TaskNotFoundException;","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":" * This TaskList class represents the list of undeleted tasks that the user has","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    private int numTotalTasks \u003d 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    private int numIncompleteTasks \u003d 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * Constructs a TaskList object with the contents of the saved task file read from a Storage object.","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * @param contentsFromDisk A String object containing the saved task file contents","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @throws NoDataException Thrown when the task file is empty","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public TaskList(String contentsFromDisk) throws NoDataException, FileCorruptedException {","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        if (contentsFromDisk.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"            throw new NoDataException();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        String[] allTasksAsString \u003d contentsFromDisk.split(\"\\\\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        for (String taskAsString: allTasksAsString) {","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"            String taskType \u003d getSavedTaskType(taskAsString);","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            boolean taskIsDone \u003d getSavedTaskIsDone(taskAsString);","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"            switch (taskType) {","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            case \"T\": // To-do task","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d createTodoTaskFromSavedTask(taskAsString, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"                break;","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            case \"D\": // Deadline task","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d createDeadlineTaskFromSavedTask(taskAsString, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"                break;","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"            case \"E\": // Event task","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"                newTask \u003d createEventTaskFromSavedTask(taskAsString, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"                break;","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"            default: // Invalid event. Happens when the saved file is corrupted/tampered with","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"                throw new FileCorruptedException(\"Invalid task: \" + taskAsString);","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"            this.addTask(newTask, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"            System.out.println(\"Found and loaded saved task: \" + taskAsString);","lastModifiedDate":"2023-09-18"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    private String getSavedTaskType(String taskAsString) {","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        return taskAsString.substring(1, 2);","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"    private boolean getSavedTaskIsDone(String taskAsString) {","lastModifiedDate":"2023-09-18"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        return taskAsString.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-09-18"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    private Todo createTodoTaskFromSavedTask(String taskAsString, boolean taskIsDone) {","lastModifiedDate":"2023-09-18"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"        String name \u003d taskAsString.substring(7);","lastModifiedDate":"2023-09-18"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        return new Todo(name, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    private Deadline createDeadlineTaskFromSavedTask(String taskAsString, boolean taskIsDone) {","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d \"(by: \";","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        int indexOfByParam \u003d taskAsString.lastIndexOf(delimiter);","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        String name \u003d taskAsString.substring(7, indexOfByParam);","lastModifiedDate":"2023-09-18"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"        String by \u003d taskAsString.substring(indexOfByParam + delimiter.length(), taskAsString.length() - 1);","lastModifiedDate":"2023-09-18"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        return new Deadline(name, by, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"    private Event createEventTaskFromSavedTask(String taskAsString, boolean taskIsDone) {","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"        String delimiter \u003d \"(from: \";","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"        String delimiter2 \u003d \" to: \";","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"        int indexOfFromParam \u003d taskAsString.lastIndexOf(delimiter);","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"        int indexOfToParam \u003d taskAsString.lastIndexOf(delimiter2);","lastModifiedDate":"2023-09-18"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        String name \u003d taskAsString.substring(7, indexOfFromParam);","lastModifiedDate":"2023-09-18"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        String from \u003d taskAsString.substring(indexOfFromParam + delimiter.length(), indexOfToParam);","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"        String to \u003d taskAsString.substring(indexOfToParam + delimiter2.length(), taskAsString.length() - 1);","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        return new Event(name, from, to, taskIsDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"     * Adds a Task object t","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"     * @param t A Task object representing the task to be added","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"        this.tasks.add(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        numTotalTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        numIncompleteTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"     * Adds a Task object t and marks it as done if isDone \u003d\u003d true","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"     * @param t A Task object representing the task to be added","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"     * @param isDone A boolean variable representing if the task to be added is completed","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"    public void addTask(Task t, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"        this.addTask(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"        if (!isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"            return;","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"        assert this.tasks.contains(t);","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"            this.markAsDone(t);","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"            // Assertion above guarantees that t can be found within tasks so no TaskNotFoundException will be thrown","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"     * Removes a Task object t","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"     * @param i An int variable representing the 1-based index of the task to be removed","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"     * @throws TaskNotFoundException Thrown when i is outside of the range [max(0, tasks.size()), tasks.size()]","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"    public void removeTask(int i) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        boolean indexOutOfBounds \u003d i \u003e tasks.size() | i \u003c 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"        if (indexOutOfBounds) {","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        Task t \u003d tasks.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"        tasks.remove(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"        if (t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"        numTotalTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"     * Marks an existing task as done","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"     * @param t A Task object representing the task to be marked as done","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"     * @throws TaskNotFoundException Thrown when t cannot be found","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"    public void markAsDone(Task t) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"        if (!this.tasks.contains(t)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"        if (!t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"            t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks--;","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"     * Unmarks an existing task from done to not done","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"     * @param t A Task object representing the task to be unmarked as done","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"     * @throws TaskNotFoundException Thrown when t cannot be found","lastModifiedDate":"2023-09-12"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"    public void markAsNotDone(Task t) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"        if (!this.tasks.contains(t)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"        if (t.getIsDone()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"            t.markAsNotDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"            numIncompleteTasks++;","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"     * Updates attributes of a task to a new value","lastModifiedDate":"2023-09-18"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"     * @param taskToUpdate a Task object representing the task to be updated","lastModifiedDate":"2023-09-18"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"     * @param changes a Hashmap that contains the attribute changes to be made to taskToUpdate","lastModifiedDate":"2023-09-18"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"     * @return a HashMap containing the successful updates to taskToUpdate","lastModifiedDate":"2023-09-18"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"     * @throws TaskNotFoundException thrown when taskToUpdate is not in the list of undeleted tasks","lastModifiedDate":"2023-09-18"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidTodoUpdateException thrown when taskToUpdate is a Todo task but the update is invalid","lastModifiedDate":"2023-09-18"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidDeadlineUpdateException thrown when taskToUpdate is a Deadline task but the update is invalid","lastModifiedDate":"2023-09-18"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"     * @throws InvalidEventUpdateException thrown when taskToUpdate is a Event task but the update is invalid","lastModifiedDate":"2023-09-18"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"    public HashMap\u003cString, String\u003e updateTask(Task taskToUpdate, HashMap\u003cString, String\u003e changes) throws","lastModifiedDate":"2023-09-18"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"            TaskNotFoundException, InvalidTodoUpdateException, InvalidDeadlineUpdateException, InvalidByException,","lastModifiedDate":"2023-09-18"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"            InvalidToException, InvalidEventUpdateException, InvalidFromException {","lastModifiedDate":"2023-09-18"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"        if (!this.tasks.contains(taskToUpdate)) {","lastModifiedDate":"2023-09-18"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-09-18"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"        return taskToUpdate.update(changes);","lastModifiedDate":"2023-09-18"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"     * @return an ArrayList of tasks representing the user\u0027s undeleted tasks","lastModifiedDate":"2023-09-18"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-09-03"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"    public int getNumTotalTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"        return this.numTotalTasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":205,"author":{"gitId":"elhy1999"},"content":"     * Returns the task specified by an index i (Note: one-indexed)","lastModifiedDate":"2023-09-18"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"     * @param i an int representing the one-indexed task in the user\u0027s task list","lastModifiedDate":"2023-09-18"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"     * @return a Task object at the one-indexed i in the user\u0027s task list","lastModifiedDate":"2023-09-18"},{"lineNumber":208,"author":{"gitId":"elhy1999"},"content":"     * @throws TaskNotFoundException thrown when the value of i is not between 1 (inclusive) and # of tasks (inclusive)","lastModifiedDate":"2023-09-18"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":210,"author":{"gitId":"elhy1999"},"content":"    public Task getTask(int i) throws TaskNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"        boolean indexOutOfBounds \u003d i \u003e tasks.size() | i \u003c 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"elhy1999"},"content":"        if (indexOutOfBounds) {","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"        return tasks.get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"     * Returns a String which contains all task-related information to be saved to the disk.","lastModifiedDate":"2023-09-12"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"     * @return A String object representing all data about the user\u0027s tasks","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"    public String formatAllTasksForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"elhy1999"},"content":"        StringBuilder returnString \u003d new StringBuilder();","lastModifiedDate":"2023-09-12"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"        for (Task t : getAllTasks()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"elhy1999"},"content":"            returnString.append(t.formatTaskForSaving());","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"elhy1999"},"content":"            returnString.append(\"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":227,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"elhy1999"},"content":"        return returnString.toString();","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":230,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":230}},{"path":"src/main/java/taskmate/tools/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.FileCorruptedException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * The Ui class deals with all interactions with the user. It contains methods to take in inputs from the user, as well","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * as methods to print out replies to the user.","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    private static final String HORIZONTAL_LINE \u003d \"--------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    private final String chatbotName;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    private String storedMessage;","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * A constructor for Ui objects that takes in the chatbot\u0027s name as one of its inputs. It is thus customizable to","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * other chatbots with different names.","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * Note: At initialization, a Scanner object is created to take in user input from System.in.","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * @param chatbotName A String object that represents the name of the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    public Ui(String chatbotName) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        this.chatbotName \u003d chatbotName;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * This method sets `storedMessage` to String `s`. It is only supposed to run after a message is popped using the","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * `popStoredMessage` method, which sets `storedMessage` to null. If this condition is not adhered (ie. running","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     * `setStoredMessage` consecutively without running `popStoredMessage`, an AssertionError will be raised.","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param s A String object that represents the last-printed item by the Ui object","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    public void setStoredMessage(String s) {","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        assert this.storedMessage \u003d\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        this.storedMessage \u003d s;","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * When the Ui object prints a reply, this reply is set to `storedMessage` via the setStoredMessage function. Since","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     * the GUI requires Strings to be passed in order to display them, this method is used to return the last-printed","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * String.","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     * After retrieving the last-printed String, `storedMessage` is reset back to null.","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"     * @return a String object representing the last-printed String by the Ui object to `System.out`","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"    public String popStoredMessage() {","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        assert this.storedMessage !\u003d null;","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        String s \u003d this.storedMessage;","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        this.storedMessage \u003d null;","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        return s;","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    public String nextLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    public void greetUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Hello I\u0027m \" + chatbotName + \"\\n\\nPlease call for `help` if you need anything!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    public void promptUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Input your command below:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"    public void farewellUser() {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"     * This method prints out `text` in a formatted way, enveloping it with horizontal lines for aesthetic purposes. It","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"     * prints the result out to `System.out`.","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"     * @param text A String object representing the formatted reply by the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    public void printMessage(String text) {","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        // prints text with horizontal lines above and below it","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        System.out.println(text);","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        System.out.println();","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"        this.setStoredMessage(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"     * This method takes in a TaskList object as input and iterates through all the tasks in it, printing each one of","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"     * them out sequentially.","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"     * @param tasks A TaskList object that represents the undeleted tasks stored by the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"    public void printAllTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        StringBuilder allTasksString \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"        for (int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"            Task newTask \u003d tasks.getAllTasks().get(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"            allTasksString.append((i + 1)).append(\".\").append(newTask.toString()).append(\"\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"        printMessage(allTasksString.toString());","lastModifiedDate":"2023-09-11"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"     * This method is run only when the user inputs a \"help\" command, in which case, the instructions of how to use the","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"     * chatbot is printed onto `System.out`. It takes in a String fileSavePath to print out the directory on the user\u0027s","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"     * machine where their data will be stored.","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"     * @param fileSavePath A String representing the (relative) file path to save the user\u0027s data","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"    public void printInputSpecifications(String fileSavePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Please enter your commands:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Adding Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Todo tasks: todo \u003cname\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Deadline tasks: deadline \u003cname\u003e /by \u003cdate\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"3. Event tasks: event \u003cname\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Marking and Unmarking Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Marking tasks as completed: mark \u003cinteger\u003e\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Unmarking tasks as incompleted: unmark \u003cinteger\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Deleting Tasks:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. delete \u003cinteger\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Updating Tasks:\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. update \u003cinteger\u003e \u003cTAG\u003e \u003cnewValue\u003e ...\\n\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"TAG\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Todo Task: /name newName\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Deadline Task: /name newName AND/OR /by newBy\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Event Task: /name newName AND/OR /from newFrom AND/OR /to newTo\\n\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"newValue\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"/name: name of task\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"/by, /from, /to: must be of the form \u0027YYYY-mm-dd\u0027\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"...: More \u0027\u003cTAG\u003e \u003cnewValue\u003e\u0027 pairs\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Listing Tasks:\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Listing down all your tasks: list\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Listing down tasks that match a specific keyword / keyphrase: find \u003cquery\u003e\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Others:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"1. Quit and save data: bye\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"2. Manual: help\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"FYI: Your data is saved locally in: \" + fileSavePath + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"        message +\u003d HORIZONTAL_LINE + \"\\n\";","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidCommandTypeExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OOPS!!!:( I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-19"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"     * The chatbot\u0027s reply upon successful deletion of a task is printed out to `System.out`.","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"     * @param taskToDelete A Task object representing the task the user intended to delete","lastModifiedDate":"2023-09-12"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"     * @param numTotalTasks An int variable that represents the number of remaining tasks after deleting the task","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulDeleteResponse(Task taskToDelete, int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Noted. I\u0027ve removed this task:\\n  \" + taskToDelete.toString() + \"\\nNow you have \"","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"                + numTotalTasks + \" task(s) in the list.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulMarkResponse(Task taskToMark) {","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskToMark);","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulUnmarkResponse(Task taskToUnmark) {","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\" + taskToUnmark);","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"     * The chatbot\u0027s reply upon successful addition of a task is printed out to `System.out`.","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"     * @param newTask A Task object representing the task the user intended to add","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"     * @param numTotalTasks An int variable that represents the number of remaining tasks after adding the task","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulAddTaskResponse(Task newTask, int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Got it. I\u0027ve added this task:\\n  \" + newTask + \"\\nNow you have \" + numTotalTasks","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"                + \" task(s) in the list.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidMarkOrUnmarkResponse(int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OOPS!!!:( The description of a mark/unmark must be between 1 and \" + numTotalTasks + \".\");","lastModifiedDate":"2023-09-19"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyByExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"By clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyToExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"To clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyFromExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"From clause cannot be empty!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidByExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"By clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidToExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"To clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidFromExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"From clause must be in the following format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"    public void printEmptyTodoDescriptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OOPS!!!:( The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidDeleteResponse(int numTotalTasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OOPS!!!:( The description of a delete must be between 1 and \" + numTotalTasks + \".\");","lastModifiedDate":"2023-09-19"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"    public void printNotAnIntegerExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Please enter a valid integer (E.g. mark 1, unmark 8, delete 3, update 2 \u003cTAG\u003e \u003cnewValue\u003e...)\");","lastModifiedDate":"2023-09-19"},{"lineNumber":223,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"elhy1999"},"content":"    public void printFileNotFoundResponse(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"No previous datafile found in \" + filePath + \". Creating new task list for you!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"elhy1999"},"content":"    public void printTaskNotFoundExceptionResponse() {","lastModifiedDate":"2023-08-30"},{"lineNumber":230,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"OOPS!!!:( No such task exists in your task list\");","lastModifiedDate":"2023-09-19"},{"lineNumber":231,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":233,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":234,"author":{"gitId":"elhy1999"},"content":"     * Prints message for when the file exists in the user\u0027s data directory. However, no data is found there.","lastModifiedDate":"2023-09-12"},{"lineNumber":235,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":236,"author":{"gitId":"elhy1999"},"content":"    public void printNoDataResponse() {","lastModifiedDate":"2023-09-12"},{"lineNumber":237,"author":{"gitId":"elhy1999"},"content":"        printMessage(\"Datafile located. However, it is empty. Creating a new task list for you!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":238,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":239,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"elhy1999"},"content":"    public void printSaveFailResponse(String savePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":241,"author":{"gitId":"elhy1999"},"content":"        System.out.println(\"Failed to write to \" + savePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":242,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":243,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":244,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":245,"author":{"gitId":"elhy1999"},"content":"     * This method is run only when the user inputs a \"find\" command, in which case, this method prints the tasks that","lastModifiedDate":"2023-09-12"},{"lineNumber":246,"author":{"gitId":"elhy1999"},"content":"     * match the user\u0027s input query.","lastModifiedDate":"2023-09-12"},{"lineNumber":247,"author":{"gitId":"elhy1999"},"content":"     * @param matchingTasks An ArrayList object that stores the matching tasks to be printed out","lastModifiedDate":"2023-09-12"},{"lineNumber":248,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":249,"author":{"gitId":"elhy1999"},"content":"    public void printMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":250,"author":{"gitId":"elhy1999"},"content":"        StringBuilder message \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":251,"author":{"gitId":"elhy1999"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":252,"author":{"gitId":"elhy1999"},"content":"            Task newTask \u003d matchingTasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":253,"author":{"gitId":"elhy1999"},"content":"            message.append((i + 1)).append(\".\").append(newTask.toString()).append(\"\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":254,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":255,"author":{"gitId":"elhy1999"},"content":"        printMessage(message.toString());","lastModifiedDate":"2023-09-11"},{"lineNumber":256,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":257,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":258,"author":{"gitId":"elhy1999"},"content":"    public void printFileCorruptedResponse(FileCorruptedException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":259,"author":{"gitId":"elhy1999"},"content":"        printMessage(e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":260,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":261,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":262,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":263,"author":{"gitId":"elhy1999"},"content":"     * The chatbot\u0027s reply upon successful updating of a task is printed out to `System.out`.","lastModifiedDate":"2023-09-18"},{"lineNumber":264,"author":{"gitId":"elhy1999"},"content":"     * @param updateIndex An int index in the task list that is updated","lastModifiedDate":"2023-09-18"},{"lineNumber":265,"author":{"gitId":"elhy1999"},"content":"     * @param successfulChanges An ArrayList of successful updates","lastModifiedDate":"2023-09-18"},{"lineNumber":266,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":267,"author":{"gitId":"elhy1999"},"content":"    public void printSuccessfulUpdateResponse(int updateIndex, HashMap\u003cString, String\u003e successfulChanges) {","lastModifiedDate":"2023-09-18"},{"lineNumber":268,"author":{"gitId":"elhy1999"},"content":"        StringBuilder message \u003d new StringBuilder(\"Updates successfully made to task \" + updateIndex + \":\\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":269,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : successfulChanges.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":270,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":271,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":272,"author":{"gitId":"elhy1999"},"content":"            message.append(attribute)","lastModifiedDate":"2023-09-18"},{"lineNumber":273,"author":{"gitId":"elhy1999"},"content":"                    .append(\": \")","lastModifiedDate":"2023-09-18"},{"lineNumber":274,"author":{"gitId":"elhy1999"},"content":"                    .append(newValue)","lastModifiedDate":"2023-09-18"},{"lineNumber":275,"author":{"gitId":"elhy1999"},"content":"                    .append(\"\\n\");","lastModifiedDate":"2023-09-18"},{"lineNumber":276,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":277,"author":{"gitId":"elhy1999"},"content":"        printMessage(message.toString());","lastModifiedDate":"2023-09-18"},{"lineNumber":278,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":279,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":280,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":281,"author":{"gitId":"elhy1999"},"content":"     * Prints message when unsuccessful update to Todo task is made","lastModifiedDate":"2023-09-18"},{"lineNumber":282,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":283,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidTodoUpdateException() {","lastModifiedDate":"2023-09-18"},{"lineNumber":284,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Invalid update to Todo task!\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":285,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Syntax (for Todo tasks): update \u003cinteger\u003e /name \u003cnewName\u003e\";","lastModifiedDate":"2023-09-18"},{"lineNumber":286,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-09-18"},{"lineNumber":287,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":288,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":289,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":290,"author":{"gitId":"elhy1999"},"content":"     * Prints message when unsuccessful update to Deadline task is made","lastModifiedDate":"2023-09-18"},{"lineNumber":291,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":292,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidDeadlineUpdateException() {","lastModifiedDate":"2023-09-18"},{"lineNumber":293,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Invalid update to Deadline task!\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":294,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Syntax (for Deadline tasks): update \u003cinteger\u003e /name \u003cnewName\u003e /by \u003cYYYY-mm-dd\u003e\";","lastModifiedDate":"2023-09-18"},{"lineNumber":295,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-09-18"},{"lineNumber":296,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":297,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":298,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":299,"author":{"gitId":"elhy1999"},"content":"     * Prints message when unsuccessful update to Event task is made","lastModifiedDate":"2023-09-18"},{"lineNumber":300,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":301,"author":{"gitId":"elhy1999"},"content":"    public void printInvalidEventUpdateException() {","lastModifiedDate":"2023-09-18"},{"lineNumber":302,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Invalid update to Event task!\\n\";","lastModifiedDate":"2023-09-18"},{"lineNumber":303,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Syntax (for Event tasks): update \u003cinteger\u003e /name \u003cnewName\u003e /from \u003cYYYY-mm-dd\u003e /to \u003cYYYY-mm-dd\u003e\";","lastModifiedDate":"2023-09-18"},{"lineNumber":304,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-09-18"},{"lineNumber":305,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":306,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":307,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":308,"author":{"gitId":"elhy1999"},"content":"     * Prints message when the user makes an update command without any clauses","lastModifiedDate":"2023-09-19"},{"lineNumber":309,"author":{"gitId":"elhy1999"},"content":"     * Possible clauses: /name, /by, /from, /to","lastModifiedDate":"2023-09-19"},{"lineNumber":310,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":311,"author":{"gitId":"elhy1999"},"content":"    public void printClauselessUpdateExceptionResponse() {","lastModifiedDate":"2023-09-19"},{"lineNumber":312,"author":{"gitId":"elhy1999"},"content":"        String message \u003d \"Invalid update command format!\\n\";","lastModifiedDate":"2023-09-19"},{"lineNumber":313,"author":{"gitId":"elhy1999"},"content":"        message +\u003d \"Syntax for update command: update \u003cinteger\u003e \u003cTAG\u003e \u003cnewValue\u003e ...\";","lastModifiedDate":"2023-09-19"},{"lineNumber":314,"author":{"gitId":"elhy1999"},"content":"        printMessage(message);","lastModifiedDate":"2023-09-19"},{"lineNumber":315,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":316,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":316}},{"path":"src/main/java/taskmate/tools/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidDeadlineUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":" * The Deadline class is a child class of the Task class that represents a \u0027Deadline\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    private LocalDate by;","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a String in the form \"YYYY-mm-dd\" to be parsed to a","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        assert by !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, and a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"     * the date that this task must be completed. This date must be a `LocalDate` instance.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, LocalDate by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        assert by !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * Deadline constructor that allows the developer to specify the name of the task, a date that represents the date","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     * that this task must be completed, and a boolean that represents if the task has been completed. This date must be","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"     * a String in the form \"YYYY-mm-dd\" to be parsed to a `LocalDate` object.","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"     * @param by the date that the deadline task has to be completed. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    public Deadline(String name, String by, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"        assert by !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        return \"Deadline\";","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"    String getByFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"    String getBy() {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        return this.by.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    public HashMap\u003cString, String\u003e update(HashMap\u003cString, String\u003e changes) throws InvalidDeadlineUpdateException,","lastModifiedDate":"2023-09-18"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"            InvalidByException {","lastModifiedDate":"2023-09-18"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        HashMap\u003cString, String\u003e successfulUpdates \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-18"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"        // Check if update command is valid","lastModifiedDate":"2023-09-18"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"            if (!attribute.equals(\"/name\") \u0026 !attribute.equals(\"/by\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidDeadlineUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/by\") \u0026 !super.checkValidDateFormat(newValue)) {","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidByException();","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"            if (attribute.equals(\"/name\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"                setName(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"                successfulUpdates.put(\"name\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/by\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"                setBy(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"                successfulUpdates.put(\"by\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"        return successfulUpdates;","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"    private void setName(String newName) {","lastModifiedDate":"2023-09-18"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d newName;","lastModifiedDate":"2023-09-18"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"    private void setBy(String newBy) {","lastModifiedDate":"2023-09-18"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"        this.by \u003d LocalDate.parse(newBy);","lastModifiedDate":"2023-09-18"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        return \"[D][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (by: \" + this.getByFormatted() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"        return \"[D][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (by: \" + this.getBy() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":120}},{"path":"src/main/java/taskmate/tools/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidEventUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":" * The Event class is a child class of the Task class that represents a \u0027Event\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    private LocalDate startDatetime;","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    private LocalDate endDatetime;","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"     * be String instances in the form \"YYYY-mm-dd\" to be parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, String startDatetime, String endDatetime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        assert startDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        assert endDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d LocalDate.parse(startDatetime);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d LocalDate.parse(endDatetime);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, and a date that represents the date that this task ends. These dates must be","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts.","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends.","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, LocalDate startDatetime, LocalDate endDatetime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        assert startDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        assert endDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d startDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d endDatetime;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"     * Event constructor that allows the developer to specify the name of the task, a date that represents","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"     * the date that this task starts, a date that represents the date that this task ends, and a boolean that","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     * represents if the task has been completed. These dates must be String instances in the form \"YYYY-mm-dd\" to be","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"     * parsed to `LocalDate` instances.","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"     * @param startDatetime the date that the event task starts. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"     * @param endDatetime the date that the event task ends. It has to be of the form \"YYYY-mm-dd\".","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    public Event(String name, String startDatetime, String endDatetime, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        assert startDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        assert endDatetime !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d LocalDate.parse(startDatetime);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d LocalDate.parse(endDatetime);","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        return \"Event\";","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    String getStartDatetimeFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        return this.startDatetime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"    String getEndDatetimeFormatted() {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        return this.endDatetime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"    String getStartDatetime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"        return this.startDatetime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"    String getEndDatetime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        return this.endDatetime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"    public HashMap\u003cString, String\u003e update(HashMap\u003cString, String\u003e changes) throws InvalidEventUpdateException,","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"            InvalidFromException, InvalidToException {","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"        HashMap\u003cString, String\u003e successfulUpdates \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"        // Check if update command is valid","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"            if (!attribute.equals(\"/name\") \u0026 !attribute.equals(\"/from\") \u0026 !attribute.equals(\"/to\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidEventUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/from\") \u0026 !super.checkValidDateFormat(newValue)) {","lastModifiedDate":"2023-09-18"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidFromException();","lastModifiedDate":"2023-09-18"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/to\") \u0026 !super.checkValidDateFormat(newValue)) {","lastModifiedDate":"2023-09-18"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidToException();","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"            if (attribute.equals(\"/name\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"                setName(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"                successfulUpdates.put(\"name\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/from\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"                setStartDatetime(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"                successfulUpdates.put(\"from\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"            } else if (attribute.equals(\"/to\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"                setEndDatetime(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"                successfulUpdates.put(\"to\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"            } else {","lastModifiedDate":"2023-09-18"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidEventUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        return successfulUpdates;","lastModifiedDate":"2023-09-18"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"    private void setName(String newName) {","lastModifiedDate":"2023-09-18"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d newName;","lastModifiedDate":"2023-09-18"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"    private void setStartDatetime(String newStartDatetime) {","lastModifiedDate":"2023-09-18"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        this.startDatetime \u003d LocalDate.parse(newStartDatetime);","lastModifiedDate":"2023-09-18"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"    private void setEndDatetime(String newEndDatetime) {","lastModifiedDate":"2023-09-18"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"        this.endDatetime \u003d LocalDate.parse(newEndDatetime);","lastModifiedDate":"2023-09-18"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"        return \"[E][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (from: \"","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"                + this.getStartDatetimeFormatted() + \" to: \" + this.getEndDatetimeFormatted() + \")\";","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"        return \"[E][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name + \" (from: \"","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"                + this.getStartDatetime() + \" to: \" + this.getEndDatetime() + \")\";","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":153}},{"path":"src/main/java/taskmate/tools/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidByException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidDeadlineUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidEventUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidFromException;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidTodoUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":" * The Task class is an abstract class that represents a task specified by the user. It can be of type `Todo`,","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":" * `Deadline`, or `Event`.","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    protected String name;","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"     * Task constructor that allows the developer to specify the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    Task(String name) {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        assert name !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"     * Task constructor that allows the developer to specify the name of the task and whether the task has been","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"     * completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"     * @param name the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"     * @param isDone a boolean variable that represents if the task has been completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    Task(String name, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        assert name !\u003d null;","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     * Sets the isDone instance attribute to true.","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"     * Sets the isDone instance attribute to false.","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"     * Gets the isDone instance attribute.","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"     * @return a String object representing the name of the Task instance.","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        return this.name;","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"     * Gets the type of the task. It can be of type `Todo`, `Deadline`, or `Event`.","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"    abstract String getTaskType();","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"     * Formats the Task instance in a way that is written to the disk. The format is as follows:","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"     * \"[A][B] `name` ...\"","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"     * A: A character representing the task type (\u0027T\u0027 for \u0027Todo\u0027, \u0027D\u0027 for \u0027Deadline\u0027, \u0027E\u0027 for \u0027Event\u0027).","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"     * B: A character representing if the task has been completed. \u0027X\u0027 for completed, \u0027 \u0027 for incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"     * `name`: The name of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"     * ...: Other information about the task such as the \"by\" clause (for \u0027Deadline\u0027 type tasks), and \"from\" \u0026 \"to\"","lastModifiedDate":"2023-09-03"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"     * clauses (for \u0027Event\u0027 type tasks).","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"     * Example 1:","lastModifiedDate":"2023-09-03"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"     * [T][ ] Read book","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"     * Example 2:","lastModifiedDate":"2023-09-03"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"     * [D][X] Complete CS2103 Assignment (by: 2023-01-01)","lastModifiedDate":"2023-09-03"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"     * Example 3:","lastModifiedDate":"2023-09-03"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"     * [E][ ] Attend career fair (from: 2023-01-02 to: 2023-01-03)","lastModifiedDate":"2023-09-03"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"     * @return a String that formats the information about the Task instance to be written to the disk. The type of","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"     *         information is explained above.","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"    public abstract String formatTaskForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"    public abstract HashMap\u003cString, String\u003e update(HashMap\u003cString, String\u003e changes) throws InvalidTodoUpdateException,","lastModifiedDate":"2023-09-18"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"            InvalidDeadlineUpdateException, InvalidEventUpdateException, InvalidByException, InvalidFromException,","lastModifiedDate":"2023-09-18"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            InvalidToException;","lastModifiedDate":"2023-09-18"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"    protected boolean checkValidDateFormat(String dateString) {","lastModifiedDate":"2023-09-18"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"            LocalDate.parse(dateString);","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"            return true;","lastModifiedDate":"2023-09-18"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"            return false;","lastModifiedDate":"2023-09-18"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-18"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"elhy1999":116}},{"path":"src/main/java/taskmate/tools/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidTodoUpdateException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":" * The Todo class is a child class of the Task class that represents a \u0027Todo\u0027 type task specified by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"        super(name);","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    public HashMap\u003cString, String\u003e update(HashMap\u003cString, String\u003e changes) throws InvalidTodoUpdateException {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        HashMap\u003cString, String\u003e successfulUpdates \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        // Check if update command is valid","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"            String attribute \u003d attributeValuePair.getKey();","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"            if (!attribute.equals(\"/name\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"                throw new InvalidTodoUpdateException();","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        for (HashMap.Entry\u003cString, String\u003e attributeValuePair : changes.entrySet()) {","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            String newValue \u003d attributeValuePair.getValue();","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            setName(newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            successfulUpdates.put(\"name\", newValue);","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        return successfulUpdates;","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    private void setName(String newName) {","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        this.name \u003d newName;","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    String getTaskType() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        return \"Todo\";","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        return \"[T][\" + (this.getIsDone() ? \u0027X\u0027 : \u0027 \u0027) + \"] \" + this.name;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    public String formatTaskForSaving() {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"        return this.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"elhy1999":57}},{"path":"src/main/java/taskmate/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        dialog.setFont(Font.font(\"Courier New\", 11));","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        HBox.setMargin(displayPicture, new Insets(0, 5, 0, 5));","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"    public static DialogBox getTaskMateDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":65}},{"path":"src/main/java/taskmate/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"import taskmate.main.TaskMate;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"    private TaskMate t;","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"            .getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"    private final Image taskmateImage \u003d new Image(Objects.requireNonNull(this.getClass()","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"            .getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"    public void setTaskMate(TaskMate t) {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        this.t \u003d t;","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        String response \u003d t.getResponse(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"                DialogBox.getTaskMateDialog(response, taskmateImage)","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"            System.exit(0);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":60}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" minHeight\u003d\"-Infinity\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"taskmate.ui.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"            \u003cFont name\u003d\"Courier New\" size\u003d\"11.0\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #a4c6fc;\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"         \u003ccontent\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #a4c6fc;\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"                  \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"109.0\" prefWidth\u003d\"400.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"                     \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"                        \u003cImageView fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"                           \u003cimage\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"                              \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"                           \u003c/image\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"                           \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"                              \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"                           \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"                        \u003c/ImageView\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"                        \u003cLabel ellipsisString\u003d\"\" text\u003d\"Hello I\u0027m TaskMate! Please call for `help` if you need anything!\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"                           \u003copaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"                              \u003cInsets /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"                           \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"                           \u003cfont\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"                              \u003cFont name\u003d\"Courier New\" size\u003d\"11.0\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"                           \u003c/font\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"                        \u003c/Label\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"                     \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"                     \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"                     \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"                  \u003c/HBox\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"               \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"         \u003c/content\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"  \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"elhy1999":54}},{"path":"src/test/java/taskmate/tools/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.exceptions.InvalidCommandTypeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_normalCommands_success() {","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        String deadlineCommand \u003d \"deadline this is some long task by the user /by 2021-01-01\";","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(deadlineCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"deadline\");","lastModifiedDate":"2023-09-11"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        String deleteCommand \u003d \"delete 10243\";","lastModifiedDate":"2023-09-11"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(deleteCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"delete\");","lastModifiedDate":"2023-09-11"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"        String eventCommand \u003d \"event another event task /from 1999-12-01 /to 2035-06-30\";","lastModifiedDate":"2023-09-11"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(eventCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"event\");","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        String exitCommand \u003d \"bye\";","lastModifiedDate":"2023-09-11"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(exitCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"bye\");","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"        String findCommand \u003d \"find 243\";","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(findCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"find\");","lastModifiedDate":"2023-09-11"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"        String helpCommand \u003d \"help\";","lastModifiedDate":"2023-09-11"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(helpCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"help\");","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        String listCommand \u003d \"list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(listCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"list\");","lastModifiedDate":"2023-09-11"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"        String markCommand \u003d \"mark 90\";","lastModifiedDate":"2023-09-11"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(markCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"mark\");","lastModifiedDate":"2023-09-11"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"        String todoCommand \u003d \"todo go to buy groceries\";","lastModifiedDate":"2023-09-11"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(todoCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"todo\");","lastModifiedDate":"2023-09-11"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        String unmarkCommand \u003d \"unmark 90\";","lastModifiedDate":"2023-09-11"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(unmarkCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"unmark\");","lastModifiedDate":"2023-09-11"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_normalCommandsWithTrailingWhitespaces_success() {","lastModifiedDate":"2023-09-11"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"        String deadlineCommand \u003d \" deadline this is some long task by the user /by 2021-01-01\";","lastModifiedDate":"2023-09-11"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(deadlineCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"deadline\");","lastModifiedDate":"2023-09-11"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":110,"author":{"gitId":"elhy1999"},"content":"        String deleteCommand \u003d \" delete 10243\";","lastModifiedDate":"2023-09-11"},{"lineNumber":111,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":112,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(deleteCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":113,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"delete\");","lastModifiedDate":"2023-09-11"},{"lineNumber":114,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":115,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":116,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":117,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":118,"author":{"gitId":"elhy1999"},"content":"        String eventCommand \u003d \" event another event task /from 1999-12-01 /to 2035-06-30\";","lastModifiedDate":"2023-09-11"},{"lineNumber":119,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":120,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(eventCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":121,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"event\");","lastModifiedDate":"2023-09-11"},{"lineNumber":122,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":123,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":124,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":125,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":126,"author":{"gitId":"elhy1999"},"content":"        String exitCommand \u003d \" bye \";","lastModifiedDate":"2023-09-11"},{"lineNumber":127,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":128,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(exitCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":129,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"bye\");","lastModifiedDate":"2023-09-11"},{"lineNumber":130,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":131,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":132,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":133,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":134,"author":{"gitId":"elhy1999"},"content":"        String findCommand \u003d \" find 243\";","lastModifiedDate":"2023-09-11"},{"lineNumber":135,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":136,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(findCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":137,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"find\");","lastModifiedDate":"2023-09-11"},{"lineNumber":138,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":139,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":140,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":141,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":142,"author":{"gitId":"elhy1999"},"content":"        String helpCommand \u003d \" help \";","lastModifiedDate":"2023-09-11"},{"lineNumber":143,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":144,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(helpCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":145,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"help\");","lastModifiedDate":"2023-09-11"},{"lineNumber":146,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":147,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":148,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":149,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":150,"author":{"gitId":"elhy1999"},"content":"        String listCommand \u003d \" list \";","lastModifiedDate":"2023-09-11"},{"lineNumber":151,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":152,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(listCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":153,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"list\");","lastModifiedDate":"2023-09-11"},{"lineNumber":154,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":155,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":156,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":157,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":158,"author":{"gitId":"elhy1999"},"content":"        String markCommand \u003d \" mark 90\";","lastModifiedDate":"2023-09-11"},{"lineNumber":159,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":160,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(markCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":161,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"mark\");","lastModifiedDate":"2023-09-11"},{"lineNumber":162,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":163,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":164,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":165,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":166,"author":{"gitId":"elhy1999"},"content":"        String todoCommand \u003d \" todo go to buy groceries\";","lastModifiedDate":"2023-09-11"},{"lineNumber":167,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":168,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(todoCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":169,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"todo\");","lastModifiedDate":"2023-09-11"},{"lineNumber":170,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":171,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":172,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":173,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":174,"author":{"gitId":"elhy1999"},"content":"        String unmarkCommand \u003d \" unmark 90\";","lastModifiedDate":"2023-09-11"},{"lineNumber":175,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":176,"author":{"gitId":"elhy1999"},"content":"            String parsedCommandType \u003d Parser.getCommandType(unmarkCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":177,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommandType, \"unmark\");","lastModifiedDate":"2023-09-11"},{"lineNumber":178,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":179,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":180,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":181,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":182,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":183,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":184,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":185,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_unrecognizedCommand_exceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"elhy1999"},"content":"        String invalidCommand \u003d \"goodbye\";","lastModifiedDate":"2023-09-11"},{"lineNumber":187,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":188,"author":{"gitId":"elhy1999"},"content":"            Parser.getCommandType(invalidCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":189,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":190,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":191,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-11"},{"lineNumber":192,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":193,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":194,"author":{"gitId":"elhy1999"},"content":"        String typoCommand \u003d \"umark\";","lastModifiedDate":"2023-09-11"},{"lineNumber":195,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":196,"author":{"gitId":"elhy1999"},"content":"            Parser.getCommandType(typoCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":197,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":198,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":199,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-11"},{"lineNumber":200,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":201,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":202,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":203,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":204,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_emptyCommand_exceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":205,"author":{"gitId":"elhy1999"},"content":"        String emptyCommand \u003d \"\";","lastModifiedDate":"2023-09-11"},{"lineNumber":206,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-11"},{"lineNumber":207,"author":{"gitId":"elhy1999"},"content":"            Parser.getCommandType(emptyCommand);","lastModifiedDate":"2023-09-11"},{"lineNumber":208,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-11"},{"lineNumber":209,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-11"},{"lineNumber":210,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-11"},{"lineNumber":211,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-11"},{"lineNumber":212,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":213,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":214,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":215,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_correctCommandButTypo_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":216,"author":{"gitId":"elhy1999"},"content":"        String typoUpdateCommand \u003d \"update1\";","lastModifiedDate":"2023-09-20"},{"lineNumber":217,"author":{"gitId":"elhy1999"},"content":"        String parsedCommand;","lastModifiedDate":"2023-09-20"},{"lineNumber":218,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":219,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoUpdateCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"update\");","lastModifiedDate":"2023-09-20"},{"lineNumber":221,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":222,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":223,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":224,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":225,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":226,"author":{"gitId":"elhy1999"},"content":"        String typoTodoCommand \u003d \"todoread book\";","lastModifiedDate":"2023-09-20"},{"lineNumber":227,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoTodoCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":229,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"todo\");","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":231,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":232,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":233,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":234,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":235,"author":{"gitId":"elhy1999"},"content":"        String typoDeadlineCommand \u003d \"deadlineread book\";","lastModifiedDate":"2023-09-20"},{"lineNumber":236,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":237,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoDeadlineCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":238,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":239,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":240,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":241,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":242,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":243,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":244,"author":{"gitId":"elhy1999"},"content":"        String typoEventCommand \u003d \"event\";","lastModifiedDate":"2023-09-20"},{"lineNumber":245,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":246,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoEventCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":247,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":248,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":249,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":250,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":251,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":252,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":253,"author":{"gitId":"elhy1999"},"content":"        String typoListCommand \u003d \"list tasks\";","lastModifiedDate":"2023-09-20"},{"lineNumber":254,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":255,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoListCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":256,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"list\");","lastModifiedDate":"2023-09-20"},{"lineNumber":257,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":258,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":259,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":260,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":261,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":262,"author":{"gitId":"elhy1999"},"content":"        String typoFindCommand \u003d \"findquery\";","lastModifiedDate":"2023-09-20"},{"lineNumber":263,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":264,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoFindCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":265,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"find\");","lastModifiedDate":"2023-09-20"},{"lineNumber":266,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":267,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":268,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":269,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":270,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":271,"author":{"gitId":"elhy1999"},"content":"        String typoMarkCommand \u003d \"mark1\";","lastModifiedDate":"2023-09-20"},{"lineNumber":272,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":273,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoMarkCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":274,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"mark\");","lastModifiedDate":"2023-09-20"},{"lineNumber":275,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":276,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":277,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":278,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":279,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":280,"author":{"gitId":"elhy1999"},"content":"        String typoUnmarkCommand \u003d \"unmark201384792378141\";","lastModifiedDate":"2023-09-20"},{"lineNumber":281,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":282,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoUnmarkCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":283,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"unmark\");","lastModifiedDate":"2023-09-20"},{"lineNumber":284,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":285,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":286,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":287,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":288,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":289,"author":{"gitId":"elhy1999"},"content":"        String typoHelpCommand \u003d \"help me\";","lastModifiedDate":"2023-09-20"},{"lineNumber":290,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":291,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoHelpCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":292,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"help\");","lastModifiedDate":"2023-09-20"},{"lineNumber":293,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":294,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":295,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":296,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":297,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":298,"author":{"gitId":"elhy1999"},"content":"        String typoByeCommand \u003d \"byebye\";","lastModifiedDate":"2023-09-20"},{"lineNumber":299,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":300,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoByeCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":301,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"bye\");","lastModifiedDate":"2023-09-20"},{"lineNumber":302,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":303,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":304,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":305,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":306,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":307,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":308,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":309,"author":{"gitId":"elhy1999"},"content":"    public void getCommandType_correctCommandButEmptyDescription_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":310,"author":{"gitId":"elhy1999"},"content":"        String typoUpdateCommand \u003d \"update\";","lastModifiedDate":"2023-09-20"},{"lineNumber":311,"author":{"gitId":"elhy1999"},"content":"        String parsedCommand;","lastModifiedDate":"2023-09-20"},{"lineNumber":312,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":313,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoUpdateCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":314,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"update\");","lastModifiedDate":"2023-09-20"},{"lineNumber":315,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":316,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":317,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":318,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":319,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":320,"author":{"gitId":"elhy1999"},"content":"        String typoTodoCommand \u003d \"todo\";","lastModifiedDate":"2023-09-20"},{"lineNumber":321,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":322,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoTodoCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":323,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"todo\");","lastModifiedDate":"2023-09-20"},{"lineNumber":324,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":325,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":326,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":327,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":328,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":329,"author":{"gitId":"elhy1999"},"content":"        String typoDeadlineCommand \u003d \"deadline\";","lastModifiedDate":"2023-09-20"},{"lineNumber":330,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":331,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoDeadlineCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":332,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":333,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":334,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":335,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":336,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":337,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":338,"author":{"gitId":"elhy1999"},"content":"        String typoEventCommand \u003d \"event\";","lastModifiedDate":"2023-09-20"},{"lineNumber":339,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":340,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoEventCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":341,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":342,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":343,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":344,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":345,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":346,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":347,"author":{"gitId":"elhy1999"},"content":"        String typoFindCommand \u003d \"find\";","lastModifiedDate":"2023-09-20"},{"lineNumber":348,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":349,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoFindCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":350,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"find\");","lastModifiedDate":"2023-09-20"},{"lineNumber":351,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":352,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":353,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":354,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":355,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":356,"author":{"gitId":"elhy1999"},"content":"        String typoMarkCommand \u003d \"mark\";","lastModifiedDate":"2023-09-20"},{"lineNumber":357,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":358,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoMarkCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":359,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"mark\");","lastModifiedDate":"2023-09-20"},{"lineNumber":360,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":361,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":362,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":363,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":364,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":365,"author":{"gitId":"elhy1999"},"content":"        String typoUnmarkCommand \u003d \"unmark\";","lastModifiedDate":"2023-09-20"},{"lineNumber":366,"author":{"gitId":"elhy1999"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":367,"author":{"gitId":"elhy1999"},"content":"            parsedCommand \u003d Parser.getCommandType(typoUnmarkCommand);","lastModifiedDate":"2023-09-20"},{"lineNumber":368,"author":{"gitId":"elhy1999"},"content":"            assertEquals(parsedCommand, \"unmark\");","lastModifiedDate":"2023-09-20"},{"lineNumber":369,"author":{"gitId":"elhy1999"},"content":"        } catch (InvalidCommandTypeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":370,"author":{"gitId":"elhy1999"},"content":"            assertNull(e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":371,"author":{"gitId":"elhy1999"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":372,"author":{"gitId":"elhy1999"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":373,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":374,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":375,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"elhy1999":375}},{"path":"src/test/java/taskmate/tools/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"import taskmate.tools.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"    public void addTask_onlyTodoTasks_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        Task todoTask1 \u003d new Todo(\"This is a todo task\");","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"        Task todoTask2 \u003d new Todo(\"This is a COMPLETED todo task\");","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"        Task todoTask3 \u003d new Todo(\"This is a todo task\"); // replicate of todoTask1","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(todoTask1);","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(todoTask2, true);","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(todoTask3, false);","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"\"\"","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"                [T][ ] This is a todo task","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"                [T][X] This is a COMPLETED todo task","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"                [T][ ] This is a todo task","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"                \"\"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"    public void addTask_onlyDeadlineTasks_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask1 \u003d new Deadline(\"This is a deadline task\", \"2024-02-29\"); // Leap year","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask2 \u003d new Deadline(\"by\", \"2023-01-01\");","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask3 \u003d new Deadline(\".\", \"2100-01-02\"); // many years ahead","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask4 \u003d new Deadline(\"This is a deadline task\", \"2024-02-29\"); // copy of deadlineTask1","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask1);","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask2, true);","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask3, false);","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask4);","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"\"\"","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"                [D][ ] This is a deadline task (by: 2024-02-29)","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"                [D][X] by (by: 2023-01-01)","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"                [D][ ] . (by: 2100-01-02)","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"                [D][ ] This is a deadline task (by: 2024-02-29)","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"                \"\"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"    public void addTask_onlyEventTasks_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"        Task eventTask1 \u003d new Event(\"This is an event task\", \"2000-07-29\", \"2036-02-29\"); // Leap year","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"        Task eventTask2 \u003d new Event(\"This is a COMPLETED event task\", \"2023-01-01\",","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"                \"3023-12-31\");","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"        Task eventTask3 \u003d new Event(\"from\", \"1100-01-02\", \"2100-01-02\");","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"        Task eventTask4 \u003d new Event(\"to\", \"1100-01-02\", \"2100-01-02\");","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask1);","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask2, true);","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask3, false);","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask4);","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"\"\"","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"                [E][ ] This is an event task (from: 2000-07-29 to: 2036-02-29)","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"                [E][X] This is a COMPLETED event task (from: 2023-01-01 to: 3023-12-31)","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"                [E][ ] from (from: 1100-01-02 to: 2100-01-02)","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"                [E][ ] to (from: 1100-01-02 to: 2100-01-02)","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"                \"\"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"    public void addTask_addAllTaskTypes_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"        Task todoTask \u003d new Todo(\"This is a todo task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"        Task deadlineTask \u003d new Deadline(\"This is a COMPLETED deadline task\", \"2023-01-01\");","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"        Task eventTask \u003d new Event(\"This is an event task\", \"2024-12-02\", \"1987-01-02\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(todoTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(deadlineTask, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"        tasks.addTask(eventTask, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"\"\"","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"                [T][ ] This is a todo task","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"                [D][X] This is a COMPLETED deadline task (by: 2023-01-01)","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"                [E][ ] This is an event task (from: 2024-12-02 to: 1987-01-02)","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"                \"\"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"elhy1999"},"content":"    public void addTask_noTasksAdded_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"elhy1999"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"elhy1999"},"content":"        String tasksFormattedForWritingToDisk \u003d tasks.formatAllTasksForSaving();","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"elhy1999"},"content":"        String actualAnswer \u003d \"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"elhy1999"},"content":"        assertEquals(tasksFormattedForWritingToDisk, actualAnswer);","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":109}},{"path":"src/test/java/taskmate/tools/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"package taskmate.tools.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"    public void nameTest() {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"        String name1 \u003d \"This is test 1\";","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"        Task t1 \u003d new Todo(name1);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"        assertEquals(name1, t1.getTaskName());","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"        String name2 \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"        Task t2 \u003d new Todo(name2);","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"        assertEquals(name2, t2.getTaskName());","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"elhy1999":18}},{"path":"text-ui-test/EXPECTED2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"Hello I\u0027m TaskMate","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"What can I do for you?","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"  [T][ ] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"Now you have 1 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"  [D][ ] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"  [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"Now you have 3 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"elhy1999"},"content":"  [T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"elhy1999"},"content":"  [D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"elhy1999"},"content":"  [E][X] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"elhy1999"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"elhy1999"},"content":"[ ] [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"elhy1999"},"content":"  [T][ ] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"elhy1999"},"content":"Now you have 4 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"elhy1999"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"elhy1999"},"content":"  [T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"elhy1999"},"content":"Now you have 5 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"elhy1999"},"content":"3.[E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"elhy1999"},"content":"4.[T][ ] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"elhy1999"},"content":"5.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"elhy1999"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"elhy1999"},"content":"  [T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"elhy1999"},"content":"3.[E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"elhy1999"},"content":"4.[T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"elhy1999"},"content":"5.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"elhy1999"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"elhy1999"},"content":"  [E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"elhy1999"},"content":"Now you have 4 task(s) in the list.","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"elhy1999"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"elhy1999"},"content":"1.[T][X] read book","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"elhy1999"},"content":"2.[D][X] return book (by: June 6th)","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"elhy1999"},"content":"3.[T][X] join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"elhy1999"},"content":"4.[T][ ] borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"elhy1999"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2023-08-24"},{"lineNumber":98,"author":{"gitId":"elhy1999"},"content":"--------------------","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":99}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"event project meeting (from: Monday to: Friday) /from 2023-01-01 /to 2024-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"event project meeting (from: Monday to: Friday) /from 2023-01-01 /to 2024-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"deadline read paper (by: 2023-01-01) /by 2023-01-01","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":7}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"deadline return book /by 2023-06-06","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"event project meeting /from 2023-08-31 /to 2025-12-12","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"mark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"unmark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"todo join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"java -classpath ..\\bin TaskMate \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"elhy1999":1}},{"path":"text-ui-test/runtest2.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"elhy1999"},"content":"@ECHO OFF","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"elhy1999"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"elhy1999"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"elhy1999"},"content":"REM delete output from previous run","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"elhy1999"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"elhy1999"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"elhy1999"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"elhy1999"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"elhy1999"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"elhy1999"},"content":"    exit /b 1","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"elhy1999"},"content":")","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"elhy1999"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"elhy1999"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"elhy1999"},"content":"java -classpath ..\\bin TaskMate \u003c input2.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"elhy1999"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"elhy1999"},"content":"REM compare the output to the expected output","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"elhy1999"},"content":"FC ACTUAL.TXT EXPECTED2.TXT","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"elhy1999":21}}]
