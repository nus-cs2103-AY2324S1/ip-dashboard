[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"3. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aslam341":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"checkstyle {","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aslam341":21,"-":41}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"# David User Guide","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"David is a task management application for keeping track of your tasks, optimised  ","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"for use via a Command Line Interface while still having the benefits   ","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"of a Graphical User Interface.","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"## Quick Start","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"1. Ensure you have Java `11` or above installed in your computer. ","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/aslam341/ip/releases). ","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"3. Copy the file to the folder you want to use as the home folder for your application. ","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and use    ","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"   `java -jar duke.jar`     ","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"   command to run the application.    ","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"   A GUI similar to the one below should appear in a few seconds.    ","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"   ![alt text](Home.png)","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"\u003e \u0026#8505;   ","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"\u003e + Words in `UPPER_CASE` are the parameters to be supplied by user  ","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"\u003e e.g. in `deadline NAME /by DATE TIME`, `NAME`, `DATE` and `TIME` are parameters which can be used as","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"\u003e`deadline submit homework /by 30/09/2023 2359`","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"\u003e + Items in square brackets are optional.","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    e.g `NAME [/p PRIORITY]` can be used as  `clean room /p 3` or as `clean room`.","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"\u003e + Parameters must be in the order specified, or the command will not work.","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"\u003e + Extraneous parameters for commands that do not take in parameters (such as `list` and `bye`) will be ignored. ","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"\u003e e.g. if the command specifies `bye 123`, it will be interpreted as `bye`.","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"### Listing all the tasks in the list: `list`","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"Lists all the tasks in the list currently.","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"Format: `list`","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"### Adding a task to do: `todo`","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"Adds a task to do in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"Formats: `todo NAME [/p PRIORITY]`","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"+ `NAME` is the name of task.","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"+ `PRIORITY` is the priority of task. It is an integer from 1 to 3, with 1 being the highest priority.","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"+ `todo clean room /p 3`","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"+ `todo clean room`","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"### Adding a task with deadline: `deadline`","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"Adds a task with deadline in the list.  ","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"Formats: `deadline NAME /by DATE TIME [/p PRIORITY]`","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"+ `NAME` is the name of task.","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"+ `DATE` is the deadline date of task in `dd/MM/yyyy` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"+ `TIME` is the deadline time of task in `HHmm` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"+ `PRIORITY` is the priority of task. It is an integer from 1 to 3, with 1 being the highest priority.","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"+ `deadline submit this ip /by 23/09/2023 2359`","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"+ `deadline submit this ip /by 23/09/2023 2359 /p 1`","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"### Adding an event: `event`","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"Adds an event with start and end time in the list.  ","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"Formats: `event NAME /from START_DATE START_TIME /to END_DATE START_TIME [/p PRIORITY]`","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"+ `NAME` is the name of event.","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"+ `START_DATE` is the start date of event in `dd/MM/yyyy` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"+ `START_TIME` is the start time of event in `HHmm` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"+ `END_DATE` is the end date of event in `dd/MM/yyyy` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"+ `END_TIME` is the end time of event in `HHmm` format.","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"+ `PRIORITY` is the priority of event. It is an integer from 1 to 3, with 1 being the highest priority.","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"+ `event cs2100 midterms /from 09/10/2023 1830 /to 09/10/2023 2030`","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"+ `event cs2100 midterms /from 09/10/2023 1830 /to 09/10/2023 2030 /p 2`","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"### Marking a task as done: `mark`","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"Marks a task as done in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"Formats: `mark INDEX`","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"+ `INDEX` is index of the task as shown in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"+ `mark 1` marks the first task in the list as done.","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"### Unmarking a task to indicate that it is not done: `unmark`","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"Unmarks a task as not done in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"Formats: `unmark INDEX`","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"+ `INDEX` is index of the task as shown in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"+ `unmark 1` unmarks the first task in the list as not done.","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"Deletes a task from the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"Formats: `delete INDEX`","lastModifiedDate":"2023-09-22"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"+ `INDEX` is index of the task as shown by `list` command.","lastModifiedDate":"2023-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"+ `list` followed by `delete 1` deletes the first task in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"### Finding a task: `find`","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"Finds all task from the list whose name contains given keyword.","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"Formats: `find KEYWORD`","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"+ `KEYWORD` is the keyword to search for.","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"+ `find midterm` returns tasks with the names `cs2100 midterm` and `study for cs2102 midterm`","lastModifiedDate":"2023-09-22"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"![alt text](Find.png)","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"### Changing the priority of an existing task: `priority`","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"Changes the priority of a task.","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"Format: `priority INDEX PRIORITY`","lastModifiedDate":"2023-09-22"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"+ `INDEX` is index of the task as shown by `list` command.","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"+ `PRIORITY` is the priority of task. It is an integer from 1 to 3, with 1 being the highest priority.","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"Examples:","lastModifiedDate":"2023-09-22"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"+ `priority 1 2` changes the priority of the first task in the list to 2.","lastModifiedDate":"2023-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2023-09-22"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"Exits the program.","lastModifiedDate":"2023-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"### Saving the data","lastModifiedDate":"2023-09-22"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"The data is automatically saved in the hard disk after the `bye` command is entered.","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"aslam341":98,"-":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import graphicaluserinterface.MainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":" * The main class for the Duke application. Duke is a simple task manager.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    /** The storage object used to load and save task data. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    /** The task list object used to store and manipulate tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    /** The GUI window used to interact with the user. */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"     * Constructs a Duke instance with a default file path for data storage.","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    public Duke() {","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"        this(\"./data/duke.txt\");","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"     * Constructs a Duke instance with a specified file path for data storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"     * @param filePath The file path where task data is loaded from and saved to.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"            taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"            mainWindow.printMessage(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"     * Runs the Duke application, displaying a welcome message and processing user commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"    public void run(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"            String response \u003d command.execute(taskList, storage);","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"            this.mainWindow.setResponse(response);","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"            this.mainWindow.setResponse(e.getMessage());","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"     * Sets the GUI window used to interact with the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"     * @param mainWindow The GUI window used to interact with the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"    public void setMainWindow(MainWindow mainWindow) {","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"     * Gets the task list object used to store and manipulate tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"     * @return The task list object used to store and manipulate tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"        return taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"aslam341":72,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import graphicaluserinterface.Main;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":13}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.commands;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task.Priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":" * The Command class is an abstract base class for various command types in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":" * Each specific command type is implemented as a nested static class within this class.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":" * Subclasses of Command define the execution behavior for their respective command types.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"     * Executes the command with access to task data and storage by returning a string.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"     * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"     * @param storage The storage object for reading and writing task data.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"     * Returns the CommandType associated with the specific command type.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"     * @return The CommandType of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"    public abstract CommandType getType();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"     * The ExitCommand class represents the \"bye\" command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"     * Its execution allows the user to exit the application.","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"     * It saves the task data to storage before displaying the goodbye message.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"    public static class ExitCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"         * Executes the \"bye\" command, saving the task data to storage and displaying the goodbye message.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object for writing task data.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task data saving.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"                storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"                return Ui.MESSAGE_GOODBYE;","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"                throw new DukeException(\"Error saving duke.tasks to file: \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"            return CommandType.BYE;","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"     * The ListCommand class represents the \"list\" command in the Duke application, allowing the user to list all tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"     * It displays the list of tasks in the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"    public static class ListCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"         * Executes the \"list\" command, displaying the list of tasks in the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task listing.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"            return tasks.list();","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"            return CommandType.LIST;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"     * The MarkConmand class represents the \"mark\" command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"     * Its execution allows the user to mark a task as done.","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"    public static class MarkCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"        /** The number of the task to be marked as done. */","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"        private int taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"         * Constructs a Mark command with the specified task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"         * @param taskNumber The number of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"        public MarkCommand(int taskNumber) {","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"            this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"         * Executes the \"mark\" command, marking the specified task as done in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task marking.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"aslam341"},"content":"            int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"            return tasks.markTaskAsDone(index);","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"aslam341"},"content":"            return CommandType.MARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"aslam341"},"content":"     * The UnmarkCommand class represents the \"unmark\" command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"aslam341"},"content":"     * Its execution allows the user to unmark a task.","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"aslam341"},"content":"    public static class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"aslam341"},"content":"        /** The number of the task to be unmarked. */","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"aslam341"},"content":"        private int taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"aslam341"},"content":"         * Constructs an Unmark command with the specified task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"aslam341"},"content":"         * @param taskNumber The number of the task to be unmarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"aslam341"},"content":"        public UnmarkCommand(int taskNumber) {","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"aslam341"},"content":"            this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"aslam341"},"content":"         * Executes the \"unmark\" command, unmarking the specified task in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task unmarking.","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"aslam341"},"content":"            int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"aslam341"},"content":"            return tasks.unmarkTask(index);","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"aslam341"},"content":"            return CommandType.UNMARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":163,"author":{"gitId":"aslam341"},"content":"     * The PriorityCommand class represents the \"priority\" command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"aslam341"},"content":"     * It sets the priority of the specified task in the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":165,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":166,"author":{"gitId":"aslam341"},"content":"    public static class PriorityCommand extends Command {","lastModifiedDate":"2023-09-12"},{"lineNumber":167,"author":{"gitId":"aslam341"},"content":"        /** The number of the task to set priority. */","lastModifiedDate":"2023-09-12"},{"lineNumber":168,"author":{"gitId":"aslam341"},"content":"        private int taskNumber;","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"aslam341"},"content":"        /** The priority to set. */","lastModifiedDate":"2023-09-12"},{"lineNumber":171,"author":{"gitId":"aslam341"},"content":"        private Priority priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":172,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"aslam341"},"content":"         * Constructs a Priority command with the specified task number and priority.","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"aslam341"},"content":"         * @param taskNumber The number of the task to set priority.","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"aslam341"},"content":"         * @param priority   The priority to set.","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"aslam341"},"content":"        public PriorityCommand(int taskNumber, Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"aslam341"},"content":"            this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"aslam341"},"content":"            this.priority \u003d priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":183,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":184,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"aslam341"},"content":"         * Executes the \"priority\" command, setting the priority of the specified task in the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-12"},{"lineNumber":189,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task priority setting.","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":193,"author":{"gitId":"aslam341"},"content":"            int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":194,"author":{"gitId":"aslam341"},"content":"            return tasks.setPriority(index, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"aslam341"},"content":"            return CommandType.PRIORITY;","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":201,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":202,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":203,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"aslam341"},"content":"     * The DeleteCommand class represents the \"delete\" command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":205,"author":{"gitId":"aslam341"},"content":"     * Its execution allows the user to delete a task.","lastModifiedDate":"2023-09-12"},{"lineNumber":206,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"aslam341"},"content":"    public static class DeleteCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"aslam341"},"content":"        /** The number of the task to be deleted. */","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"aslam341"},"content":"        private int taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"aslam341"},"content":"         * Constructs a Delete command with the specified task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"aslam341"},"content":"         * @param taskNumber The number of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":217,"author":{"gitId":"aslam341"},"content":"        public DeleteCommand(int taskNumber) {","lastModifiedDate":"2023-09-01"},{"lineNumber":218,"author":{"gitId":"aslam341"},"content":"            this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":219,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":220,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":222,"author":{"gitId":"aslam341"},"content":"         * Executes the \"delete\" command, deleting the specified task from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":223,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":225,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":226,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task deletion.","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":228,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":230,"author":{"gitId":"aslam341"},"content":"            int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"aslam341"},"content":"            return tasks.deleteTask(index);","lastModifiedDate":"2023-09-09"},{"lineNumber":232,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":234,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":236,"author":{"gitId":"aslam341"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2023-09-01"},{"lineNumber":237,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":241,"author":{"gitId":"aslam341"},"content":"     * The AddCommand class represents commands that add new tasks in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":242,"author":{"gitId":"aslam341"},"content":"     * This includes the \"todo\", \"deadline\" and \"event\" commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":243,"author":{"gitId":"aslam341"},"content":"     * It adds the specified task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":244,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"aslam341"},"content":"    public static class AddCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":246,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":247,"author":{"gitId":"aslam341"},"content":"        /** The task to be added. */","lastModifiedDate":"2023-09-01"},{"lineNumber":248,"author":{"gitId":"aslam341"},"content":"        private Task task;","lastModifiedDate":"2023-09-01"},{"lineNumber":249,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":250,"author":{"gitId":"aslam341"},"content":"        /** The type of the add command (e.g., ADD_TODO, ADD_DEADLINE, ADD_EVENT). */","lastModifiedDate":"2023-09-01"},{"lineNumber":251,"author":{"gitId":"aslam341"},"content":"        private CommandType commandType;","lastModifiedDate":"2023-09-01"},{"lineNumber":252,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":253,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":254,"author":{"gitId":"aslam341"},"content":"         * Constructs an Add command with the specified task and command type.","lastModifiedDate":"2023-09-01"},{"lineNumber":255,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":256,"author":{"gitId":"aslam341"},"content":"         * @param task        The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":257,"author":{"gitId":"aslam341"},"content":"         * @param commandType The type of the add command (e.g., ADD_TODO, ADD_DEADLINE, ADD_EVENT).","lastModifiedDate":"2023-09-01"},{"lineNumber":258,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":259,"author":{"gitId":"aslam341"},"content":"        public AddCommand(Task task, CommandType commandType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":260,"author":{"gitId":"aslam341"},"content":"            this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":261,"author":{"gitId":"aslam341"},"content":"            this.commandType \u003d commandType;","lastModifiedDate":"2023-09-01"},{"lineNumber":262,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":263,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":264,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":265,"author":{"gitId":"aslam341"},"content":"         * Executes the \"add\" command, adding the specified task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":266,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":267,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":268,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":269,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task addition.","lastModifiedDate":"2023-09-01"},{"lineNumber":270,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":271,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":272,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":273,"author":{"gitId":"aslam341"},"content":"            return tasks.addTask(task);","lastModifiedDate":"2023-09-09"},{"lineNumber":274,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":275,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":276,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":277,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":278,"author":{"gitId":"aslam341"},"content":"            return this.commandType;","lastModifiedDate":"2023-09-01"},{"lineNumber":279,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":280,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":281,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":282,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":283,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":284,"author":{"gitId":"aslam341"},"content":"     * The FindCommand class represents the \"find\" command in the Duke application, allowing the user to find tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"aslam341"},"content":"     * It finds tasks in the task list that contain the specified keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":286,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":287,"author":{"gitId":"aslam341"},"content":"    public static class FindCommand extends Command {","lastModifiedDate":"2023-09-20"},{"lineNumber":288,"author":{"gitId":"aslam341"},"content":"        /** The keyword to be searched for. */","lastModifiedDate":"2023-09-01"},{"lineNumber":289,"author":{"gitId":"aslam341"},"content":"        private String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":290,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":291,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":292,"author":{"gitId":"aslam341"},"content":"         * Constructs a Find command with the specified keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":293,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":294,"author":{"gitId":"aslam341"},"content":"         * @param keyword The keyword to be searched for.","lastModifiedDate":"2023-09-01"},{"lineNumber":295,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":296,"author":{"gitId":"aslam341"},"content":"        public FindCommand(String keyword) {","lastModifiedDate":"2023-09-20"},{"lineNumber":297,"author":{"gitId":"aslam341"},"content":"            this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":298,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":299,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":300,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":301,"author":{"gitId":"aslam341"},"content":"         * Executes the \"find\" command, finding tasks in the task list that contain the specified keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":302,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":303,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList containing tasks to be manipulated.","lastModifiedDate":"2023-09-01"},{"lineNumber":304,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":305,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException If an error occurs during task finding.","lastModifiedDate":"2023-09-01"},{"lineNumber":306,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":307,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":308,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":309,"author":{"gitId":"aslam341"},"content":"            return tasks.findTasks(keyword);","lastModifiedDate":"2023-09-09"},{"lineNumber":310,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":311,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":312,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":313,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":314,"author":{"gitId":"aslam341"},"content":"            return CommandType.FIND;","lastModifiedDate":"2023-09-01"},{"lineNumber":315,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":316,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":317,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":318,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":319,"author":{"gitId":"aslam341"},"content":"     * The InvalidCommand class represents an invalid or unrecognized command in the Duke application.","lastModifiedDate":"2023-09-12"},{"lineNumber":320,"author":{"gitId":"aslam341"},"content":"     * It throws a DukeException with an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":321,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":322,"author":{"gitId":"aslam341"},"content":"    public static class InvalidCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":323,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":324,"author":{"gitId":"aslam341"},"content":"        /** The error message describing the invalid command. */","lastModifiedDate":"2023-09-01"},{"lineNumber":325,"author":{"gitId":"aslam341"},"content":"        private String message;","lastModifiedDate":"2023-09-01"},{"lineNumber":326,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":327,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":328,"author":{"gitId":"aslam341"},"content":"         * Constructs an Invalid command with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":329,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":330,"author":{"gitId":"aslam341"},"content":"         * @param message The error message describing the invalid command.","lastModifiedDate":"2023-09-01"},{"lineNumber":331,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":332,"author":{"gitId":"aslam341"},"content":"        public InvalidCommand(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":333,"author":{"gitId":"aslam341"},"content":"            this.message \u003d message;","lastModifiedDate":"2023-09-01"},{"lineNumber":334,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":335,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":336,"author":{"gitId":"aslam341"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":337,"author":{"gitId":"aslam341"},"content":"         * Executes the Invalid command, throwing a DukeException with the error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":338,"author":{"gitId":"aslam341"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":339,"author":{"gitId":"aslam341"},"content":"         * @param tasks   The TaskList (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":340,"author":{"gitId":"aslam341"},"content":"         * @param storage The storage object (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":341,"author":{"gitId":"aslam341"},"content":"         * @throws DukeException Always throws a DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":342,"author":{"gitId":"aslam341"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":343,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":344,"author":{"gitId":"aslam341"},"content":"        public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":345,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(message);","lastModifiedDate":"2023-09-01"},{"lineNumber":346,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":347,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":348,"author":{"gitId":"aslam341"},"content":"        @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":349,"author":{"gitId":"aslam341"},"content":"        public CommandType getType() {","lastModifiedDate":"2023-09-01"},{"lineNumber":350,"author":{"gitId":"aslam341"},"content":"            return CommandType.INVALID;","lastModifiedDate":"2023-09-01"},{"lineNumber":351,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":352,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":353,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":353}},{"path":"src/main/java/duke/commands/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.commands;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":" * The CommandType enum represents different types of commands that can be issued by the user in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":" * Each enum value corresponds to a specific command type.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"public enum CommandType {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"    BYE,","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"    LIST,","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"    MARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"    UNMARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    PRIORITY,","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    DELETE,","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    ADD_TODO,","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    ADD_DEADLINE,","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    ADD_EVENT,","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"    FIND,","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    INVALID;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"     * Returns the CommandType corresponding to the given command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"     * @param command The command string to be mapped to a CommandType.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"     * @return The CommandType that matches the given command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    public static CommandType getCommandType(String command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"        switch (command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"            return CommandType.BYE;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"        case \"list\":","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"            return CommandType.LIST;","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"            return CommandType.MARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"            return CommandType.UNMARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"        case \"priority\":","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"            return CommandType.PRIORITY;","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"            return CommandType.ADD_TODO;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"            return CommandType.ADD_DEADLINE;","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"        case \"event\":","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"            return CommandType.ADD_EVENT;","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"        case \"find\":","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"            return CommandType.FIND;","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"        default:","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"            return CommandType.INVALID;","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":52}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.exception;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":" * The DukeException class is a custom exception class used to represent exceptions specific to the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":" * It extends the standard Java Exception class and provides a constructor to set the exception message.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"     * @param message The error message describing the exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":17}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import duke.tasks.DeadlineTask;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"import duke.tasks.EventTask;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task.Priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":" * The Parser class is responsible for parsing user input commands and converting them into executable commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":" * It supports commands such as adding tasks, marking tasks as done, deleting tasks, and more.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"     * Parses the user input and returns an appropriate Command object based on the input.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"     * @param userInput The user\u0027s input command as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"     * @return A command object that corresponds to the parsed input.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    public static Command parse(String userInput) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";","lastModifiedDate":"2023-09-11"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"        String[] userInputArray \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"        String command \u003d userInputArray[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"        String commandDetails \u003d userInputArray.length \u003e 1 ? userInputArray[1] : \"\";","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"        CommandType commandType \u003d CommandType.getCommandType(command);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"        assert commandType !\u003d null : \"Command type cannot be null\";","lastModifiedDate":"2023-09-11"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"        switch (commandType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"        case BYE:","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"            return new Command.ExitCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"        case LIST:","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"            return new Command.ListCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"        case MARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"            return markCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"            return unmarkCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"        case PRIORITY:","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"            return priorityCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"        case DELETE:","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"            return deleteCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"        case ADD_TODO:","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"            return addTodoCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        case ADD_DEADLINE:","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"            return addDeadlineCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"        case ADD_EVENT:","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"            return addEventCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"        case FIND:","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"            return findCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"        case INVALID:","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"        default:","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"            assert false : \"There is a command type in duke.commands.CommandType that is not explicitly handled here\";","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"There is a command type in duke.commands.CommandType\"","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"                    + \" that is not explicitly handled here.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"    private static Command markCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a task number to mark as done.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"                int taskNumber \u003d Integer.parseInt(commandDetails);","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"                return new Command.MarkCommand(taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! Please enter a valid task number to mark as done.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"    private static Command unmarkCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a task number to unmark.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"                int taskNumber \u003d Integer.parseInt(commandDetails);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"                return new Command.UnmarkCommand(taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! Please enter a valid task number to unmark.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"    private static Command priorityCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a task number and a new priority\"","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"                    + \" to change the priority.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"        String[] priorityInfo \u003d commandDetails.split(\" \", 2);","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"        if (priorityInfo.length \u003c 2) {","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please provide both a task number and a new priority.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"            int taskNumber \u003d Integer.parseInt(priorityInfo[0]);","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"            String newPriorityValue \u003d priorityInfo[1].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"            Priority newPriority;","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"            if (newPriorityValue.equalsIgnoreCase(\"1\")","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"                    || newPriorityValue.equalsIgnoreCase(\"high\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"                newPriority \u003d Priority.HIGH;","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"            } else if (newPriorityValue.equalsIgnoreCase(\"2\")","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"                    || newPriorityValue.equalsIgnoreCase(\"medium\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"                newPriority \u003d Priority.MEDIUM;","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"            } else if (newPriorityValue.equalsIgnoreCase(\"3\")","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"aslam341"},"content":"                    || newPriorityValue.equalsIgnoreCase(\"low\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"                newPriority \u003d Priority.LOW;","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"            } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! Invalid new priority.\"","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"                        + \" Please use \u00271\u0027, \u00272\u0027, \u00273\u0027, \u0027high\u0027, \u0027medium\u0027, or \u0027low\u0027.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"            return new Command.PriorityCommand(taskNumber, newPriority);","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a valid task number to change the priority.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"aslam341"},"content":"    private static Command deleteCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a task number to delete.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":131,"author":{"gitId":"aslam341"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"aslam341"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"aslam341"},"content":"                int taskNumber \u003d Integer.parseInt(commandDetails);","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"aslam341"},"content":"                return new Command.DeleteCommand(taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"aslam341"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! Please enter a valid task number to delete.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":137,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"aslam341"},"content":"    private static Command addTodoCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"aslam341"},"content":"            String[] taskDetailsArray \u003d commandDetails.split(\"/p\", 2);","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"aslam341"},"content":"            String taskName \u003d taskDetailsArray[0].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"aslam341"},"content":"            Priority priority \u003d parsePriorityFromCommandDetails(commandDetails);","lastModifiedDate":"2023-09-12"},{"lineNumber":150,"author":{"gitId":"aslam341"},"content":"            return new Command.AddCommand(new ToDoTask(taskName, priority), CommandType.ADD_TODO);","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(e.getMessage());","lastModifiedDate":"2023-09-12"},{"lineNumber":153,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"aslam341"},"content":"    private static Command addDeadlineCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":159,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":160,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"aslam341"},"content":"        if (!commandDetails.contains(\"/by\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a deadline in the format: \"","lastModifiedDate":"2023-09-09"},{"lineNumber":163,"author":{"gitId":"aslam341"},"content":"                    + \"deadline \u003ctask\u003e /by \u003cdate\u003e \u003ctime\u003e /p \u003cpriority\u003e\");","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":165,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":166,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":167,"author":{"gitId":"aslam341"},"content":"            String[] taskDetailsArray \u003d commandDetails.split(\"/by\");","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"aslam341"},"content":"            if (taskDetailsArray.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! The deadline of a deadline task cannot be empty.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"aslam341"},"content":"            String taskName \u003d taskDetailsArray[0].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"aslam341"},"content":"            String stringDeadline \u003d taskDetailsArray[1].split(\"/p\")[0].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"aslam341"},"content":"            LocalDateTime deadline \u003d LocalDateTime.parse(stringDeadline, Ui.DATE_FORMAT_INPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"aslam341"},"content":"            Priority priority \u003d parsePriorityFromCommandDetails(commandDetails);","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"aslam341"},"content":"            return new Command.AddCommand(new DeadlineTask(taskName, deadline, priority), CommandType.ADD_DEADLINE);","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"aslam341"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a valid date and time in the format: \"","lastModifiedDate":"2023-09-09"},{"lineNumber":180,"author":{"gitId":"aslam341"},"content":"                    + \"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":182,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(e.getMessage());","lastModifiedDate":"2023-09-12"},{"lineNumber":183,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":185,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"aslam341"},"content":"    private static Command addEventCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":187,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":189,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"aslam341"},"content":"        if (!commandDetails.contains(\"/from\") || !commandDetails.contains(\"/to\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter an event in the format: \"","lastModifiedDate":"2023-09-09"},{"lineNumber":193,"author":{"gitId":"aslam341"},"content":"                    + \"event \u003ctask\u003e /from \u003cdate\u003e \u003ctime\u003e /to \u003cdate\u003e \u003ctime\u003e /p \u003cpriority\u003e\");","lastModifiedDate":"2023-09-12"},{"lineNumber":194,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"aslam341"},"content":"            String[] taskDetailsArray \u003d commandDetails.split(\"/from\");","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"aslam341"},"content":"            if (taskDetailsArray.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! The start time of an event cannot be empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":200,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":202,"author":{"gitId":"aslam341"},"content":"            String[] taskDetailsArray2 \u003d taskDetailsArray[1].split(\"/to\");","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"aslam341"},"content":"            if (taskDetailsArray2.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! The end time of an event cannot be empty.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":205,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"aslam341"},"content":"            String taskName \u003d taskDetailsArray[0].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"aslam341"},"content":"            String stringStartTime \u003d taskDetailsArray2[0].trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"aslam341"},"content":"            String stringEndTime \u003d taskDetailsArray2[1].split(\"/p\")[0].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"aslam341"},"content":"            LocalDateTime startTime \u003d LocalDateTime.parse(stringStartTime, Ui.DATE_FORMAT_INPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"aslam341"},"content":"            LocalDateTime endTime \u003d LocalDateTime.parse(stringEndTime, Ui.DATE_FORMAT_INPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"aslam341"},"content":"            Priority priority \u003d parsePriorityFromCommandDetails(commandDetails);","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"aslam341"},"content":"            if (startTime.isAfter(endTime)) {","lastModifiedDate":"2023-09-21"},{"lineNumber":215,"author":{"gitId":"aslam341"},"content":"                return new Command.InvalidCommand(\"OOPS!!! The start time cannot be after end time for event tasks.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":216,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":217,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":218,"author":{"gitId":"aslam341"},"content":"            return new Command.AddCommand(new EventTask(taskName, startTime, endTime, priority),","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"aslam341"},"content":"                    CommandType.ADD_EVENT);","lastModifiedDate":"2023-09-12"},{"lineNumber":220,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"aslam341"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":222,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a valid date and time in the format: \"","lastModifiedDate":"2023-09-09"},{"lineNumber":223,"author":{"gitId":"aslam341"},"content":"                    + \"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(e.getMessage());","lastModifiedDate":"2023-09-12"},{"lineNumber":226,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":229,"author":{"gitId":"aslam341"},"content":"    private static Command findCommand(String commandDetails) {","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"aslam341"},"content":"        if (commandDetails.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"aslam341"},"content":"            return new Command.InvalidCommand(\"OOPS!!! Please enter a keyword to search for.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":232,"author":{"gitId":"aslam341"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"aslam341"},"content":"            return new Command.FindCommand(commandDetails);","lastModifiedDate":"2023-09-20"},{"lineNumber":234,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":236,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":237,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":238,"author":{"gitId":"aslam341"},"content":"     * Parses the priority from the command details.","lastModifiedDate":"2023-09-12"},{"lineNumber":239,"author":{"gitId":"aslam341"},"content":"     * If no priority is provided, the default priority is low.","lastModifiedDate":"2023-09-12"},{"lineNumber":240,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":241,"author":{"gitId":"aslam341"},"content":"     * @param input","lastModifiedDate":"2023-09-12"},{"lineNumber":242,"author":{"gitId":"aslam341"},"content":"     * @return The priority of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":243,"author":{"gitId":"aslam341"},"content":"     * @throws DukeException","lastModifiedDate":"2023-09-12"},{"lineNumber":244,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":245,"author":{"gitId":"aslam341"},"content":"    private static Priority parsePriorityFromCommandDetails(String input) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":246,"author":{"gitId":"aslam341"},"content":"        if (!input.contains(\"/p\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":247,"author":{"gitId":"aslam341"},"content":"            return Priority.LOW; // Default to low if /p is not provided","lastModifiedDate":"2023-09-12"},{"lineNumber":248,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":249,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":250,"author":{"gitId":"aslam341"},"content":"        String[] parts \u003d input.split(\"/p\", 2);","lastModifiedDate":"2023-09-12"},{"lineNumber":251,"author":{"gitId":"aslam341"},"content":"        String priorityValue \u003d parts[1].trim();","lastModifiedDate":"2023-09-12"},{"lineNumber":252,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":253,"author":{"gitId":"aslam341"},"content":"        // Determine priority based on user input","lastModifiedDate":"2023-09-12"},{"lineNumber":254,"author":{"gitId":"aslam341"},"content":"        if (priorityValue.equalsIgnoreCase(\"1\")","lastModifiedDate":"2023-09-12"},{"lineNumber":255,"author":{"gitId":"aslam341"},"content":"                || priorityValue.equalsIgnoreCase(\"high\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":256,"author":{"gitId":"aslam341"},"content":"            return Priority.HIGH;","lastModifiedDate":"2023-09-12"},{"lineNumber":257,"author":{"gitId":"aslam341"},"content":"        } else if (priorityValue.equalsIgnoreCase(\"2\")","lastModifiedDate":"2023-09-12"},{"lineNumber":258,"author":{"gitId":"aslam341"},"content":"                || priorityValue.equalsIgnoreCase(\"medium\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":259,"author":{"gitId":"aslam341"},"content":"            return Priority.MEDIUM;","lastModifiedDate":"2023-09-12"},{"lineNumber":260,"author":{"gitId":"aslam341"},"content":"        } else if (priorityValue.equalsIgnoreCase(\"3\")","lastModifiedDate":"2023-09-12"},{"lineNumber":261,"author":{"gitId":"aslam341"},"content":"                || priorityValue.equalsIgnoreCase(\"low\")","lastModifiedDate":"2023-09-12"},{"lineNumber":262,"author":{"gitId":"aslam341"},"content":"                || priorityValue.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-09-12"},{"lineNumber":263,"author":{"gitId":"aslam341"},"content":"            return Priority.LOW;","lastModifiedDate":"2023-09-12"},{"lineNumber":264,"author":{"gitId":"aslam341"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":265,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"OOPS!!! Please enter a valid priority level: \"","lastModifiedDate":"2023-09-12"},{"lineNumber":266,"author":{"gitId":"aslam341"},"content":"                    + \"1 (high), 2 (medium), 3 (low).\\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":267,"author":{"gitId":"aslam341"},"content":"                    + \"If no priority level is specified, it will default to low.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":268,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":269,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":270,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":270}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import java.io.File;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"import duke.tasks.DeadlineTask;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"import duke.tasks.EventTask;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task.Priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"import duke.tasks.ToDoTask;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":" * The Storage class handles the storage and retrieval of task data for the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":" * It handles the creation of necessary directories and files, as well as loading and saving tasks to/from a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    /** The file path for the storage file. */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    private String filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"     * Constructs a Storage object with the specified file path and ensures the file and directory structure exists.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"     * @param filePath The file path for storing task data.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"     * @throws DukeException If an error occurs while creating directories or files.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"    public Storage(String filePath) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"            accessOrCreateFile(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"            throw e;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"        // Assert that directory \u0026 file exists at the specified path after running the accessOrCreateFile() method.","lastModifiedDate":"2023-09-11"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"        File directory \u003d file.getParentFile();","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"        assert file.exists() \u0026\u0026 directory.exists();","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"     * Ensures the directory structure and file exist or creates them if necessary.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"     * @param filePath The file path to check or create.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"     * @throws DukeException If an error occurs while creating directories or files.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    private void accessOrCreateFile(String filePath) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        File directory \u003d file.getParentFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"        createDirectoryIfNotExists(directory);","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"        createFileIfNotExists(file);","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"    private void createDirectoryIfNotExists(File directory) {","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"            if (directory.mkdirs()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"                System.out.println(\"Directory created: \" + directory.getAbsolutePath());","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"                System.out.println(\"Failed to create directory.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"    private void createFileIfNotExists(File file) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"                if (file.createNewFile()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"                    System.out.println(\"File created: \" + file.getAbsolutePath());","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"                } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"                    System.out.println(\"File already exists.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"     * Loads tasks from the storage file and returns them as an ArrayList of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"     * @return An ArrayList of tasks loaded from the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"     * @throws DukeException If an error occurs while reading from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"            tasks \u003d loadTasksFromFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"            return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Error loading duke.tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"     * Loads tasks from the storage file and parses them into Task objects, then returns them as an ArrayList.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"     * @return An ArrayList of Task objects loaded from the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"     * @throws IOException If an error occurs while reading from the file or if the file contains invalid data.","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"    private ArrayList\u003cTask\u003e loadTasksFromFile() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"        String line;","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"aslam341"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"            String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":118,"author":{"gitId":"aslam341"},"content":"            // Assert that every non-empty line in the file has at least 4 parts separated by \u0027|\u0027 character.","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"            assert parts.length \u003e\u003d 4 : \"A non-empty line should have at least 4 \u0027|\u0027 characters\";","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":121,"author":{"gitId":"aslam341"},"content":"            String taskType \u003d parts[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"            boolean isDone \u003d parts[1].equals(\"X\");","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"            String taskDescription \u003d parts[2];","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"aslam341"},"content":"            Priority priority \u003d Priority.valueOf(parts[3]);","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"aslam341"},"content":"            Task task;","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"aslam341"},"content":"            if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"aslam341"},"content":"                task \u003d new ToDoTask(taskDescription, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"aslam341"},"content":"            } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"aslam341"},"content":"                LocalDateTime deadline \u003d LocalDateTime.parse(parts[4], Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"aslam341"},"content":"                task \u003d new DeadlineTask(taskDescription, deadline, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"aslam341"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"aslam341"},"content":"                LocalDateTime from \u003d LocalDateTime.parse(parts[4], Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"aslam341"},"content":"                LocalDateTime to \u003d LocalDateTime.parse(parts[5], Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"aslam341"},"content":"                task \u003d new EventTask(taskDescription, from, to, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"aslam341"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"aslam341"},"content":"                throw new IOException(\"Invalid task type found in file. Data file may be corrupted.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"aslam341"},"content":"            if (isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"aslam341"},"content":"                task.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"aslam341"},"content":"            tasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"aslam341"},"content":"        reader.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"aslam341"},"content":"        return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"aslam341"},"content":"     * Saves tasks to the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"aslam341"},"content":"     * @param taskList The TaskList containing tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"aslam341"},"content":"     * @throws IOException If an error occurs while writing to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"aslam341"},"content":"    public void saveTasksToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"aslam341"},"content":"        // Assert taskList is not null.","lastModifiedDate":"2023-09-11"},{"lineNumber":158,"author":{"gitId":"aslam341"},"content":"        assert taskList !\u003d null : \"TaskList cannot be null\";","lastModifiedDate":"2023-09-11"},{"lineNumber":159,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":160,"author":{"gitId":"aslam341"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":163,"author":{"gitId":"aslam341"},"content":"        // Assert tasks list is not null.","lastModifiedDate":"2023-09-11"},{"lineNumber":164,"author":{"gitId":"aslam341"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2023-09-11"},{"lineNumber":165,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":166,"author":{"gitId":"aslam341"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"aslam341"},"content":"            fileWriter.write(task.toFileString() + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"aslam341"},"content":"        fileWriter.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":172}},{"path":"src/main/java/duke/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":" * Represents a \"Deadline\" task in the Duke application, which includes a specific deadline date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    /** The deadline date and time for the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"     * Constructs a DeadlineTask with the specified name and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"     * @param name     The name or description of the DeadlineTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"     * @param deadline The deadline date and time for the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    public DeadlineTask(String name, LocalDateTime deadline, Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"        super(name, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"     * Returns a formatted description of the DeadlineTask, including the task type identifier \"[D]\" and the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"     * @return The formatted description of the DeadlineTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"        return \"[D]\" + super.getDescription() + \" (by: \" + deadline.format(Ui.DATE_FORMAT_OUTPUT) + \")\";","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"     * Converts the DeadlineTask to a string representation for storage in a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"     * @return The string representation for file storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"        return \"D | \" + super.toFileString() + \" | \" + deadline.format(Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"     * Returns a string representation of the DeadlineTask, including the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"     * @return The string representation of the DeadlineTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"        return super.toString() + \" | \" + deadline.format(Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":55}},{"path":"src/main/java/duke/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":" * Represents an \"Event\" task in the Duke application, which includes a specific start date and time and end date and","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":" * time.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    /** The start date and time for the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    /** The end date and time for the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"     * Constructs an EventTask with the specified name, start date and time, and end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"     * @param name The name or description of the EventTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"     * @param from The start date and time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"     * @param to   The end date and time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    public EventTask(String name, LocalDateTime from, LocalDateTime to, Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"        super(name, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"     * Returns a formatted description of the EventTask, including the task type identifier \"[E]\", start, and end times.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"     * @return The formatted description of the EventTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"        return \"[E]\" + super.getDescription()","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"                + \" (from: \" + from.format(Ui.DATE_FORMAT_OUTPUT)","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"                + \" to: \" + to.format(Ui.DATE_FORMAT_OUTPUT) + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"     * Converts the EventTask to a string representation for storage in a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"     * @return The string representation for file storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        return \"E | \" + super.toFileString()","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"                + \" | \" + from.format(Ui.DATE_FORMAT_OUTPUT)","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"                + \" | \" + to.format(Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"     * Returns a string representation of the EventTask, including the start and end times.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"     * @return The string representation of the EventTask.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"        return super.toString() + \" | \" + from.format(Ui.DATE_FORMAT_OUTPUT) + \" | \" + to.format(Ui.DATE_FORMAT_OUTPUT);","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":65}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":" * Represents a task in the Duke application with name and status.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"    /** The name of the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"    private String name;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"    /** The status of the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    private boolean isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    /** The priority of the task. */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    private Priority priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"     * Priority levels.","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    public enum Priority {","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"        HIGH(1),","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"        MEDIUM(2),","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"        LOW(3);","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"        private final int value;","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"        Priority(int value) {","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"            this.value \u003d value;","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"        public int getValue() {","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"            return value;","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"     * Constructs a Task with a given name and priority and set it to be not done.","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"    public Task(String name, Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"     * Unmarks the task to indicate that it is not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"     * @return true if the task is done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"        return this.isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"     * Sets the priority of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"     * @param priority The priority of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"    public void setPriority(Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"     * Gets the status icon of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"     * @return \"X\" if the task is done, \" \" otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"     * Gets the formatted description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"     * @return The formatted description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.name + \" (Priority: \" + this.priority + \")\";","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"     * Gets the file-formatted description of the task to be written into the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"     * @return The file-formatted description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"        return this.getStatusIcon() + \" | \" + this.name + \" | \" + this.priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"        return name;","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":114}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import duke.tasks.Task.Priority;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":" * Represents a list of tasks in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"public class TaskList {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    /** The list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"     * Constructs a TaskList with a given list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"     * @param tasks The initial list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"        // Assert that the initial list of tasks provided is not null.","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"        assert tasks !\u003d null : \"Initial list of tasks cannot be null\";","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"     * Adds a task to the task list and prints a confirmation message.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"        tasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"        // Assert that the task has been successfully added to the list.","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        assert tasks.contains(task) : \"Task failed to be added to list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task.getDescription()","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"     * Deletes a task from the task list and prints a confirmation message.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"    public String deleteTask(int index) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Please enter a valid number.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"        assert !tasks.contains(task) : \"Task failed to be removed from list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + task.getDescription()","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"     * Marks a task as done and prints a confirmation message.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"    public String markTaskAsDone(int index) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Please enter a valid number.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"        assert task.isDone() : \"Task was not marked as done\";","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.getDescription();","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"     * Marks a task as not done and prints a confirmation message.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"     * @param index The index of the task to be marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"    public String unmarkTask(int index) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Please enter a valid number.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"        task.unmark();","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"        assert !task.isDone() : \"Task was not marked as not done\";","lastModifiedDate":"2023-09-11"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + task.getDescription();","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"     * Sets the priority of a task and prints a confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"     * @param index","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"     * @param priority","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"     * @return The confirmation message.","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"    public String setPriority(int index, Priority priority) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"            throw new DukeException(\"Please enter a valid number.\");","lastModifiedDate":"2023-09-21"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"        task.setPriority(priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"        return \"OK, I\u0027ve set the priority of this task to \" + priority + \":\\n\" + task.getDescription();","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"     * Prints all the tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"aslam341"},"content":"    public String list() {","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"            return \"You have no tasks in your list. Add some tasks!\";","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"        String s \u003d \"\";","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"aslam341"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-24"},{"lineNumber":125,"author":{"gitId":"aslam341"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-08-24"},{"lineNumber":126,"author":{"gitId":"aslam341"},"content":"            s \u003d s + (i + 1) + \". \" + task.getDescription() + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":128,"author":{"gitId":"aslam341"},"content":"        return s;","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"aslam341"},"content":"     * Finds tasks that contain a given keyword and prints them.","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"aslam341"},"content":"     * @param keyword The keyword to be searched for.","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"aslam341"},"content":"     * @return The list of tasks that contain the keyword.","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"aslam341"},"content":"    public String findTasks(String keyword) {","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"aslam341"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"aslam341"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"aslam341"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"aslam341"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"aslam341"},"content":"        if (foundTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"aslam341"},"content":"            return \"No matching tasks found.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"aslam341"},"content":"        String s \u003d \"Here are the matching tasks in your list: \\n\";","lastModifiedDate":"2023-09-22"},{"lineNumber":150,"author":{"gitId":"aslam341"},"content":"        for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"aslam341"},"content":"            Task task \u003d foundTasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"aslam341"},"content":"            s \u003d s + (i + 1) + \". \" + task.getDescription() + \"\\n\";","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"aslam341"},"content":"        return s;","lastModifiedDate":"2023-09-09"},{"lineNumber":155,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"aslam341"},"content":"     * Gets the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"aslam341"},"content":"     * @return The list of tasks in an ArrayList.","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"aslam341"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"aslam341"},"content":"        return this.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":165,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":166,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":166}},{"path":"src/main/java/duke/tasks/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":" * Represents a to-do task in the Duke application, which is a type of task without a specific deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"     * Constructs a ToDoTask with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    public ToDoTask(String description, Priority priority) {","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"        super(description, priority);","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"     * Overrides the getDescription method to format the to-do task description with a \"[T]\" prefix.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"     * @return The formatted to-do task description.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"        return \"[T]\" + super.getDescription();","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"     * Overrides the toFileString method to format the to-do task description for saving to file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"     * @return The formatted to-do task description for saving to file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"        return \"T | \" + super.toFileString();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        return super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":40}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":" * A class that contains all the constants used by the user interface.","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"    /** The date and time input format used for parsing user input. */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"    public static final DateTimeFormatter DATE_FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    /** The date and time output format used for displaying dates and times in messages. */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    public static final DateTimeFormatter DATE_FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\");","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    /** The scanner used to read user input. */","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m David\\nWhat can I do for you?\";","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    /** The message displayed when the user exits the application. */","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye. I am saving your tasks! Hope to see you again soon!\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"            + \"I will close in 3 seconds.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":21}},{"path":"src/main/java/graphicaluserinterface/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package graphicaluserinterface;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":63}},{"path":"src/main/java/graphicaluserinterface/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package graphicaluserinterface;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"            duke.setMainWindow(fxmlLoader.\u003cMainWindow\u003egetController());","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"            stage.setTitle(\"David\");","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":34}},{"path":"src/main/java/graphicaluserinterface/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package graphicaluserinterface;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import javafx.animation.KeyFrame;","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import javafx.animation.Timeline;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    private static final Image IMAGE_DUKE \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    private static final Image IMAGE_USER \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    private String response \u003d \"\";","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"     * Initializes the MainWindow.","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.MESSAGE_WELCOME, IMAGE_DUKE));","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"     * Sets the Duke object.","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"     * @param d The Duke object.","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"     * Sets the response from Duke.","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"     * @param response The response from Duke.","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"    public void setResponse(String response) {","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"        this.response \u003d response;","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"     * Prints a message from Duke.","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, IMAGE_DUKE));","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"        this.duke.run(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"                DialogBox.getUserDialog(input, IMAGE_USER),","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"                DialogBox.getDukeDialog(response, IMAGE_DUKE)","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"        if (input.equals(\"bye\") || input.startsWith(\"bye \")) {","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"            Timeline timeline \u003d new Timeline(new KeyFrame(Duration.seconds(3), event -\u003e {","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"                System.exit(0);","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"            }));","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"            timeline.setCycleCount(1);","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"            timeline.play();","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":95}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"graphicaluserinterface.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"aslam341":19}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"    public void testParseByeCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.BYE, Parser.parse(\"bye\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"    public void testParseListCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.LIST, Parser.parse(\"list\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    public void testParseAddTodoCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.ADD_TODO, Parser.parse(\"todo Task\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    public void testParseAddDeadlineCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.ADD_DEADLINE, Parser.parse(\"deadline Task /by 01/01/2023 1200\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"    public void testParseAddEventCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.ADD_EVENT,","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"                Parser.parse(\"event Task /from 01/01/2023 1200 /to 01/01/2023 1400\").getType());","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"    public void testParseMarkCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.MARK, Parser.parse(\"mark 1\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"    public void testParseUnmarkCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.UNMARK, Parser.parse(\"unmark 1\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"    public void testParseDeleteCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.DELETE, Parser.parse(\"delete 1\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"    public void testParseFindCommand() {","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.FIND, Parser.parse(\"find Task\").getType());","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"    public void testParseInvalidCommand() {","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        // Gibberish user input returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"aklsdjklajd\").getType());","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"        // Missing argument for todo task returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"todo\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"        // Missing arguments for deadline task returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"deadline Task\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"        // Missing arguments for event task returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"event Task /from 01/01/2023 1200\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"        // Missing argument for mark command returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"mark\").getType());","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"        // Missing argument for delete command returns invalid command","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID, Parser.parse(\"delete\").getType());","lastModifiedDate":"2023-09-21"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"    public void addEventCommand_startTimeAfterEndTime_returnsInvalidCommand() {","lastModifiedDate":"2023-09-21"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"        assertEquals(CommandType.INVALID,","lastModifiedDate":"2023-09-21"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"                Parser.parse(\"event Task /from 05/03/2023 1400 /to 01/01/2023 1600\").getType());","lastModifiedDate":"2023-09-21"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":82}},{"path":"src/test/java/duke/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-21"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"    public void setUp() {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"        duke \u003d new Duke(\"./data/test.txt\"); // Use a test file path","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"aslam341"},"content":"        taskList \u003d duke.getTaskList();","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"    public void testAddTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"aslam341"},"content":"        Task task \u003d new ToDoTask(\"Task\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"aslam341"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"aslam341"},"content":"        assertEquals(task, tasks.get(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"aslam341"},"content":"    public void deleteTask_indexWithinBounds_success() {","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"aslam341"},"content":"        Task task1 \u003d new ToDoTask(\"Task1\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"aslam341"},"content":"        Task task2 \u003d new ToDoTask(\"Task2\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task1);","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task2);","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"            taskList.deleteTask(1);","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"            assertFalse(tasks.contains(task2));","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"            taskList.deleteTask(0);","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"            assertFalse(tasks.contains(task1));","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"aslam341"},"content":"    public void deleteTask_indexOutOfBounds_exceptionThrown() {","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"aslam341"},"content":"        Task task1 \u003d new ToDoTask(\"Task1\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"aslam341"},"content":"        Task task2 \u003d new ToDoTask(\"Task2\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task1);","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task2);","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"aslam341"},"content":"            taskList.deleteTask(2);","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"aslam341"},"content":"            assertEquals(\"Please enter a valid number.\", e.getMessage());","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":70,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"aslam341"},"content":"    public void markTask_indexOutOfBounds_exceptionThrown() {","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"aslam341"},"content":"        Task task \u003d new ToDoTask(\"Task\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":75,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":76,"author":{"gitId":"aslam341"},"content":"            taskList.markTaskAsDone(1);","lastModifiedDate":"2023-09-21"},{"lineNumber":77,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":78,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":79,"author":{"gitId":"aslam341"},"content":"            assertEquals(\"Please enter a valid number.\", e.getMessage());","lastModifiedDate":"2023-09-21"},{"lineNumber":80,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":81,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":82,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":83,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-21"},{"lineNumber":84,"author":{"gitId":"aslam341"},"content":"    public void markTask_indexWithinBounds_success() {","lastModifiedDate":"2023-09-21"},{"lineNumber":85,"author":{"gitId":"aslam341"},"content":"        Task task \u003d new ToDoTask(\"Task\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":86,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-21"},{"lineNumber":87,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-21"},{"lineNumber":88,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":89,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":90,"author":{"gitId":"aslam341"},"content":"            taskList.markTaskAsDone(0);","lastModifiedDate":"2023-09-21"},{"lineNumber":91,"author":{"gitId":"aslam341"},"content":"            assertTrue(tasks.get(0).isDone());","lastModifiedDate":"2023-09-21"},{"lineNumber":92,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":93,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":94,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":95,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"aslam341"},"content":"    public void unmarkTask_indexOutOfBounds_exceptionThrown() {","lastModifiedDate":"2023-09-21"},{"lineNumber":99,"author":{"gitId":"aslam341"},"content":"        Task task \u003d new ToDoTask(\"Task\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":100,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-21"},{"lineNumber":101,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":102,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":103,"author":{"gitId":"aslam341"},"content":"            taskList.unmarkTask(1);","lastModifiedDate":"2023-09-21"},{"lineNumber":104,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":105,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":106,"author":{"gitId":"aslam341"},"content":"            assertEquals(\"Please enter a valid number.\", e.getMessage());","lastModifiedDate":"2023-09-21"},{"lineNumber":107,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":108,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"aslam341"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"aslam341"},"content":"    public void unmarkTask_indexWithinBounds_success() {","lastModifiedDate":"2023-09-21"},{"lineNumber":112,"author":{"gitId":"aslam341"},"content":"        Task task \u003d new ToDoTask(\"Task\", Task.Priority.LOW);","lastModifiedDate":"2023-09-21"},{"lineNumber":113,"author":{"gitId":"aslam341"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-21"},{"lineNumber":114,"author":{"gitId":"aslam341"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-21"},{"lineNumber":115,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":116,"author":{"gitId":"aslam341"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":117,"author":{"gitId":"aslam341"},"content":"            taskList.markTaskAsDone(0);","lastModifiedDate":"2023-09-21"},{"lineNumber":118,"author":{"gitId":"aslam341"},"content":"            taskList.unmarkTask(0);","lastModifiedDate":"2023-09-21"},{"lineNumber":119,"author":{"gitId":"aslam341"},"content":"            assertFalse(tasks.get(0).isDone());","lastModifiedDate":"2023-09-21"},{"lineNumber":120,"author":{"gitId":"aslam341"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":121,"author":{"gitId":"aslam341"},"content":"            fail();","lastModifiedDate":"2023-09-21"},{"lineNumber":122,"author":{"gitId":"aslam341"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":123,"author":{"gitId":"aslam341"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"aslam341"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"aslam341":124}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aslam341"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"aslam341"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"aslam341"},"content":"deadlne return book /by June 6th (note that first word is misspelled)","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"aslam341"},"content":"deadline return book /by 12/12/2019 1800","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"aslam341"},"content":"event project meeting /from 21/09/2023 0900 /to 21/09/2023 2150","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"aslam341"},"content":"todo go out and play","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"aslam341"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"aslam341"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"aslam341"},"content":"mark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"mark 5","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"aslam341"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"aslam341"},"content":"unmark 3","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"aslam341"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"aslam341"},"content":"delete 5","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"aslam341":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"aslam341"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"REM Create the \u0027data\u0027 directory","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"mkdir data","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"REM Create the \u0027data/duke.txt\u0027 file","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"aslam341"},"content":"copy NUL data\\duke.txt","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"aslam341"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"aslam341"},"content":"REM Delete the data directory after the test","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"aslam341"},"content":"rmdir /s /q data","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aslam341":11,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"aslam341"},"content":"# Create the \u0027data\u0027 directory","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"aslam341"},"content":"mkdir -p data","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"aslam341"},"content":"# Create the \u0027data/duke.txt\u0027 file","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"aslam341"},"content":"touch data/duke.txt","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"aslam341"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"aslam341"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"aslam341"},"content":"fi","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"aslam341"},"content":"# Delete the data directory (assuming it\u0027s named \"data\")","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"aslam341"},"content":"if [ -d \"./data\" ]","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"aslam341"},"content":"then","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"aslam341"},"content":"    rm -r ./data","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"aslam341"},"content":"fi","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"aslam341"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"aslam341"},"content":"# Exit with an appropriate status code","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"aslam341"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"aslam341"},"content":"then","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"aslam341"},"content":"    exit 0","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"aslam341"},"content":"else","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aslam341":21,"-":35}}]
