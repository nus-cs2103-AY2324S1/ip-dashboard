[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"checkstyle {","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":5,"-":42}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * The main class for the ChadGPT chatbot application.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    static final String LOGO \u003d \"\\n   _____ _    _          _____   _____ _____ _______ \\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"            + \"  / ____| |  | |   /\\\\   |  __ \\\\ / ____|  __ \\\\__   __|\\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"            + \" | |    | |__| |  /  \\\\  | |  | | |  __| |__) | | |   \\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"            + \" | |    |  __  | / /\\\\ \\\\ | |  | | | |_ |  ___/  | |   \\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"            + \" | |____| |  | |/ ____ \\\\| |__| | |__| | |      | |   \\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"            + \"  \\\\_____|_|  |_/_/    \\\\_\\\\_____/ \\\\_____|_|      |_|   \\n\";","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    static final String HORIZONTAL \u003d \"----------------------------------------------------------\"","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"            + \"-----------------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private static final Storage storage \u003d new Storage();","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * The main method for the Duke chatbot application.","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @param args the command-line arguments","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * @throws IOException if there is an error reading or writing to the storage file","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        while (!storage.readFromFile()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"            System.out.print(\"User: \");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            String nextLine \u003d sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"            if (nextLine.equals(\"exit\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"                sc.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"                System.exit(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"            } else if (nextLine.equals(\"\\n\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"                continue;","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        System.out.println(\"ChadGPT: Welcome to ChadGPT, What would you like to do today?\\n\" + HORIZONTAL);","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        System.out.print(\"User: \");","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        while (!sc.hasNext(\"bye\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"            String nextLine \u003d sc.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"            storage.passUserCommand(nextLine);","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            System.out.print(HORIZONTAL + \"\\nUser: \");","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        sc.close();","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        storage.passUserCommand(\"bye\");","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Print the logo and necessary formatting into terminal at startup","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    private void printAtStartup() {","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        System.out.println(HORIZONTAL + LOGO + HORIZONTAL);","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"lihongguang00":59,"-":2}},{"path":"src/main/java/duke/assets/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to exit the chatbot program","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class ByeCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new ByeCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public ByeCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^bye($| .+$)\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        taskList.writeToFile();","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        System.out.print(\"ChadGPT: Bye. Hope to see you again soon!\\n\" + HORIZONTAL);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        System.exit(0);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        System.out.println(\"ChadGPT: Bye! See you again!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":63}},{"path":"src/main/java/duke/assets/commands/CommandAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" * An abstract command class that is parent of all possible commands for the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"public abstract class CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     * A horizontal line used for formatting output","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected static final String HORIZONTAL \u003d \"------------------------------------------------------------\"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"            + \"---------------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * A regular expression for validating dates in the format yyyy/MM/dd or yyyy-MM-dd","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    protected static final String VALID_DATE_REGEX_STRING \u003d \"(\\\\d{4}/\\\\d{2}/\\\\d{2}|\\\\d{4}-\\\\d{2}-\\\\d{2})\";","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * A regular expression for validating times in the format HHmm","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    protected static final String VALID_TIME_REGEX_STRING \u003d \"[0-2][0-9][0-5][0-9]\";","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * The input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    protected String input;","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CommandAbstract object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    public CommandAbstract(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * Executes the given input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @throws InvalidCommandException if the input command has an invalid format","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    public void execute(TaskList tasklist) throws InvalidCommandException {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        if (isValid(tasklist)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"            completeOperation(tasklist);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-09-11"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    public abstract void printChatbotLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    protected abstract boolean isValid(TaskList tasklist);","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    protected abstract void completeOperation(TaskList tasklist);","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":74}},{"path":"src/main/java/duke/assets/commands/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Deadline;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"public class CreateDeadlineCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * A regular expression for validating the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private static final String INPUT_DEADLINE_REGEX_STRING \u003d String.format(\"^deadline .+ /by %s($| %s$)\",","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"            VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * A flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateDeadlineCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    public CreateDeadlineCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        Pattern inputRegex \u003d Pattern.compile(INPUT_DEADLINE_REGEX_STRING, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d inputRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"            findException();","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    private void findException() {","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user input included description about the task","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            String information \u003d delimitedBySlash[0].split(\" \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please include description about the task you would like to add.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user input included date details according to format specified","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d delimitedBySlash[1].substring(3);","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        } catch (StringIndexOutOfBoundsException stringExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please ensure your deadline date is included.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please include the deadline date of your task after \\\"/by\\\" command.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if it is possible to parse the user specified date into date time objects.","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"            String[] dates \u003d this.input.split(\"/by \")[1].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d dates[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"            String year \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"            String month \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"            String day \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"            LocalDate endDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", year, month, day));","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"            if (dates.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(dates[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"                LocalTime timeObj \u003d LocalTime.parse(dates[1].substring(0, 2) + \":\" + dates[1]","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"                        .substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"        } catch (NumberFormatException numberExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please ensure the time of your deadline is in numerical format.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException | IllegalArgumentException formatExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Ensure that deadline date follows the following format: yyyy-mm-dd.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\" /by \")[0].split(\"^(?i)(deadline)\\\\s\")[1];","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"        String dateAndTime \u003d this.input.split(\" /by \")[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Deadline(information, dateAndTime);","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"        System.out.print(\"ChadGPT: Gotcha, I have added the task to the list.\\n\" + HORIZONTAL);","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":130}},{"path":"src/main/java/duke/assets/commands/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new event task","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"public class CreateEventCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * A regular expression for validating the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private static final String INPUT_EVENT_REGEX_STRING \u003d String.format(\"^event .+ /from %s( | %s )/to %s($| %s$)\",","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"            VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING, VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * A flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateEventCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    public CreateEventCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(INPUT_EVENT_REGEX_STRING, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"            findException();","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    private void findException() {","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user included information about the event task","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            String information \u003d delimitedBySlash[0].split(\" \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please include information about the task you would like to add.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if users have included the start and end dates after /from and /to respectively","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"            String startDate \u003d delimitedBySlash[1].substring(5, delimitedBySlash[1].length() - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d delimitedBySlash[2].substring(3);","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        } catch (StringIndexOutOfBoundsException stringExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please ensure that you have included the start and end dates.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please verify you have included the start date after /from and \"","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"                    + \"end date after /to commands\");","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user has input all dates and time in the correct format","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"            String dates \u003d this.input.split(\" /from \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"            String[] startDateArr \u003d dates.split(\" /to \")[0].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"            String startDate \u003d startDateArr[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"            String startDateYear \u003d startDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"            String startDateMonth \u003d startDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"            String startDateDay \u003d startDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"            LocalDate startDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", startDateYear,","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"                    startDateMonth, startDateDay));","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"            if (startDateArr.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(startDateArr[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"                LocalTime startTimeObj \u003d LocalTime.parse(startDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"                        + startDateArr[1].substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"            String[] endDateArr \u003d dates.split(\" /to \")[1].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d endDateArr[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"            String endDateYear \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"            String endDateMonth \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"            String endDateDay \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"            LocalDate endDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", endDateYear,","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"                    endDateMonth, endDateDay));","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"            if (endDateArr.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(endDateArr[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"                LocalTime endDateTime \u003d LocalTime.parse(endDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"                        + endDateArr[1].substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        } catch (NumberFormatException numberExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please ensure the time of your deadline is in numerical format.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException | IllegalArgumentException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Ensure that deadline date follows the following format: \"","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"                    + \"yyyy-mm-dd or yyyy/mm/dd.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\" /from \")[0].split(\"^(?i)(event)\\\\s\")[1];","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        String allDateAndTime \u003d this.input.split(\" /from \")[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        String startDateAndTime \u003d allDateAndTime.split(\" /to \")[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"        String endDateAndTime \u003d allDateAndTime.split(\" /to \")[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Event(information, startDateAndTime, endDateAndTime);","lastModifiedDate":"2023-09-07"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-07"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\" /from \")[0].split(\"^(?i)(event)\\\\s\")[1];","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        System.out.print(\"ChadGPT: No problem! I have added the event:\\\"\" + information + \"\\\" to the list.\\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"                + HORIZONTAL);","lastModifiedDate":"2023-09-12"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":151}},{"path":"src/main/java/duke/assets/commands/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public class CreateTodoCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * A flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateTodoCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public CreateTodoCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^todo .+\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please provide a description about your task.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\"^((?i)(todo))\\\\s\")[1];","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Todo(information);","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        System.out.print(\"ChadGPT: No problem! Just remember to do your task before the deadline ;).\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":79}},{"path":"src/main/java/duke/assets/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to delete a task from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class DeleteCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new DeleteCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        tasklist.deleteTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);;","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":28}},{"path":"src/main/java/duke/assets/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Command to find the tasks with description matching a user input token","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class FindCommand extends CommandAbstract {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a find command","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * @param input input command from user","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * Print the chatbot dialogue invoked from this command","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() { // Printing is done by task list instead","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        return;","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the command is of appropriate formatting","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to find tokens in","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @return true if command is of appropriate formatting, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^find .+\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * Completes the search operation","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to search for the specific token in","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        String token \u003d this.input.split(\"^((?i)(find))\\\\s\")[1];","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        tasklist.find(token);","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"lihongguang00":49}},{"path":"src/main/java/duke/assets/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to list all tasks in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class ListCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new ListCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public ListCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^list$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        System.out.println(\"ChadGPT: Here are your tasks: \");","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        taskList.listTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        return;","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":62}},{"path":"src/main/java/duke/assets/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to mark a task as done in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class MarkCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new MarkCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public MarkCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        tasklist.markTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":28}},{"path":"src/main/java/duke/assets/commands/OperationOnListCommandAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * An abstract command class that is parent of all possible commands that operates on the task list for the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public abstract class OperationOnListCommandAbstract extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new OperationOnListCommandAbstract object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public OperationOnListCommandAbstract(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^(mark|unmark|delete)\\\\s\\\\d+$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"            inputMatcher.reset();","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            Pattern inputStartRegex \u003d Pattern.compile(\"^(mark|unmark|delete)\\\\s\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"            if (inputMatcher.usePattern(inputStartRegex).find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"Ensure that you have included the index value of the task you would like to\"","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"                        + \"alter\");","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    protected abstract void completeOperation(TaskList taskList);","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     * Prints the appropriate dialogue from the chatbot to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    public void printChatbotLine() {","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        return;","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":59}},{"path":"src/main/java/duke/assets/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to unmark a task as done in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class UnmarkCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new UnmarkCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public UnmarkCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    protected void completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        tasklist.unmarkTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":28}},{"path":"src/main/java/duke/assets/commands/ValidCommands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * Enum containing all valid user input commands","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public enum ValidCommands {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    bye,","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"    list,","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    mark,","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    unmark,","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    deadline,","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    event,","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    todo,","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    delete,","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    find","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":16}},{"path":"src/main/java/duke/assets/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.ByeCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CommandAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateDeadlineCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateEventCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateTodoCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.DeleteCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.FindCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.ListCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.MarkCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.UnmarkCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.CorruptDataException;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":" * Parser class for parsing commands by user and data","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final String GENERAL_DATA_REGEX_STRING \u003d \"^[TDE] \\\\| [01] \\\\| .+\";","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private static final String DEADLINE_REGEX_STRING \u003d \"^D \\\\| [01] \\\\| .+ \\\\| \\\\d{4}-\\\\d{2}-\\\\d{2}\"","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"            + \"($| [0-2][0-9][0-5][0-9]$)\";","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    private static final String EVENT_REGEX_STRING \u003d \"^E \\\\| [01] \\\\| .+ \\\\| \\\\d{4}-\\\\d{2}-\\\\d{2}\"","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"            + \"( [0-2][0-9][0-5][0-9] | )- \\\\d{4}-\\\\d{2}-\\\\d{2}($| [0-2][0-9][0-5][0-9]$)\";","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * Creates a user command object from the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * @return the user command object","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * @throws InvalidCommandException if the input command is invalid","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    private CommandAbstract createUserCommand(String input) throws InvalidCommandException {","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"            String command \u003d input.split(\" \")[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException exp) {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            throw new InvalidCommandException(\"ChadGPT: Please input a valid command.\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        switch (input.split(\" \")[0].toLowerCase()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"            return new ByeCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        case \"list\":","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            return new ListCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            return new MarkCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            return new UnmarkCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"            return new CreateTodoCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            return new CreateDeadlineCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        case \"event\":","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            return new CreateEventCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        case \"find\":","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"            return new FindCommand(input);","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"            // fall-through","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        throw new InvalidCommandException(\"ChadGPT: Please input a valid command.\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * Processes the user command and executes it on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    public void passUserCommand(String input, TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"            CommandAbstract command \u003d createUserCommand(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"            command.execute(tasklist);","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"            command.printChatbotLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        } catch (InvalidCommandException exp) {","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            System.out.print(exp.getBotMessage());","lastModifiedDate":"2023-09-11"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * Creates a command object from saved memory to restore state of task list to the most recently memorised state","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input data string extracted from memory","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"     * @return the command object","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"     * @throws CorruptDataException if the input data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    private CommandAbstract createDataCommand(String input) throws CorruptDataException {","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        Pattern dataRegex \u003d Pattern.compile(GENERAL_DATA_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        Pattern deadlineRegex \u003d Pattern.compile(DEADLINE_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        Pattern eventRegex \u003d Pattern.compile(EVENT_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        Matcher dataMatcher \u003d dataRegex.matcher(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"        if (dataMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"            String[] delimited \u003d input.split(\" \\\\| \");","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"            boolean isDone \u003d delimited[1].equals(\"1\");","lastModifiedDate":"2023-09-07"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"            dataMatcher.reset();","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"            switch(delimited[0]) {","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"            case \"T\":","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"                return new CreateTodoCommand(\"todo \" + delimited[2], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"            case \"D\":","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"                if (!dataMatcher.usePattern(deadlineRegex).find()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"                    throw new CorruptDataException(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"                return new CreateDeadlineCommand(\"deadline \" + delimited[2]","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"                        + \" /by \" + delimited[3], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"            case \"E\":","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"                if (!dataMatcher.usePattern(eventRegex).find()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"                    throw new CorruptDataException(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"                String[] dateAndTimeDelimited \u003d delimited[3].split(\" - \");","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"                return new CreateEventCommand(\"event \" + delimited[2]","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"                        + \" /from \" + dateAndTimeDelimited[0] + \" /to \"","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"                        + dateAndTimeDelimited[1], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"            default:","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"                // fall through","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"        throw new CorruptDataException(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"     * Processes the input from saved memory and executes it on the specified task list to restore most recently","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * memorised state","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input data string extracted from memory","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"     * @throws CorruptDataException if the input data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"    public void passDataCommand(String input, TaskList tasklist) throws CorruptDataException {","lastModifiedDate":"2023-09-07"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"            CommandAbstract command \u003d createDataCommand(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"            command.execute(tasklist);","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        } catch (InvalidCommandException exp) {","lastModifiedDate":"2023-09-07"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"            throw new CorruptDataException(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":141}},{"path":"src/main/java/duke/assets/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.storage;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.File;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.parser.Parser;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.CorruptDataException;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":" * Represents a storage class that handles reading and writing data to a file","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"public class Storage {","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    private TaskList tasklist;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    private Parser parser;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a Storage object with a new TaskList and Parser","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public Storage() {","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        this.tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Writes the current task list to a file","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    public void writeToFile() {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"            File myFile \u003d new File(\"./src/main/java/duke/data/duke.txt\");","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"            FileWriter fw \u003d new FileWriter(myFile);","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"            pw.print(tasklist.saveToFileFormat());","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"            pw.close();","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Unfortunately there was an unexpected error when reading your data file.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * Reads data from a file and adds it to the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the file was read successfully, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    public boolean readFromFile() {","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            File myFile \u003d new File(\"./src/main/java/duke/data/duke.txt\");","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            myFile.createNewFile();","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            Scanner sc \u003d new Scanner(myFile);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"            Parser dataParser \u003d new Parser();","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"                dataParser.passDataCommand(nextLine, tasklist);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Unfortunately there was an unexpected error when reading your data file.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        } catch (CorruptDataException corruptDataExcept) {","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Data is corrupt at: \\\"\" + corruptDataExcept.getCorruptLine()","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"                    + \"\\\". Please fix and press enter to proceed, or type the command \\\"exit\\\" to quit program\");","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"            tasklist.clearList();","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        return false;","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * Passes a user command to the parser to be executed","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     * @param nextLine the user command to be executed","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    public void passUserCommand(String nextLine) {","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        this.parser.passUserCommand(nextLine, tasklist);","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lihongguang00":78}},{"path":"src/main/java/duke/assets/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.storage;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.StateCannotBeAlteredException;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":" * Represents a list of tasks","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"public class TaskList {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    private static final String HORIZONTAL \u003d \"------------------------------------------------------------\"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"            + \"---------------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private final ArrayList\u003cTaskAbstract\u003e taskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    private int numberOfTasks;","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an empty task list","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        this.taskList \u003d new ArrayList\u003cTaskAbstract\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * Adds a task to the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * @param newTask the task to be added","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    public void addTask(TaskAbstract newTask) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.add(newTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks++;","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * Marks a task at the specified index as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be marked","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    public void markTaskAt(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Please add at least one task to your list first :)\");","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"                this.taskList.get(index).completeTask();","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Great, I\u0027ll mark task!\");","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"            } catch (StateCannotBeAlteredException exp) {","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Task is already complete :-)\");","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     * Marks a task at the specified index as incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be unmarked","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    public void unmarkTaskAt(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Please add at least one task to your list first :)\");","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"                this.taskList.get(index).undo();","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: I\u0027ll unmark it for now but do remember to complete it!\");","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"            } catch (StateCannotBeAlteredException exp) {","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Task is already incomplete :-)\");","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     * Deletes a task at the specified index from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    public void deleteTaskAt(int index) {","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Can\u0027t delete from an empty list :(\");","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Deleted!\");","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"            this.taskList.remove(index);","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"            this.numberOfTasks--;","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"     * Writes the task list to a file","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    public void writeToFile() {","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"            File myFile \u003d new File(\"./duke.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"            FileWriter fw \u003d new FileWriter(myFile);","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"            for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"                pw.println(t.saveToTextFormat());","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"            pw.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: Please check if your I/O is working as intended.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"     * Returns the task list in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"     * @return the task list in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    public String saveToFileFormat() {","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"        String returnString \u003d \"\";","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"        for (TaskAbstract t : taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"            returnString +\u003d t.saveToTextFormat();","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"            returnString +\u003d \"\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        return returnString;","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"     * Prints the status of all tasks in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    public void listTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"        for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"            System.out.print(\"    \" + ++counter + \". \");","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"            t.printStatus();","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"     * Clears all tasks from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    public void clearList() {","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"     * Find and prints the tasks that contain the given token in their task descriptions","lastModifiedDate":"2023-09-12"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"     * @param token token to be found in task description","lastModifiedDate":"2023-09-12"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"    public void find(String token) {","lastModifiedDate":"2023-09-12"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2023-09-12"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        // Check if there is at least 1 task with description matching to token","lastModifiedDate":"2023-09-12"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"            if (t.hasToken(token)) {","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"                System.out.println(\"ChadGPT: Found them!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"                hasMatch \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"                break;","lastModifiedDate":"2023-09-12"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        if (hasMatch) {","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"            int counter \u003d 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"            for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-12"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"                if (t.hasToken(token)) {","lastModifiedDate":"2023-09-12"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"                    System.out.print(\"    \" + ++counter + \". \");","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"                    t.printStatus();","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"ChadGPT: No matches unfortunately :(\");","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":180}},{"path":"src/main/java/duke/assets/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * A class that represents a deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public class Deadline extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e timeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * @param deadline deadline of the task","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        String[] delimited \u003d deadline.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        String endDate \u003d delimited[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        String year \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        String month \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        String day \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        this.date \u003d LocalDate.parse(String.format(\"%s-%s-%s\", year, month, day));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        if (delimited.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"            this.timeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(delimited[1].substring(0, 2) + \":\" + delimited[1]","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"                    .substring(2)));","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            this.timeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * Return the date and time of the deadline written in format for printing to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @return date and time string formatted for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private String getDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.timeOptional.map(","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"                localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     * Return the date and time of the deadline written in format for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * @return date and time string formatted for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    private String getDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        return this.date + (this.timeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * Return the deadline task into an appropriate string format for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * @return string format of deadline task for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"D | %s | %s | %s\", this.isDone ? \"1\" : \"0\",","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"                this.description, this.getDateTimeForSaving());","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     * Print the current status of the deadline task to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    public void printStatus() {","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        System.out.printf(\"[D][%s] %s (by: %s)\\n\", this.isDone ? \"X\" : \" \",","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"                this.description, this.getDateTimeForPrinting());","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":76}},{"path":"src/main/java/duke/assets/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * Represents an event task with a start and end date/time","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public class Event extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e startTimeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e endTimeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an event task with the given description, start date/time, and end date/time","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * @param description the description of the event task","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param start       the start date/time of the event task in the format \"yyyy-MM-dd HHmm\"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @param end         the end date/time of the event task in the format \"yyyy-MM-dd HHmm\"","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        String[] startDateArr \u003d start.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        String[] endDateArr \u003d end.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        String eventStartDate \u003d startDateArr[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        String eventEndDate \u003d endDateArr[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        String startYear \u003d eventStartDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        String endYear \u003d eventEndDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        String startMonth \u003d eventStartDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        String endMonth \u003d eventEndDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        String startDay \u003d eventStartDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        String endDay \u003d eventEndDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        this.startDate \u003d LocalDate.parse(String.format(\"%s-%s-%s\", startYear, startMonth, startDay));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        this.endDate \u003d LocalDate.parse(String.format(\"%s-%s-%s\", endYear, endMonth, endDay));","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        if (startDateArr.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            this.startTimeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(startDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                    + startDateArr[1].substring(2)));","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"            this.startTimeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        if (endDateArr.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            this.endTimeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(endDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"                    + endDateArr[1].substring(2) + \":00\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            this.endTimeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Returns the start date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     * @return the start date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    private String getStartDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        return this.startDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.startTimeOptional","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"                .map(localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     * Returns the end date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * @return the end date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    private String getEndDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        return this.endDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.endTimeOptional","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"                .map(localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     * Returns the start date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     * @return the start date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    private String getStartDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        return this.startDate + (this.startTimeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * Returns the end date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"     * @return the end date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    private String getEndDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        return this.endDate + (this.endTimeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"     * Returns the event task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"     * @return the event task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"E | %s | %s | %s - %s\", this.isDone ? \"1\" : \"0\", this.description, this","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"                .getStartDateTimeForSaving(), this.getEndDateTimeForSaving());","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"     * Prints the status of the event task","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"    public void printStatus() {","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"        System.out.printf(\"[E][%s] %s (from: %s to: %s)\\n\", this.isDone ? \"X\" : \" \", this.description, this","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"                .getStartDateTimeForPrinting(), this.getEndDateTimeForPrinting());","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":113}},{"path":"src/main/java/duke/assets/tasks/TaskAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.StateCannotBeAlteredException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Abstract class that represents a task","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public abstract class TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new task","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * @param description - description of task","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public TaskAbstract(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Marks the task as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * @throws StateCannotBeAlteredException if task is already complete","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public void completeTask() throws StateCannotBeAlteredException {","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"            throw new StateCannotBeAlteredException();","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Mark the task as incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @throws StateCannotBeAlteredException if task is already incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    public void undo() throws StateCannotBeAlteredException {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        if (!this.isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"            throw new StateCannotBeAlteredException();","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * Marks a newly created task as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    public void completeNewTask() {","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the task description contains the given token","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     * @param token token to be checked against","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * @return true if task description contains token, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    public boolean hasToken(String token) {","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        return this.description.contains(token);","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * Helper function to check if task is complete","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     * @return true if task is complete, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    public boolean isComplete() {","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        return isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     * Print status of the task","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    public abstract void printStatus();","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     * Formats the task into a string that is ready for saving into memory","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     * @return formatted string that is ready for saving into memory","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    public abstract String saveToTextFormat();","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        return this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":86}},{"path":"src/main/java/duke/assets/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * Represents a todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class Todo extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a todo task with the given description","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     * @param description the description of the todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * Returns the todo task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * @return the todo task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"T | %s | %s\", this.isDone ? \"1\" : \"0\",","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"                this.description);","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * Prints the status of the todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    public void printStatus() {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        System.out.printf(\"[T][%s] %s\\n\", this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":33}},{"path":"src/main/java/duke/assets/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"    public Ui() {","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":6}},{"path":"src/main/java/duke/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"T | 0 | dance","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"D | 0 | sing | 2023-05-05 1800","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"E | 0 | go to school | 2023-09-11 0800 - 2023-09-11 1800","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"lihongguang00":3}},{"path":"src/main/java/duke/dukeexceptions/CorruptDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class CorruptDataException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    private final String corruptLine;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a CorruptDataException with the given corrupt line","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     * @param corruptLine the line of corrupt data","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    public CorruptDataException(String corruptLine) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"        super(\"Data is corrupt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        this.corruptLine \u003d corruptLine;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Returns the line where the data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @return the line of corrupt data","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public String getCorruptLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        return this.corruptLine;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"lihongguang00":27}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when an invalid command is entered","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    private final String message;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an InvalidCommandException with an empty message","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"        super();","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"        this.message \u003d \"\";","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an InvalidCommandException with the given message","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * @param message the message to be displayed","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        super();","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Returns the message associated with the exception to be printed to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @return the message associated with the exception to be printed to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    public String getBotMessage() {","lastModifiedDate":"2023-09-11"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        return this.message;","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":35}},{"path":"src/main/java/duke/dukeexceptions/StateCannotBeAlteredException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when the state of a task cannot be altered","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class StateCannotBeAlteredException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a StateCannotBeAlteredException.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    public StateCannotBeAlteredException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"        super();","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":14}},{"path":"src/test/java/seedu/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.duke;  //same package as the class being tested","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Todo;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Event;","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    public void dummyTest(){","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(\"T | 0 | dance\", new Todo(\"dance\").saveToTextFormat());","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public void anotherDummyTest(){","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(\"E | 0 | sleep | 2015-05-05 1600 - 2016-05-05 1600\",","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"                new Event(\"sleep\", \"2015-05-05 1600\", \"2016-05-05 1600\").saveToTextFormat());","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"lihongguang00":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"todo","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"todo dance","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"deadline","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"deadline sing","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"deadline sing /by","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"deadline sing /by 2023-05-05 1800","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"event go to school /from 2023-09-11 0800 /to 2023-09-11 1800","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"bye","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"lihongguang00":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":1,"-":20}}]
