[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"checkstyle {","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":21,"-":41}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"# ChadGPT guide","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"### Adding a todo task: `todo`","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"Adds a **todo** task to the task list","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"**Format:** ","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"* `todo \u003cDESCRIPTION\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"\u003e* DESCRIPTION refers to the information of your task","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"* `todo sleep`","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"* `todo dance`","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"### Adding a deadline task: `deadline`","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"Adds a deadline task to the task list","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"* `deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"* `deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e \u003cTIME\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"\u003e* DESCRIPTION refers to the information of your task","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"\u003e* DATE refers to the date your task is due. It should be in the format YYYY-MM-DD or YYYY/MM/DD","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"\u003e* TIME is an **optional** parameter. It refers to the time your task is due. It should be in the 24-Hour format HHMM","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"* `deadline finish CS2103 /by 2023-09-20`","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"* `deadline submit CS2103 iP /by 2023/09/22 2359`","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"### Adding a event task: `event`","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"Adds a event task to the task list","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"* `event \u003cDESCRIPTION\u003e /from \u003cSTART_DATE\u003e /to \u003cEND_DATE\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"* `event \u003cDESCRIPTION\u003e /from \u003cSTART_DATE\u003e \u003cSTART_TIME\u003e /to \u003cEND_DATE\u003e \u003cEND_TIME\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"\u003e* DESCRIPTION refers to the information of your task","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"\u003e* START_DATE refers to the date your event starts. It should be in the format YYYY-MM-DD or YYYY/MM/DD","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"\u003e* END_DATE refers to the date your event end. It should be in the format YYYY-MM-DD or YYYY/MM/DD","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"\u003e* START_TIME is an **optional** parameter. It refers to the time your event starts. It should be in the 24-Hour format HHMM","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"\u003e* END_TIME is an **optional** parameter. It refers to the time your event ends. It should be in the 24-Hour format HHMM","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"* `event sleep marathon /from 2023-09-01 /to 2025-09-01`","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"* `event CS2103 tP grind /from 2023/09/23 0000 /to 2023/09/30 2359`","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"### Listing tasks: `list`","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"List out current tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of list feature](./screenshots/list_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"* `list`","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"### Marking task: `mark`","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"Mark a specific task as done","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of mark feature](./screenshots/mark_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"* `mark \u003cINDEX\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"\u003e* INDEX is the index of the task to mark","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"* `mark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"* `mark 3`","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"### Unmark task: `unmark`","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"Mark a specific task as undone","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of unmark feature](./screenshots/unmark_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"* `unmark \u003cINDEX\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"\u003e* INDEX is the index of the task to unmark","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"* `unmark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"* `unmark 3`","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"### Delete task: `delete`","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"Delete the task","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of delete feature](./screenshots/delete_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"* `delete \u003cINDEX\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"\u003e* INDEX is the index of the task to delete","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"* `delete 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"* `delete 3`","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"### Find task: `find`","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"Find tasks with task descriptions matching the input token","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of find feature](./screenshots/find_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"* `find \u003cTOKEN\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"\u003e* TOKEN is the input token to be matched against the tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"* `find CS2103`","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"* `find project`","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"### Sort tasks: `sort`","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"Sorts the task list either in chronological (by comparing date due) or ","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"lexicographical (by comparing task description) order","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"![Screenshot of sort feature](./screenshots/sort_screenshot.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"* `sort \u003cSORT_BY_FLAG\u003e \u003cDESCENDING_FLAG\u003e`","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"\u003e* SORT_BY_FLAG refers to the attribute in which to sort the list by. Use the -a flag for lexicographical order, or -c for chronological order","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"\u003e* DESCENDING_FLAG is an **optional** parameter. By default, the sort command sorts the list in ascending order, but adding the -d flag to the command will instead sort it in descending order","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"**Examples:**","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"* `sort -a`","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"* `sort -c -d`","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"### Exit ChadGPT: `bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"Exits the chatbot, saving your current tasks in your task list to memory, which will be restored the next time you open the application again","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"**Format:**","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"* `bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"## Command Summary","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"| Command                                                       | Synatax                                                                                                                 | Example                                                                                                           | ","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"| ------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"| Add to-do task to task list                                   | `todo \u003cDESCRIPTION\u003e`                                                                                                    | `todo sleep`                                                                                                      |","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"| Add deadline task to task list                                | `deadline /by \u003cDATE\u003e`\u003cbr/\u003e \u003cbr/\u003e `deadline /by \u003cDATE\u003e \u003cTIME\u003e`                                                           | `deadline sleep /by 2023-09-20` \u003cbr/\u003e \u003cbr/\u003e `deadline sleep /by 2023-09-20 2359`                                  |","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"| Add event to task list                                        | `event /from \u003cSTART_DATE\u003e /to \u003cEND_DATE\u003e` \u003cbr/\u003e \u003cbr/\u003e`event /from \u003cSTART_DATE\u003e \u003cSTART_TIME\u003e /to \u003cEND_DATE\u003e \u003cEND_TIME\u003e`  | `event sleep /from 2023-09-20 /to 2023-09-21` \u003cbr/\u003e \u003cbr/\u003e `event sleep /from 2023-09-20 2100 /to 2023-09-21 0800` |","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"| List all tasks                                                | `list`                                                                                                                  | `list`                                                                                                            |","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"| Mark task as done                                             | `mark \u003cINDEX\u003e`                                                                                                          | `mark 1`                                                                                                          |","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"| Mark task as not done                                         | `unmark \u003cINDEX\u003e`                                                                                                        | `unmark 1`                                                                                                        |","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"| Delete task                                                   | `delete \u003cINDEX\u003e`                                                                                                        | `delete 1`                                                                                                        |","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"| Find task with description matching token                     | `find \u003cTOKEN\u003e`                                                                                                          | `find CS2103`                                                                                                     |","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"| Sort the task list by lexicographical or chronological order  | `sort \u003cSORT_BY_FLAG\u003e \u003cDESCENDING_FLAG\u003e`                                                                                 | `sort -a` \u003cbr/\u003e \u003cbr/\u003e `sort -c -d`                                                                                | ","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"lihongguang00":138,"-":14}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.ui.DialogBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.CorruptDataException;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":" * The main class for the ChadGPT chatbot application.","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private final Storage storage \u003d new Storage();","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"            \"/images/userAvatar.png\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            \"/images/botAvatar.png\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        setComponents(stage);","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        addFunctionality();","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        greetUser();","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * Sets up the required components of UI","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * @param stage UI stage","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    private void setComponents(Stage stage) {","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        // Step 1. Setting up required components","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        stage.show();","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        formatWindow(stage, mainLayout);","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * Format the UI window","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * @param stage ui stage","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * @param mainLayout layout of UI","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    private void formatWindow(Stage stage, AnchorPane mainLayout) {","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        // Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        stage.setTitle(\"ChadGPT\");","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"     * Add functionality to UI handle user input","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"    private void addFunctionality() {","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        // Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"        readFromData();","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-13"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"        // Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"     * Creates dialog boxes for user and chatbot given some user input","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        String chatbotResponse \u003d storage.passUserCommand(userInput.getText());","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        Label dukeText \u003d new Label(getResponse(chatbotResponse));","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"        );","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"     * Formats the text response for the chatbot","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"     * @param input text response from the chatbot","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"     * @return full text response from the chatbot as a string","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"        return \"ChadGPT: \" + input;","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"     * Creates a DialogueBox for the chatbot, without user prompt","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"     * @param message text to be displayed by chatbot","lastModifiedDate":"2023-09-14"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"    private void dukeMessage(String message) {","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        Label dukeText \u003d new Label(getResponse(message));","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(dukeText, new ImageView(duke)));","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"     * Greets the user","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"    private void greetUser() {","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        dukeMessage(\"Hello I\u0027m ChadGPT, what do you want to do today?\");","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"     * Read data file to retrieve saved tasks from memory, in the case of unsuccessful retrieval,","lastModifiedDate":"2023-09-14"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"     * highlights the corrupt input and prompts user to restart the program","lastModifiedDate":"2023-09-14"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"    private void readFromData() {","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"            storage.readFromFile();","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"            dukeMessage(\"Unfortunately there was an unexpected error when reading your data file.\"","lastModifiedDate":"2023-09-13"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"                    + \"Please check your I/O devices and restart the program\");","lastModifiedDate":"2023-09-13"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"            sendButton.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"            userInput.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"        } catch (CorruptDataException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"            dukeMessage(\"Data is corrupt at: \\\"\" + e.getCorruptLine() + \"\\\". Please fix and restart the chatbot.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"            sendButton.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"            userInput.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"            dukeMessage(\"Unkown exception. Please restart the program.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"            sendButton.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"            userInput.setDisable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"lihongguang00":186,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class Launcher {","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"lihongguang00":12}},{"path":"src/main/java/duke/assets/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to exit the chatbot program","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class ByeCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new ByeCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public ByeCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^bye($| .+$)\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * @return the appropriate chatbot reply","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList taskList) {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        taskList.writeToFile();","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        String botReply \u003d \"Bye! Hope to see you again soon.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        System.exit(0);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        return botReply;","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * Unused method as command has no possible exceptions that are not already caught by parser","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * @return UNHANDLED_EXCEPTION_STRING if there are any edge cases not considered","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        assert (false);","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":68}},{"path":"src/main/java/duke/assets/commands/CommandAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * An abstract command class that is parent of all possible commands for the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public abstract class CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    // Constants","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    protected static final String HORIZONTAL \u003d \"------------------------------------------------------------\"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"            + \"---------------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    protected static final String VALID_DATE_REGEX_STRING \u003d \"(\\\\d{4}/\\\\d{2}/\\\\d{2}|\\\\d{4}-\\\\d{2}-\\\\d{2})\";","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected static final String VALID_TIME_REGEX_STRING \u003d \"[0-2][0-9][0-5][0-9]\";","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected static final String UNHANDLED_EXCEPTION_STRING \u003d \"Error: unexpected uncaught exception in command\";","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    // Non-Constants","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    protected String input;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CommandAbstract object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    public CommandAbstract(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Executes the given input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response to user query","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public String execute(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        if (isValid(tasklist)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"            return completeOperation(tasklist);","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"            return findException();","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    protected abstract boolean isValid(TaskList tasklist);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     * @return the appropriate chatbot response to the user query, or UNHANDLED_STRING_EXCEPTION for unhandled","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     *     edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    protected abstract String completeOperation(TaskList tasklist);","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     * @return string of the appropriate bot response, or UNHANDLED_STRING_EXCEPTION for unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    protected abstract String findException();","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":65}},{"path":"src/main/java/duke/assets/commands/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Deadline;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"public class CreateDeadlineCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    // Constants","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private static final String INPUT_DEADLINE_REGEX_STRING \u003d String.format(\"^deadline .+ /by %s($| %s$)\",","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"            VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    // Non-Constants","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateDeadlineCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public CreateDeadlineCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        Pattern inputRegex \u003d Pattern.compile(INPUT_DEADLINE_REGEX_STRING, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d inputRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\" /by \")[0].split(\"^(?i)(deadline)\\\\s\")[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        String dateAndTime \u003d this.input.split(\" /by \")[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Deadline(information, dateAndTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        return \"Gotcha, I have added the task to the list.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, UNHANDLED_EXCEPTION_STRING for any uncaught edge cases","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        return checkInformationPresent();","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user input includes description about the task","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    private String checkInformationPresent() {","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user input included description about the task","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"            String information \u003d delimitedBySlash[0].split(\" \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"            return \"Please include description about the task you would like to add.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        return checkDateFormat();","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user input is in the right date format","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"    private String checkDateFormat() {","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user input included date details according to format specified","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d delimitedBySlash[1].substring(3);","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        } catch (StringIndexOutOfBoundsException stringExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure your deadline date is included.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"            return \"Please include the deadline date of your task after \\\"/by\\\" command.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        return checkParsing();","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"     * Check if there are any errors during parsing of user input","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message, or unhandled exception message for any edge cases not caught","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"    private String checkParsing() {","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if it is possible to parse the user specified date into date time objects.","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"            Pattern datePattern \u003d Pattern.compile(\" \" + VALID_DATE_REGEX_STRING + \"($| )\");","lastModifiedDate":"2023-09-22"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"            Matcher dateMatcher \u003d datePattern.matcher(this.input);","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"            if (!dateMatcher.find()) {","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"                throw new DateTimeException(\"Invalid Date\");","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"            String[] dates \u003d this.input.split(\"/by \")[1].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d dates[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"            String year \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"            String month \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"            String day \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"            LocalDate endDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", year, month, day));","lastModifiedDate":"2023-09-04"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"            if (dates.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(dates[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"                LocalTime timeObj \u003d LocalTime.parse(dates[1].substring(0, 2) + \":\" + dates[1]","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"                        .substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"        } catch (NumberFormatException numberExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure the time of your deadline is in numerical format.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException | IllegalArgumentException formatExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"            return \"Ensure that deadline date follows the following format: yyyy-mm-dd.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure your date and time are valid\";","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":149}},{"path":"src/main/java/duke/assets/commands/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new event task","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"public class CreateEventCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    // Constants","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private static final String INPUT_EVENT_REGEX_STRING \u003d String.format(\"^event .+ /from %s( | %s )/to %s($| %s$)\",","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"            VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING, VALID_DATE_REGEX_STRING, VALID_TIME_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    // Non-Constants","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateEventCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public CreateEventCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(INPUT_EVENT_REGEX_STRING, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            findException();","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response to user query, or UNHANDLED_EXCEPTION_STRING for unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\" /from \")[0].split(\"^(?i)(event)\\\\s\")[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        String allDateAndTime \u003d this.input.split(\" /from \")[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        String startDateAndTime \u003d allDateAndTime.split(\" /to \")[0];","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        String endDateAndTime \u003d allDateAndTime.split(\" /to \")[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Event(information, startDateAndTime, endDateAndTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        return \"No problem! I have added the event: \\\"\" + information + \"\\\" to the list.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        return checkInformationPresent();","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user included information about the event task","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    private String checkInformationPresent() {","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user included information about the event task","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"            String information \u003d delimitedBySlash[0].split(\" \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"            return \"Please include information about the task you would like to add.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        return checkDatePresent();","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user included the date in the right format","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"    private String checkDatePresent() {","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedBySlash \u003d this.input.split(\"/\");","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if users have included the start and end dates after /from and /to respectively","lastModifiedDate":"2023-09-12"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"            String startDate \u003d delimitedBySlash[1].substring(5, delimitedBySlash[1].length() - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d delimitedBySlash[2].substring(3);","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"        } catch (StringIndexOutOfBoundsException stringExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure that you have included the start and end dates.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"            return \"Please verify you have included the start date after /from and \"","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"                    + \"end date after /to commands\";","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        return checkDateTimeFormatting();","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user input format is of the right date and time format","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    private String checkDateTimeFormatting() {","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        try { // Checks if user has input all dates and time in the correct format","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"            Pattern datePattern \u003d Pattern.compile(\" \" + VALID_DATE_REGEX_STRING + \"($| )\");","lastModifiedDate":"2023-09-22"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"            Matcher dateMatcher \u003d datePattern.matcher(this.input);","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"            if (dateMatcher.results().count() \u003c 2) {","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"                throw new DateTimeException(\"Invalid date\");","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"            String dates \u003d this.input.split(\" /from \")[1];","lastModifiedDate":"2023-09-04"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"            String[] startDateArr \u003d dates.split(\" /to \")[0].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"            String startDate \u003d startDateArr[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"            String startDateYear \u003d startDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"            String startDateMonth \u003d startDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"            String startDateDay \u003d startDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"            LocalDate startDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", startDateYear,","lastModifiedDate":"2023-09-04"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"                    startDateMonth, startDateDay));","lastModifiedDate":"2023-09-04"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"            if (startDateArr.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(startDateArr[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"                LocalTime startTimeObj \u003d LocalTime.parse(startDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"                        + startDateArr[1].substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        } catch (NumberFormatException numberExcept) {","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure the time of your deadline is in numerical format.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException | IllegalArgumentException indexExcept) {","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"            return \"Ensure that deadline date follows the following format: \"","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"                    + \"yyyy-mm-dd or yyyy/mm/dd.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"            return \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        return checkEndDateTimeFormatting();","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"     * Processes the event end date and time input to check if it follows the appropriate formatting","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate debugging chatbot message, or unhandled exception message for any edge cases not caught","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"    private String checkEndDateTimeFormatting() {","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"            String dates \u003d this.input.split(\" /from \")[1];","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"            String[] endDateArr \u003d dates.split(\" /to \")[1].split(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"            String endDate \u003d endDateArr[0];","lastModifiedDate":"2023-09-04"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"            String endDateYear \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"            String endDateMonth \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-09-04"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"            String endDateDay \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-09-04"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"            LocalDate endDateObj \u003d LocalDate.parse(String.format(\"%s-%s-%s\", endDateYear,","lastModifiedDate":"2023-09-04"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"                    endDateMonth, endDateDay));","lastModifiedDate":"2023-09-04"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"            if (endDateArr.length \u003e 1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"                Integer.parseInt(endDateArr[1]);","lastModifiedDate":"2023-09-04"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"                LocalTime endDateTime \u003d LocalTime.parse(endDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"                        + endDateArr[1].substring(2));","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"        } catch (NumberFormatException numberExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"            return \"Please ensure the time of your deadline is in numerical format.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException | IllegalArgumentException indexExcept) {","lastModifiedDate":"2023-09-04"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"            return \"Ensure that deadline date follows the following format: \"","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"                    + \"yyyy-mm-dd or yyyy/mm/dd.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"        } catch (DateTimeException dateTimeException) {","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"            return \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"        // If exception is not caught by here, will flag a standard error string","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"lihongguang00":194}},{"path":"src/main/java/duke/assets/commands/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to create a new todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public class CreateTodoCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    private final boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new CreateTodoCommand object with the given input command string and completion flag","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * @param isDone a flag indicating whether the new task is already completed","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public CreateTodoCommand(String input, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^todo .+\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        String information \u003d this.input.split(\"^((?i)(todo))\\\\s\")[1];","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        TaskAbstract newTask \u003d new Todo(information);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            newTask.completeNewTask();","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        tasklist.addTask(newTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        return \"No problem! Just remember to do your task before the deadline.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^todo .+\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"            return \"Please provide a description about your task.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":81}},{"path":"src/main/java/duke/assets/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to delete a task from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class DeleteCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new DeleteCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public DeleteCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate bot response string","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        return tasklist.deleteTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":29}},{"path":"src/main/java/duke/assets/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Command to find the tasks with description matching a user input token","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class FindCommand extends CommandAbstract {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a find command","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * @param input input command from user","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the command is of appropriate formatting","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to find tokens in","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @return true if command is of appropriate formatting, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^find .+\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Completes the search operation","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to search for the specific token in","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        String token \u003d this.input.split(\"^((?i)(find))\\\\s\")[1];","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        return tasklist.find(token);","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * Unused method as command has no possible exceptions that are not already caught by the task list in the","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * completeOperation method","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     * @return UNHANDLED_EXCEPTION_STRING if there are any edge cases not considered","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        assert(false);","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"lihongguang00":57}},{"path":"src/main/java/duke/assets/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to list all tasks in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class ListCommand extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new ListCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public ListCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        return this.isValid();","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    private boolean isValid() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^list$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate bot response string","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList taskList) {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        return taskList.listTasks();","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, or UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        if (this.input.startsWith(\"list\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"            return \"If you want to list the tasks, please just type the command \\\"list\\\"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":68}},{"path":"src/main/java/duke/assets/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to mark a task as done in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class MarkCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new MarkCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public MarkCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        return tasklist.markTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":29}},{"path":"src/main/java/duke/assets/commands/OperationOnListCommandAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * An abstract command class that is parent of all possible commands that operates on the task list for the chatbot","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public abstract class OperationOnListCommandAbstract extends CommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new OperationOnListCommandAbstract object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    public OperationOnListCommandAbstract(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Determines whether the input command is valid for the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the input command is valid, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^(mark|unmark|delete)\\\\s\\\\d+$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @param taskList the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, or UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    protected abstract String completeOperation(TaskList taskList);","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, or UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        Pattern commandRegex \u003d Pattern.compile(\"^(mark|unmark|delete)\\\\s\\\\d+$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d commandRegex.matcher(this.input);","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        if (!inputMatcher.find()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"            inputMatcher.reset();","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"            Pattern inputStartRegex \u003d Pattern.compile(\"^(mark|unmark|delete)\\\\s\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"            if (inputMatcher.usePattern(inputStartRegex).find()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"                return \"Ensure that you have included the index value of the task you would like to\"","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"                        + \"alter\";","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":64}},{"path":"src/main/java/duke/assets/commands/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Creates a sort command that can sort by lexicographical order or chronological order","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public class SortCommand extends CommandAbstract {","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    private static final String SORT_COMMAND_REGEX_STRING \u003d \"^sort -(a|c)($| -d$)\";","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * Create a new sort command with the given user input string","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * @param input user input","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    public SortCommand(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * Check if the user input is of the valid format","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to validate against","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the user input is valid, false otherwise","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isValid(TaskList tasklist) {","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Pattern inputPattern \u003d Pattern.compile(SORT_COMMAND_REGEX_STRING);","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d inputPattern.matcher(this.input);","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        return inputMatcher.find();","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * Compelte the operation by sorting the list of tasks according to user preference","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @return string of the appropriate chatbot message response, or UNHANDLED_EXCEPTION_STRING for any unhandled","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     *     edge cases","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        String[] delimitedByFlag \u003d this.input.split(\" -\");","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        boolean reverse \u003d this.input.contains(\"-d\");","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        assert (delimitedByFlag.length \u003e 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        switch (delimitedByFlag[1]) {","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        case \"a\":","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            return tasklist.sortByAlphabetical(reverse);","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        case \"c\":","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            return tasklist.sortByChronological(reverse);","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        default:","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            // fall-through","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * Handles exceptions that occur when validating the input command and returns the appropriate chatbot","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * response as a string","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * @return string of appropriate bot response, or UNHANDLED_EXCEPTION_STRING for any unhandled edge cases","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    protected String findException() {","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        Pattern missingDescendingFlagPattern \u003d Pattern.compile(\"^sort -(a|c)\");","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        Matcher inputMatcher \u003d missingDescendingFlagPattern.matcher(this.input);","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        // Checks if the descending flag is valid","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        if (inputMatcher.find()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            return \"Please check if you have a typo in your command. If you want to sort in \"","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"                    + \"descending order, use the flag -d\";","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        Pattern missingSortByPattern \u003d Pattern.compile(\"^sort -[^ac]($| -d$)\");","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        inputMatcher.reset();","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        // Checks if the order in which list is to be sorted in is valid","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        if (inputMatcher.usePattern(missingSortByPattern).find()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            return \"Only sorting by alphabetical order or chronological order supported. Use flags\"","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"                    + \" -a for alphabetical and -c for chronological\";","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        assert(this.input.startsWith(\"sort\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        return \"Please include how you would like to sort your tasks by. Use the flag -a for\"","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"                + \"alphabetical and -c for chronological\";","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"lihongguang00":89}},{"path":"src/main/java/duke/assets/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Represents a command to unmark a task as done in the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class UnmarkCommand extends OperationOnListCommandAbstract {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new UnmarkCommand object with the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public UnmarkCommand(String input) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(input);","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Completes the operation specified by the input command on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    protected String completeOperation(TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        return tasklist.unmarkTaskAt(Integer.parseInt(input.split(\" \")[1]) - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":28}},{"path":"src/main/java/duke/assets/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.ByeCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CommandAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateDeadlineCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateEventCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.CreateTodoCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.DeleteCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.FindCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.ListCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.MarkCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.SortCommand;","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.commands.UnmarkCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.CorruptDataException;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":" * Parser class for parsing commands by user and data","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private static final String GENERAL_DATA_REGEX_STRING \u003d \"^[TDE] \\\\| [01] \\\\| .+\";","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private static final String DEADLINE_REGEX_STRING \u003d \"^D \\\\| [01] \\\\| .+ \\\\| \\\\d{4}-\\\\d{2}-\\\\d{2}\"","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"            + \"($| [0-2][0-9][0-5][0-9]$)\";","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    private static final String EVENT_REGEX_STRING \u003d \"^E \\\\| [01] \\\\| .+ \\\\| \\\\d{4}-\\\\d{2}-\\\\d{2}\"","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"            + \"( [0-2][0-9][0-5][0-9] | )- \\\\d{4}-\\\\d{2}-\\\\d{2}($| [0-2][0-9][0-5][0-9]$)\";","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    private static final String UNHANDLED_EXCEPTION_STRING \u003d \"Error: unexpected uncaught exception in Parser\";","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * Creates a user command object from the given input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * @return the user command object","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @throws InvalidCommandException if the input command is invalid","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    private CommandAbstract createUserCommand(String input) throws InvalidCommandException {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        try { // Identify whitespace commands","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            String command \u003d input.split(\" \")[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"            throw new InvalidCommandException(\"Please input a valid command.\");","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        switch (input.split(\" \")[0].toLowerCase()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            return new ByeCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        case \"list\":","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            return new ListCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            return new MarkCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            return new UnmarkCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"            return new DeleteCommand(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            return new CreateTodoCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            return new CreateDeadlineCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        case \"event\":","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"            return new CreateEventCommand(input, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        case \"find\":","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"            return new FindCommand(input);","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        case \"sort\":","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"            return new SortCommand(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"            // fall-through","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        throw new InvalidCommandException(\"Please input a valid command.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     * Processes the user command and executes it on the specified task list","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input command string","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response, exception details or UNHANDLED_EXCEPTION_STRING if","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     *     there are unhandled edge cases","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"    public String passUserCommand(String input, TaskList tasklist) {","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        assert(tasklist !\u003d null);","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"            CommandAbstract command \u003d createUserCommand(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"            return command.execute(tasklist);","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        } catch (InvalidCommandException invalidCommandExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"            return invalidCommandExcept.getBotMessage();","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        } catch (Exception uncaughtExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"            return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"     * Creates a command object from saved memory to restore state of task list to the most recently memorised state","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input data string extracted from memory","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"     * @return the command object","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"     * @throws CorruptDataException if the input data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    private CommandAbstract createDataCommand(String input) throws CorruptDataException {","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        Pattern dataRegex \u003d Pattern.compile(GENERAL_DATA_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        Pattern deadlineRegex \u003d Pattern.compile(DEADLINE_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        Pattern eventRegex \u003d Pattern.compile(EVENT_REGEX_STRING);","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        Matcher dataMatcher \u003d dataRegex.matcher(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        if (dataMatcher.find()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"            String[] delimited \u003d input.split(\" \\\\| \");","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"            boolean isDone \u003d delimited[1].equals(\"1\");","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"            dataMatcher.reset();","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"            switch(delimited[0]) {","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"            case \"T\":","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"                return new CreateTodoCommand(\"todo \" + delimited[2], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"            case \"D\":","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"                if (!dataMatcher.usePattern(deadlineRegex).find()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"                    throw new CorruptDataException(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"                return new CreateDeadlineCommand(\"deadline \" + delimited[2]","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"                        + \" /by \" + delimited[3], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"            case \"E\":","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"                if (!dataMatcher.usePattern(eventRegex).find()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"                    throw new CorruptDataException(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"                String[] dateAndTimeDelimited \u003d delimited[3].split(\" - \");","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"                return new CreateEventCommand(\"event \" + delimited[2]","lastModifiedDate":"2023-09-07"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"                        + \" /from \" + dateAndTimeDelimited[0] + \" /to \"","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"                        + dateAndTimeDelimited[1], isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"            default:","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"                // fall through","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        throw new CorruptDataException(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"     * Processes the input from saved memory and executes it on the specified task list to restore most recently","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"     * memorised state","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"     * @param input the input data string extracted from memory","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"     * @param tasklist the task list to operate on","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response string, or UNHANDLED_EXCEPTION_STRING for any edge cases not caught","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"     * @throws CorruptDataException if the input data is corrupt","lastModifiedDate":"2023-09-14"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"    public String passDataCommand(String input, TaskList tasklist) throws CorruptDataException {","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"            CommandAbstract command \u003d createDataCommand(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"            return command.execute(tasklist);","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        } catch (CorruptDataException corruptDataExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"            throw corruptDataExcept;","lastModifiedDate":"2023-09-14"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        } catch (Exception uncaughtExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"            return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":153}},{"path":"src/main/java/duke/assets/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.storage;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.File;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.parser.Parser;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.CorruptDataException;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * Represents a storage class that handles reading and writing data to a file","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public class Storage {","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    private TaskList tasklist;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    private Parser parser;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a Storage object with a new TaskList and Parser","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    public Storage() {","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"        this.tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * Reads data from a file and adds it to the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the file was read successfully, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * @throws IOException if there was an issue with I/O, which cannot be handled by the program","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @throws CorruptDataException if data file is corrupted","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    public boolean readFromFile() throws IOException, CorruptDataException {","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            File myFile \u003d new File(\"./duke.txt\");","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"            myFile.createNewFile();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"            Scanner sc \u003d new Scanner(myFile);","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"            Parser dataParser \u003d new Parser();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"                String nextLine \u003d sc.nextLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"                dataParser.passDataCommand(nextLine, tasklist);","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException inputOutputExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"            throw inputOutputExcept;","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        } catch (CorruptDataException corruptDataExcept) {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"            tasklist.clearList();","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"            throw corruptDataExcept;","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * Passes a user command to the parser to be executed","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     * @param nextLine the user command to be executed","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response to user query","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    public String passUserCommand(String nextLine) {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        return this.parser.passUserCommand(nextLine, tasklist);","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lihongguang00":60}},{"path":"src/main/java/duke/assets/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.storage;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.tasks.TaskAbstract;","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.StateCannotBeAlteredException;","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":" * Represents a list of tasks","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"public class TaskList {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    private static final String HORIZONTAL \u003d \"------------------------------------------------------------\"","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"            + \"---------------------------\";","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    private static final String UNHANDLED_EXCEPTION_STRING \u003d \"Error: unexpected uncaught exception in task list\";","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private final ArrayList\u003cTaskAbstract\u003e taskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private int numberOfTasks;","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an empty task list","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        this.taskList \u003d new ArrayList\u003cTaskAbstract\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * Adds a task to the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * @param newTask the task to be added","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    public void addTask(TaskAbstract newTask) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.add(newTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks++;","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * Marks a task at the specified index as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be marked","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response to request","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    public String markTaskAt(int index) {","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"                return \"Please add at least one task to your list first :)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"                return (\"Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"                this.taskList.get(index).completeTask();","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"                return \"Great, I\u0027ll mark the task!\";","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            } catch (StateCannotBeAlteredException exp) {","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"                return \"Task is already complete :-)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            } catch (Exception e) { // Other unhandled exceptions that have not been considered","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"                return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     * Marks a task at the specified index as incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be unmarked","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response string","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    public String unmarkTaskAt(int index) {","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"                return \"Please add at least one task to your list first.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"                return (\"Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            this.taskList.get(index).undo();","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"            return \"I\u0027ll unmark it for now but do remember to complete it!\";","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        } catch (StateCannotBeAlteredException exp) {","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"            return \"Task is already incomplete :-)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        } catch (Exception e) { // Other unhandled exceptions that have not been considered","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"            return UNHANDLED_EXCEPTION_STRING;","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     * Deletes a task at the specified index from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot response string","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"    public String deleteTaskAt(int index) {","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"        if (index \u003c 0 || index \u003e\u003d this.numberOfTasks) {","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"            if (this.numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"                return \"Can\u0027t delete from an empty list :(\";","lastModifiedDate":"2023-09-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"            } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"                return (\"Ensure the index is of in the range 1 - \" + this.numberOfTasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"            this.taskList.remove(index);","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"            this.numberOfTasks--;","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"            return \"Deleted!\";","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"     * Writes the task list to a file (save to memory)","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    public void writeToFile() {","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"            File myFile \u003d new File(\"./duke.txt\");","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"            FileWriter fw \u003d new FileWriter(myFile);","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"            PrintWriter pw \u003d new PrintWriter(fw);","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"            Stream\u003cTaskAbstract\u003e taskStream \u003d this.taskList.stream();","lastModifiedDate":"2023-09-14"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"            taskStream.map(x -\u003e x.saveToTextFormat()).forEach(x -\u003e pw.println(x));","lastModifiedDate":"2023-09-14"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"            pw.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"            System.out.println(\"Please check if your I/O is working as intended.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * Gets the status of all tasks in the task list","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"     * @return all the status of the tasks compiled into a single string","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    public String listTasks() {","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        if (numberOfTasks \u003d\u003d 0) {","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"            return \"No tasks to list, did you forget to add them perhaps?\";","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        String baseString \u003d \"Here you go!\";","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"            baseString +\u003d (\"\\n\" + ++counter + \". \" + t.getStatus());","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"        return baseString;","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"     * Clears all tasks from the task list","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"    public void clearList() {","lastModifiedDate":"2023-09-08"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        this.numberOfTasks \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"     * Find and prints the tasks that contain the given token in their task descriptions","lastModifiedDate":"2023-09-12"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"     * @param token token to be found in task description","lastModifiedDate":"2023-09-12"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"     * @return list of task matching the user input token as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"    public String find(String token) {","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        String baseString \u003d \"No matches unfortunately :(\";","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        // Check if there is at least 1 task with description matching to token","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-12"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"            if (t.hasToken(token)) {","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"                baseString \u003d \"Found them!\";","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"                hasMatch \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"                break;","lastModifiedDate":"2023-09-12"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        // Construct string with task status of all tasks matching token","lastModifiedDate":"2023-09-14"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        if (hasMatch) {","lastModifiedDate":"2023-09-12"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"            int counter \u003d 0;","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"            for (TaskAbstract t : this.taskList) {","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"                if (t.hasToken(token)) {","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"                    baseString +\u003d (\"\\n\" + ++counter + \". \" + t.getStatus());","lastModifiedDate":"2023-09-13"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"        return baseString;","lastModifiedDate":"2023-09-13"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"     * Sort the task list by lexicographical order","lastModifiedDate":"2023-09-20"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true if the user wants to sort in descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot message response","lastModifiedDate":"2023-09-20"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"    public String sortByAlphabetical(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.sort((x, y) -\u003e x.compareInformation(y, reverse));","lastModifiedDate":"2023-09-14"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"        return \"Done! I have sorted your list in\" + (reverse ? \" descending \" : \" \") + \"alphabetical order!\";","lastModifiedDate":"2023-09-14"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"     * Sort the tasklist by chronological order","lastModifiedDate":"2023-09-20"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true if the user wants to sort in descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"     * @return appropriate chatbot message response","lastModifiedDate":"2023-09-20"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"    public String sortByChronological(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"        this.taskList.sort((x, y) -\u003e x.compareDate(y, reverse));","lastModifiedDate":"2023-09-14"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"        return \"Done! I have sorted your list in \" + (reverse ? \" descending \" : \" \") + \"chronological order!\";","lastModifiedDate":"2023-09-14"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":203}},{"path":"src/main/java/duke/assets/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * A class that represents a deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public class Deadline extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e timeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new deadline task","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * @param deadline deadline of the task","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        String[] delimited \u003d deadline.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        String endDate \u003d delimited[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        String year \u003d endDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        String month \u003d endDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        String day \u003d endDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        this.date \u003d LocalDate.parse(String.format(\"%s-%s-%s\", year, month, day));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        if (delimited.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"            this.timeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(delimited[1].substring(0, 2) + \":\" + delimited[1]","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"                    .substring(2)));","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            this.timeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * Return the date and time of the deadline written in format for printing to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @return date and time string formatted for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private String getDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.timeOptional.map(","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"                localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     * Return the date and time of the deadline written in format for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * @return date and time string formatted for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    private String getDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        return this.date + (this.timeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * Return the deadline task into an appropriate string format for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * @return string format of deadline task for saving to memory","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"D | %s | %s | %s\", this.isDone ? \"1\" : \"0\",","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"                this.description, this.getDateTimeForSaving());","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate getDate(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        return this.date;","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    protected LocalTime getTime(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        return this.timeOptional.orElse(LocalTime.MAX);","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     * Get the current status of the deadline task as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"     * @return status of the deadline task as a string","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"    public String getStatus() {","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"[D][%s] %s (by: %s)\\n\", this.isDone ? \"X\" : \" \",","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"                this.description, this.getDateTimeForPrinting());","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":88}},{"path":"src/main/java/duke/assets/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * Represents an event task with a start and end date/time","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public class Event extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate startDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate endDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e startTimeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    protected Optional\u003cLocalTime\u003e endTimeOptional;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an event task with the given description, start date/time, and end date/time","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * @param description the description of the event task","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param start       the start date/time of the event task in the format \"yyyy-MM-dd HHmm\"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @param end         the end date/time of the event task in the format \"yyyy-MM-dd HHmm\"","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        String[] startDateArr \u003d start.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        String[] endDateArr \u003d end.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        String eventStartDate \u003d startDateArr[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        String eventEndDate \u003d endDateArr[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        String startYear \u003d eventStartDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        String endYear \u003d eventEndDate.substring(0, 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        String startMonth \u003d eventStartDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        String endMonth \u003d eventEndDate.substring(5, 7);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        String startDay \u003d eventStartDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        String endDay \u003d eventEndDate.substring(8, 10);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        this.startDate \u003d LocalDate.parse(String.format(\"%s-%s-%s\", startYear, startMonth, startDay));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        this.endDate \u003d LocalDate.parse(String.format(\"%s-%s-%s\", endYear, endMonth, endDay));","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        if (startDateArr.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            this.startTimeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(startDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                    + startDateArr[1].substring(2)));","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"            this.startTimeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        if (endDateArr.length \u003e 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"            this.endTimeOptional \u003d Optional.\u003cLocalTime\u003eof(LocalTime.parse(endDateArr[1].substring(0, 2) + \":\"","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"                    + endDateArr[1].substring(2) + \":00\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"            this.endTimeOptional \u003d Optional.\u003cLocalTime\u003eempty();","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * Returns the start date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     * @return the start date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    private String getStartDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        return this.startDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.startTimeOptional","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"                .map(localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     * Returns the end date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * @return the end date/time of the event task for printing to terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    private String getEndDateTimeForPrinting() {","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        return this.endDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + (this.endTimeOptional","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"                .map(localTime -\u003e \" \" + localTime.truncatedTo(ChronoUnit.MINUTES)).orElse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     * Returns the start date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     * @return the start date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    private String getStartDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        return this.startDate + (this.startTimeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * Returns the end date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"     * @return the end date/time of the event task for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    private String getEndDateTimeForSaving() {","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        return this.endDate + (this.endTimeOptional.map(localTime -\u003e \" \" + localTime.truncatedTo(","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"                ChronoUnit.MINUTES).toString().replace(\":\", \"\")).orElse(\"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"     * Returns the event task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"     * @return the event task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"E | %s | %s | %s - %s\", this.isDone ? \"1\" : \"0\", this.description, this","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"                .getStartDateTimeForSaving(), this.getEndDateTimeForSaving());","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate getDate(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"        return this.endDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"    protected LocalTime getTime(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        return this.endTimeOptional.orElse(LocalTime.MAX);","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"     * Get the status of the event task as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"     * @return status of the event task as a string","lastModifiedDate":"2023-09-14"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"    public String getStatus() {","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"[E][%s] %s (from: %s to: %s)\\n\", this.isDone ? \"X\" : \" \", this.description, this","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"                .getStartDateTimeForPrinting(), this.getEndDateTimeForPrinting());","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":125}},{"path":"src/main/java/duke/assets/tasks/TaskAbstract.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.StateCannotBeAlteredException;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" * Abstract class that represents a task","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"public abstract class TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a new task","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     * @param description - description of task","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    public TaskAbstract(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * Marks the task as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * @throws StateCannotBeAlteredException if task is already complete","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    public void completeTask() throws StateCannotBeAlteredException {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"            throw new StateCannotBeAlteredException();","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * Mark the task as incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @throws StateCannotBeAlteredException if task is already incomplete","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    public void undo() throws StateCannotBeAlteredException {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        if (!this.isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"            throw new StateCannotBeAlteredException();","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * Marks a newly created task as complete","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    public void completeNewTask() {","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the task description contains the given token","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * @param token token to be checked against","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     * @return true if task description contains token, false otherwise","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    public boolean hasToken(String token) {","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        return this.description.contains(token);","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     * Compare the deadline date of the two tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * @param other other task","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true for descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this task has ordering priority over the other, 0 if both are chronologically","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     *     equivalent and a positive integer if other task has ordering priority over this one","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    public int compareDate(TaskAbstract other, boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        int dateComparison \u003d this.getDate(reverse).compareTo(other.getDate(reverse));","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        int timeComparison \u003d this.getTime(reverse).compareTo(other.getTime(reverse));","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        int reverseMultiplicator \u003d reverse ? -1 : 1;","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        return dateComparison \u003d\u003d 0 ? (timeComparison \u003d\u003d 0 ? compareInformation(other, false)","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"                : reverseMultiplicator * timeComparison) : reverseMultiplicator * dateComparison;","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     * Compare the information of two tasks lexicographically","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     * @param other other task","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true for descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this task has ordering priority over the other, 0 if both are lexicographically","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"     *     equivalent and a positive integer if the other task has ordering priority over this one","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    public int compareInformation(TaskAbstract other, boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        int informationComparison \u003d this.description.compareTo(other.description);","lastModifiedDate":"2023-09-14"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        return informationComparison * (reverse ? -1 : 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"     * Get the deadline date of the task","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true for descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"     * @return the deadline date of the task","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"    protected abstract LocalDate getDate(boolean reverse);","lastModifiedDate":"2023-09-14"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"     * Get the deadline time of the task","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"     * @param reverse true for descending order, false for ascending order","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"     * @return the deadline time of the task","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"    protected abstract LocalTime getTime(boolean reverse);","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"     * Get status of the task as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"     * @return status of the task a string","lastModifiedDate":"2023-09-14"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"    public abstract String getStatus();","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"     * Formats the task into a string that is ready for saving into memory","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"     * @return formatted string that is ready for saving into memory","lastModifiedDate":"2023-09-12"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"    public abstract String saveToTextFormat();","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        return this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":131}},{"path":"src/main/java/duke/assets/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" * Represents a todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"public class Todo extends TaskAbstract {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a todo task with the given description","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     * @param description the description of the todo task","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Returns the todo task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @return the todo task in text format for saving to file","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public String saveToTextFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"T | %s | %s\", this.isDone ? \"1\" : \"0\",","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"                this.description);","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    protected LocalDate getDate(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        return reverse ? LocalDate.MIN : LocalDate.MAX;","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    protected LocalTime getTime(boolean reverse) {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        return reverse ? LocalTime.MIN : LocalTime.MAX;","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * Get the status of the todo task as a string","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * @return status of the todo task as a string","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    public String getStatus() {","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        return String.format(\"[T][%s] %s\\n\", this.isDone ? \"X\" : \" \", this.description);","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lihongguang00":48}},{"path":"src/main/java/duke/assets/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.ui;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" * A dialog box in the GUI, consisting of an avatar image and text","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    private Label text;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a dialog box object, with a label and avatar image","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * @param l label of the dialog box","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @param iv Avatar image","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        text \u003d l;","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        text.setWrapText(true);","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    private void flip() {","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * Creates a new DialogBox given a text label and avatar image for the user","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     * @param l text label","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     * @param iv avatar image","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * @return a new DialogBox with specified parameters, for the user","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     * Creates a new DialogBox given a text label and avatar image for the chatbot","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * @param l text label","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * @param iv avaatar image","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     * @return a new DialogBox with specified parameters, for the chatbot","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        db.flip();","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        return db;","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"lihongguang00":70}},{"path":"src/main/java/duke/dukeexceptions/CorruptDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class CorruptDataException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    private final String corruptLine;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a CorruptDataException with the given corrupt line","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     * @param corruptLine the line of corrupt data","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    public CorruptDataException(String corruptLine) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"        super(\"Data is corrupt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        this.corruptLine \u003d corruptLine;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Returns the line where the data is corrupt","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @return the line of corrupt data","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public String getCorruptLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        return this.corruptLine;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"lihongguang00":27}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when an invalid command is entered","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    private final String message;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an InvalidCommandException with the given message","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     * @param message the message to be displayed","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"        super();","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"     * Returns the message associated with the exception to be printed to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * @return the message associated with the exception to be printed to the terminal","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    public String getBotMessage() {","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        return this.message;","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"lihongguang00":27}},{"path":"src/main/java/duke/dukeexceptions/StateCannotBeAlteredException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * An exception thrown when the state of a task cannot be altered","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class StateCannotBeAlteredException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a StateCannotBeAlteredException.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    public StateCannotBeAlteredException() {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"        super();","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lihongguang00":14}},{"path":"src/test/java/duke/assets/commands/SortCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.commands;","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"class SortCommandTest {","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    void testInvalidCommand() {","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"        SortCommand command \u003d new SortCommand(\"invalid command\");","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(false, command.isValid(new TaskList()));","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    void testInvalidFlagCommand() {","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        SortCommand command \u003d new SortCommand(\"sort -z\");","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(false, command.isValid(new TaskList()));","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    void testValidCommandWithAllFlags() {","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        SortCommand command \u003d new SortCommand(\"sort -a -d\");","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(true, command.isValid(new TaskList()));","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    void testValidCommandWithoutDesecndingFlag() {","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        SortCommand command \u003d new SortCommand(\"sort -a\");","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(true, command.isValid(new TaskList()));","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"lihongguang00":32}},{"path":"src/test/java/duke/assets/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package duke.assets.parser;","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import duke.assets.storage.TaskList;","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"class ParserTest {","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    void invalidCommandTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"invalidCommand\";","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please input a valid command.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    void validTodoTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"todo dance\";","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"No problem! Just remember to do your task before the deadline.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    void todoMissingInformationTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"todo\";","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please provide a description about your task.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    void deadlineMissingInformationTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"deadline /by 2023-09-20\";","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please include description about the task you would like to add.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    void deadlineMissingDateTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"deadline sleep\";","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please include the deadline date of your task after \\\"/by\\\" command.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    void deadlineInvalidTimeFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"deadline sleep /by 2023-09-23 9999\";","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please ensure your date and time are valid\";","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    void deadlineInvalidDateFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"deadline sleep /by 2023-09-2300 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please ensure your date and time are valid\";","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    void eventMissingInformationTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event /from 2023-09-23 2359 /to 2023-09-24 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please include information about the task you would like to add.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    void eventInvalidStartTimeFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /from 2023-09-23 9999 /to 2023-09-24 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    void eventInvalidEndTimeFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /from 2023-09-23 2359 /to 2023-09-24 9999\";","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"    void eventInvalidStartDateFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /from 2023-09-2300 2359 /to 2023-09-24 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    void eventInvalidEndDateFormatTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /from 2023-09-23 2359 /to 2023-09-2400 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please input a valid date and time\";","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"    void eventMissingStartDateTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /to 2023-09-24 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please verify you have included the start date after /from and \"","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"                + \"end date after /to commands\";","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"    void eventMissingEndDateTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"event sleep /from 2023-09-23 2359\";","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please verify you have included the start date after /from and \"","lastModifiedDate":"2023-09-20"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"                + \"end date after /to commands\";","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"    void markEmptyListTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"mark 1\";","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please add at least one task to your list first :)\";","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"    void unmarkEmptyListTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"unmark 1\";","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please add at least one task to your list first.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"    void deleteEmptyListTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"delete 1\";","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Can\u0027t delete from an empty list :(\";","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"    void validSortCommandTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"sort -a -d\";","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Done! I have sorted your list in descending alphabetical order!\";","lastModifiedDate":"2023-09-20"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"    void invalidSortByFlagTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"sort -s\";","lastModifiedDate":"2023-09-20"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Only sorting by alphabetical order or chronological order supported. Use flags\"","lastModifiedDate":"2023-09-20"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"                + \" -a for alphabetical and -c for chronological\";","lastModifiedDate":"2023-09-20"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"    void invalidSortDescendingFlagTest() {","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-20"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"        String command \u003d \"sort -a -s\";","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"        String expected \u003d \"Please check if you have a typo in your command. If you want to sort in descending order, \"","lastModifiedDate":"2023-09-20"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"                + \"use the flag -d\";","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(expected, parser.passUserCommand(command, tasklist));","lastModifiedDate":"2023-09-20"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"lihongguang00":193}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"todo","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"todo dance","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"deadline","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"deadline sing","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"deadline sing /by","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"deadline sing /by 2023-05-05 1800","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"event go to school /from 2023-09-11 0800 /to 2023-09-11 1800","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"bye","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"lihongguang00":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lihongguang00":1,"-":20}}]
