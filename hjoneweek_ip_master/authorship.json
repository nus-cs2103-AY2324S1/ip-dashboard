[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"T | [X] | read book","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"D | [ ] | return book | 20230607 1400","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"E | [ ] | project meeting | 20230709 1600-1800","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"T | [ ] | borrow book","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"D | [ ] | return book | 20230807 1400","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"E | [ ] | project meeting | 20230808 1500-1600","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"hjoneweek":6}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.util.Date;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public Deadline(String taskDescription, LocalDateTime by, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[D]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString() + \" (by: \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"                by.format(DateTimeFormatter.ofPattern(\"LLL dd yyyy Ka\")) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":21}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"            File dir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"            if (!dir.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"                dir.mkdir();","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"            File f \u003d new File(\"./data\", \"/duke.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"            if (!f.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"                f.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tHello! I\u0027m Ari.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tWhat can I do for you?\");","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"            echo();","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"     * Runs the Ari chatbot.","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"     * or is not one of \u0027events\u0027, \u0027todos\u0027, or \u0027deadline\u0027","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException throws DukeException if input is not formatted correctly","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    public static void echo() throws DukeException, FileNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"            lst.add(textToTask(scanner.nextLine()));","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        String commands \u003d input.nextLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        while (true) {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"            if (commands.equals(\"bye\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"                return;","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.equals(\"list\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"                showList(lst);","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"mark\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"                try {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"                    mark(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"unmark\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"                try {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"                    unmark(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"deadline\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"                addDeadline(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"todo\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"                addToDo(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"event\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"                addEvent(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"            } else if (commands.indexOf(\"delete\") \u003d\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"                try {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"                    deleteTask(lst, commands);","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"                throw new DukeException(\"\\t  OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"            commands \u003d input.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"     * Prints out all the tasks stored in the ArrayList.","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"    public static void showList(ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tHere are the task in your list:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + lst.get(i).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"    public static void clearFile(String filePath) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"        f.delete();","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        f.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"    public static void appendToFile(String filePath, String textToAppend) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"    public static void updateFileAfterMark(String filePath, int lineNumber) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"                String updatedLine \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d updatedLine.substring(0, updatedLine.indexOf(\"|\") + 2) +","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"                        \"[X]\" + updatedLine.substring(7) + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"hjoneweek"},"content":"        clearFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(filePath, updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"    public static void updateFileAfterUnmark(String filePath, int lineNumber) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"                String updatedLine \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d updatedLine.substring(0, updatedLine.indexOf(\"|\") + 2) +","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"                        \"[ ]\" + updatedLine.substring(7) + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"        clearFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(filePath, updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"    public static void updateFileAfterDelete(String filePath, int lineNumber) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"hjoneweek"},"content":"                scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"hjoneweek"},"content":"        clearFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(filePath, updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"hjoneweek"},"content":"    public static Task textToTask(String text) throws DukeException{","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"hjoneweek"},"content":"        String identifier \u003d text.substring(0, 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"hjoneweek"},"content":"        String status \u003d text.substring(4, 7);","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"hjoneweek"},"content":"        boolean isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"hjoneweek"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"hjoneweek"},"content":"        if (status.equals(\"[ ]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"hjoneweek"},"content":"            isDone \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"hjoneweek"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"hjoneweek"},"content":"        switch (identifier) {","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"hjoneweek"},"content":"            case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"hjoneweek"},"content":"                String todo \u003d text.substring(10);","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"hjoneweek"},"content":"                task \u003d new ToDo(todo, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"hjoneweek"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"hjoneweek"},"content":"            case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"hjoneweek"},"content":"                String deadline \u003d text.substring(10, text.indexOf(\" | \", 10));","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"hjoneweek"},"content":"                String by \u003d text.substring(text.indexOf(\"|\", 10) + 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"hjoneweek"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"hjoneweek"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"hjoneweek"},"content":"                task \u003d new Deadline(deadline, dateTime, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"hjoneweek"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"hjoneweek"},"content":"            case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"hjoneweek"},"content":"                String event \u003d text.substring(10, text.indexOf(\" | \", 10));","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"hjoneweek"},"content":"                String from \u003d text.substring(text.indexOf(\"|\", 10) + 2, text.indexOf(\"-\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"hjoneweek"},"content":"                DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"hjoneweek"},"content":"                LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter1);","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"hjoneweek"},"content":"                String to \u003d text.substring(text.indexOf(\"-\") + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":216,"author":{"gitId":"hjoneweek"},"content":"                DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":217,"author":{"gitId":"hjoneweek"},"content":"                LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-30"},{"lineNumber":218,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":219,"author":{"gitId":"hjoneweek"},"content":"                task \u003d new Event(event, dateTimeFrom, dateTimeTo, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":220,"author":{"gitId":"hjoneweek"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"hjoneweek"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"Incorrect format of the file :(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"hjoneweek"},"content":"            return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":230,"author":{"gitId":"hjoneweek"},"content":"     * Deletes a specified task in the commands","lastModifiedDate":"2023-08-30"},{"lineNumber":231,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":232,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command indicating which task to delete","lastModifiedDate":"2023-08-23"},{"lineNumber":233,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":234,"author":{"gitId":"hjoneweek"},"content":"    public static void deleteTask(ArrayList\u003cTask\u003e lst, String commands) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":235,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":236,"author":{"gitId":"hjoneweek"},"content":"        int index \u003d java.lang.Integer.parseInt(commands.substring(\"delete\".length() + 1)) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":237,"author":{"gitId":"hjoneweek"},"content":"        Task removedTask \u003d lst.remove(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":238,"author":{"gitId":"hjoneweek"},"content":"        updateFileAfterDelete(\"./data/duke.txt\", index + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":239,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":240,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":241,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + removedTask.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":242,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + lst.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":243,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":244,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":245,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":246,"author":{"gitId":"hjoneweek"},"content":"     * Adds a task with a deadline to the ArrayList of tasks","lastModifiedDate":"2023-08-23"},{"lineNumber":247,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":248,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command with descriptions about a deadline and a date","lastModifiedDate":"2023-08-23"},{"lineNumber":249,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException throws DukeException if input is not formatted correctly","lastModifiedDate":"2023-08-23"},{"lineNumber":250,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":251,"author":{"gitId":"hjoneweek"},"content":"    public static void addDeadline(ArrayList\u003cTask\u003e lst, String commands) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":252,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":253,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":254,"author":{"gitId":"hjoneweek"},"content":"        int byIndex \u003d commands.indexOf(\"/by\");","lastModifiedDate":"2023-08-23"},{"lineNumber":255,"author":{"gitId":"hjoneweek"},"content":"        int commandIndex \u003d commands.indexOf(\" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":256,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":257,"author":{"gitId":"hjoneweek"},"content":"        if (byIndex \u003d\u003d -1 || commandIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":258,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"\\t  OOPS!!! The description of a deadline and time cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":259,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":260,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":261,"author":{"gitId":"hjoneweek"},"content":"        String by \u003d commands.substring(byIndex + \"/by\".length() + 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":262,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":263,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"hjoneweek"},"content":"        String command \u003d commands.substring(commandIndex + 1, byIndex - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":266,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":267,"author":{"gitId":"hjoneweek"},"content":"        Task deadline \u003d new Deadline(command, dateTime, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"hjoneweek"},"content":"        lst.add(deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":269,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"hjoneweek"},"content":"        String file \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":271,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":272,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":273,"author":{"gitId":"hjoneweek"},"content":"            appendToFile(file, \"D | \" + deadline.getStatusIcon() + \" | \" + deadline.taskDescription +","lastModifiedDate":"2023-08-30"},{"lineNumber":274,"author":{"gitId":"hjoneweek"},"content":"                    \" | \" + by + System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":275,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":276,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":277,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":278,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":279,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":280,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":281,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + lst.get(lst.size() - 1).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":282,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + lst.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":283,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":284,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":285,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":286,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":287,"author":{"gitId":"hjoneweek"},"content":"     * Adds a to-do to the ArrayList of tasks","lastModifiedDate":"2023-08-23"},{"lineNumber":288,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":289,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command with descriptions about a to-do","lastModifiedDate":"2023-08-23"},{"lineNumber":290,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException throws DukeException if input is not formatted correctly","lastModifiedDate":"2023-08-23"},{"lineNumber":291,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":292,"author":{"gitId":"hjoneweek"},"content":"    public static void addToDo(ArrayList\u003cTask\u003e lst, String commands) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":293,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":294,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":295,"author":{"gitId":"hjoneweek"},"content":"        int commandIndex \u003d commands.indexOf(\" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":296,"author":{"gitId":"hjoneweek"},"content":"        String command \u003d commands.substring(commandIndex + 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":297,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":298,"author":{"gitId":"hjoneweek"},"content":"        if (commandIndex \u003d\u003d -1 || command.equals(\"\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":299,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"\\t  OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":300,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":301,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":302,"author":{"gitId":"hjoneweek"},"content":"        Task todo \u003d new ToDo(command, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":303,"author":{"gitId":"hjoneweek"},"content":"        lst.add(todo);","lastModifiedDate":"2023-08-30"},{"lineNumber":304,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":305,"author":{"gitId":"hjoneweek"},"content":"        String file \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":306,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":307,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":308,"author":{"gitId":"hjoneweek"},"content":"            appendToFile(file, \"T | \" + todo.getStatusIcon() + \" | \" + todo.taskDescription + System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":309,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":310,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":311,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":312,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":313,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":314,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":315,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + lst.get(lst.size() - 1).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":316,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + lst.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":317,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":318,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":319,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":320,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":321,"author":{"gitId":"hjoneweek"},"content":"     * Adds an event to the ArrayList of tasks","lastModifiedDate":"2023-08-23"},{"lineNumber":322,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":323,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command with descriptions about an event and its duration","lastModifiedDate":"2023-08-23"},{"lineNumber":324,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException throws DukeException if input is not formatted correctly","lastModifiedDate":"2023-08-23"},{"lineNumber":325,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":326,"author":{"gitId":"hjoneweek"},"content":"    public static void addEvent(ArrayList\u003cTask\u003e lst, String commands) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":327,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":328,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":329,"author":{"gitId":"hjoneweek"},"content":"        int fromIndex \u003d commands.indexOf(\"/from\");","lastModifiedDate":"2023-08-23"},{"lineNumber":330,"author":{"gitId":"hjoneweek"},"content":"        int toIndex \u003d commands.indexOf(\"/to\");","lastModifiedDate":"2023-08-23"},{"lineNumber":331,"author":{"gitId":"hjoneweek"},"content":"        int commandIndex \u003d commands.indexOf(\" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":332,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":333,"author":{"gitId":"hjoneweek"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1 || commandIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":334,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"\\t  OOPS!!! The description of an event and time cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":335,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":336,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":337,"author":{"gitId":"hjoneweek"},"content":"        String from \u003d commands.substring(fromIndex + \"/from\".length() + 1, toIndex - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":338,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":339,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter1);","lastModifiedDate":"2023-08-30"},{"lineNumber":340,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":341,"author":{"gitId":"hjoneweek"},"content":"        String to \u003d commands.substring(toIndex + \"/to\".length() + 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":342,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":343,"author":{"gitId":"hjoneweek"},"content":"        LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-30"},{"lineNumber":344,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":345,"author":{"gitId":"hjoneweek"},"content":"        String command \u003d commands.substring(commandIndex + 1, fromIndex - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":346,"author":{"gitId":"hjoneweek"},"content":"        Task event \u003d new Event(command, dateTimeFrom, dateTimeTo, false);","lastModifiedDate":"2023-08-30"},{"lineNumber":347,"author":{"gitId":"hjoneweek"},"content":"        lst.add(event);","lastModifiedDate":"2023-08-30"},{"lineNumber":348,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":349,"author":{"gitId":"hjoneweek"},"content":"        String file \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":350,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":351,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":352,"author":{"gitId":"hjoneweek"},"content":"            appendToFile(file, \"E | \" + event.getStatusIcon() + \" | \" + event.taskDescription +","lastModifiedDate":"2023-08-30"},{"lineNumber":353,"author":{"gitId":"hjoneweek"},"content":"                    \" | \" + from + \"-\" + to + System.lineSeparator());","lastModifiedDate":"2023-08-30"},{"lineNumber":354,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":355,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":356,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":357,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":358,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":359,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":360,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":361,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + lst.get(lst.size() - 1).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":362,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + lst.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":363,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":364,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":365,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":366,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":367,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":368,"author":{"gitId":"hjoneweek"},"content":"     * Marks a specified task as done","lastModifiedDate":"2023-08-23"},{"lineNumber":369,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":370,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command indicating which task to mark as done","lastModifiedDate":"2023-08-23"},{"lineNumber":371,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":372,"author":{"gitId":"hjoneweek"},"content":"    public static void mark(ArrayList\u003cTask\u003e lst, String commands) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":373,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":374,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":375,"author":{"gitId":"hjoneweek"},"content":"        int index \u003d java.lang.Integer.parseInt(commands.substring(\"mark\".length() + 1)) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":376,"author":{"gitId":"hjoneweek"},"content":"        lst.get(index).changeStatus();","lastModifiedDate":"2023-08-22"},{"lineNumber":377,"author":{"gitId":"hjoneweek"},"content":"        updateFileAfterMark(\"./data/duke.txt\", index + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":378,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":379,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":380,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + lst.get(index).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":381,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":382,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":383,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":384,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":385,"author":{"gitId":"hjoneweek"},"content":"     * Unmarks a specified task from \u0027done\u0027","lastModifiedDate":"2023-08-23"},{"lineNumber":386,"author":{"gitId":"hjoneweek"},"content":"     * @param lst an ArrayList of tasks storing all the tasks for the user","lastModifiedDate":"2023-08-23"},{"lineNumber":387,"author":{"gitId":"hjoneweek"},"content":"     * @param commands a command indicating which task to unmark","lastModifiedDate":"2023-08-23"},{"lineNumber":388,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":389,"author":{"gitId":"hjoneweek"},"content":"    public static void unmark(ArrayList\u003cTask\u003e lst, String commands) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":390,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":391,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":392,"author":{"gitId":"hjoneweek"},"content":"        int index \u003d java.lang.Integer.parseInt(commands.substring(\"unmark\".length() + 1)) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":393,"author":{"gitId":"hjoneweek"},"content":"        lst.get(index).changeStatus();","lastModifiedDate":"2023-08-22"},{"lineNumber":394,"author":{"gitId":"hjoneweek"},"content":"        updateFileAfterUnmark(\"./data/duke.txt\", index + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":395,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":396,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":397,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + lst.get(index).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":398,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-22"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"hjoneweek":397,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.lang.Exception;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"        super();","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"        String horizontalLine \u003d \"\\t_______________________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  Format the command correctly\");","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"    protected String taskDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"    protected LocalTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public Event(String taskDescription, LocalDateTime from, LocalTime to, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[E]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    //System.out.println(dateTime.format(DateTimeFormatter.ofPattern(\"LLL dd yyyy Ka\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString() +","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"                \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"LLL dd yyyy Ka\")) +","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"                \" to: \" + to.format(DateTimeFormatter.ofPattern(\"Ka\")) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":26}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"    protected String taskDescription;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"    public Task(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"     * @return a String depending on whether the task is marked as done or not","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     * Changes the status of the task from \u0027not done\u0027 to \u0027done\u0027 or vice versa","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public void changeStatus() {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        return this.getStatusIcon() + \" \" + this.taskDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"hjoneweek":31}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"    protected String taskDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"    public ToDo(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[T]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"deadline return book /by 20230607 1400","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"event project meeting /from 20230709 1600 /to 1800","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"mark 4","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"deadline return book /by 20230807 1400","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"event project meeting /from 20230808 1500 /to 1600","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"delete 3","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":13}}]
