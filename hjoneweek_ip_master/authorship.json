[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"hjoneweek":15,"-":42}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"T | [X] | read book","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"D | [ ] | return book | 20230608 1500","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"T | [X] | join sports club","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"T | [ ] | borrow book","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"D | [ ] | hw | 20230814 1400","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"E | [ ] | seminar | 20230808 1600-1700","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":6}},{"path":"data/loadTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"T | [X] | borrow book","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"T | [ ] | read book","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"D | [ ] | return book  | 20230607 1400","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"E | [ ] | project meeting  | 20230808 1500-1600","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"hjoneweek":4}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    private void flip() {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import duke.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import commands.Command;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":" * Duke class that runs the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public Duke(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public String getResponse(String input) throws DukeException, IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        return c.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     * Runs the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException if command is not formatted correctly","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if file cannot be accessed","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    public void run() throws DukeException, IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        ui.welcome();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        while (true) {","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            String command \u003d ui.readCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            if (command.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"                ui.bye();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            Command c \u003d Parser.parse(command);","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"            c.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"            new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"hjoneweek":54,"-":3}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":8}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"            duke \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":38}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    private void handleUserInput() throws DukeException, IOException {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":53}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":12}},{"path":"src/main/java/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import duke.Deadline;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class DeadlineCommand extends Command{","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private Task deadlineToAdd;","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    private LocalDateTime by;","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private String byInString;","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter DEADLINE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public DeadlineCommand(String[] taskInfo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        String taskDescription \u003d taskInfo[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        this.byInString \u003d taskInfo[1].substring(\"by \".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.by \u003d LocalDateTime.parse(byInString, DEADLINE_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.deadlineToAdd \u003d new Deadline(taskDescription, by, false);","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        tasks.addTask(this.deadlineToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        storage.appendToFile(\"D | \" + this.deadlineToAdd.getStatusIcon() + \" | \"","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"                + this.deadlineToAdd.getTaskDescription() + \" | \" + this.byInString","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"                + System.lineSeparator());","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAddedTask(tasks.getSize(), this.deadlineToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":36}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    private int indexToDelete;","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public DeleteCommand(String index) {","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        this.indexToDelete \u003d java.lang.Integer.parseInt(index) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        Task removedTask \u003d tasks.deleteTask(indexToDelete);","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        storage.updateFileAfterDelete(indexToDelete + 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAfterDelete(tasks.getSize(), removedTask);","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":24}},{"path":"src/main/java/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import duke.Event;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"public class EventCommand extends Command{","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private Task eventToAdd;","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private LocalTime to;","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    private String fromInString;","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    private String toInString;","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter FROM_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter TO_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    public EventCommand(String[] taskInfo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        String taskDescription \u003d taskInfo[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        this.fromInString \u003d taskInfo[1].substring(\"from \".length(), \"from \".length() + \"yyyyMMdd HHmm\".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        this.toInString \u003d taskInfo[2].substring(\"to \".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        this.from \u003d LocalDateTime.parse(fromInString, FROM_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        this.to \u003d LocalTime.parse(toInString, TO_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        this.eventToAdd \u003d new Event(taskDescription, from, to, false);","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        tasks.addTask(this.eventToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        storage.appendToFile(\"E | \" + this.eventToAdd.getStatusIcon() + \" | \"","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"                + this.eventToAdd.getTaskDescription() + \" | \" + this.fromInString + \"-\" + this.toInString","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"                + System.lineSeparator());","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAddedTask(tasks.getSize(), this.eventToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":44}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private String keywordToFind;","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        this.keywordToFind \u003d keyword;","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e tasksWithKeyword \u003d tasks.findTaskUsingKeyword(this.keywordToFind);","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        return ui.printMatchingTasks(tasksWithKeyword);","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":23}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"        return ui.printList(tasks);","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":15}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    private int indexToMark;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public MarkCommand(String index) {","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        this.indexToMark \u003d java.lang.Integer.parseInt(index) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        tasks.changeStatusOfTask(indexToMark);","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        storage.updateFileAfterMark(indexToMark + 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAfterMark(indexToMark, tasks);","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":23}},{"path":"src/main/java/commands/PostponeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class PostponeCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private int indexToPostpone;","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    private String newDeadlineInStr;","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private LocalDateTime newDeadline;","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter DEADLINE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public PostponeCommand(String[] taskInfo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        this.indexToPostpone \u003d java.lang.Integer.parseInt(taskInfo[0].substring(0, 1)) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.newDeadlineInStr \u003d taskInfo[1].substring(\"by \".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.newDeadline \u003d LocalDateTime.parse(newDeadlineInStr, DEADLINE_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        tasks.postponeDeadline(this.indexToPostpone, this.newDeadline);","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        storage.updateFileAfterPostpone(tasks.getTasks().get(this.indexToPostpone),","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"                this.indexToPostpone + 1,","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"                newDeadlineInStr);","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAfterPostpone(tasks.getTasks().get(this.indexToPostpone));","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":36}},{"path":"src/main/java/commands/RescheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"public class RescheduleCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private int indexToReschedule;","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    private String newFromInStr;","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    private LocalDateTime newFrom;","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private String newToInStr;","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    private LocalTime newTo;","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter FROM_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    private final DateTimeFormatter TO_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public RescheduleCommand(String[] taskInfo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        this.indexToReschedule \u003d java.lang.Integer.parseInt(taskInfo[0].substring(0,1)) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.newFromInStr \u003d taskInfo[1].substring(\"from \".length(), \"from \".length() + \"yyyyMMdd HHmm\".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.newToInStr \u003d taskInfo[2].substring(\"to \".length());","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.newFrom \u003d LocalDateTime.parse(newFromInStr, FROM_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        this.newTo \u003d LocalTime.parse(newToInStr, TO_FORMATTER);","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        tasks.rescheduleEvent(this.indexToReschedule, this.newFrom, this.newTo);","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        storage.updateFileAfterReschedule(tasks.getTasks().get(indexToReschedule),","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"                this.indexToReschedule + 1,","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"                this.newFromInStr,","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"                this.newToInStr);","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAfterReschedule(tasks.getTasks().get(indexToReschedule));","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":42}},{"path":"src/main/java/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import duke.Task;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import duke.ToDo;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private Task toDoToAdd;","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public ToDoCommand(String taskInfo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        Task todo \u003d new ToDo(taskInfo, false);","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        this.toDoToAdd \u003d todo;","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        tasks.addTask(this.toDoToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        storage.appendToFile(\"T | \" + this.toDoToAdd.getStatusIcon() + \" | \" +","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"                this.toDoToAdd.getTaskDescription()+ System.lineSeparator());","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAddedTask(tasks.getSize(), this.toDoToAdd);","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":26}},{"path":"src/main/java/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package commands;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    private int indexToUnmark;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public UnmarkCommand(String index) {","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"        this.indexToUnmark \u003d java.lang.Integer.parseInt(index) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        tasks.changeStatusOfTask(indexToUnmark);","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        storage.updateFileAfterMark(indexToUnmark + 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        return ui.printAfterUnmark(indexToUnmark, tasks);","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"hjoneweek":22}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Deadline class that inherits from parent class Task. Stores information about the task and the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public Deadline(String taskDescription, LocalDateTime by, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[D]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public void postpone(LocalDateTime newBy) {","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        this.by \u003d newBy;","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString() + \" (by: \"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"LLL dd yyyy Ka\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":29}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.lang.Exception;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":" * DukeException class that throws Exception if the input is not formatted correctly. Inherits Exception class.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"        super(msg);","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Event class that stores information about the task and duration of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" * Inherits from the parent class Task.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    protected LocalTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public Event(String taskDescription, LocalDateTime from, LocalTime to, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[E]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public void reschedule(LocalDateTime newFrom, LocalTime newTo) {","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        this.from \u003d newFrom;","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.to \u003d newTo;","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString()","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"                + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"LLL dd yyyy Ka\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"                + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"Ka\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":35}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import commands.*;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":" * Parser class that makes sense of user command and executes appropriate actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public static Command parse(String command) throws DukeException{","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        String commandIdentifier \u003d command.substring(0, command.indexOf(\" \"));","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        String taskInfo \u003d command.substring(command.indexOf(\" \") + 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String[] taskInfoInArr \u003d taskInfo.split(\" [/]\");","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        switch (commandIdentifier) {","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        case (\"todo\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"            return new ToDoCommand(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        case (\"event\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            return new EventCommand(taskInfoInArr);","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        case (\"deadline\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            return new DeadlineCommand(taskInfoInArr);","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        case (\"mark\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            return new MarkCommand(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        case (\"unmark\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"            return new UnmarkCommand(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        case (\"delete\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"            return new DeleteCommand(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        case (\"find\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            return new FindCommand(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        case (\"postpone\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            return new PostponeCommand(taskInfoInArr);","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        case (\"reschedule\") :","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            return new RescheduleCommand(taskInfoInArr);","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        throw new DukeException(\"Invalid command\");","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"hjoneweek":48}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":" * Storage class that deals with loading tasks from the file and saving tasks to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    private String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     * Instantiates a Storage object. Creates directory and file if they aren\u0027t created yet","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     * @param filePath a file path in String","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        assert filePath !\u003d null : \"File path cannot be empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        String directoryPath \u003d this.filePath.substring(0, this.filePath.indexOf(\"/\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        String fileName \u003d this.filePath.substring(this.filePath.indexOf(\"/\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            File dir \u003d new File(directoryPath);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            if (!dir.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"                dir.mkdir();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"            File f \u003d new File(directoryPath, fileName);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            if (!f.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"                f.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"     * Loads the file and reads it to store it into the ArrayList of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"     * @return an ArrayList of task","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"     * @throws FileNotFoundException if the scanner object cannot find the file","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"                lst.add(textToTask(scanner.nextLine()));","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        return lst;","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"     * Converts text in the String to Task objects","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"     * @param text a line of text in text file","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"     * @return a Task object","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"     * @throws DukeException if the text is not formatted correctly.","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"    public static Task textToTask(String text) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"        String[] arr \u003d text.split(\" [|] \");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        String identifier \u003d arr[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"        String status \u003d arr[1];","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"        boolean isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"        if (status.equals(\"[ ]\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"            isDone \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"            isDone \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"        switch (identifier) {","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"        case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"            String todo \u003d arr[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"            task \u003d new ToDo(todo, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"        case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"            String deadline \u003d arr[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"            String by \u003d arr[3];","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(by, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"            task \u003d new Deadline(deadline, dateTime, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"        case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"            String event \u003d arr[2];","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"            String from \u003d arr[3].substring(0, arr[3].indexOf(\"-\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"            LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter);","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"            String to \u003d arr[3].substring(arr[3].indexOf(\"-\") + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"            LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"            task \u003d new Event(event, dateTimeFrom, dateTimeTo, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"Incorrect format of the file :(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"            return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"     * Clears the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"    public void clearFile() throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"        f.delete();","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"        f.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"     * Appends a line of text to an existing file.","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"     * @param textToAppend text that will be appended.","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"    public void appendToFile(String textToAppend) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"hjoneweek"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"hjoneweek"},"content":"     * Updates the file after a task has been marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"     * @param lineNumber an integer representing which task has been marked as done","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"    public void updateFileAfterMark(int lineNumber) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"                String updatedLine \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d updatedLine.substring(0, updatedLine.indexOf(\"|\") + 2) +","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"                        \"[X]\" + updatedLine.substring(7) + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"        clearFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"hjoneweek"},"content":"     * Updates the file after a task has been unmarked from done.","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"hjoneweek"},"content":"     * @param lineNumber an integer representing which task has been unmarked","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"hjoneweek"},"content":"    public void updateFileAfterUnmark(int lineNumber) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":175,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"hjoneweek"},"content":"                String updatedLine \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d updatedLine.substring(0, updatedLine.indexOf(\"|\") + 2) +","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"hjoneweek"},"content":"                        \"[ ]\" + updatedLine.substring(7) + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"hjoneweek"},"content":"        clearFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"hjoneweek"},"content":"     * Updates a file after a task has been deleted from TaskList","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"hjoneweek"},"content":"     * @param lineNumber an integer representing which task has been deleted","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"hjoneweek"},"content":"    public void updateFileAfterDelete(int lineNumber) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"hjoneweek"},"content":"                scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":213,"author":{"gitId":"hjoneweek"},"content":"        clearFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(updatedContent);","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":216,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":217,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":218,"author":{"gitId":"hjoneweek"},"content":"     * Updates a file after a task\u0027s due date has been postponed.","lastModifiedDate":"2023-09-15"},{"lineNumber":219,"author":{"gitId":"hjoneweek"},"content":"     * @param postponedTask deadline task that has been postponed","lastModifiedDate":"2023-09-15"},{"lineNumber":220,"author":{"gitId":"hjoneweek"},"content":"     * @param lineNumber an integer representing which task has been postponed","lastModifiedDate":"2023-09-15"},{"lineNumber":221,"author":{"gitId":"hjoneweek"},"content":"     * @param newDeadline new deadline in String","lastModifiedDate":"2023-09-15"},{"lineNumber":222,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-09-15"},{"lineNumber":223,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":224,"author":{"gitId":"hjoneweek"},"content":"    public void updateFileAfterPostpone(Task postponedTask, int lineNumber, String newDeadline) throws IOException {","lastModifiedDate":"2023-09-15"},{"lineNumber":225,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-09-15"},{"lineNumber":226,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-09-15"},{"lineNumber":227,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-09-15"},{"lineNumber":228,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":229,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":230,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-09-15"},{"lineNumber":231,"author":{"gitId":"hjoneweek"},"content":"                scanner.nextLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":232,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d \"D | \" + postponedTask.getStatusIcon() + \" | \" +","lastModifiedDate":"2023-09-15"},{"lineNumber":233,"author":{"gitId":"hjoneweek"},"content":"                        postponedTask.taskDescription + \" | \" + newDeadline +","lastModifiedDate":"2023-09-15"},{"lineNumber":234,"author":{"gitId":"hjoneweek"},"content":"                        System.lineSeparator();","lastModifiedDate":"2023-09-15"},{"lineNumber":235,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-09-15"},{"lineNumber":236,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-09-15"},{"lineNumber":237,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":238,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-09-15"},{"lineNumber":239,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-09-15"},{"lineNumber":240,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":241,"author":{"gitId":"hjoneweek"},"content":"        clearFile();","lastModifiedDate":"2023-09-15"},{"lineNumber":242,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(updatedContent);","lastModifiedDate":"2023-09-15"},{"lineNumber":243,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":244,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":245,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":246,"author":{"gitId":"hjoneweek"},"content":"     * Updates a file after an event has been rescheduled.","lastModifiedDate":"2023-09-15"},{"lineNumber":247,"author":{"gitId":"hjoneweek"},"content":"     * @param rescheduledTask event task that has been rescheduled","lastModifiedDate":"2023-09-15"},{"lineNumber":248,"author":{"gitId":"hjoneweek"},"content":"     * @param lineNumber an integer representing which task has been postponed","lastModifiedDate":"2023-09-15"},{"lineNumber":249,"author":{"gitId":"hjoneweek"},"content":"     * @param newFrom new date and time in which the event starts in String","lastModifiedDate":"2023-09-15"},{"lineNumber":250,"author":{"gitId":"hjoneweek"},"content":"     * @param newTo new time in which the event ends in String","lastModifiedDate":"2023-09-15"},{"lineNumber":251,"author":{"gitId":"hjoneweek"},"content":"     * @throws IOException if File cannot be opened / located","lastModifiedDate":"2023-09-15"},{"lineNumber":252,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":253,"author":{"gitId":"hjoneweek"},"content":"    public void updateFileAfterReschedule(Task rescheduledTask, int lineNumber, String newFrom, String newTo)","lastModifiedDate":"2023-09-15"},{"lineNumber":254,"author":{"gitId":"hjoneweek"},"content":"            throws IOException{","lastModifiedDate":"2023-09-15"},{"lineNumber":255,"author":{"gitId":"hjoneweek"},"content":"        String updatedContent \u003d \"\";","lastModifiedDate":"2023-09-15"},{"lineNumber":256,"author":{"gitId":"hjoneweek"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-09-15"},{"lineNumber":257,"author":{"gitId":"hjoneweek"},"content":"        Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-09-15"},{"lineNumber":258,"author":{"gitId":"hjoneweek"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":259,"author":{"gitId":"hjoneweek"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":260,"author":{"gitId":"hjoneweek"},"content":"            if (i \u003d\u003d lineNumber) {","lastModifiedDate":"2023-09-15"},{"lineNumber":261,"author":{"gitId":"hjoneweek"},"content":"                scanner.nextLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":262,"author":{"gitId":"hjoneweek"},"content":"                updatedContent +\u003d \"E | \" + rescheduledTask.getStatusIcon() + \" | \" +","lastModifiedDate":"2023-09-15"},{"lineNumber":263,"author":{"gitId":"hjoneweek"},"content":"                        rescheduledTask.taskDescription + \" | \" + newFrom + \"-\" + newTo +","lastModifiedDate":"2023-09-15"},{"lineNumber":264,"author":{"gitId":"hjoneweek"},"content":"                        System.lineSeparator();","lastModifiedDate":"2023-09-15"},{"lineNumber":265,"author":{"gitId":"hjoneweek"},"content":"                i++;","lastModifiedDate":"2023-09-15"},{"lineNumber":266,"author":{"gitId":"hjoneweek"},"content":"                continue;","lastModifiedDate":"2023-09-15"},{"lineNumber":267,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":268,"author":{"gitId":"hjoneweek"},"content":"            updatedContent +\u003d scanner.nextLine() + System.lineSeparator();","lastModifiedDate":"2023-09-15"},{"lineNumber":269,"author":{"gitId":"hjoneweek"},"content":"            i++;","lastModifiedDate":"2023-09-15"},{"lineNumber":270,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":271,"author":{"gitId":"hjoneweek"},"content":"        clearFile();","lastModifiedDate":"2023-09-15"},{"lineNumber":272,"author":{"gitId":"hjoneweek"},"content":"        appendToFile(updatedContent);","lastModifiedDate":"2023-09-15"},{"lineNumber":273,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":274,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"hjoneweek":274}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":" * A task class. Stores information about the description of task and whether it is done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"    protected String taskDescription;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    public Task(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"     * @return a String depending on whether the task is marked as done or not","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        return this.taskDescription;","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"     * Changes the status of the task from \u0027not done\u0027 to \u0027done\u0027 or vice versa","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    public void changeStatus() {","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        return this.getStatusIcon() + \" \" + this.taskDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"hjoneweek":40}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * TaskList class storing all the tasks in an ArrayList.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public String printTasks() {","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        String list \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + tasks.get(i).toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            list +\u003d (i + 1) + \".\" + tasks.get(i).toString() + \"\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        return list;","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public void changeStatusOfTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        this.tasks.get(index).changeStatus();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        return this.tasks.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"     * Finds task objects that has matching keyword.","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"     * @param keyword keyword in String look for","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"     * @return an ArrayList of task that has matching keyword","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    public ArrayList\u003cTask\u003e findTaskUsingKeyword(String keyword) {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"            if (tasks.get(i).taskDescription.contains(keyword)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"                matchingTasks.add(tasks.get(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        return matchingTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    public void postponeDeadline(int index, LocalDateTime newDateTime) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        if (!(this.tasks.get(index) instanceof Deadline)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"Wrong type of task\");","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        ((Deadline) this.tasks.get(index)).postpone(newDateTime);","lastModifiedDate":"2023-09-15"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"    public void rescheduleEvent(int index, LocalDateTime newStartTime, LocalTime newEndTime) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"        if (!(this.tasks.get(index) instanceof Event)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"            throw new DukeException(\"Wrong type of task\");","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"        ((Event) this.tasks.get(index)).reschedule(newStartTime, newEndTime);","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"hjoneweek":78}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":" * /nTodo class that inherits from parent class Task. Stores information about the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"    private String identifier;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"    public ToDo(String taskDescription, boolean isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"        super(taskDescription, isDone);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"        this.identifier \u003d \"[T]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        return this.identifier + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":18}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * UI class that deals with interactions with the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public Ui() {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static void printLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t_______________________________________________________________________\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * Prints out welcome message at the start of the programme.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public void welcome() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tHello! I\u0027m Ari.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tWhat can I do for you?\");","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     * Prints out bye message at the end of the programme.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public void bye() {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"     * Takes in input from the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"     * @return user input","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        return input.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    public String printList(TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tHere are the task in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        String list \u003d tasks.printTasks();","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        return list;","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"     * Prints information about the task that has been added to the TaskList object.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"     * Also prints the updated number of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"     * @param size updated number of tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"     * @param task task that has been added","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    public String printAddedTask(int size, Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + task.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"        return \"Got it. I\u0027ve added this task:\" + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"                + \"  \" + task.toString() + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"                + \"Now you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"hjoneweek"},"content":"     * Prints information about the task that has been marked as done","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"     * @param index task number","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"     * @param tasks TaskList object","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"    public String printAfterMark(int index, TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + tasks.getTasks().get(index).toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"        return \"Nice! I\u0027ve marked this task as done:\" + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"                + \"  \" + tasks.getTasks().get(index).toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"     * Prints information about the task that has been marked as undone","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"     * @param index task number","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"     * @param tasks TaskList object","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"    public String printAfterUnmark(int index, TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tOK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + tasks.getTasks().get(index).toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\" + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"                + \"  \" + tasks.getTasks().get(index).toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"     * Prints out information about the task that has been deleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"     * @param size updated number of tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"     * @param removedTask task that has been removed","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"    public String printAfterDelete(int size, Task removedTask) {","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + removedTask.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"        return \"\\t\" + removedTask.toString() + \"\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"                + \"Now you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"     * Prints out information about the task that contains a specified keyword.","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"     * @param taskList an ArrayList of task that contain the keyword","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"    public String printMatchingTasks(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"        String listOfMatchingTasks \u003d \"\\tHere are the matching tasks in your list: \\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"hjoneweek"},"content":"            System.out.println(\"\\t\" + (i + 1) + \".\" + taskList.get(i).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"            listOfMatchingTasks +\u003d (i + 1) + \".\" + taskList.get(i).toString() + \"\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":136,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":139,"author":{"gitId":"hjoneweek"},"content":"        return listOfMatchingTasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":142,"author":{"gitId":"hjoneweek"},"content":"     * Prints out information about the task (deadline) that has been postponed.","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"     * @param postponedTask a deadline task that has been postponed","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"    public String printAfterPostpone(Task postponedTask) {","lastModifiedDate":"2023-09-15"},{"lineNumber":147,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tOk, We have postponed the following deadline\");","lastModifiedDate":"2023-09-15"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + postponedTask.toString());","lastModifiedDate":"2023-09-15"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":152,"author":{"gitId":"hjoneweek"},"content":"        return \"Ok, We have postponed the following deadline\" + \"\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"                + \"  \" + postponedTask.toString();","lastModifiedDate":"2023-09-15"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"     * Prints out information about the task (event) that has been rescheduled.","lastModifiedDate":"2023-09-15"},{"lineNumber":158,"author":{"gitId":"hjoneweek"},"content":"     * @param rescheduledTask an event task that has been rescheduled","lastModifiedDate":"2023-09-15"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"     * @return what Ari prints out in String","lastModifiedDate":"2023-09-15"},{"lineNumber":160,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"    public String printAfterReschedule(Task rescheduledTask) {","lastModifiedDate":"2023-09-15"},{"lineNumber":162,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":163,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\tOk, We have rescheduled the following event\");","lastModifiedDate":"2023-09-15"},{"lineNumber":164,"author":{"gitId":"hjoneweek"},"content":"        System.out.println(\"\\t  \" + rescheduledTask.toString());","lastModifiedDate":"2023-09-15"},{"lineNumber":165,"author":{"gitId":"hjoneweek"},"content":"        printLine();","lastModifiedDate":"2023-09-15"},{"lineNumber":166,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":167,"author":{"gitId":"hjoneweek"},"content":"        return \"Ok, We have rescheduled the following event\" + \"\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":168,"author":{"gitId":"hjoneweek"},"content":"                + \" \" + rescheduledTask.toString();","lastModifiedDate":"2023-09-15"},{"lineNumber":169,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":170,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"hjoneweek":170}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"            \u003cFont name\u003d\"Courier New\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Enter\" textFill\u003d\"#0a0a0a\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"            \u003cFont name\u003d\"Courier New Bold\" size\u003d\"14.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"hjoneweek":26}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public void event_toString_test() {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d \"[E][ ] project meeting (from: Aug 08 2023 3PM to: 4PM)\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        String from \u003d \"20230808 1500\";","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        String to \u003d \"1600\";","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter1);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        String actual \u003d new Event(\"project meeting \", dateTimeFrom, dateTimeTo, false).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"hjoneweek":26}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"public class StorageTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void textToTask_test1() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d new ToDo(\"read book\", false).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        String actual \u003d Storage.textToTask(\"T | [ ] | read book\").toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public void textToTask_test2() throws DukeException{","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        String from \u003d \"20230808 1500\";","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"        String to \u003d \"1600\";","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter1);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d new Event(\"project meeting\", dateTimeFrom, dateTimeTo, true).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        String actual \u003d Storage.textToTask(\"E | [X] | project meeting | 20230808 1500-1600\").toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public void load_test() throws FileNotFoundException {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        String from \u003d \"20230808 1500\";","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        String to \u003d \"1600\";","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter1);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        LocalTime dateTimeTo \u003d LocalTime.parse(to, formatter2);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        String by \u003d \"20230607 1400\";","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeBy \u003d LocalDateTime.parse(by, formatter1);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        Storage storage \u003d new Storage(\"data/loadTest.txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e actualList \u003d storage.load();","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e expectedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new ToDo(\"borrow book\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new ToDo(\"read book\", false));","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new Deadline(\"return book \", dateTimeBy, false));","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new Event(\"project meeting \", dateTimeFrom, dateTimeTo, false));","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        String actual \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c actualList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"            actual +\u003d actualList.toString() + System.lineSeparator();","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"            expected +\u003d expectedList.toString() + System.lineSeparator();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"hjoneweek":68}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public void findTaskUsingKeyword_test1() throws FileNotFoundException {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"        TaskList tasks \u003d new TaskList(new Storage(\"data/loadTest.txt\").load());","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e actualList \u003d tasks.findTaskUsingKeyword(\"book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"        ArrayList\u003cTask\u003e expectedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        String by \u003d \"20230607 1400\";","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        LocalDateTime dateTimeBy \u003d LocalDateTime.parse(by, formatter1);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new ToDo(\"borrow book\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new ToDo(\"read book\", false));","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        expectedList.add(new Deadline(\"return book \", dateTimeBy, false));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"        String actual \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        String expected \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c actualList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"            actual +\u003d actualList.toString() + System.lineSeparator();","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"            expected +\u003d expectedList.toString() + System.lineSeparator();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"hjoneweek":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"deadline return book /by 20230607 1400","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"event project meeting /from 20230709 1600 /to 1800","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"mark 4","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"deadline hw /by 20230807 1400","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"event seminar /from 20230808 1500 /to 1600","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"delete 3","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"postpone 2 /by 20230608 1500","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"postpone 5 /by 20230814 1400","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"reschedule 6 /from 20230808 1600 /to 1700","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"hjoneweek":16}}]
