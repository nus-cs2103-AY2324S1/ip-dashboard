[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"    protected String by;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"    protected LocalDate dateBy;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"amosting"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"amosting"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"amosting"},"content":"    public void stringToDate() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"amosting"},"content":"        Pattern datePattern \u003d Pattern.compile(","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"amosting"},"content":"                \"^((2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26]))-02-29)$\"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"amosting"},"content":"                        + \"|^(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))$\"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"amosting"},"content":"                        + \"|^(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))$\"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"amosting"},"content":"                        + \"|^(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))$\");","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"amosting"},"content":"        Matcher dateTimeMatcher \u003d datePattern.matcher(this.by);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"amosting"},"content":"        if (!dateTimeMatcher.matches()) { // if datetime doesn\u0027t match, do nothing","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"amosting"},"content":"            this.dateBy \u003d null;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"amosting"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"amosting"},"content":"            Pattern dateTimePattern2 \u003d Pattern.compile(","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"amosting"},"content":"                    \"(\\\\d{4})-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])\"); // YYYY-MM-DD","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"amosting"},"content":"            Matcher dateTimePattern2Matcher \u003d dateTimePattern2.matcher(this.by);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"amosting"},"content":"            dateTimePattern2Matcher.matches();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"amosting"},"content":"            int day \u003d Integer.parseInt(dateTimePattern2Matcher.group(3));","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"amosting"},"content":"            int month \u003d Integer.parseInt(dateTimePattern2Matcher.group(2));","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"amosting"},"content":"            int year \u003d Integer.parseInt(dateTimePattern2Matcher.group(1));","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"amosting"},"content":"            this.dateBy \u003d LocalDate.of(year, month, day);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"amosting"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"amosting"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"amosting"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"amosting"},"content":"        if (dateBy \u003d\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"amosting"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"amosting"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"amosting"},"content":"            String formattedDate \u003d this.dateBy.format(formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"amosting"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":48}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    protected String from;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"    protected String to;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"amosting"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"amosting"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":15}},{"path":"src/main/java/IncorrectJarvisCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class IncorrectJarvisCommandException extends JarvisException {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    public IncorrectJarvisCommandException(String errorMsg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"        super(errorMsg);","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":5}},{"path":"src/main/java/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class InvalidTaskNumberException extends JarvisException {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    public InvalidTaskNumberException(String errorMsg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"        super(errorMsg);","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":5}},{"path":"src/main/java/Jarvis.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"amosting"},"content":"public class Jarvis {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"amosting"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(); // list of Tasks","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"amosting"},"content":"    private static ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e(); // list of valid commands","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"amosting"},"content":"    private static void addValidCommands() {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"list\");","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"bye\");","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"mark\");","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"uncheck\");","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"todo\");","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"deadline\");","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"amosting"},"content":"        validCommands.add(\"event\");","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"amosting"},"content":"    private static final String name \u003d \"Jarvis\";","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"amosting"},"content":"    private static final String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"amosting"},"content":"    private static final String greeting \u003d \"Good day Sir! I\u0027m \";","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"amosting"},"content":"    private static final String question \u003d \"How can I help you today Sir?\";","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"amosting"},"content":"    private static final String signOff \u003d \"Good bye Sir!\";","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"amosting"},"content":"    private static final String listInforming \u003d \"Here are the task in your list Sir:\";","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"amosting"},"content":"    private static final String markInforming \u003d \"Roger that Sir, I\u0027ve marked this task as done:\";","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"amosting"},"content":"    private static final String uncheckInforming \u003d \"Noted Sir, I\u0027ve marked this task as NOT done yet:\";","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"amosting"},"content":"    private static final String taskInforming \u003d \"As you please Sir, I\u0027ve added the task:\";","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"amosting"},"content":"    private static final String deleteInforming \u003d \"Alright Sir, I\u0027ve removed this task\";","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"amosting"},"content":"    private static void printGreeting() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"amosting"},"content":"        System.out.println(greeting + name + \"!\");","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"amosting"},"content":"        System.out.println(question);","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"amosting"},"content":"    private static void printBye() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"amosting"},"content":"        System.out.println(signOff);","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"amosting"},"content":"    private static void printList() {","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"amosting"},"content":"        System.out.println(listInforming);","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"amosting"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) { // listing out the current task","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"amosting"},"content":"            int count \u003d i + 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"amosting"},"content":"            Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"amosting"},"content":"            System.out.println(count + \".\" + currentTask.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"amosting"},"content":"    private static void printMark(Task currentTask) {","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"amosting"},"content":"        System.out.println(markInforming);","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"amosting"},"content":"        System.out.println(currentTask.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"amosting"},"content":"    private static void printUncheck(Task currentTask) {","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"amosting"},"content":"        System.out.println(uncheckInforming);","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"amosting"},"content":"        System.out.println(currentTask.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"amosting"},"content":"    private static void printTask(Task currentTask) {","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"amosting"},"content":"        System.out.println(taskInforming);","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"amosting"},"content":"        System.out.println(currentTask.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"amosting"},"content":"        System.out.println(\"You have now \" + taskList.size() + \" tasks in the list Sir.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"amosting"},"content":"    private static void printDelete(Task currentTask) {","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"amosting"},"content":"        System.out.println(deleteInforming);","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"amosting"},"content":"        System.out.println(currentTask.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"amosting"},"content":"        System.out.println(\"You have now \" + taskList.size() + \" tasks in the list Sir.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"amosting"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"amosting"},"content":"    // identifies which command has wrong formatting and prints feedback to user","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"amosting"},"content":"    private static void printIncorrectFormat(String inputCommand, String validInputCommand) {","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"amosting"},"content":"        if (validInputCommand.equals(\"\")) { // if input is empty","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"amosting"},"content":"            return;","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"amosting"},"content":"        // since command is valid, check if formatting of the command is correct","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"amosting"},"content":"        boolean markMatch \u003d inputCommand.matches(\"mark \\\\d+\");","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"amosting"},"content":"        boolean uncheckMatch \u003d inputCommand.matches(\"unmark \\\\d+\");","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"amosting"},"content":"        boolean todoMatch \u003d inputCommand.matches(\"todo .+\");","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"amosting"},"content":"        boolean deadlineMatch \u003d inputCommand.matches(\"deadline .+ /.+\");","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"amosting"},"content":"        boolean eventMatch \u003d inputCommand.matches(\"event .+ /.+ /.+\");","lastModifiedDate":"2023-08-23"},{"lineNumber":103,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"amosting"},"content":"        if (validInputCommand.equals(\"mark\") \u0026\u0026 !markMatch) { // if mark command but wrong format","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"amosting"},"content":"                throw new WrongJarvisCommandFormatException(\"Apologies Sir, the format of the mark command you provided is incorrect.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"amosting"},"content":"            } catch (WrongJarvisCommandFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    The following is the correct format:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"amosting"},"content":"                System.out.println(\"        mark \u003ctask number\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"amosting"},"content":"                return;","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"amosting"},"content":"        } else if (validInputCommand.equals(\"uncheck\") \u0026\u0026 !uncheckMatch) { // if uncheck command but wrong format","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":117,"author":{"gitId":"amosting"},"content":"                throw new WrongJarvisCommandFormatException(\"Apologies Sir, the format of the uncheck command you provided is incorrect.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"amosting"},"content":"            } catch (WrongJarvisCommandFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":120,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":121,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    The following is the correct format:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"amosting"},"content":"                System.out.println(\"        uncheck \u003ctask number\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"amosting"},"content":"                return;","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"amosting"},"content":"        } else if (validInputCommand.equals(\"todo\") \u0026\u0026 !todoMatch) { // if todo command but wrong format","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"amosting"},"content":"                throw new WrongJarvisCommandFormatException(\"Apologies Sir, the format of the todo command you provided is incorrect.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"amosting"},"content":"            } catch (WrongJarvisCommandFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    The following is the correct format:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"amosting"},"content":"                System.out.println(\"        todo \u003cdescription\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"amosting"},"content":"                return;","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"amosting"},"content":"        } else if (validInputCommand.equals(\"deadline\") \u0026\u0026 !deadlineMatch) { // if deadline command but wrong format","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"amosting"},"content":"                throw new WrongJarvisCommandFormatException(\"Apologies Sir, the format of the deadline command you provided is incorrect.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"amosting"},"content":"            } catch (WrongJarvisCommandFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":141,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    The following is the correct format:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"amosting"},"content":"                System.out.println(\"        deadline \u003cdescription\u003e /by \u003cdate or time\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":145,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"amosting"},"content":"                return;","lastModifiedDate":"2023-08-23"},{"lineNumber":147,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":148,"author":{"gitId":"amosting"},"content":"        } else if (validInputCommand.equals(\"event\") \u0026\u0026 !eventMatch) { // if event command but wrong format","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":150,"author":{"gitId":"amosting"},"content":"                throw new WrongJarvisCommandFormatException(\"Apologies Sir, the format of the event command you provided is incorrect.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":151,"author":{"gitId":"amosting"},"content":"            } catch (WrongJarvisCommandFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":152,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":153,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":154,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    The following is the correct format:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":155,"author":{"gitId":"amosting"},"content":"                System.out.println(\"        event \u003cdescription\u003e /from \u003cdate or time\u003e /to \u003cdate or time\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":156,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-23"},{"lineNumber":157,"author":{"gitId":"amosting"},"content":"                return;","lastModifiedDate":"2023-08-23"},{"lineNumber":158,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":159,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":160,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":161,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":162,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":163,"author":{"gitId":"amosting"},"content":"    // checks if command is valid and throws IncorrectJarvisCommandException","lastModifiedDate":"2023-08-24"},{"lineNumber":164,"author":{"gitId":"amosting"},"content":"    private static String isValidCommand(String inputCommand) {","lastModifiedDate":"2023-08-24"},{"lineNumber":165,"author":{"gitId":"amosting"},"content":"        // check if command is one of the valid keywords","lastModifiedDate":"2023-08-24"},{"lineNumber":166,"author":{"gitId":"amosting"},"content":"        boolean isValidCommand \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":167,"author":{"gitId":"amosting"},"content":"        String validInputCommand \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":168,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":169,"author":{"gitId":"amosting"},"content":"        for (String validCommand: validCommands) {","lastModifiedDate":"2023-08-24"},{"lineNumber":170,"author":{"gitId":"amosting"},"content":"            if (inputCommand.contains(validCommand)) {","lastModifiedDate":"2023-08-24"},{"lineNumber":171,"author":{"gitId":"amosting"},"content":"                isValidCommand \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":172,"author":{"gitId":"amosting"},"content":"                validInputCommand \u003d validCommand;","lastModifiedDate":"2023-08-24"},{"lineNumber":173,"author":{"gitId":"amosting"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":174,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":175,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":176,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":177,"author":{"gitId":"amosting"},"content":"        if (!isValidCommand) {","lastModifiedDate":"2023-08-24"},{"lineNumber":178,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":179,"author":{"gitId":"amosting"},"content":"                throw new IncorrectJarvisCommandException(\"Apologies Sir, the command \" + inputCommand + \" is not a valid command.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":180,"author":{"gitId":"amosting"},"content":"            } catch (IncorrectJarvisCommandException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":181,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-24"},{"lineNumber":182,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":183,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    This is the list of valid commands:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":184,"author":{"gitId":"amosting"},"content":"                for (int i \u003d 0; i \u003c validCommands.size(); i++) {","lastModifiedDate":"2023-08-24"},{"lineNumber":185,"author":{"gitId":"amosting"},"content":"                    int numbering \u003d i + 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":186,"author":{"gitId":"amosting"},"content":"                    System.out.println(\"    \" + numbering + \". \" + validCommands.get(i));","lastModifiedDate":"2023-08-24"},{"lineNumber":187,"author":{"gitId":"amosting"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":188,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-24"},{"lineNumber":189,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":190,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":191,"author":{"gitId":"amosting"},"content":"        return validInputCommand;","lastModifiedDate":"2023-08-24"},{"lineNumber":192,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":193,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":194,"author":{"gitId":"amosting"},"content":"    // function check if task number is valid and throws InvalidTaskNumberException","lastModifiedDate":"2023-08-24"},{"lineNumber":195,"author":{"gitId":"amosting"},"content":"    private static boolean isValidTaskNumber(int taskNum) {","lastModifiedDate":"2023-08-24"},{"lineNumber":196,"author":{"gitId":"amosting"},"content":"        boolean isValid \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":197,"author":{"gitId":"amosting"},"content":"        if (taskNum \u003c 0 || taskNum \u003e taskList.size()) { // check if task number is of valid range","lastModifiedDate":"2023-08-24"},{"lineNumber":198,"author":{"gitId":"amosting"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":199,"author":{"gitId":"amosting"},"content":"                throw new InvalidTaskNumberException(\"Apologies Sir, the task number you provided is out of range.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":200,"author":{"gitId":"amosting"},"content":"            } catch (InvalidTaskNumberException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":201,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-24"},{"lineNumber":202,"author":{"gitId":"amosting"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-24"},{"lineNumber":203,"author":{"gitId":"amosting"},"content":"                System.out.println(\"    There are currently \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":204,"author":{"gitId":"amosting"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-24"},{"lineNumber":205,"author":{"gitId":"amosting"},"content":"                isValid \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":206,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":207,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":208,"author":{"gitId":"amosting"},"content":"        return isValid;","lastModifiedDate":"2023-08-24"},{"lineNumber":209,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":210,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":211,"author":{"gitId":"amosting"},"content":"    // delete contents in data.txt and return empty data.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"amosting"},"content":"    private static File deleteContentsDataFile(File dataFile) {","lastModifiedDate":"2023-08-29"},{"lineNumber":213,"author":{"gitId":"amosting"},"content":"        try (FileWriter writer \u003d new FileWriter(dataFile)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"amosting"},"content":"            // Write an empty string to the file","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"amosting"},"content":"            writer.write(\"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"amosting"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"amosting"},"content":"            System.err.println(\"An error occurred: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":219,"author":{"gitId":"amosting"},"content":"        return dataFile;","lastModifiedDate":"2023-08-29"},{"lineNumber":220,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"amosting"},"content":"    // write tasks toString() to data.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":223,"author":{"gitId":"amosting"},"content":"    private static void writeTaskListToDataFile(File dataFile) {","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"amosting"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) { // writing the string of each task to the data file","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"amosting"},"content":"            Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"amosting"},"content":"            try (FileWriter dataFileWriter \u003d new FileWriter(dataFile, true)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":227,"author":{"gitId":"amosting"},"content":"                dataFileWriter.write(currentTask.toString() + \"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":228,"author":{"gitId":"amosting"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"amosting"},"content":"                System.err.println(\"An error occurred: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":230,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":231,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":232,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":233,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":234,"author":{"gitId":"amosting"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-23"},{"lineNumber":235,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":236,"author":{"gitId":"amosting"},"content":"        addValidCommands(); // adding the list of valid commands to the validCommands arraylist","lastModifiedDate":"2023-08-23"},{"lineNumber":237,"author":{"gitId":"amosting"},"content":"        printGreeting();","lastModifiedDate":"2023-08-23"},{"lineNumber":238,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":239,"author":{"gitId":"amosting"},"content":"        // getting the file path to the save file","lastModifiedDate":"2023-08-29"},{"lineNumber":240,"author":{"gitId":"amosting"},"content":"        String home \u003d System.getProperty(\"user.home\");","lastModifiedDate":"2023-08-29"},{"lineNumber":241,"author":{"gitId":"amosting"},"content":"        Path pathToSaveFile \u003d Paths.get(home, \"Desktop\", \"CS2103T\", \"IP\", \"data\", \"data.txt\");","lastModifiedDate":"2023-08-29"},{"lineNumber":242,"author":{"gitId":"amosting"},"content":"        boolean isFileExists \u003d Files.exists(pathToSaveFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":243,"author":{"gitId":"amosting"},"content":"        File dataFile \u003d new File(pathToSaveFile.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":244,"author":{"gitId":"amosting"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":245,"author":{"gitId":"amosting"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":246,"author":{"gitId":"amosting"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":247,"author":{"gitId":"amosting"},"content":"            System.err.println(\"An error occurred: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":248,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":249,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":250,"author":{"gitId":"amosting"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"(todo) (.+)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":251,"author":{"gitId":"amosting"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(\"(deadline) (.+) /by (.+)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":252,"author":{"gitId":"amosting"},"content":"        Pattern eventPattern \u003d Pattern.compile(\"(event) (.+) /from (.+) /to (.+)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":253,"author":{"gitId":"amosting"},"content":"        Pattern deletePattern \u003d Pattern.compile(\"(delete) (\\\\d+)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":254,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":255,"author":{"gitId":"amosting"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":256,"author":{"gitId":"amosting"},"content":"        while (true) {","lastModifiedDate":"2023-08-23"},{"lineNumber":257,"author":{"gitId":"amosting"},"content":"            String command \u003d scanner.nextLine().trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":258,"author":{"gitId":"amosting"},"content":"            String nameOfValidCommand \u003d isValidCommand(command);","lastModifiedDate":"2023-08-24"},{"lineNumber":259,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":260,"author":{"gitId":"amosting"},"content":"            Matcher todoMatcher \u003d todoPattern.matcher(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":261,"author":{"gitId":"amosting"},"content":"            Matcher deadlineMatcher \u003d deadlinePattern.matcher(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":262,"author":{"gitId":"amosting"},"content":"            Matcher eventMatcher \u003d eventPattern.matcher(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":263,"author":{"gitId":"amosting"},"content":"            Matcher deleteMatcher \u003d deletePattern.matcher(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":264,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":265,"author":{"gitId":"amosting"},"content":"            if (command.matches(\"list\")) { // if \"list\" is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":266,"author":{"gitId":"amosting"},"content":"                printList();","lastModifiedDate":"2023-08-23"},{"lineNumber":267,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":268,"author":{"gitId":"amosting"},"content":"            } else if (command.matches(\"bye\")) { // if \"bye\" is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":269,"author":{"gitId":"amosting"},"content":"                printBye();","lastModifiedDate":"2023-08-23"},{"lineNumber":270,"author":{"gitId":"amosting"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":271,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":272,"author":{"gitId":"amosting"},"content":"            } else if (command.matches(\"mark \\\\d+\") ||","lastModifiedDate":"2023-08-29"},{"lineNumber":273,"author":{"gitId":"amosting"},"content":"                    command.matches(\"uncheck \\\\d+\")) { // if \"mark\" or \"uncheck\" is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":274,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":275,"author":{"gitId":"amosting"},"content":"                int taskNum \u003d Integer.parseInt(command.substring(command.length() - 1));","lastModifiedDate":"2023-08-23"},{"lineNumber":276,"author":{"gitId":"amosting"},"content":"                if (!isValidTaskNumber(taskNum)) {continue;}","lastModifiedDate":"2023-08-24"},{"lineNumber":277,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":278,"author":{"gitId":"amosting"},"content":"                Task currentTask \u003d taskList.get(taskNum - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":279,"author":{"gitId":"amosting"},"content":"                if (command.matches(\"uncheck \\\\d+\")) { // if \"uncheck\" is entered","lastModifiedDate":"2023-08-24"},{"lineNumber":280,"author":{"gitId":"amosting"},"content":"                    currentTask.setDone(false);","lastModifiedDate":"2023-08-23"},{"lineNumber":281,"author":{"gitId":"amosting"},"content":"                    printUncheck(currentTask);","lastModifiedDate":"2023-08-23"},{"lineNumber":282,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":283,"author":{"gitId":"amosting"},"content":"                } else { // if \"mark\" is entered","lastModifiedDate":"2023-08-23"},{"lineNumber":284,"author":{"gitId":"amosting"},"content":"                    currentTask.setDone(true);","lastModifiedDate":"2023-08-23"},{"lineNumber":285,"author":{"gitId":"amosting"},"content":"                    printMark(currentTask);","lastModifiedDate":"2023-08-23"},{"lineNumber":286,"author":{"gitId":"amosting"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":287,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":288,"author":{"gitId":"amosting"},"content":"            } else if (todoMatcher.matches() ||","lastModifiedDate":"2023-08-29"},{"lineNumber":289,"author":{"gitId":"amosting"},"content":"                        deadlineMatcher.matches() ||","lastModifiedDate":"2023-08-29"},{"lineNumber":290,"author":{"gitId":"amosting"},"content":"                            eventMatcher.matches()) { // if task command is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":291,"author":{"gitId":"amosting"},"content":"                Task newTask;","lastModifiedDate":"2023-08-29"},{"lineNumber":292,"author":{"gitId":"amosting"},"content":"                if (todoMatcher.matches()) { // if \"todo\" is entered","lastModifiedDate":"2023-08-24"},{"lineNumber":293,"author":{"gitId":"amosting"},"content":"                    String taskDescription \u003d todoMatcher.group(2);","lastModifiedDate":"2023-08-24"},{"lineNumber":294,"author":{"gitId":"amosting"},"content":"                    newTask \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-08-29"},{"lineNumber":295,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":296,"author":{"gitId":"amosting"},"content":"                } else if (deadlineMatcher.matches()) { // if \"deadline\" is entered","lastModifiedDate":"2023-08-24"},{"lineNumber":297,"author":{"gitId":"amosting"},"content":"                    String taskDescription \u003d deadlineMatcher.group(2);","lastModifiedDate":"2023-08-24"},{"lineNumber":298,"author":{"gitId":"amosting"},"content":"                    String by \u003d deadlineMatcher.group(3);","lastModifiedDate":"2023-08-24"},{"lineNumber":299,"author":{"gitId":"amosting"},"content":"                    newTask \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2023-08-29"},{"lineNumber":300,"author":{"gitId":"amosting"},"content":"                    newTask.stringToDate();","lastModifiedDate":"2023-08-31"},{"lineNumber":301,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":302,"author":{"gitId":"amosting"},"content":"                } else { // if \"event\" is entered","lastModifiedDate":"2023-08-23"},{"lineNumber":303,"author":{"gitId":"amosting"},"content":"                    String taskDescription \u003d eventMatcher.group(2);","lastModifiedDate":"2023-08-24"},{"lineNumber":304,"author":{"gitId":"amosting"},"content":"                    String from \u003d eventMatcher.group(3);","lastModifiedDate":"2023-08-24"},{"lineNumber":305,"author":{"gitId":"amosting"},"content":"                    String to \u003d eventMatcher.group(4);","lastModifiedDate":"2023-08-24"},{"lineNumber":306,"author":{"gitId":"amosting"},"content":"                    newTask \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2023-08-29"},{"lineNumber":307,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":308,"author":{"gitId":"amosting"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":309,"author":{"gitId":"amosting"},"content":"                taskList.add(newTask);","lastModifiedDate":"2023-08-29"},{"lineNumber":310,"author":{"gitId":"amosting"},"content":"                printTask(newTask);","lastModifiedDate":"2023-08-29"},{"lineNumber":311,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":312,"author":{"gitId":"amosting"},"content":"            } else if (deleteMatcher.matches()) { // if delete is entered","lastModifiedDate":"2023-08-29"},{"lineNumber":313,"author":{"gitId":"amosting"},"content":"                int taskNum \u003d Integer.parseInt(deleteMatcher.group(2));","lastModifiedDate":"2023-08-24"},{"lineNumber":314,"author":{"gitId":"amosting"},"content":"                if (isValidTaskNumber(taskNum)) {","lastModifiedDate":"2023-08-24"},{"lineNumber":315,"author":{"gitId":"amosting"},"content":"                    Task deletedTask \u003d taskList.get(taskNum - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":316,"author":{"gitId":"amosting"},"content":"                    taskList.remove(taskNum - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":317,"author":{"gitId":"amosting"},"content":"                    printDelete(deletedTask);","lastModifiedDate":"2023-08-24"},{"lineNumber":318,"author":{"gitId":"amosting"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":319,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":320,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":321,"author":{"gitId":"amosting"},"content":"            else { // if none of the above commands go through","lastModifiedDate":"2023-08-29"},{"lineNumber":322,"author":{"gitId":"amosting"},"content":"                printIncorrectFormat(command, nameOfValidCommand);","lastModifiedDate":"2023-08-24"},{"lineNumber":323,"author":{"gitId":"amosting"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":324,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":325,"author":{"gitId":"amosting"},"content":"            writeTaskListToDataFile(deleteContentsDataFile(dataFile)); // write task list to data file after every iteration","lastModifiedDate":"2023-08-29"},{"lineNumber":326,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":327,"author":{"gitId":"amosting"},"content":"        scanner.close(); // closing the user input scanner","lastModifiedDate":"2023-08-23"},{"lineNumber":328,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":329,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"amosting":329}},{"path":"src/main/java/JarvisException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class JarvisException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    public JarvisException(String errorMsg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"        super(errorMsg);","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"amosting"},"content":"    public void stringToDate() {}","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"amosting"},"content":"    public String toString() { // generates the string of marking and task","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"amosting"},"content":"        String marking \u003d \"\";","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"amosting"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"amosting"},"content":"            marking \u003d \"[X]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"amosting"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"amosting"},"content":"            marking \u003d \"[ ]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"amosting"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"amosting"},"content":"        return marking + \" \" + this.description;","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"amosting":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":11}},{"path":"src/main/java/WrongJarvisCommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"public class WrongJarvisCommandFormatException extends JarvisException {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"    public WrongJarvisCommandFormatException(String errorMsg) {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"        super(errorMsg);","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"amosting"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"amosting"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"amosting"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"amosting"},"content":"deadline finish assignment /by Saturday","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"amosting"},"content":"todo start on vlog","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"amosting"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"amosting"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"amosting"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"amosting"},"content":"unmark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"amosting"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"amosting"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"amosting":11}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"amosting"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"amosting":1,"-":37}}]
