[{"path":"src/main/java/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"    protected String by;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"    public Deadlines(String description, String by) {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), this.by);","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":12}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import java.util.*;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidTaskException;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.TaskIndexOutOfBoundsException;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    protected static String line \u003d \"----------------------------------------------------\\n\";","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    protected static List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected static Scanner myObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    public static String format_response(String response) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        return response + \"\\n\\n\" + line;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    public static void greet() {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        System.out.println(format_response(","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"                \"Hello I\u0027m Project54\\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"                \"What can I do for you?\"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        ));","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    public static Matcher regexParse(String regex, String text) {","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"        Matcher matcher \u003d pattern.matcher(text);","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"        return matcher;","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"    public static String getCommand(String input) {","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"        if (input \u003d\u003d null || input.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"            return null; // Return null for empty input or whitespace","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"        input \u003d input.trim(); // Remove leading and trailing whitespace","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"        int spaceIndex \u003d input.indexOf(\u0027 \u0027); // Find the index of the first space","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        if (spaceIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"            return input; // If no space found, the whole string is the first word","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"            return input.substring(0, spaceIndex); // Extract the first word using substring","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"    public static void printList(List\u003cTask\u003e list){","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"            response +\u003d String.format(\"%d. %s\\n\", i+1, list.get(i));","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"        System.out.println(format_response(response.substring(0, response.length() - 1)));","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"    public static void reply() {","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"        String response \u003d myObj.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"        while (!response.equals(\"bye\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"            processResponse(response);","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"            response \u003d myObj.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"        };","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"    public static void processResponse(String response) {","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"        Matcher matcher;","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"        switch(response.split(\" \")[0]) {","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"            case \"list\":","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"                printList(list);","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"                    boolean done \u003d response.split(\" \")[0].equals(\"mark\") ? true : false;","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"                    int taskIndex \u003d Integer.parseInt(response.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"                    if (taskIndex \u003c 0 || taskIndex \u003e\u003d list.size()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"                        throw new TaskIndexOutOfBoundsException(\"Invalid task index\");","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"                    }","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"                    list.get(taskIndex).setDone(done);","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"lilozz2"},"content":"                    printList(list);","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"lilozz2"},"content":"                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(\"Invalid input. Usage: mark \u003ctask_index\u003e\"));","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"lilozz2"},"content":"                } catch (TaskIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(\"Invalid task index. Please provide a valid index.\"));","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"lilozz2"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"lilozz2"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"lilozz2"},"content":"                    matcher \u003d regexParse(\"^todo\\\\s([\\\\w\\\\s]*)$\", response);","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"lilozz2"},"content":"                    if (!matcher.find() || matcher.groupCount() !\u003d 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"lilozz2"},"content":"                        throw new InvalidTaskException(\"Invalid use of todo. Usage: todo \u003ctask description\u003e\");","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"lilozz2"},"content":"                    }","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"lilozz2"},"content":"                    list.add(new ToDo(matcher.group(1)));","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"lilozz2"},"content":"                    printList(list);","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"lilozz2"},"content":"                } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(e.getMessage()));","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"lilozz2"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"lilozz2"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"lilozz2"},"content":"                    matcher \u003d regexParse(\"^deadline\\\\s([\\\\w\\\\s]*)\\\\s\\\\/by\\\\s([\\\\w\\\\s]*)$\", response);","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"lilozz2"},"content":"                    if (!matcher.find() || matcher.groupCount() !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":103,"author":{"gitId":"lilozz2"},"content":"                        throw new InvalidTaskException(","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"lilozz2"},"content":"                                \"Invalid use of deadline. Usage: deadline \u003ctask description\u003e /by \u003cdate \u0026 time\u003e\"","lastModifiedDate":"2023-08-23"},{"lineNumber":105,"author":{"gitId":"lilozz2"},"content":"                        );","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"lilozz2"},"content":"                    }","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"lilozz2"},"content":"                    list.add(new Deadlines(matcher.group(1), matcher.group(2)));","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"lilozz2"},"content":"                    printList(list);","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"lilozz2"},"content":"                } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(e.getMessage()));","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"lilozz2"},"content":"            case \"event\":","lastModifiedDate":"2023-08-22"},{"lineNumber":114,"author":{"gitId":"lilozz2"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"lilozz2"},"content":"                    matcher \u003d regexParse(\"^event\\\\s([\\\\w\\\\s]*)\\\\s\\\\/from\\\\s([\\\\w\\\\s]*)\\\\s\\\\/to\\\\s([\\\\w\\\\s]*)$\", response);","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"lilozz2"},"content":"                    if (!matcher.find() || matcher.groupCount() !\u003d 3) {","lastModifiedDate":"2023-08-23"},{"lineNumber":117,"author":{"gitId":"lilozz2"},"content":"                        throw new InvalidTaskException(","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"lilozz2"},"content":"                                \"Invalid use of event. Usage: event \u003ctask description\u003e /from \u003cdate \u0026 time\u003e /to \u003cdate \u0026 time\u003e\"","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"lilozz2"},"content":"                        );","lastModifiedDate":"2023-08-23"},{"lineNumber":120,"author":{"gitId":"lilozz2"},"content":"                    }","lastModifiedDate":"2023-08-23"},{"lineNumber":121,"author":{"gitId":"lilozz2"},"content":"                    list.add(new Event(matcher.group(1), matcher.group(2), matcher.group(3)));","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"lilozz2"},"content":"                    printList(list);","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"lilozz2"},"content":"                } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(e.getMessage()));","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"lilozz2"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"lilozz2"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"lilozz2"},"content":"                    int taskIndex \u003d Integer.parseInt(response.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"lilozz2"},"content":"                    if (taskIndex \u003c 0 || taskIndex \u003e\u003d list.size()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"lilozz2"},"content":"                        throw new TaskIndexOutOfBoundsException(\"Invalid task index\");","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"lilozz2"},"content":"                    }","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"lilozz2"},"content":"                    list.remove(Integer.parseInt(response.split(\" \")[1])-1);","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"lilozz2"},"content":"                    printList(list);","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"lilozz2"},"content":"                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(\"Invalid input. Usage: delete \u003ctask_index\u003e\"));","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"lilozz2"},"content":"                } catch (TaskIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":138,"author":{"gitId":"lilozz2"},"content":"                    System.out.println(format_response(\"Invalid task index. Please provide a valid index.\"));","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"lilozz2"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"lilozz2"},"content":"            default: {","lastModifiedDate":"2023-08-22"},{"lineNumber":142,"author":{"gitId":"lilozz2"},"content":"                System.out.println(format_response(","lastModifiedDate":"2023-08-22"},{"lineNumber":143,"author":{"gitId":"lilozz2"},"content":"                        \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"lilozz2"},"content":"                ));","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":146,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":149,"author":{"gitId":"lilozz2"},"content":"    public static void bye() {","lastModifiedDate":"2023-08-22"},{"lineNumber":150,"author":{"gitId":"lilozz2"},"content":"        System.out.println(format_response(","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"lilozz2"},"content":"                \"Bye. Hope to see you again soon\"","lastModifiedDate":"2023-08-22"},{"lineNumber":152,"author":{"gitId":"lilozz2"},"content":"        ));","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":155,"author":{"gitId":"lilozz2"},"content":"        greet();","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"lilozz2"},"content":"        reply();","lastModifiedDate":"2023-08-22"},{"lineNumber":157,"author":{"gitId":"lilozz2"},"content":"        bye();","lastModifiedDate":"2023-08-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"lilozz2":155,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"    protected String from;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"    protected String to;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.from, this.to);","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":14}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public void setDone(boolean status) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":10}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidTaskException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidTaskException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/TaskIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class TaskIndexOutOfBoundsException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public TaskIndexOutOfBoundsException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":8}}]
