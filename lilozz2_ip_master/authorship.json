[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lilozz2":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"plugins {","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"repositories {","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    mavenCentral()","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"dependencies {","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    // JavaFX 17.0.7 dependencies for macOS on ARM64","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-base:17.0.7:mac-aarch64\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-controls:17.0.7:mac-aarch64\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-fxml:17.0.7:mac-aarch64\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-graphics:17.0.7:mac-aarch64\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    // JavaFX 17.0.7 dependencies for Linux","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-base:17.0.7:linux\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-controls:17.0.7:linux\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-fxml:17.0.7:linux\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-graphics:17.0.7:linux\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    // JavaFX 17.0.7 dependencies for Windows","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-base:17.0.7:win\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-controls:17.0.7:win\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-fxml:17.0.7:win\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    implementation \u0027org.openjfx:javafx-graphics:17.0.7:win\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"test {","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"application {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    mainClass.set(\"Launcher\")","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"shadowJar {","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"run{","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":51}},{"path":"datafile/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"T | 0 | safs","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"T | 0 | gsfas","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"T | 0 | hello","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"lilozz2":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"# Duke","lastModifiedDate":"2023-09-19"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"\u003e\"Duke\" is a sophisticated chatbot designed to be a versatile task manager and assistant for \u003eusers. It allows users to input tasks with or without specified deadlines and start dates. Users \u003ecan simply describe their tasks and optionally set deadlines and start dates for better \u003eorganization.","lastModifiedDate":"2023-09-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"Overall, Duke serves as an efficient and organized task manager that streamlines task creation, tracking, and retrieval. This chatbot\u0027s capabilities make it particularly useful for individuals looking to manage their tasks and responsibilities effectively, whether in an academic context or for personal use. In an academic context, Duke could assist the user, who is an engineering student, in managing assignments, projects, and deadlines related to their social science and arts-related academic writing modules.","lastModifiedDate":"2023-09-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"## Quick start","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"1. Download the latest `duke.jar` from [here](https://github.com/lilozz2/ip/releases/download/A-Release/duke.jar).","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar duke.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"   ![Ui](Ui.png)","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"   Some example commands you can try:","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"   * `list` : Lists all tasks.","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"   * `todo buy book` : Adds a task named `add book` to the task list.","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"   * `delete 3` : Deletes the 3rd task shown in the current list.","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"   * `bye` : Exits the app.","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"### Task Management","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"Duke allows users to input tasks, providing a brief description of each task. Users can specify deadlines and start dates for tasks if needed.","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"### Task Assignment","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"Task Assignment: Users can assign tasks to Duke by describing the task they want to add, along with any relevant deadlines or start dates.","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"### Task Completion","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"Duke enables users to mark tasks as \"done\" when they are completed. This helps users keep track of their progress.","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"### Search functionality","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"Duke includes a search feature that allows users to search for specific strings or keywords within their task descriptions. This makes it easy to find and retrieve specific tasks or information.","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"### `todo` - Adds a task that is to be done","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"Example of usage:","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"`todo [description]`","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"Outputs all the tasks along with the one that has been added","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"[T][ ] description","lastModifiedDate":"2023-09-19"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"### `deadline` - Adds a task with a deadline to be completed","lastModifiedDate":"2023-09-19"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"Example of usage:","lastModifiedDate":"2023-09-19"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"`deadline [description] /by [2020-08-08 18:00]`","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"Outputs all the tasks along with the one that has been added","lastModifiedDate":"2023-09-19"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"[D][ ] description (by: Aug 08 2020 06:00 PM)","lastModifiedDate":"2023-09-19"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"### `event` - Adds a task with a start and end time","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":80,"author":{"gitId":"lilozz2"},"content":"Example of usage:","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"lilozz2"},"content":"`event [description] /from [18:00] /to [19:00]`","lastModifiedDate":"2023-09-19"},{"lineNumber":83,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":84,"author":{"gitId":"lilozz2"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":86,"author":{"gitId":"lilozz2"},"content":"Outputs all the tasks along with the one that has been added","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"lilozz2"},"content":"[E][ ] description (from: 06:00 PM to: 07:00 PM)","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":92,"author":{"gitId":"lilozz2"},"content":"### `find` - searches the tasklist for similar strings","lastModifiedDate":"2023-09-19"},{"lineNumber":93,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"lilozz2"},"content":"Example of usage:","lastModifiedDate":"2023-09-19"},{"lineNumber":95,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":96,"author":{"gitId":"lilozz2"},"content":"`todo reach house`","lastModifiedDate":"2023-09-19"},{"lineNumber":97,"author":{"gitId":"lilozz2"},"content":"`todo go to bed`","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"lilozz2"},"content":"`todo house cleaning`","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"lilozz2"},"content":"`find house`","lastModifiedDate":"2023-09-19"},{"lineNumber":100,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":101,"author":{"gitId":"lilozz2"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":102,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":103,"author":{"gitId":"lilozz2"},"content":"Outputs all the tasks that have been used so far that match the search string","lastModifiedDate":"2023-09-19"},{"lineNumber":104,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":105,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":106,"author":{"gitId":"lilozz2"},"content":"1. [T][ ] reach house","lastModifiedDate":"2023-09-19"},{"lineNumber":107,"author":{"gitId":"lilozz2"},"content":"2. [T][ ] house cleaning","lastModifiedDate":"2023-09-19"},{"lineNumber":108,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":109,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":110,"author":{"gitId":"lilozz2"},"content":"### `mark / unmark` - Marks a task as done / not done","lastModifiedDate":"2023-09-19"},{"lineNumber":111,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":112,"author":{"gitId":"lilozz2"},"content":"Example of usage:","lastModifiedDate":"2023-09-19"},{"lineNumber":113,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":114,"author":{"gitId":"lilozz2"},"content":"`todo reach house`","lastModifiedDate":"2023-09-19"},{"lineNumber":115,"author":{"gitId":"lilozz2"},"content":"`todo go to bed`","lastModifiedDate":"2023-09-19"},{"lineNumber":116,"author":{"gitId":"lilozz2"},"content":"`todo house cleaning`","lastModifiedDate":"2023-09-19"},{"lineNumber":117,"author":{"gitId":"lilozz2"},"content":"`mark 1`","lastModifiedDate":"2023-09-19"},{"lineNumber":118,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":119,"author":{"gitId":"lilozz2"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":120,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":121,"author":{"gitId":"lilozz2"},"content":"Marks the task as done","lastModifiedDate":"2023-09-19"},{"lineNumber":122,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":123,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":124,"author":{"gitId":"lilozz2"},"content":"1. [T][X] reach house","lastModifiedDate":"2023-09-19"},{"lineNumber":125,"author":{"gitId":"lilozz2"},"content":"2. [T][ ] go to bed","lastModifiedDate":"2023-09-19"},{"lineNumber":126,"author":{"gitId":"lilozz2"},"content":"2. [T][ ] house cleaning","lastModifiedDate":"2023-09-19"},{"lineNumber":127,"author":{"gitId":"lilozz2"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":129,"author":{"gitId":"lilozz2"},"content":"### `list` - Lists the tasks that have been input","lastModifiedDate":"2023-09-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":133,"author":{"gitId":"lilozz2"},"content":"`todo reach house`","lastModifiedDate":"2023-09-19"},{"lineNumber":134,"author":{"gitId":"lilozz2"},"content":"`todo go to bed`","lastModifiedDate":"2023-09-19"},{"lineNumber":135,"author":{"gitId":"lilozz2"},"content":"`todo house cleaning`","lastModifiedDate":"2023-09-19"},{"lineNumber":136,"author":{"gitId":"lilozz2"},"content":"`list`","lastModifiedDate":"2023-09-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"lilozz2"},"content":"Outputs all the tasks that have been used so far","lastModifiedDate":"2023-09-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":142,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":143,"author":{"gitId":"lilozz2"},"content":"1. [T][ ] reach house","lastModifiedDate":"2023-09-19"},{"lineNumber":144,"author":{"gitId":"lilozz2"},"content":"2. [T][ ] go to bed","lastModifiedDate":"2023-09-19"},{"lineNumber":145,"author":{"gitId":"lilozz2"},"content":"2. [T][ ] house cleaning","lastModifiedDate":"2023-09-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"lilozz2":115,"-":31}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"include \u0027src:main:test\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"findProject(\u0027:src:main:test\u0027)?.name \u003d \u0027test\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"include \u0027src:test\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"findProject(\u0027:src:test\u0027)?.name \u003d \u0027test\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":5}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":" *","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":" * @@author {boonhaii}-reused with minor modifications","lastModifiedDate":"2023-09-19"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":" * {A senior\u0027s implementation of the UI}","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"    private DialogBox(String text, Image img, String person) {","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"        dialog.setMinSize(30, Double.parseDouble(\"-Infinity\"));","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"        dialog.setFont(new Font(\"Helvetica Neue\", 13));","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        if (person.equals(\"Duke\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"            dialog.setStyle(\"-fx-background-color:#f3f3f3;\"","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-background-radius: 0 15 15 15;\"","lastModifiedDate":"2023-09-19"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-label-padding: 5 5 5 5;\"","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-effect:dropshadow(gaussian, #949494, 10, 0.0, 0, 0);\");","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"        } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"            dialog.setStyle(\"-fx-background-color:#a9dfbf; \"","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-background-radius: 15 0 15 15; \"","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-label-padding: 5 5 5 5;\"","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"                    + \"-fx-effect:dropshadow(gaussian, #949494, 10, 0.0, 0, 0)\");","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"        displayPicture.setFitHeight(40);","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"        displayPicture.setFitWidth(40);","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"        displayPicture.setClip(new Circle(20, 20, 20));","lastModifiedDate":"2023-09-19"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"    /**![](../../../resources/images/user.png)","lastModifiedDate":"2023-09-19"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"    private void flip() {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"        DialogBox user \u003d new DialogBox(text, img, \"User\");","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"        return user;","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"        var db \u003d new DialogBox(text, img, \"Duke\");","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"        db.flip();","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"lilozz2"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":82}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"public class Launcher {","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":" * A GUI for duke.Duke using FXML.","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"            stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":33}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidFileTypeException;","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import java.util.Timer;","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke2.png\"));","lastModifiedDate":"2023-09-19"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser2.png\"));","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        sendButton.setStyle(\"-fx-background-color: #52be80; -fx-background-radius:80\");","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"            duke.load();","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidFileTypeException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"            String errMessage \u003d \"Initialising storage file\";","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"                    DialogBox.getDukeDialog(errMessage, dukeImage));","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        greetUser();","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"        displayCredits();","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"     * Displays credits to third party resources used.","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"    public void displayCredits() {","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"        String credits \u003d \"Display pictures taken from tumblr:\\nhttps://jenni-illustrations.tumblr.com/\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"                + \"Ui design by @boonhaii:\\nhttps://github.com/boonhaii/ip\";","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-19"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"                DialogBox.getDukeDialog(credits, dukeImage));","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"            new Timer().schedule(","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"                    new TimerTask() {","lastModifiedDate":"2023-09-19"},{"lineNumber":80,"author":{"gitId":"lilozz2"},"content":"                        public void run() {","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"lilozz2"},"content":"                            Platform.exit();","lastModifiedDate":"2023-09-19"},{"lineNumber":82,"author":{"gitId":"lilozz2"},"content":"                            System.exit(0); }","lastModifiedDate":"2023-09-19"},{"lineNumber":83,"author":{"gitId":"lilozz2"},"content":"                    }, 2000);","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"lilozz2"},"content":"     * Creates a dialog box to greet the User","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":90,"author":{"gitId":"lilozz2"},"content":"    @FXML","lastModifiedDate":"2023-09-18"},{"lineNumber":91,"author":{"gitId":"lilozz2"},"content":"    private void greetUser() {","lastModifiedDate":"2023-09-18"},{"lineNumber":92,"author":{"gitId":"lilozz2"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-18"},{"lineNumber":93,"author":{"gitId":"lilozz2"},"content":"                DialogBox.getDukeDialog(\"Hi I am duke.Duke!\", dukeImage)","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"lilozz2"},"content":"        );","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":96}},{"path":"src/main/java/duke/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":" * A date object used to store all things related to the date for a task","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"public class Date {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected LocalTime time;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"     * The constructor for the date object","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"     * @param dateString the date of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"     * @param timeString the time of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    public Date(String dateString, String timeString) {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        // Checking if the date or time String is null since they are optional","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        date \u003d dateString \u003d\u003d null ? null : LocalDate.parse(dateString);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        time \u003d timeString \u003d\u003d null ? null : LocalTime.parse(timeString, formatter);","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"        String dateString \u003d date \u003d\u003d null ? \"\" : date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"        String timeString \u003d time \u003d\u003d null ? \"\" : time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        String additional \u003d time !\u003d null \u0026\u0026 date !\u003d null ? \" \" : \"\";","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        return dateString + additional + timeString;","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"     * Formats the Date into a file savable format to be read again","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"     * @return the string to be saved","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    public String toSave() {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        String dateString \u003d date \u003d\u003d null ? \"\" : date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        String timeString \u003d time \u003d\u003d null ? \"\" : time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"        return dateString + \" \" + timeString;","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":44}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidFileTypeException;","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class Duke {","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    ","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected static Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    protected static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    protected static Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    protected static Storage storage \u003d new Storage(\"./data/duke.txt\");","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        Command command;","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"            command \u003d parser.parse(input);","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"            String response \u003d command.execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"            storage.save(taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"            return response;","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"    public void load() throws InvalidFileTypeException {","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        taskList.setTasks(storage.load());","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"lilozz2":37}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.command.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidFileTypeException;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidTaskException;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.Deadlines;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":" * Used for any parsing of user input","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"public class Parser {","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    public Parser() {}","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    public Matcher regexParse(String regex, String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        return pattern.matcher(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"     * Parses the instruction that has been typed in by a user, returning the command object to be executed","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"     * @param response the instruction typed in by the user","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"     * @return the command object to be executed","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"     * @throws InvalidTaskException","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"    public Command parse(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        switch(response.split(\" \")[0]) {","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"        case \"list\":","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"            return new PrintListCommand();","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"            return new MarkCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"            return new ToDoCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"            return new DeadlineCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"        case \"event\":","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"            return new EventCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"            return new DeleteCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"        case \"save\":","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"            return new SaveCommand(response);","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        case \"load\":","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"            return new LoadCommand(response);","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"        case \"find\":","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"            return new FindCommand(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"        default: {","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"            return new DefaultCommand(response);","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"     * Parses the lines of the save file and returns a Task to be added to the TaskList","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"     * @param response line of the save file to be parsed","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"     * @return A task generated from the saved line","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"     * @throws InvalidFileTypeException","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"    public Task parseSave(String response) throws InvalidFileTypeException, InvalidDateTimeFormatException {","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"        boolean done;","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"        String[] responseList \u003d response.split(\"\\\\|\");","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"        Task newTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"        switch(responseList[0]) {","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"            case \"T\":","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"                done \u003d responseList[1] \u003d\u003d \"X\" ? true : false;","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"                if (responseList.length !\u003d 3) {","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"                    throw new InvalidFileTypeException(String.format(\"line: %s is invalid: Todo needs 3 parameters\", response));","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"                newTask \u003d new ToDo(responseList[2]);","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"                newTask.setDone(done);","lastModifiedDate":"2023-09-18"},{"lineNumber":80,"author":{"gitId":"lilozz2"},"content":"                return newTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":81,"author":{"gitId":"lilozz2"},"content":"            case \"D\":","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"lilozz2"},"content":"                done \u003d responseList[1] \u003d\u003d \"X\" ? true : false;","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"lilozz2"},"content":"                if (responseList.length !\u003d 4) {","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"lilozz2"},"content":"                    throw new InvalidFileTypeException(String.format(\"line: %s is invalid: Deadline needs 4 parameters\", response));","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"lilozz2"},"content":"                newTask \u003d new Deadlines(responseList[2], responseList[3]);","lastModifiedDate":"2023-09-18"},{"lineNumber":87,"author":{"gitId":"lilozz2"},"content":"                newTask.setDone(done);","lastModifiedDate":"2023-09-18"},{"lineNumber":88,"author":{"gitId":"lilozz2"},"content":"                return newTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":89,"author":{"gitId":"lilozz2"},"content":"            case \"E\":","lastModifiedDate":"2023-09-03"},{"lineNumber":90,"author":{"gitId":"lilozz2"},"content":"                done \u003d responseList[1] \u003d\u003d \"X\" ? true : false;","lastModifiedDate":"2023-09-03"},{"lineNumber":91,"author":{"gitId":"lilozz2"},"content":"                if (responseList.length !\u003d 5) {","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"lilozz2"},"content":"                    throw new InvalidFileTypeException(String.format(\"line: %s is invalid: duke.task.Event requires 5 parameters\", response));","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"lilozz2"},"content":"                }","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"lilozz2"},"content":"                newTask \u003d new Event(responseList[2], responseList[3], responseList[4]);","lastModifiedDate":"2023-09-18"},{"lineNumber":95,"author":{"gitId":"lilozz2"},"content":"                newTask.setDone(done);","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"lilozz2"},"content":"                return newTask;","lastModifiedDate":"2023-09-18"},{"lineNumber":97,"author":{"gitId":"lilozz2"},"content":"            default: {","lastModifiedDate":"2023-09-03"},{"lineNumber":98,"author":{"gitId":"lilozz2"},"content":"                throw new InvalidFileTypeException(String.format(\"line: %s is invalid: duke.task.Event requires 5 parameters\", response));","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"lilozz2"},"content":"     * Parses a datetime string to make sure that it complies with the specified format","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"lilozz2"},"content":"     * @param dateTimeString the datetime string to be processed","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"lilozz2"},"content":"     * @return the Date object generated","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"lilozz2"},"content":"    public Date parseDate(String dateTimeString) throws InvalidDateTimeFormatException {","lastModifiedDate":"2023-09-18"},{"lineNumber":109,"author":{"gitId":"lilozz2"},"content":"        // YYYY-MM-DD / HH:mm / a combination of both","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"lilozz2"},"content":"        String regex \u003d \"^(\\\\d{4}-\\\\d{2}-\\\\d{2})? ?(\\\\d{2}:\\\\d{2})?$\";","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"lilozz2"},"content":"        Matcher matcher1 \u003d regexParse(regex, dateTimeString);","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":113,"author":{"gitId":"lilozz2"},"content":"        while (matcher1.find()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"lilozz2"},"content":"            String datePart \u003d matcher1.group(1);","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"lilozz2"},"content":"            String timePart \u003d matcher1.group(2);","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"lilozz2"},"content":"            return new Date(datePart, timePart);","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"lilozz2"},"content":"        throw new InvalidDateTimeFormatException(\"Invalid date time format: YYYY-MM-DD / HH:mm / a combination of both\");","lastModifiedDate":"2023-09-18"},{"lineNumber":120,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":121,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"lilozz2"},"content":"    public boolean parseSearch(String description, String searchString) {","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"lilozz2"},"content":"        String regex \u003d \".*\" + searchString + \".*\";","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"lilozz2"},"content":"        Matcher matcher \u003d regexParse(regex, description);","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":126,"author":{"gitId":"lilozz2"},"content":"        return matcher.find();","lastModifiedDate":"2023-09-04"},{"lineNumber":127,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":128,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":128}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidFileTypeException;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import java.io.*;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":" * Used for any reading and writing to files for the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"public class Storage {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    protected String filePath;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"     * Loads the tasks from a given file to an arrayList","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"     * @return a ArrayList of Task objects that were loaded from the this.filePath path","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"     * @throws InvalidFileTypeException","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    public ArrayList\u003cTask\u003e load() throws InvalidFileTypeException {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"        String line;","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(this.filePath))) {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"                taskArrayList.add(parser.parseSave(line));","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"            return taskArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidFileTypeException | InvalidDateTimeFormatException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidFileTypeException(e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidFileTypeException(\"Error: File not found\");","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"     * Saves the current tasks from the taskList to the given file","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"     * @param taskList an object containing the List of tasks to be stored","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"    public void save(TaskList taskList) {","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.filePath))) {","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"            writer.write(taskList.toTaskSave());","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":53}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":" * The class in charge of input and output to the user","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"public class Ui {","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    protected String line \u003d \"----------------------------------------------------\\n\";","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    public Ui() {}","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"     * The Scanner object to accept user input","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    protected Scanner myObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public void greet() {","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        System.out.println(format_response(","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"                \"Hello I\u0027m Project54\\n\" +","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"                        \"What can I do for you?\"","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        ));","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    public void bye() {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        System.out.println(format_response(","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"                \"Bye. Hope to see you again soon\"","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        ));","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        return myObj.nextLine();","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"     * formats the reply such that a line is added","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"     * @param response the generated response by the chatbot","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"     * @return the new string that will be output to the user","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"    public String format_response(String response) {","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        return response + \"\\n\\n\" + line;","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"     * Adds a line at the end of each sentence for each reply","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"     * @return the new string that will be output to the user","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"    public void printLine() {","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        System.out.println(\"\\n\" + line);","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":51}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    public ByeCommand() {}","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        return \"Bye!\";","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"lilozz2":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":" * A command class that will be executed to perform an action made by the user","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    Matcher matcher;","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public Command() {","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    public Command(String response, String regex) {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        this.matcher \u003d pattern.matcher(response);","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    public abstract String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":25}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" * Adds a deadline task to the taskList","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected final static String regex \u003d \"^deadline\\\\s([\\\\w\\\\s]*)\\\\s\\\\/by\\\\s([\\\\w\\\\s\\\\:\\\\-]*)$\";","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public DeadlineCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        super(response, regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"            if (!matcher.find() || matcher.groupCount() !\u003d 2) {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"                throw new InvalidCommandException(","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"                        \"Invalid use of deadline. Usage: deadline \u003ctask description\u003e /by \u003cdate \u0026 time\u003e\"","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"                );","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"            String description \u003d matcher.group(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"            String by \u003d matcher.group(2);","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"            Task task \u003d new Deadlines(description, by);","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"            taskList.addTask(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"            return \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"                    task + \"\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"                    String.format(\"Now you have %d tasks in your list\", taskList.getSize());","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException | InvalidDateTimeFormatException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidCommandException(e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":37}},{"path":"src/main/java/duke/command/DefaultCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":" * A command of what to do when user input is not understood","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"public class DefaultCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    protected String response;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public DefaultCommand(String response) {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        super();","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        this.response \u003d response;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":21}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidTaskException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.TaskIndexOutOfBoundsException;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":" * Deletes a task from the taskList","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    protected static final String regex \u003d \"^delete\\\\s([\\\\w\\\\s]*)$\";","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    public DeleteCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        super(response, regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        if (!matcher.find() || matcher.groupCount() !\u003d 1) {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidCommandException(","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"                    \"Invalid input. Usage: delete \u003ctask_index\u003e\"","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"            );","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        int taskIndex \u003d Integer.parseInt(matcher.group(1));","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        if (taskIndex \u003c 1 || taskIndex \u003e taskList.getSize()) {","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidCommandException(\"Invalid task index\");","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        taskList.deleteTask(taskIndex-1);","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        return \"Task successfully deleted\";","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":36}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidTaskException;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" * Adds an event task to the taskList","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected final static String regex \u003d \"^event\\\\s([\\\\w\\\\s]*)\\\\s\\\\/from\\\\s([\\\\w\\\\s\\\\-\\\\:]*)\\\\s\\\\/to\\\\s([\\\\w\\\\s\\\\-\\\\:]*)$\";","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    protected boolean done;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    public EventCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        super(response, regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"            if (!matcher.find() || matcher.groupCount() !\u003d 3) {","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"                throw new InvalidTaskException(","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"                        \"Invalid use of event. Usage: event \u003ctask description\u003e /from \u003cdate \u0026 time\u003e /to \u003cdate \u0026 time\u003e\"","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"                );","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"            String description \u003d matcher.group(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"            String from \u003d matcher.group(2);","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"            String to \u003d matcher.group(3);","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"            Task task \u003d new Event(description, from, to);","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"            taskList.addTask(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"            return \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"                    task + \"\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"                    String.format(\"Now you have %d tasks in your list\", taskList.getSize());","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":41}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    protected static final String regex \u003d \"^find\\\\s([\\\\w\\\\s]*)$\";","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    public FindCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        super(response, regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        if (!matcher.find() || matcher.groupCount() !\u003d 1) {","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidCommandException(","lastModifiedDate":"2023-09-18"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"                    \"Invalid input. Usage: find \u003cdescription to match\u003e\"","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"            );","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        String searchString \u003d matcher.group(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        return taskList.getSearchTask(searchString);","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":24}},{"path":"src/main/java/duke/command/LoadCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidFileTypeException;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" * Loads the tasks from a given file","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"public class LoadCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    protected String response;","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public LoadCommand(String response) {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        super();","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        this.response \u003d response;","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"            taskList.setTasks(storage.load());","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"            return taskList.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidFileTypeException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":28}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":" * Marks a task as either done or not done","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    protected String response;","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public MarkCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        super();","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        this.response \u003d response;","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        boolean taskDone \u003d response.split(\" \")[0].equals(\"mark\") ? true : false;","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        int taskIndex \u003d Integer.parseInt(response.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        taskList.setTaskDone(taskIndex, taskDone);","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        return taskList.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":24}},{"path":"src/main/java/duke/command/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" * Prints the taskList","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class PrintListCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public PrintListCommand() {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        super();","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        return taskList.getSize() \u003d\u003d 0 ? \"No tasks currently\" : taskList.toString();","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":20}},{"path":"src/main/java/duke/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" * Saves the current TaskList tasks to a file","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class SaveCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    protected String response;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    public SaveCommand(String response) {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        super();","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        this.response \u003d response;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        storage.save(taskList);","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        return taskList.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":23}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" * Adds a ToDo task to the taskList","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    protected static final String regex \u003d \"^todo\\\\s([\\\\w\\\\s]*)$\";","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    public ToDoCommand(String response) {","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        super(response, regex);","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    public String execute(Storage storage, Ui ui, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        if (!matcher.find() || matcher.groupCount() !\u003d 1) {","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"            throw new InvalidCommandException(\"Invalid use of todo. Usage: todo \u003ctask description\u003e\");","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        String description \u003d matcher.group(1);","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        Task task \u003d new ToDo(description);","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"                task + \"\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"                String.format(\"Now you have %d tasks in your list\", taskList.getSize());","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":30}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidDateTimeFormatException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidDateTimeFormatException(String message) {","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/InvalidFileTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidFileTypeException extends Exception {","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidFileTypeException(String message) {","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class InvalidTaskException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public InvalidTaskException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":7}},{"path":"src/main/java/duke/exceptions/TaskIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"public class TaskIndexOutOfBoundsException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"    public TaskIndexOutOfBoundsException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"lilozz2":8}},{"path":"src/main/java/duke/task/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskWithDeadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"public class Deadlines extends TaskWithDeadline {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    public Deadlines(String description, String by) throws InvalidDateTimeFormatException{","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"        super(description, by);","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), this.getEnd());","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public String toSave() {","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"D|%s|%s|%s\", this.getStatusIcon(), this.getDescription(), this.getEndSave());","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":20}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"public class Event extends TaskWithPeriod {","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    public Event(String description, String from, String to) throws InvalidDateTimeFormatException {","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"        super(description, from, to);","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.getFrom(), this.getEnd());","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    public String toSave() {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"E|%s|%s|%s|%s\", this.getStatusIcon(), this.getDescription(), this.getFromSave(), this.getEndSave());","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":19}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":" * The task object that stores each task","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"     * Checks if the tasks has been done","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"     * @return \"X\" if done, \" \" if not","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"     * Gets the description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"     * @return description string","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        return this.description;","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"     * Sets the status of completion of task","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"     * @param status completed status","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    public void setDone(boolean status) {","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"    public abstract String toSave();","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":44}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"public class TaskList {","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    protected static Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    protected static int max \u003d 100;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e(max);","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    private Task getTask(int index) {","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"     * Sets the taskList to point to a new taskArray","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"     * @param taskArrayList","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    public void setTasks(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        this.tasks \u003d taskArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"    public String getSearchTask(String searchString) {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"            if (parser.parseSearch(this.getTask(i).toString(), searchString)) {","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"                result +\u003d String.format(\"%s\\n\", this.getTask(i));","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"        return result.substring(0, result.length() - 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"    public void setTaskDone(int index, boolean done) {","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"        this.tasks.get(index).setDone(done);","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"        if (this.getSize() \u003d\u003d 0) { return \"\"; }","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"            response +\u003d String.format(\"%d. %s\\n\", i+1, this.getTask(i));","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"        return response.substring(0, response.length() - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"lilozz2"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"lilozz2"},"content":"     * Generates the savable format of the tasks in the array to be written to a file and obtained at a later date","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"lilozz2"},"content":"     * @return the savable string","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"lilozz2"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"lilozz2"},"content":"    public String toTaskSave() {","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"lilozz2"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"lilozz2"},"content":"        for (int i \u003d 0; i \u003c this.getSize(); i++) {","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"lilozz2"},"content":"            response +\u003d String.format(\"%s\\n\", this.tasks.get(i).toSave());","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"lilozz2"},"content":"        return this.getSize() \u003d\u003d 0 ? \"\" : response.substring(0, response.length() - 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"lilozz2":79}},{"path":"src/main/java/duke/task/TaskWithDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Date;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":" * A task with a ending deadline to be met","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"public abstract class TaskWithDeadline extends Task {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    protected Date end;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public TaskWithDeadline(String description, String by) throws InvalidDateTimeFormatException {","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        super(description);","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        this.end \u003d new Parser().parseDate(by);","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public Date getEnd() {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        return this.end;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    public String getEndSave() {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        return this.end.toSave();","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":24}},{"path":"src/main/java/duke/task/TaskWithPeriod.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.Date;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidDateTimeFormatException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":" * A task with both an ending deadline as well as a starting period","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"public abstract class TaskWithPeriod extends TaskWithDeadline {","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    protected Date from;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    public TaskWithPeriod(String description, String from, String to) throws InvalidDateTimeFormatException {","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        super(description, to);","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        this.from \u003d new Parser().parseDate(from);","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"    public Date getFrom() {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        return this.from;","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    public String getFromSave() {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        return this.from.toSave();","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":24}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    public String toSave() {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        return String.format(\"T|%s|%s\", this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"lilozz2":19}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"355.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        \u003cfx:define\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"            \u003cImage fx:id\u003d\"btnImage\" url\u003d\"/images/send.png\"/\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"        \u003c/fx:define\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"355.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"                \u003cImageView image\u003d\"$btnImage\" fitHeight\u003d\"25\" fitWidth\u003d\"25\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"                \u003cVBox style\u003d\"-fx-background-image: url(\u0027/images/background.png\u0027);\"  fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"lilozz2":25}},{"path":"src/test/java/DateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.Date;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"public class DateTest {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"    void testDate1() {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"        Date date \u003d new Date(\"2000-09-09\", null);","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"        assertEquals(date.toString(), \"Sep 9 2000\");","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    void testDate2() {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        Date date \u003d new Date(\"2000-09-09\",  \"12:00\");","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        assertEquals(date.toString(), \"Sep 9 2000 12:00 PM\");","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"    void testDate3() {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        Date date \u003d new Date(null,  \"16:30\");","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        assertEquals(date.toString(), \"04:30 PM\");","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":25}},{"path":"src/test/java/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public void run_validDeadline_success() throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"                \"[D][ ] fill house (by: 06:00 PM)\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"                String.format(\"Now you have %d tasks in your list\", 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new DeadlineCommand(\"deadline fill house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    public void run_validDeadline_success2() throws InvalidCommandException {","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"                \"[D][ ] fill house (by: Aug 8 2000 06:00 PM)\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"                String.format(\"Now you have %d tasks in your list\", 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new DeadlineCommand(\"deadline fill house /by 2000-08-08 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"    public void run_noDescription_invalidCommandException (){","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid use of deadline. Usage: deadline \u003ctask description\u003e /by \u003cdate \u0026 time\u003e\";","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"            new DeadlineCommand(\"deadline /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"    public void run_invalidDateTimeFormat_invalidCommandException (){","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid date time format: YYYY-MM-DD / HH:mm / a combination of both\";","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"            new DeadlineCommand(\"deadline hui /by 109\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"lilozz2":66}},{"path":"src/test/java/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"    public void run_validDelete_success() throws InvalidCommandException {","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Task successfully deleted\";","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline fill house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open floor /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new DeleteCommand(\"delete 3\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"    public void run_noDescription_invalidCommandException (){","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid input. Usage: delete \u003ctask_index\u003e\";","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"            new DeleteCommand(\"delete\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"lilozz2":42}},{"path":"src/test/java/EventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"public class EventCommandTest {","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    public void run_validEvent_success() throws InvalidCommandException {","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"                \"[E][ ] fill house (from: 06:00 PM to: 07:00 PM)\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"                String.format(\"Now you have %d tasks in your list\", 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new EventCommand(\"event fill house /from 18:00 /to 19:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"    public void run_validEvent_success2() throws InvalidCommandException {","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Got it. I\u0027ve added this task:\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"                \"[E][ ] fill house (from: Aug 8 2000 06:00 PM to: 09:00 PM)\\n\" +","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"                String.format(\"Now you have %d tasks in your list\", 1);","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new EventCommand(\"event fill house /from 2000-08-08 18:00 /to 21:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"    public void run_noDescription_invalidCommandException (){","lastModifiedDate":"2023-09-22"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid use of event. Usage: event \u003ctask description\u003e /from \u003cdate \u0026 time\u003e /to \u003cdate \u0026 time\u003e\";","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"            new EventCommand(\"event /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"    public void run_invalidDateTimeFormat_invalidCommandException (){","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid date time format: YYYY-MM-DD / HH:mm / a combination of both\";","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"lilozz2"},"content":"            new EventCommand(\"event hui /from 109 /to 899\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"lilozz2":67}},{"path":"src/test/java/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-18"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-18"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-18"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"public class FindCommandTest {","lastModifiedDate":"2023-09-18"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    public void run_validFind_success() throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d","lastModifiedDate":"2023-09-18"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"                \"[D][ ] fill house (by: 06:00 PM)\\n\" +","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"                \"[D][ ] open house (by: 06:00 PM)\";","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline fill house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open floor /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new FindCommand(\"find house\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-18"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"    public void run_validFind2_success() throws InvalidCommandException {","lastModifiedDate":"2023-09-18"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"[D][ ] open house (by: Sep 23 2000)\";","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"        Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline fill house /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open house /by 2000-09-23\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"        new DeadlineCommand(\"deadline open floor /by 18:00\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"        String output \u003d new FindCommand(\"find 23\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"        assertEquals(correctOutput, output);","lastModifiedDate":"2023-09-18"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"    public void run_noDescription_invalidCommandException (){","lastModifiedDate":"2023-09-18"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        String correctOutput \u003d \"Invalid input. Usage: find \u003cdescription to match\u003e\";","lastModifiedDate":"2023-09-18"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-18"},{"lineNumber":48,"author":{"gitId":"lilozz2"},"content":"            Storage storage \u003d new Storage(\"\");","lastModifiedDate":"2023-09-18"},{"lineNumber":49,"author":{"gitId":"lilozz2"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-18"},{"lineNumber":50,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"lilozz2"},"content":"            new FindCommand(\"find\").execute(storage, ui, taskList);","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-18"},{"lineNumber":53,"author":{"gitId":"lilozz2"},"content":"            assertEquals(correctOutput, e.getMessage());","lastModifiedDate":"2023-09-18"},{"lineNumber":54,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":55,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"lilozz2":56}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"lilozz2"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-09-18"},{"lineNumber":3,"author":{"gitId":"lilozz2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"lilozz2"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"lilozz2"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"lilozz2"},"content":"import duke.command.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"lilozz2"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"lilozz2"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"lilozz2"},"content":"import duke.task.*;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"lilozz2"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"lilozz2"},"content":"    void testDate1() {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"lilozz2"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"lilozz2"},"content":"            Command command \u003d parser.parse(\"deadline find wedding ring /by 2020-09-09\");","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"lilozz2"},"content":"            command.execute(new Storage(\"\"), new Ui(), taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"lilozz2"},"content":"            System.out.println(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"lilozz2"},"content":"            assertEquals(\"1. [D][ ] find wedding ring (by: Sep 9 2020)\", taskList.toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e ) {","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"lilozz2"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"lilozz2"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"lilozz2"},"content":"    void testDate2() {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"lilozz2"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"lilozz2"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"lilozz2"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"lilozz2"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"lilozz2"},"content":"            Command command \u003d parser.parse(\"deadline find wedding ring /by 2020-09-09\");","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"lilozz2"},"content":"            command.execute(new Storage(\"\"), new Ui(), taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"lilozz2"},"content":"            Command command2 \u003d parser.parse(\"todo follow the leader\");","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"lilozz2"},"content":"            command2.execute(new Storage(\"\"), new Ui(), taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"lilozz2"},"content":"            assertEquals(","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"lilozz2"},"content":"                    \"1. [D][ ] find wedding ring (by: Sep 9 2020)\\n\" +","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"lilozz2"},"content":"                    \"2. [T][ ] follow the leader\",","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"lilozz2"},"content":"                    taskList.toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"lilozz2"},"content":"        } catch (InvalidCommandException e ) {","lastModifiedDate":"2023-09-18"},{"lineNumber":44,"author":{"gitId":"lilozz2"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"lilozz2"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"lilozz2"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"lilozz2"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"lilozz2":47}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lilozz2"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"lilozz2":1,"-":20}}]
