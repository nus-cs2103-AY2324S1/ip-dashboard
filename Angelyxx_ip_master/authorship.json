[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    mainClass.set(\"duke.main.Duke\") //set to main class","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"    archiveFileName \u003d \"duke.jar\"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Angelyxx":17,"-":38}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" * Represents a base class for different commands for Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"     * Executes the command with the given parameters.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks   The list of tasks to operate on.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * @param ui      The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * @param storage The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there\u0027s an error during command execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * @return True if the command is an exit command, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":30}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to add a deadline task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private String deadlineBy;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a DeadlineCommand with the given description and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"     * @param deadlineBy  The deadline of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    public DeadlineCommand(String description, String deadlineBy) {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        this.deadlineBy \u003d deadlineBy;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     * Executes the DeadlineCommand by adding a new Deadline task to the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * displaying a completion message, and saving the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there\u0027s an error during command execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        Deadline deadline \u003d new Deadline(description, deadlineBy);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        ui.displayCompletionMessage(deadline, tasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":44}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private int index; //index of task to be deleted","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a DeleteCommand with the specified task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        assert index \u003e 0 : \"Index must be a positive integer.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * Executes the DeleteCommand by removing the task from the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     * displaying a deletion message, and saving the updated task list to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the provided task index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        assert index \u003e 0 : \"Index must be a positive integer.\";","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"            Task removedTask \u003d tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            tasks.delete(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"            ui.printDeleteMessage(removedTask, tasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"            storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! Please provide a valid task index to delete.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to add an event task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private String startDateTimeStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private String endDateTimeStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * Constructs an EventCommand with the given event details.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     * @param description     The description of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"     * @param startDateTimeStr The start date and time of the event as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"     * @param endDateTimeStr   The end date and time of the event as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    public EventCommand(String description, String startDateTimeStr, String endDateTimeStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"        this.startDateTimeStr \u003d startDateTimeStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"        this.endDateTimeStr \u003d endDateTimeStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * Executes the EventCommand by adding a new Event task to the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * displaying a completion message, and saving the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there\u0027s an error during command execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        Event event \u003d new Event(description, startDateTimeStr, endDateTimeStr);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        tasks.add(event);","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        ui.displayCompletionMessage(event, tasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"        storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":46}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to exit the chatBot.","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"     * Executes the ExitCommand by printing an exit message to the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        ui.printExit();","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     * @return True if this an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to find all tasks containing a keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * Constructs an FindCommand with the specified keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     * @param keyword The keyword to search for in the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * Executes the FindCommand by finding all tasks containing the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the provided task index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d tasks.find(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        ui.printTaskList(filteredTasks, \"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"Angelyxx":38}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to list all tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"     * Executes the ListCommand by printing the list of all tasks to the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        ui.printTaskList(tasks.getAllTasks(), \"Here are your entries:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":23}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private int index; //index of task to mark","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a MarkCommand with the specified task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * Executes the MarkCommand by marking a task as done, displaying a completion message,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * and saving the updated task list to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the provided task index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"            Task markTask \u003d tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"            tasks.markDone(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"            ui.printMessage(\"Nice! I\u0027ve marked this task as done:\\n\\t\", markTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! Please provide a valid task index to mark.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":44}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to add a \"Todo\" task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a ToDoCommand with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * @param description The description of the \"To-Do\" task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public ToDoCommand(String description) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * Executes the ToDoCommand by adding a new \"To-Do\" task to the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * displaying a completion message, and saving the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there\u0027s an error during command execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        ToDo todo \u003d new ToDo(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"        ui.displayCompletionMessage(todo, tasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":41}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.main.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.main.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" * Represents a command to mark a task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private int index; //index of task to mark","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * Constructs an UnMarkCommand with the specified task index.","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * Executes the UnMarkCommand by marking a task as not done,","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * displaying a completion message, and saving the updated task list to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * @param storage  The storage for saving tasks to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the provided task index is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"            Task unmarkTask \u003d tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"            tasks.markNotDone(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"            ui.printMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\\t\", unmarkTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! Please provide a valid task index to be unmarked.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":44}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":" * An exception class for representing exceptions to the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":16}},{"path":"src/main/java/duke/main/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.Priority;","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        // Inside your DialogBox constructor","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        HBox.setHgrow(this, Priority.ALWAYS); // Allow horizontal growth if needed","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        VBox.setVgrow(dialog, Priority.ALWAYS); // Allow vertical growth for the Label","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"    private void flip() {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"        db.loadCss(\"/styles/user-dialog-box.css\");","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        db.getStyleClass().add(\"user-dialog-box\");","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"        return db;","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"        db.flip();","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"        db.loadCss(\"/styles/duke-dialog-box.css\");","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"        db.getStyleClass().add(\"duke-dialog-box\");","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"        return db;","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"    private void loadCss(String cssFilePath) {","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"        if (cssFilePath !\u003d null \u0026\u0026 !cssFilePath.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"            this.getStylesheets().add(getClass().getResource(cssFilePath).toExternalForm());","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"            System.out.println(\"CSS Stylesheet not found.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":79}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":" * The main class that initializes and runs the Duke Chat Bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"public class Duke {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"    private static final String DATA_FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a Duke instance with the specified data file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    Duke() {","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"        storage \u003d new Storage(DATA_FILE_PATH);","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"            tasks \u003d new TaskList(storage.loadTasksFromFile());","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    String getResponse(String input) {","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        if (isExit) {","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"            return \"\";","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"            ui.resetOutput();","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"            c.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"            isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            return ui.getOutput();","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":45}},{"path":"src/main/java/duke/main/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"public class Launcher {","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":12}},{"path":"src/main/java/duke/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"            stage.show();","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":29}},{"path":"src/main/java/duke/main/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * Initialises the GUI for Duke.","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"        showGreetingMessage();","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"        );","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    @FXML","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"    private void showGreetingMessage() {","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"                DialogBox.getDukeDialog(\"Welcome to Duke! What can I do for you today?\", dukeImage)","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"        );","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":62}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ToDoCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":" * Handles the parsing of user input commands to create corresponding Command objects.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"     * Parses the user input to create a corresponding Command object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * @param userInput The user\u0027s input as a String.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     * @return A Command object representing the parsed user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the user input is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    static Command parse(String userInput) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        if (userInput.equals(\"bye\") || userInput.equals(\"exit\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"            int taskIndex \u003d validateMarkAndDelete(userInput.substring(5));","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"            return new MarkCommand(taskIndex);","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"            int taskIndex \u003d validateMarkAndDelete(userInput.substring(7));","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"            return new UnmarkCommand(taskIndex);","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            String toDoDescription \u003d validateToDo(userInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"            return new ToDoCommand(toDoDescription);","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"            String[] info \u003d validateDeadline(userInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"            return new DeadlineCommand(info[0], info[1]);","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"            String[] info \u003d validateEvent(userInput);","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"            return new EventCommand(info[0], info[1], info[2]);","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"            int taskIndex \u003d validateMarkAndDelete(userInput.substring(7));","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"            return new DeleteCommand(taskIndex);","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"        } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"            String keyword \u003d validateFind(userInput);","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"     * Validates and extracts the task index from the user input for mark and delete commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"     * @param input The user input containing the task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"     * @return The validated task index as an integer.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the task index is not valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"    private static int validateMarkAndDelete(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"        if (input.isEmpty() || !isNumeric(input)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! The index cannot be blank or not an integer.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"        return Integer.parseInt(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"    private static String validateFind(String input) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"        String keyword \u003d input.replace(\"find\", \"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! Please enter a keyword to find.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"        return keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"     * Checks if a given String can be converted to an integer.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"     * @param str The String to be checked.","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"     * @return True if the String can be converted to an integer, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"    private static boolean isNumeric(String str) {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"        if (str \u003d\u003d null || str.equals(\"\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"Angelyxx"},"content":"            Integer.parseInt(str);","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"Angelyxx"},"content":"            return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"Angelyxx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"Angelyxx"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"Angelyxx"},"content":"     * Validates a toDo description to ensure it is not empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"Angelyxx"},"content":"     * @param input The toDo description to be validated.","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the toDo description is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"Angelyxx"},"content":"    private static String validateToDo(String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"Angelyxx"},"content":"        int commandLength \u003d \"todo\".length(); //get length of string to remove","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"Angelyxx"},"content":"        String description \u003d input.trim().substring(commandLength).trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"Angelyxx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":114,"author":{"gitId":"Angelyxx"},"content":"        return description;","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"Angelyxx"},"content":"     * Validates and extracts information from user input for creating a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"Angelyxx"},"content":"     * @param input The user input for creating a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"Angelyxx"},"content":"     * @return A String array containing the task description and deadline information.","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the input format is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"Angelyxx"},"content":"    private static String[] validateDeadline(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"Angelyxx"},"content":"        // Split the input string into words","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"Angelyxx"},"content":"        String[] splitInput \u003d input.split(\" /by \");","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"Angelyxx"},"content":"        if (splitInput.length !\u003d 2) {","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"Angelyxx"},"content":"                    \"☹ OOPS!!! Invalid deadline format. Please use: deadline \u003cdescription\u003e /by \u003cdate and time\u003e\");","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"Angelyxx"},"content":"        int commandLength \u003d \"deadline \".length(); //get length of string to remove","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"Angelyxx"},"content":"        String description \u003d splitInput[0].substring(commandLength).trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"Angelyxx"},"content":"        String dateTime \u003d splitInput[1].trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"Angelyxx"},"content":"        if (dateTime.isEmpty() || description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"☹ OOPS!!! Deadline description or date and time cannot be empty.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"Angelyxx"},"content":"        return new String[] { description, dateTime };","lastModifiedDate":"2023-09-13"},{"lineNumber":140,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"Angelyxx"},"content":"     * Validates and extracts information from user input for creating an event.","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"Angelyxx"},"content":"     * @param input The user input for creating an event.","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"Angelyxx"},"content":"     * @return An array containing the event description and timing information.","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If the input format is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"Angelyxx"},"content":"    private static String[] validateEvent(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"Angelyxx"},"content":"        String[] splitInput \u003d input.split(\" /from | /to \");","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"Angelyxx"},"content":"        if (splitInput.length !\u003d 3) {","lastModifiedDate":"2023-09-13"},{"lineNumber":153,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"Angelyxx"},"content":"                \"Invalid event format. Please use: event [description] /from [start date/time] /to [end date/time]\");","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"Angelyxx"},"content":"        int commandLength \u003d \"event \".length(); //get length of string to remove","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"Angelyxx"},"content":"        String description \u003d splitInput[0].substring(commandLength).trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"Angelyxx"},"content":"        String startDateAndTime \u003d splitInput[1].trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"Angelyxx"},"content":"        String endDateAndTime \u003d splitInput[2].trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"Angelyxx"},"content":"        if (description.isEmpty() || startDateAndTime.isEmpty() || endDateAndTime.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"Description and date/time cannot be empty.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":164,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"Angelyxx"},"content":"        String[] eventInfo \u003d new String[3];","lastModifiedDate":"2023-09-13"},{"lineNumber":167,"author":{"gitId":"Angelyxx"},"content":"        eventInfo[0] \u003d description;","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"Angelyxx"},"content":"        eventInfo[1] \u003d startDateAndTime;","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"Angelyxx"},"content":"        eventInfo[2] \u003d endDateAndTime;","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"Angelyxx"},"content":"        return eventInfo;","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":174}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":" * Handles the loading and saving of tasks to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    private String filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a Storage instance with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * @param filePath The file path where task data will be stored and loaded from.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    Storage(String filePath) {","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * Loads tasks from the data file and returns them as a list.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     * @return An ArrayList containing the loaded tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there is an error during the loading process.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"    public ArrayList\u003cTask\u003e loadTasksFromFile() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"                return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"                String[] taskData \u003d data.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"                Task task;","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"                //taskData[0] \u003d task type","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"                //taskData[1] \u003d Done status","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"                //taskData[2] \u003d description","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"                boolean isDone \u003d taskData[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"                switch (taskData[0]) {","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"                case \"T\":","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"                    task \u003d new ToDo(taskData[2]);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"                    break;","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"                case \"D\":","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"                    task \u003d new Deadline(taskData[2], taskData[3]);","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"                    break;","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"                case \"E\":","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"                    String[] eventData \u003d taskData[3].split(\" to \");","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"                    task \u003d new Event(taskData[2], eventData[0], eventData[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"                    break;","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"                default:","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"                    System.out.println(\"error: unknown task type found in file.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"                    continue; // Skip to the next line","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"                // Set done status","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"                    task.markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"                    task.markNotDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"                tasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"            return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"Error loading file: IOException occurred.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"     * Saves tasks to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The TaskList containing the tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"Angelyxx"},"content":"     * @throws DukeException If there is an error during the saving process.","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"Angelyxx"},"content":"    public void saveTasksToFile(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"Angelyxx"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"Angelyxx"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"Angelyxx"},"content":"            for (Task task: tasks.getAllTasks()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"Angelyxx"},"content":"                fileWriter.write(task.toFileString() + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"Angelyxx"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"Angelyxx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"Angelyxx"},"content":"            throw new DukeException(\"Error saving file: IOException occurred.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":107}},{"path":"src/main/java/duke/main/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" * Represents a list of tasks and provides methods for managing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a TaskList with an existing list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks An ArrayList of tasks to populate the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     * Retrieves all tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     * @return An ArrayList containing all tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"     * Retrieves a task at a specific index in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Invalid index\";","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"        tasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"     * Deletes a task from the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"    public void delete(int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"     * Retrieves the total number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"     * @return The total number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"    public int size() {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"        return tasks.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"    public void markDone(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"        tasks.get(index).markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"     * Marks a task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"     * @param index The index of the task to be marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"    public void markNotDone(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"        tasks.get(index).markNotDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"Angelyxx"},"content":"     * Returns list of task containing a keyword","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"Angelyxx"},"content":"     * @param keyword Keyword to find in the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"Angelyxx"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"Angelyxx"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"Angelyxx"},"content":"            if (t.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"Angelyxx"},"content":"                filteredTasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"Angelyxx"},"content":"        return filteredTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":109}},{"path":"src/main/java/duke/main/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":" * Handles interactions with the user interface, displaying messages","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":" * and receiving user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    private StringBuilder output;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"        output \u003d new StringBuilder();","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    void resetOutput() {","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"        output.setLength(0);","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    String getOutput() {","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"        return output.toString();","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    private void addToOutput(String str) {","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        output.append(str);","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(message);","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"     * Displays a completion message after adding a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"     * @param size The total number of tasks after adding the new task.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"    public void displayCompletionMessage(Task task , int size) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\n\\t\\t\" + task);","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\n\\tNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"     * Displays a message along with a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"     * @param task The task to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"    public void printMessage(String message, Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\t\" + message + task.toString());","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"     * Displays the exit message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"    public void printExit() {","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"     * Displays the list of tasks to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"     * @param tasks The list of tasks to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"    public void printTaskList(ArrayList\u003cTask\u003e tasks, String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(message);","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"            addToOutput(\"\\n\" + (i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"     * Displays a message after removing a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"     * @param removedTask The task that was removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"     * @param size The total number of tasks after removing the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"    public void printDeleteMessage(Task removedTask, int size) {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"Noted. I\u0027ve removed this task:\\n\\t\" + removedTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"        addToOutput(\"\\nNow you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":91}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    private String deadlineBy;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    private LocalDate deadlineDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    private LocalDateTime deadlineDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a Deadline object with the task description and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * @param deadlineBy Deadline of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    public Deadline(String description, String deadlineBy) {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"        super(description);","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        this.deadlineDate \u003d parseDate(deadlineBy);","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"        this.deadlineDateTime \u003d parseDateTime(deadlineBy);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"        this.deadlineBy \u003d deadlineBy;","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"     * Formats the string representation of deadline object to write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the deadline object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        String type \u003d \"D\";","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"        return type + \" | \" + (isDone() ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.deadlineBy;","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"     * The string representation of deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        if (deadlineDate !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"            String formattedDate \u003d deadlineDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(), formattedDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"        } else if (deadlineDateTime !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"            String formattedDate \u003d deadlineDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(), formattedDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"            return String.format(\"[D]%s (by: %s)\", super.toString(), deadlineBy);","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"     * Parses a String to a LocalDate object","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"     * @param date String representation of potential date","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"     * @return A LocalDate object if string can be parsed, null otherwise","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"    private LocalDate parseDate(String date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"        //List of accepted data formats","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"                return LocalDate.parse(date, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"            } catch (DateTimeParseException ignore) {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"                //returns null if it fails;","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"        return null;","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"Angelyxx"},"content":"     * Parses a String to a LocalDateTime object","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"Angelyxx"},"content":"     * @param date String representation of potential date and time","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"Angelyxx"},"content":"     * @return A LocalDateTime object if string can be parsed, null otherwise","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"Angelyxx"},"content":"    private LocalDateTime parseDateTime(String date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"Angelyxx"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"Angelyxx"},"content":"        //List of accepted data formats","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")); //format from reading file","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"Angelyxx"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"Angelyxx"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"Angelyxx"},"content":"                return LocalDateTime.parse(date, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"Angelyxx"},"content":"            } catch (DateTimeParseException ignore) {","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"Angelyxx"},"content":"                //returns null if it fails","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"Angelyxx"},"content":"        return null;","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Angelyxx":121}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":" * Represents a task with a starting and ending date.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    private String startDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    private String endDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"    private LocalDate startDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"     * Constructs an Event object with the task description,","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     * starting date (and time) of event and ending date (and time) of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"     * @param startDateTimeStr Start date (and time) of the event","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"     * @param endDateTimeStr End date (and time) of the event","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    public Event(String description, String startDateTimeStr, String endDateTimeStr) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        super(description);","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"        this.startDate \u003d parseDate(startDateTimeStr);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"        this.endDate \u003d parseDate(endDateTimeStr);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"        this.startDateTime \u003d parseDateTime(startDateTimeStr);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"        this.endDateTime \u003d parseDateTime(endDateTimeStr);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        this.startDateTimeStr \u003d startDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        this.endDateTimeStr \u003d endDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"     * Formats the string representation of event object to write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the event object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"        String type \u003d \"E\";","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"        return type + \" | \" + (isDone() ? \"1\" : \"0\") + \" | \" + this.description + \" | \"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"                + this.startDateTimeStr + \" to \" + this.endDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"     * The string representation of event object.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the event object.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"        String startStr \u003d startDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        String endStr \u003d endDateTimeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"        if (startDateTime !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"            startStr \u003d startDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"        } else if (startDate !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"            startStr \u003d startDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"        if (endDateTime !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"            endStr \u003d endDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"        } else if (endDate !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"            endStr \u003d endDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        return String.format(\"[E]%s (from: %s to %s)\", super.toString(), startStr, endStr);","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"     * Parses a String to a LocalDate object","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"     * @param date String representation of potential date","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"Angelyxx"},"content":"     * @return A LocalDate object if string can be parsed, null otherwise","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"Angelyxx"},"content":"    private LocalDate parseDate(String date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"Angelyxx"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"Angelyxx"},"content":"        //List of accepted data formats","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"Angelyxx"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"Angelyxx"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"Angelyxx"},"content":"                return LocalDate.parse(date, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"Angelyxx"},"content":"            } catch (DateTimeParseException ignore) {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"Angelyxx"},"content":"                //returns null if it fails","lastModifiedDate":"2023-09-13"},{"lineNumber":98,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"Angelyxx"},"content":"        return null;","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"Angelyxx"},"content":"     * Parses a String to a LocalDateTime object","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"Angelyxx"},"content":"     * @param date String representation of potential date and time","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"Angelyxx"},"content":"     * @return A LocalDateTime object if string can be parsed, null otherwise","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"Angelyxx"},"content":"    private LocalDateTime parseDateTime(String date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"Angelyxx"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"Angelyxx"},"content":"        //List of accepted data formats","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")); //format from reading file","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"MM/dd/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"Angelyxx"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"Angelyxx"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"Angelyxx"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"Angelyxx"},"content":"                return LocalDateTime.parse(date, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"Angelyxx"},"content":"            } catch (DateTimeParseException ignore) {","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"Angelyxx"},"content":"                //returns null if it fails","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"Angelyxx"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"Angelyxx"},"content":"        return null;","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Angelyxx":135}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":" * Represents a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"public class Task {","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"    protected String description;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a Task object with a description.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"        assert description !\u003d null : \"Description cannot be null\";","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"     * Returns an X icon based on whether a task is done.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"     * @return \"X\" if a task is done, \" \" otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * Returns a description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"     * @return Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        return description;","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"     * Returns whether a task has been completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"     * @return True is task is done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"        return isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"     * Marks a task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"    public void markNotDone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"     * Formats the string representation of the Task object to write to the file.","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the Task object to be written to the file.","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"        String type \u003d \"T\"; // Default type for base Task","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"        return type + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Angelyxx":79}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":" * Represents a task with a description.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"     * Constructs a ToDo object with the task description and deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"        super(description);","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"     * Formats the string representation of the ToDo object to write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the ToDo object to be written to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        String type \u003d \"T\";","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"        return type + \" | \" + (isDone() ? \"1\" : \"0\") + \" | \" + getDescription();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"     * The string representation of ToDo object.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"     * @return String representation of the ToDo object.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Angelyxx":37}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package exception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"        super(message);","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"Angelyxx":7}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" styleClass\u003d\"unique\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\" style\u003d\"-fx-background-color: #ffffff;\"\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" promptText\u003d\"Type a message\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"        \u003cfx:define\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"            \u003cImage fx:id\u003d\"btnImage\" url\u003d\"@/images/SendButton.png\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"        \u003c/fx:define\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"        \u003cButton fx:id\u003d\"sendButton\" opacity\u003d\"0.5\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\"\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"                \u003cImageView image \u003d\"$btnImage\" fitHeight\u003d\"33.0\" fitWidth\u003d\"33.0\" layoutX\u003d\"362.0\" layoutY\u003d\"562.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e\u003c/ImageView\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        \u003c/Button\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" vbarPolicy\u003d\"AS_NEEDED\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"Angelyxx":29}},{"path":"src/test/java/duke/main/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ToDoCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"public class ParserTest  {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"    public void parseByeCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof ExitCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"    public void parseListCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"list\");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof ListCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"    public void parseToDoCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"todo Buy groceries\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof ToDoCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"    public void parseDeadlineCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"deadline Submit report /by 2023-09-15\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof DeadlineCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"    public void parseEventCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"event Party /from 2023-09-20 1400 /to 2023-09-20 1800\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof EventCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"    public void parseMarkCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"mark 2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof MarkCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"    public void parseUnmarkCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"unmark 3\");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof UnmarkCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"    public void parseDeleteCommandTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"        Command command \u003d Parser.parse(\"delete 4\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(command instanceof DeleteCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"    public void parseInvalidCommandTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"invalid command\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":71}},{"path":"src/test/java/duke/main/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"public class StorageTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"    public void loadTasksFromFileTest() throws DukeException, IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        // Prepare a temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"        File tempFile \u003d File.createTempFile(\"test\", \".txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"        String tempFilePath \u003d tempFile.getAbsolutePath();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        Storage storage \u003d new Storage(tempFilePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"        // Create a sample task list","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e expectedTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        expectedTaskList.add(new ToDo(\"Sample ToDo Task\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"        expectedTaskList.add(new Deadline(\"Sample Deadline Task\", \"31/08/2023\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        expectedTaskList.add(new Event(\"Sample Event Task\",","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"                \"31/08/2023 1600\",\"31/08/2023 1800\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"        // Save the sample task list to the temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"        TaskList taskListToSave \u003d new TaskList(expectedTaskList);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        storage.saveTasksToFile(taskListToSave);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"        // Load tasks from the temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e loadedTaskList \u003d storage.loadTasksFromFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        // Clean up the temporary file","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        tempFile.delete();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"        // Verify the loaded task list matches the expected task list","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(expectedTaskList.size(), loadedTaskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"        for (int i \u003d 0; i \u003c expectedTaskList.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"            assertEquals(expectedTaskList.get(i).getDescription(), loadedTaskList.get(i).getDescription());","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"            assertEquals(expectedTaskList.get(i).isDone(), loadedTaskList.get(i).isDone());","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"    public void saveTasksToFileTest() throws DukeException, IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"        // Prepare a temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"        File tempFile \u003d File.createTempFile(\"test\", \".txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"        String tempFilePath \u003d tempFile.getAbsolutePath();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"        Storage storage \u003d new Storage(tempFilePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"        // Create a sample task list","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e taskListToSave \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"        taskListToSave.add(new ToDo(\"Sample ToDo Task\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        taskListToSave.add(new Deadline(\"Sample Deadline Task\", \"31/08/2023\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"        taskListToSave.add(new Event(\"Sample Event Task\",","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"                \"31/08/2023 1600\",\"31/08/2023 1800\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"Angelyxx"},"content":"        // Save the sample task list to the temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"Angelyxx"},"content":"        storage.saveTasksToFile(new TaskList(taskListToSave));","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"Angelyxx"},"content":"        // Load tasks from the temporary test file","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"Angelyxx"},"content":"        ArrayList\u003cTask\u003e loadedTaskList \u003d storage.loadTasksFromFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"Angelyxx"},"content":"        // Clean up the temporary file","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"Angelyxx"},"content":"        tempFile.delete();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"Angelyxx"},"content":"        // Verify the loaded task list matches the originally saved task list","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(taskListToSave.size(), loadedTaskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"Angelyxx"},"content":"        for (int i \u003d 0; i \u003c taskListToSave.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"Angelyxx"},"content":"            assertEquals(taskListToSave.get(i).getDescription(), loadedTaskList.get(i).getDescription());","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"Angelyxx"},"content":"            assertEquals(taskListToSave.get(i).isDone(), loadedTaskList.get(i).isDone());","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"Angelyxx"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":81}},{"path":"src/test/java/duke/main/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Angelyxx"},"content":"package duke.main;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"Angelyxx"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"Angelyxx"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"Angelyxx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"Angelyxx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"Angelyxx"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"Angelyxx"},"content":"    public void addTaskTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"Angelyxx"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"Angelyxx"},"content":"        //create tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"Angelyxx"},"content":"        Task toDo \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"Angelyxx"},"content":"        Task deadline \u003d new Deadline(\"Sample Deadline Task\", \"31/08/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"Angelyxx"},"content":"        Task event \u003d new Event(\"Sample Event Task\",","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"Angelyxx"},"content":"                \"31/08/2023 1600\",\"31/08/2023 1800\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(toDo);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(event);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(3, taskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(toDo, taskList.get(0));","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(deadline, taskList.get(1));","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(event, taskList.get(2));","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"Angelyxx"},"content":"    public void deleteTaskTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"Angelyxx"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"Angelyxx"},"content":"        Task task1 \u003d new ToDo(\"Complete assignment\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"Angelyxx"},"content":"        Task task2 \u003d new ToDo(\"Read a book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(task1);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(task2);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"Angelyxx"},"content":"        taskList.delete(0);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"Angelyxx"},"content":"        assertEquals(task2, taskList.get(0));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"Angelyxx"},"content":"    public void markTaskDoneTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"Angelyxx"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"Angelyxx"},"content":"        Task task \u003d new ToDo(\"Go for a run\");","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"Angelyxx"},"content":"        taskList.markDone(0);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"Angelyxx"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"Angelyxx"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"Angelyxx"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"Angelyxx"},"content":"    public void unmarkTaskNotDoneTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"Angelyxx"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"Angelyxx"},"content":"        Task task \u003d new ToDo(\"Write code\");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"Angelyxx"},"content":"        task.markDone(); // Mark the task as done initially","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"Angelyxx"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"Angelyxx"},"content":"        taskList.markNotDone(0);","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"Angelyxx"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"Angelyxx"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"Angelyxx"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"Angelyxx":63}}]
