[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"javinchua":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.exception.EmptyTaskException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"import duke.util.Parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    public Duke() {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"        ArrayList\u003cTask\u003e tasks \u003d storage.load();","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"        this.tasks \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"        new Duke().run();","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"    public void run() {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"                String input \u003d ui.getUserInput();","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"                Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"            } catch (DukeException | InvalidIndexException | EmptyTaskException | InvalidDateTimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"            } finally {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"javinchua":54,"-":4}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to add a deadline task to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * The {@code AddDeadlineCommand} class encapsulates the details of the deadline,","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * including its description and due date. When executed, the deadline is added","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * to the task list and the list is saved using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * Due date of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    private final String by;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     * Description of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    private final String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * Constructs a new {@code AddDeadlineCommand} with the provided description","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     * and due date.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     * @param description description of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     * @param by due date of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"    public AddDeadlineCommand(String description, String by) {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"     * Executes the duke.command by adding a new deadline to the provided task list,","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"     * and saving the updated list using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"     * @param tasks list of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"     * @param ui user interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"     * @param storage storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"        tasks.addTask(new Deadline(description, by));","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"     * Indicates that this duke.command doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} since this duke.command doesn\u0027t cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":63}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to add an event task to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * The {@code AddEventCommand} class encapsulates the details of the event,","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * including its description and the duration it spans (from-to). When executed,","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * the event is added to the task list and the list is saved using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * Starting time/date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    private final String from;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     * Ending time/date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    private final String to;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * Description of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"    private final String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * Constructs a new {@code AddEventCommand} with the provided description","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     * and the duration (from-to) it spans.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     * @param description description of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"     * @param from starting time/date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"     * @param to ending time/date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"    public AddEventCommand(String description, String from, String to) {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"     * Executes the duke.command by adding a new event to the provided task list,","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"     * and saving the updated list using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"     * @param tasks list of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"     * @param ui user interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"     * @param storage storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"        tasks.addTask(new Event(description, from, to));","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"     * Indicates that this duke.command doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} since this duke.command doesn\u0027t cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":70}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to add a to-do task to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * The {@code AddTodoCommand} class encapsulates the details of the to-do,","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * specifically its description. When executed, the to-do is added to the","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * task list and the list is saved using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * Description of the to-do task.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    private final String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     * Constructs a new {@code AddTodoCommand} with the provided description.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     * @param description Description of the to-do task.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     * Executes the duke.command by adding a new to-do to the provided task list,","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * and saving the updated list using the provided storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"        tasks.addTask(new Todo(description));","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     * Indicates that this duke.command doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} since this duke.command doesn\u0027t cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":55}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" * Represents an abstract duke.command that can be executed in the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     * Executes the specific duke.command using the provided task list, user interface, and storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     * @throws Exception If there\u0027s any error during the duke.command execution.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws Exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     * Checks if this duke.command triggers an exit from the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     * @return {@code true} if the duke.command causes the application to exit, otherwise {@code false}.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":28}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to delete a specific task from the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * This duke.command deletes a task identified by its index from the provided task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * Once deleted, it also saves the updated list to storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    /** The index of the task to be deleted. */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    private final int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     * Constructs a new DeleteCommand with the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     * @param index The index of the task in the task list to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     * Deletes the task from the task list based on its index and saves the updated list to storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the provided index is not valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"        tasks.deleteTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"     * Specifies that executing a DeleteCommand will not cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} as deleting a task doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":52}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to exit the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * When executed, this duke.command displays an exit message to the user and indicates to the application","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * that it should terminate.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     * Executes the exit duke.command, displaying an exit message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"        ui.showExitMessage();","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * Specifies that executing an ExitCommand will cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     * @return {@code true} indicating the application should terminate.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"        return true;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":37}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to list all duke.tasks in the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * When executed, this duke.command will display all duke.tasks in the task list to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     * Executes the list duke.command, displaying all duke.tasks in the task list to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks to be displayed.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system (not used in this duke.command but retained for consistency).","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"        tasks.listTasks();","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     * Specifies that executing a ListCommand will not cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} indicating the application should continue running.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":36}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to mark a task as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * When executed, this duke.command will mark the task at the specified index as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    /** The index of the task to be marked as completed. */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    private final int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     * Constructs a new MarkCommand with the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     * @param index Index of the task to be marked as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * Executes the mark duke.command, marking the task at the specified index as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the given index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"        tasks.markTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"     * Specifies that executing a MarkCommand will not cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} indicating the application should continue running.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":51}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * Represents a duke.command to unmark a task as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * When executed, this duke.command will unmark the task at the specified index as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    /** The index of the task to be unmarked as completed. */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    private final int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     * Constructs a new UnmarkCommand with the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     * @param index Index of the task to be unmarked as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * Executes the unmark duke.command, unmarking the task at the specified index as completed.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     * @param tasks List of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     * @param ui User interface.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     * @param storage Storage system.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the given index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"        tasks.unmarkTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"        storage.save(tasks.getTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"     * Specifies that executing an UnmarkCommand will not cause the application to exit.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"     * @return {@code false} indicating the application should continue running.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":51}},{"path":"src/main/java/duke/exception/CorruptHarddriveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents an duke.exception that is thrown when the application encounters corrupted or incorrectly formatted data.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * This duke.exception indicates that the data read from the storage or hard drive is not in the expected format.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"public class CorruptHarddriveException extends Exception {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"     * Constructs a new CorruptHarddriveException with a default error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"    public CorruptHarddriveException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but the data is not in the correct format :-(\");","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":17}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Exception thrown when an unrecognized duke.util.duke.command is provided to the duke.Duke chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"     * Constructs a duke.exception.DukeException with a default error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    public DukeException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":13}},{"path":"src/main/java/duke/exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * Exception thrown when a task\u0027s field (description, by, from, to) is found to be empty.","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"public class EmptyTaskException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"     * Constructs an duke.exception.EmptyTaskException with a specific error message based on the type of task and the empty field.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     * @param type  The type of task (e.g., todo, deadline, event).","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     * @param field The specific field (e.g., description, by, from, to) that is empty.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    public EmptyTaskException(TaskType type, String field) {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"        super(\"☹ OOPS!!! The \" + field + \" of a \" + type + \" cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":19}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents an duke.exception that is thrown when the application encounters an invalid date and time input.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * This duke.exception is triggered when the user provides a date and time format that does not match the expected formats:","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" * \"yyyy-MM-dd\" or \"yyyy-MM-dd HHmm\".","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"public class InvalidDateTimeException extends Exception {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     * Constructs a new InvalidDateTimeException with a default error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"    public InvalidDateTimeException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but the input of date and time is invalid. Please follow the format of yyyy-MM-dd or yyyy-MM-dd HHmm :-(\");","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":18}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Exception thrown when an invalid index is used to access a list.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"public class InvalidIndexException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"     * Constructs an duke.exception.InvalidIndexException with a default error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    public InvalidIndexException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"        super(\"☹ OOPS!!! This index is out of the list\u0027s bounds.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":13}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e A Deadline task is an extension of the basic Task, with an added","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" * characteristic of a \"by\" field that represents the deadline of the task. \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    private String by;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     * Creates a new deadline task with the specified description and deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     * @param by          The deadline of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"        super(TaskType.DEADLINE, description);","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     * @return A formatted string showing the deadline task\u0027s type, status, description, and deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"        return super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * Returns a transformed format of the deadline task, useful for data storage or other operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     * @return A string that represents the deadline task in a unique format.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"    public String transformFormat() {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"        return super.transformFormat() + \" | \" + this.by;","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":42}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents a task that occurs during a specific period.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e An Event task is an extension of the basic Task, with additional characteristics of","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" * \"from\" and \"to\" fields representing the start and end times of the event, respectively. \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    private String from;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"    private String to;","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     * Creates a new event task with the specified description, start time, and end time.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"        super(TaskType.EVENT, description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * @return A formatted string showing the event task\u0027s type, status, description, start time, and end time.","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"        return super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     * Returns a transformed format of the event task, useful for data storage or other operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"     * @return A string that represents the event task in a unique format.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"    public String transformFormat() {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        return super.transformFormat() + \" | \" + this.from + \" | \" + this.to;","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":45}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents a generic task with a specific type, description, and completion status.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e The Task class is a fundamental representation of a task that can be of various types such as TODO, DEADLINE, or EVENT.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":" * Each task has a type, a description, and a flag that indicates whether it has been completed. \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"public class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"    private TaskType type;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    private boolean done;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     * Constructs a new Task instance with the specified type and description.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     * @param type        The type of the task, which can be one of the values in {@link TaskType}.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     * @param description A brief description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    public Task(TaskType type, String description) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"        this.done \u003d false; // Default value for a new task","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     * Provides a string representation of the task, which includes its type, completion status, and description.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * @return A formatted string indicating the task\u0027s type, whether it\u0027s done, and its description.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"        String printType;","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"        switch (type) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"        case TODO:","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"T\";","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"        case EVENT:","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"E\";","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"D\";","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"        String indicator \u003d done ? \"X\" : \" \";","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"        return \"[\" + printType + \"][\" + indicator + \"] \" + description;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"     * Sets the task\u0027s completion status to \u0027done\u0027.","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"    public void mark() {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"        this.done \u003d true;","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"     * Resets the task\u0027s completion status to \u0027not done\u0027.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"     * Transforms the task\u0027s data into a specific format, useful for data storage or other representations.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"     * @return A formatted string that represents the task\u0027s type, completion status, and description in a unique format.","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"javinchua"},"content":"    public String transformFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"javinchua"},"content":"        String printType;","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"javinchua"},"content":"        switch (type) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"javinchua"},"content":"        case TODO:","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"T\";","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"javinchua"},"content":"        case EVENT:","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"E\";","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"javinchua"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"D\";","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"javinchua"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"javinchua"},"content":"            printType \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"javinchua"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"javinchua"},"content":"        return printType + \" | \" + this.done + \" | \" + this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":89}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":" * Represents a list of duke.tasks, allowing for various operations such as","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":" * adding, deleting, marking duke.tasks as done, and unmarking duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e The TaskList class provides a comprehensive set of methods to manage and manipulate","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * a list of duke.tasks. Each task in the list can be accessed by its index.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * Methods throw {@link InvalidIndexException} if operations are attempted on invalid indices. \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"public class TaskList {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"    private ArrayList\u003cTask\u003e store;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * Initializes an empty list of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"        store \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     * Initializes a task list with a given list of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     * @param tasks An ArrayList of duke.tasks to be added to the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"        store \u003d tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     * Adds a task to the list and prints a confirmation message.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"        store.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"\\t\" + task);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Now you have \" + store.size() + \" duke.tasks in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     * Removes a task from the list based on its index and prints a confirmation message.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the provided index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"    public void deleteTask(int index) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"        if(index \u003e store.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"        Task task \u003d store.get(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"        store.remove(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"\\t\" + task);","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Now you have \" + store.size() + \" duke.tasks in the list.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"     * Prints all the duke.tasks currently in the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"    public void listTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Here are the duke.tasks in your list:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"        for(Task task: store) {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"            System.out.println(counter + \".\" + task);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"javinchua"},"content":"            counter++;","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"javinchua"},"content":"     * Marks a task as done based on its index and prints a confirmation message.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"javinchua"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the provided index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"javinchua"},"content":"    public void markTask(int index) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"javinchua"},"content":"        if(index \u003e store.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"javinchua"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"javinchua"},"content":"        Task curr \u003d store.get(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"javinchua"},"content":"        curr.mark();","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"\\t\" + curr);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"javinchua"},"content":"     * Marks a task as not done based on its index and prints a confirmation message.","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"javinchua"},"content":"     * @param index The index of the task to be marked as not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidIndexException If the provided index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"javinchua"},"content":"    public void unmarkTask(int index) throws InvalidIndexException {","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"javinchua"},"content":"        if(index \u003e store.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"javinchua"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"javinchua"},"content":"        Task curr \u003d store.get(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"javinchua"},"content":"        curr.unmark();","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"\\t\" + curr);","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"javinchua"},"content":"     * Retrieves the current list of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"javinchua"},"content":"     * @return An ArrayList containing all the duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"javinchua"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"javinchua"},"content":"        return store;","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":115}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Enum representing the types of duke.tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":8}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents a todo task, a type of task without a specific deadline or duration.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"     * Creates a new todo task with the specified description.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"        super(TaskType.TODO, description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":17}},{"path":"src/main/java/duke/util/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.util;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * Utility class for parsing and transforming date-time strings.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":" * The DateParser class provides functionality for transforming date and datetime strings from","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":" * one format to another. The class currently supports date strings in the format \"yyyy-MM-dd\"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":" * and datetime strings in the format \"yyyy-MM-dd HHmm\".","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"public class DateParser {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     * Formatter for parsing input date strings in the format \"yyyy-MM-dd\".","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    private static final DateTimeFormatter INPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     * Formatter for parsing input datetime strings in the format \"yyyy-MM-dd HHmm\".","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"    private static final DateTimeFormatter INPUT_DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     * Formatter for producing output date strings in the format \"MMM dd yyyy\".","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"    private static final DateTimeFormatter OUTPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"     * Formatter for producing output datetime strings in the format \"MMM dd yyyy, h:mma\".","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"    private static final DateTimeFormatter OUTPUT_DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\");","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"     * Pattern for validating input datetime strings.","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"    private static final Pattern DATETIME_PATTERN \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{4}$\");","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"     * Pattern for validating input date strings.","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"    private static final Pattern DATE_PATTERN \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"     * Transforms the input date or datetime string to a different format.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"     * If the input string matches the datetime pattern \"yyyy-MM-dd HHmm\", it will be transformed to","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"     * \"MMM dd yyyy, h:mma\". If the input string matches the date pattern \"yyyy-MM-dd\", it will be","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"     * transformed to \"MMM dd yyyy\". If the input string doesn\u0027t match any of the known patterns,","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"     * an InvalidDateTimeException will be thrown.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"     * @param dateTimeStr the input date or datetime string.","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"     * @return a transformed date or datetime string.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidDateTimeException if the input string format is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"    public static String transformDateTimeFormat(String dateTimeStr) throws InvalidDateTimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"        if (DATETIME_PATTERN.matcher(dateTimeStr).matches()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeStr, INPUT_DATETIME_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"            return dateTime.format(OUTPUT_DATETIME_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"        } else if (DATE_PATTERN.matcher(dateTimeStr).matches()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"            LocalDate date \u003d LocalDate.parse(dateTimeStr, INPUT_DATE_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"            return date.format(OUTPUT_DATE_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"javinchua"},"content":"            throw new InvalidDateTimeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":74}},{"path":"src/main/java/duke/util/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.util;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" * Represents an immutable key-value pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"public class Pair {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"    private final String key;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"    private final String value;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"     * Initializes a new Pair with the specified key and value.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"     * @param key   The key for this pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"     * @param value The value to be paired with the specified key.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    public Pair(String key, String value) {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"        this.key \u003d key;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     * Retrieves the key of this pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"     * @return The key associated with this pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"    public String getKey() {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"        return key;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"     * Retrieves the value of this pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"     * @return The value associated with this pair.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"    public String getValue() {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"        return value;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":39}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.util;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"import duke.command.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.exception.EmptyTaskException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.exception.InvalidDateTimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":" * Provides functionality to parse user input into commands that the application can understand.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"     * Parses the input string into a Command.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"     * @param input The raw input string from the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"     * @return A Command that corresponds to the input instruction.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"     * @throws DukeException If the input does not match any duke.command or is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     * @throws EmptyTaskException If the input is missing essential information.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     * @throws InvalidDateTimeException If the date or time format is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    public static Command parse(String input) throws DukeException, EmptyTaskException, InvalidDateTimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"        String[] pairSplit \u003d input.split(\"/\");","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"        Pair commandPair \u003d parsePair(pairSplit[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"        String command \u003d commandPair.getKey();","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"        String argument \u003d commandPair.getValue();","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"        for (int i \u003d 1; i \u003c pairSplit.length; i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"            Pair temp \u003d parsePair(pairSplit[i]);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"            map.put(temp.getKey(), temp.getValue());","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"        int index;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"        switch (command) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"        case \"list\":","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"            index \u003d parseInt(argument);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"            return new MarkCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"            index \u003d parseInt(argument);","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"            return new UnmarkCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"            index \u003d parseInt(argument);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"            if (argument.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.TODO, \"description\");","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"            return new AddTodoCommand(argument);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"            if (argument.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.TODO, \"description\");","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"            String by \u003d map.getOrDefault(\"by\", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"            if(by.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.DEADLINE, \"by\");","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"            return new AddDeadlineCommand(argument, DateParser.transformDateTimeFormat(by));","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"        case \"event\":","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"javinchua"},"content":"            if (argument.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.TODO, \"description\");","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"javinchua"},"content":"            String from \u003d map.getOrDefault(\"from\", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"javinchua"},"content":"            if(from.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.EVENT, \"from\");","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"javinchua"},"content":"            String to \u003d map.getOrDefault(\"to\", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"javinchua"},"content":"            if(to.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"javinchua"},"content":"                throw new EmptyTaskException(TaskType.EVENT, \"to\");","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"javinchua"},"content":"            return new AddEventCommand(argument, DateParser.transformDateTimeFormat(from), DateParser.transformDateTimeFormat(to));","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"javinchua"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"javinchua"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"javinchua"},"content":"     * Parses a string to extract a pair of values.","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"javinchua"},"content":"     * @param input The string to parse.","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"javinchua"},"content":"     * @return A Pair where the key is the first word of the input, and the value is the rest of the string.","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"javinchua"},"content":"     * @throws DukeException If the input string is empty.","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"javinchua"},"content":"    private static Pair parsePair(String input) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"javinchua"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"javinchua"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"javinchua"},"content":"        String[] parts \u003d input.split(\"\\\\s+\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"javinchua"},"content":"        String firstWord \u003d parts[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"javinchua"},"content":"        String restOfString \u003d parts.length \u003e 1 ? parts[1] : \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"javinchua"},"content":"        return new Pair(firstWord.trim(), restOfString.trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"javinchua"},"content":"     * Converts a string to an integer.","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"javinchua"},"content":"     * @param argument The string to parse.","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"javinchua"},"content":"     * @return The integer representation of the string.","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"javinchua"},"content":"     * @throws DukeException If the string cannot be parsed into an integer.","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"javinchua"},"content":"    private static int parseInt(String argument) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"javinchua"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"javinchua"},"content":"            return Integer.parseInt(argument);","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"javinchua"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"javinchua"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":121}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"package duke.util;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"import duke.exception.CorruptHarddriveException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":" * Provides functionality for storing duke.tasks in a file and retrieving duke.tasks from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    /** File path to where the duke.tasks are saved. */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"    private static final String filePath \u003d \"./data/hardrive.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    /** Directory path to where the file is located. */","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"    private static final String dataFolderPath \u003d \"./data\";","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"     * Loads the duke.tasks from the hard drive.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     * @return An ArrayList of Task objects, each representing a task retrieved from the hard drive.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"     * If there are any errors while reading, the list may be empty.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"        ArrayList\u003cTask\u003e store \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"            File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"            int index \u003d 0;","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"                index++;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"                String data \u003d s.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"                String[] dataSplit \u003d data.split(\"\\\\|\");","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"                String type \u003d dataSplit[0].trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"                Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"                switch (type) {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"                case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"                    if (dataSplit.length !\u003d 3) {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"                        throw new CorruptHarddriveException();","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"                    task \u003d new Todo(dataSplit[2].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"                    store.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"                    if (Boolean.valueOf(dataSplit[1].trim())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"                        task.mark();","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"                case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"                    if (dataSplit.length !\u003d 4) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"                        throw new CorruptHarddriveException();","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"javinchua"},"content":"                    task \u003d new Deadline(dataSplit[2].trim(), dataSplit[3].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"javinchua"},"content":"                    store.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"javinchua"},"content":"                    if (Boolean.valueOf(dataSplit[1].trim())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"javinchua"},"content":"                        task.mark();","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"javinchua"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"javinchua"},"content":"                case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"javinchua"},"content":"                    if (dataSplit.length !\u003d 5) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"javinchua"},"content":"                        throw new CorruptHarddriveException();","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"javinchua"},"content":"                    task \u003d new Event(dataSplit[2].trim(), dataSplit[3].trim(), dataSplit[4].trim());","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"javinchua"},"content":"                    store.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"javinchua"},"content":"                    if (Boolean.valueOf(dataSplit[1].trim())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"javinchua"},"content":"                        task.mark();","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"javinchua"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"javinchua"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"javinchua"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"javinchua"},"content":"                    throw new CorruptHarddriveException();","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"javinchua"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"javinchua"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"javinchua"},"content":"        } catch (CorruptHarddriveException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"javinchua"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"javinchua"},"content":"        return store;","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"javinchua"},"content":"     * Saves the given list of duke.tasks to the hard drive.","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"javinchua"},"content":"     * @param store The list of duke.tasks to save.","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"javinchua"},"content":"    public void save(ArrayList\u003cTask\u003e store) {","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"javinchua"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"javinchua"},"content":"            File dataFolder \u003d new File(dataFolderPath);","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"javinchua"},"content":"            if (!dataFolder.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"javinchua"},"content":"                dataFolder.mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"javinchua"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"javinchua"},"content":"            for (Task element : store) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"javinchua"},"content":"                String data \u003d element.transformFormat();","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"javinchua"},"content":"                fw.write(data);","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"javinchua"},"content":"                fw.write(System.lineSeparator());","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"javinchua"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"javinchua"},"content":"            fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"javinchua"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"javinchua"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"javinchua"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":111}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":" * Represents the user interface for managing input and output to the console.","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":" * Provides methods to show welcome and exit messages, get user input, and display a horizontal line.","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"package duke.util;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"javinchua"},"content":"    /** The horizontal line used for formatting output */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"javinchua"},"content":"    private static final String HORIZONTAL_LINE \u003d \"----------------------------------------\";","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"javinchua"},"content":"    /** Scanner object to read user input */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"javinchua"},"content":"    private Scanner inputScanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"javinchua"},"content":"    /** The name of the bot */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"    private static final String name \u003d \"Code Buddy\";","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"javinchua"},"content":"     * Initializes a new Ui object, setting up the scanner for user input.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"javinchua"},"content":"    public Ui() {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"javinchua"},"content":"        this.inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"javinchua"},"content":"     * Displays the welcome message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"javinchua"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"javinchua"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Hello! I\u0027m \" + name);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"javinchua"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"javinchua"},"content":"     * Retrieves a line of input from the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"javinchua"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"javinchua"},"content":"     * @return A string containing the user\u0027s input.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"javinchua"},"content":"    public String getUserInput() {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"javinchua"},"content":"        return inputScanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"javinchua"},"content":"     * Displays the exit message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"javinchua"},"content":"    public void showExitMessage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"javinchua"},"content":"        System.out.println(\"Bye. Hope to see you again soon !\");","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"javinchua"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"javinchua"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"javinchua"},"content":"     * Displays a horizontal line for formatting purposes.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"javinchua"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"javinchua"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"javinchua"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"javinchua"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"javinchua"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"javinchua":59}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"javinchua"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"javinchua"},"content":"deadline return book /by 2019-12-11 1800","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"javinchua"},"content":"event project meeting /from 2019-12-11 1800 /to 2020-01-21 2130","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"javinchua"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"javinchua"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"javinchua"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"javinchua"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"javinchua"},"content":"delete 3","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"javinchua"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"javinchua"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"javinchua":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"javinchua"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"javinchua":1,"-":20}}]
