[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    mainClass.set(\"monke.Monke\")","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"    archiveBaseName \u003d \"monke\"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    archiveFileName \u003d \u0027monke.jar\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jingjie88":4,"-":40}},{"path":"src/main/java/monke/Monke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.commands.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":" * The main class of the Monke application. It serves as the entry point","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":" * for running the Monke program and managing tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"public class Monke {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"    /** Storage to handle writing and reading data into txt file */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    /** List of tasks */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /** User interface that handles input and output */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * Constructs a Monke instance with the specified file path.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * @param filepath The path to the file where task data is stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    public Monke(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"        this.storage \u003d new Storage(filepath);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     * Runs the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * Displays welcome message and handles user commands until the program exits.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"        ui.printHorizontalLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"                c.execute(ui, storage, tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"            } catch (MonkeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"                ui.print(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"            } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"     * The main method to start the Monke chatbot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"     * @param args The command-line arguments, if any (not used in this program).","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"        new Monke(\"./data/tasks.txt\").run();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":64}},{"path":"src/main/java/monke/MonkeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"public class MonkeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"    public MonkeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":7}},{"path":"src/main/java/monke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.commands.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.commands.DeadlineCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.commands.DeleteCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.commands.EventCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.commands.ExitCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"import monke.commands.FindCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"import monke.commands.ListCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"import monke.commands.MarkCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"import monke.commands.TodoCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"import monke.commands.UnmarkCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":" * The Parser class is responsible for parsing user input and data from storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     * Parses a string containing loaded data and returns a Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * @param data The data in string format.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * @return A Task object parsed from the loaded data.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data provided cannot be parsed.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public static Task parseLoadedData(String data) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        String[] tmp \u003d data.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"        String taskType \u003d tmp[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"        String isDone \u003d tmp[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"        String description \u003d tmp[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"        Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"        case \"T\":","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"            task \u003d new Todo(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        case \"D\":","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"            String dateString \u003d tmp[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(dateString, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"            task \u003d new Deadline(description, date);","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"        case \"E\":","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"            String start \u003d tmp[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"            String end \u003d tmp[4];","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"            task \u003d new Event(description, start, end);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"        default:","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"Invalid file data\");","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"        if (isDone.equals(\"1\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"            task.mark();","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"        return task;","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"     * Parses a full user command and returns the corresponding Command object.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"     * @param fullCommand The full user command.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"     * @return A Command object which can execute the user command.","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If the command is not recognized or has invalid arguments.","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"jingjie88"},"content":"    public static Command parse(String fullCommand) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"jingjie88"},"content":"        String[] temp \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"jingjie88"},"content":"        String command \u003d temp[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"jingjie88"},"content":"        String args \u003d temp.length \u003e 1 ? temp[1] : \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"jingjie88"},"content":"        switch (command) {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"jingjie88"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"jingjie88"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"jingjie88"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"jingjie88"},"content":"            return parseMark(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"jingjie88"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"jingjie88"},"content":"            return parseUnmark(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"jingjie88"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jingjie88"},"content":"            return parseTodo(args);","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"jingjie88"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"jingjie88"},"content":"            return parseDeadline(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"jingjie88"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"jingjie88"},"content":"            return parseEvent(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"jingjie88"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"jingjie88"},"content":"            return parseDelete(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"jingjie88"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"jingjie88"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"jingjie88"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"jingjie88"},"content":"            return parseFindCommand(args);","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"jingjie88"},"content":"        default:","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA??!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"jingjie88"},"content":"     * Parses mark command and returns a MarkCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the mark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"jingjie88"},"content":"     * @return A MarkCommand object that can execute the mark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no argument provided or argument is not a number.","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"jingjie88"},"content":"    public static MarkCommand parseMark(String args) throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"jingjie88"},"content":"        if (args.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"jingjie88"},"content":"            Integer.parseInt(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"jingjie88"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"jingjie88"},"content":"        return new MarkCommand(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"jingjie88"},"content":"     * Parses unmark command and returns an UnmarkCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the unmark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"jingjie88"},"content":"     * @return A UnmarkCommand object that can execute the unmark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no argument provided or argument is not a number.","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"jingjie88"},"content":"    public static UnmarkCommand parseUnmark(String args) throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"jingjie88"},"content":"        if (args.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"jingjie88"},"content":"            Integer.parseInt(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"jingjie88"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"jingjie88"},"content":"        return new UnmarkCommand(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"jingjie88"},"content":"     * Parses todo command and returns an TodoCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the todo command.","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"jingjie88"},"content":"     * @return A TodoCommand object that can execute the todo command.","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no argument provided or whitespace given as argument.","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"jingjie88"},"content":"    public static TodoCommand parseTodo(String args) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"jingjie88"},"content":"        if (args.isBlank()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"jingjie88"},"content":"        return new TodoCommand(args);","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"jingjie88"},"content":"     * Parses deadline command and returns an DeadlineCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the deadline command.","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"jingjie88"},"content":"     * @return A DeadlineCommand object that can execute the deadline command.","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no arguments provided or arguments not in (task) /by (datetime) format.","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"jingjie88"},"content":"    public static DeadlineCommand parseDeadline(String args) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"jingjie88"},"content":"        String[] tmp \u003d args.split(\" /by \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"jingjie88"},"content":"        if (tmp.length \u003c 2 || tmp[0].isBlank() || tmp[1].isBlank()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"You must format your deadline like this:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /by \u003cdeadline\u003e\");","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"jingjie88"},"content":"        String description \u003d tmp[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"jingjie88"},"content":"        String dateString \u003d tmp[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"jingjie88"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"jingjie88"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(dateString, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"jingjie88"},"content":"            return new DeadlineCommand(description, date);","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"jingjie88"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"Format your deadline in yyyy-MM-dd HHmm format\");","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":175,"author":{"gitId":"jingjie88"},"content":"     * Parses event command and returns an EventCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":176,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the event command.","lastModifiedDate":"2023-09-02"},{"lineNumber":178,"author":{"gitId":"jingjie88"},"content":"     * @return A EventCommand object that can execute the event command.","lastModifiedDate":"2023-09-02"},{"lineNumber":179,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no arguments provided or arguments not in (task) /from (start) /to (end) format.","lastModifiedDate":"2023-09-02"},{"lineNumber":180,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":181,"author":{"gitId":"jingjie88"},"content":"    public static EventCommand parseEvent(String args) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"jingjie88"},"content":"        String[] tmp \u003d args.split(\" /from \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"jingjie88"},"content":"        String description \u003d tmp[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"jingjie88"},"content":"        if (tmp.length \u003c 2 || tmp[0].isBlank() || tmp[1].isBlank()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":185,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\");","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"jingjie88"},"content":"        String[] tmp2 \u003d tmp[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"jingjie88"},"content":"        if (tmp2.length \u003c 2 || tmp2[0].isBlank() || tmp2[1].isBlank()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":190,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\");","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"jingjie88"},"content":"        String start \u003d tmp2[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"jingjie88"},"content":"        String end \u003d tmp2[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"jingjie88"},"content":"        return new EventCommand(description, start, end);","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":199,"author":{"gitId":"jingjie88"},"content":"     * Parses a delete command and returns a DeleteCommand object.","lastModifiedDate":"2023-09-02"},{"lineNumber":200,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":201,"author":{"gitId":"jingjie88"},"content":"     * @param args The arguments of the delete command.","lastModifiedDate":"2023-09-02"},{"lineNumber":202,"author":{"gitId":"jingjie88"},"content":"     * @return A DeleteCommand object that can execute the delete command.","lastModifiedDate":"2023-09-02"},{"lineNumber":203,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If no argument provided or argument is not a number.","lastModifiedDate":"2023-09-02"},{"lineNumber":204,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":205,"author":{"gitId":"jingjie88"},"content":"    public static DeleteCommand parseDelete(String args) throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"jingjie88"},"content":"        if (args.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"jingjie88"},"content":"            Integer.parseInt(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"jingjie88"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Please provide a list number\");","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"jingjie88"},"content":"        return new DeleteCommand(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":217,"author":{"gitId":"jingjie88"},"content":"    public static FindCommand parseFindCommand(String args) throws MonkeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":218,"author":{"gitId":"jingjie88"},"content":"        if (args.isBlank()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":219,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! Provide a keyword to search\");","lastModifiedDate":"2023-09-02"},{"lineNumber":220,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":221,"author":{"gitId":"jingjie88"},"content":"        return new FindCommand(args);","lastModifiedDate":"2023-09-02"},{"lineNumber":222,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":223,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":223}},{"path":"src/main/java/monke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":" * The Storage class handles reading and writing data to a specified file.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"    /** The file path where task data is stored */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    private String filepath;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * Constructs a Storage instance with the specified file path.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"     * @param filepath The path to the file where task data is stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * Loads task data from the file and returns a list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     * @return An ArrayList object containing the loaded tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If the file cannot be found.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"    public ArrayList\u003cTask\u003e load() throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"            File file \u003d new File(filepath);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"                Task task \u003d Parser.parseLoadedData(scanner.nextLine());","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"            return tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"Could not load tasks\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"     * Saves task data to the file.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If the file cannot be opened.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"    public void saveData(TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"            FileWriter fileWriter \u003d new FileWriter(filepath);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"            StringBuilder textToAdd \u003d new StringBuilder();","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"            for (Task task : tasks.toList()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"                textToAdd.append(task.formatData());","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"            fileWriter.write(textToAdd.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"            fileWriter.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"Could not open file\");","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":68}},{"path":"src/main/java/monke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * The TaskList class represents a list of tasks in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    /** The list to store the tasks */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     * Constructs a TaskList with an existing list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"     * Deletes a task from the TaskList by its number.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"     * @param taskNum The number of the task to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If the number provided is not between 1 and size of list.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"    public void delete(String taskNum) throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"            int n \u003d Integer.parseInt(taskNum);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"            if (n \u003e this.tasks.size() || n \u003c\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"                throw new MonkeException(\"OOGA BOOGA!! Your number is out of range. :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"            this.tasks.remove(n - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! You must provide a number from the list. :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"     * Retrieves a task from the TaskList by its number.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"     * @param taskNum The number of the task to be retrieved.","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"     * @return The task with the specified number.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If the number provided is not between 1 and size of list.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"    public Task getTask(String taskNum) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"            int n \u003d Integer.parseInt(taskNum);","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"            if (n \u003e this.tasks.size() || n \u003c\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"jingjie88"},"content":"                throw new MonkeException(\"OOGA BOOGA!! Your number is out of range. :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"jingjie88"},"content":"            return tasks.get(n - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"jingjie88"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"jingjie88"},"content":"            throw new MonkeException(\"OOGA BOOGA!! You must provide a number from the list. :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"jingjie88"},"content":"     * Converts the TaskList to a list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"jingjie88"},"content":"     * @return A List object containing the tasks in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jingjie88"},"content":"    public List\u003cTask\u003e toList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"jingjie88"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"jingjie88"},"content":"     * Returns the number of tasks in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"jingjie88"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"jingjie88"},"content":"    public int size() {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"jingjie88"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"jingjie88"},"content":"    public TaskList filter(String substr) {","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"jingjie88"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"jingjie88"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"jingjie88"},"content":"            if (task.getDescription().contains(substr)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"jingjie88"},"content":"                filteredList.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"jingjie88"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"jingjie88"},"content":"        return new TaskList(filteredList);","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":104}},{"path":"src/main/java/monke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * The Ui class is responsible for handling user interface interactions.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * It handles reading user input and displaying output.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"     * Prints a message to the console with indentation to show the bot is speaking.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     * @param msg The message to be printed.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    public void print(String msg) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"        System.out.println(\"\\t\" + msg);","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     * Displays the welcome message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"        this.print(\"Hello, I\u0027m Monke. OOGA BOOGA!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"        this.print(\"What can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"        this.printHorizontalLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * Reads a user command from the console.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @return The user\u0027s input command as a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"        if (sc.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"            String fullCommand \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"            return fullCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"        sc.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        return \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"     * Prints a horizontal line to the console for visual separation.","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"        for (int i \u003d 0; i \u003c 100; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"            System.out.print(\"_\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"        System.out.println();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"     * Displays list of tasks to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"     * @param taskList The list of tasks to be displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"    public void displayList(TaskList taskList) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"        List\u003cTask\u003e tasks \u003d taskList.toList();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"            this.print((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"jingjie88"},"content":"     * Shows a message confirming the addition of a task to task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"jingjie88"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"jingjie88"},"content":"     * @param tasksSize The total number of tasks in the list after the addition.","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"jingjie88"},"content":"    public void showAddTask(Task task, int tasksSize) {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"jingjie88"},"content":"        this.print(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"jingjie88"},"content":"        this.print(\"\\t\" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"jingjie88"},"content":"        this.print(\"Now you have \" + tasksSize + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"jingjie88"},"content":"     * Prints exit message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"jingjie88"},"content":"    public void printExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"jingjie88"},"content":"        this.print(\"Bye. Hope to see you again soon! OOGA BOOGA!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":86}},{"path":"src/main/java/monke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * The Command class represents an abstract command that can be executed.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * Subclasses of Command define specific actions to be performed.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"     * Executes the command.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If there issues executing the command.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"    public abstract void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     * Indicates whether the command is an exit command.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"     * @return true if the command is an exit command, false otherwise.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":31}},{"path":"src/main/java/monke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":" * The DeadlineCommand class represents a command to add a deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognise this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    /** The description of the deadline task. */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    /** The deadline date and time of the task. */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    private LocalDateTime date;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"     * Constructs a DeadlineCommand with the specified description and deadline date.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * @param date        The deadline date and time of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    public DeadlineCommand(String description, LocalDateTime date) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"     * Executes the DeadlineCommand to add a deadline task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"        Deadline deadline \u003d new Deadline(this.description, this.date);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"        ui.showAddTask(deadline, tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":52}},{"path":"src/main/java/monke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * The DeleteCommand class represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognise this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"    /** The number corresponding to the task */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    private String taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * Constructs a DeleteCommand with the specified task number.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"     * @param taskNumber The task number of the task to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"    public DeleteCommand(String taskNumber) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * Executes the DeleteCommand to delete a task from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"        tasks.delete(this.taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"\\t\" + tasks.getTask(this.taskNumber));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":45}},{"path":"src/main/java/monke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * The EventCommand class represents a command to add an event task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /** The description of the event task. */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    /** The start time of the event. */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"    private String start;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    /** The end time of the event. */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"    private String end;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     * Constructs an EventCommand with the specified description, start time, and end time.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * @param start The start time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     * @param end The end time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public EventCommand(String description, String start, String end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"     * Executes the EventCommand to add an event task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"        Event event \u003d new Event(this.description, this.start, this.end);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"        tasks.add(event);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"        ui.showAddTask(event, tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":55}},{"path":"src/main/java/monke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":" * The ExitCommand class represents a command to exit the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     * Executes the ExitCommand to exit the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"        ui.printExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     * Checks if this command is an exit command.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * @return True.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":36}},{"path":"src/main/java/monke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    private String searchField;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    public FindCommand(String searchField) {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"        this.searchField \u003d searchField;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"        TaskList filteredTasks \u003d tasks.filter(searchField);","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"        if (filteredTasks.size() \u003e 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"            ui.print(\"Ooga booga! These are the matching tasks in your list:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"            ui.displayList(filteredTasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"            ui.print(\"No tasks found. OOGA BOOGA!!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jingjie88":29}},{"path":"src/main/java/monke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":" * The ListCommand class represents a command to list tasks in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     * Executes the ListCommand to display the list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read data from.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"        ui.displayList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":26}},{"path":"src/main/java/monke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * The MarkCommand class represents a command to mark a task as done in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /** The task number to mark as done. */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    private String taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     * Constructs a MarkCommand with the specified task number.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     * @param taskNumber The task number to mark as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    public MarkCommand(String taskNumber) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * Executes the MarkCommand to mark a task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * @param ui      The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"        Task task \u003d tasks.getTask(this.taskNumber);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"        task.mark();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"Ooga booga! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"\\t\" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":46}},{"path":"src/main/java/monke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * The TodoCommand class represents a command to add a todo task to the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /** The description of the todo task to be added. */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    private String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     * Constructs a TodoCommand with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    public TodoCommand(String description) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * Executes the TodoCommand to add a todo task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"        Todo todo \u003d new Todo(this.description);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        ui.showAddTask(todo, tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":45}},{"path":"src/main/java/monke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.MonkeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import monke.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import monke.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":" * The UnmarkCommand class represents a command to unmark a task as done in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":" * It extends the Command class.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /** The command word for parser to recognize this command. */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /** The task number to unmark as undone. */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    private String taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     * Constructs an UnmarkCommand with the specified task number.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"     * @param taskNumber The task number to unmark as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    public UnmarkCommand(String taskNumber) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * Executes the UnmarkCommand to unmark a task as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"     * @param storage The storage to read and write data.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"     * @throws MonkeException If data cannot be saved in the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    public void execute(Ui ui, Storage storage, TaskList tasks) throws MonkeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"        Task task \u003d tasks.getTask(this.taskNumber);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"        task.unmark();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"Ooga booga! I\u0027ve marked this task as undone:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        ui.print(\"\\t\" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingjie88":46}},{"path":"src/main/java/monke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":" * The Deadline class represents a task with a specific deadline in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":" * It extends the Task class.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"    /** The deadline date and time of the task. */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    private LocalDateTime date;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"     * Constructs a Deadline task with the specified description and deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * @param date The deadline date and time.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"    public Deadline(String description, LocalDateTime date) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"     * Returns a string representation of the Deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     * Includes its status icon, description, and deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"                this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\")));","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"     * Formats the Deadline task data for saving to a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Deadline task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"    public String formatData() {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"D | %d | %s | %s\\n\", this.isDone ? 1 : 0,","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"                this.description, this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":47}},{"path":"src/main/java/monke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":" * The Event class represents an event task in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":" * It extends the Task class.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"    /** The start time of the event. */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"    private String start;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"    /** The end time of the event. */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    private String end;","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"     * Constructs an Event task with the specified description, start time and end time.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * @param start The start time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     * @param end The end time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     * Returns a string representation of the Event task.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     * Includes its status icon, description, start time, and end time.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Event task.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.start, this.end);","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"     * Formats the Event task data for saving to a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Event task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    public String formatData() {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"E | %d | %s | %s | %s\\n\",","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"                this.isDone ? 1 : 0, this.description, this.start, this.end);","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":48}},{"path":"src/main/java/monke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":" * The Task class represents a task in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":" * It is an abstract class and serves as the base class for specific task types.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"    /** The task description */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"    /** Indicates whether the task is done. */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"     * Constructs a Task with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"     * @param description The task description.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"     * Returns an icon indicating the status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"     * @return \"X\" if the task is done, \" \" (whitespace) if it is not done.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        return description;","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"    public void mark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"     * Returns a string representation of the task, including its status icon and description.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"     * Formats the task data for saving to a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"    public abstract String formatData();","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":67}},{"path":"src/main/java/monke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":" * The Todo class represents a to-do task in the Monke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":" * It extends the Task class.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"     * Constructs a Todo task with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"     * Returns a string representation of the Todo task, including its status icon and description.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Todo task.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"     * Formats the Todo task data for saving to a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"     * @return A formatted string representing the Todo task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public String formatData() {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        return String.format(\"T | %d | %s\\n\", this.isDone ? 1 : 0, this.description);","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":36}},{"path":"src/test/java/monke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import monke.commands.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import static monke.Parser.parse;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"    // List command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"    @Test public void parse_correctListCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"list\") instanceof ListCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    // Mark command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctMarkCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"mark 1\") instanceof MarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"    public void parse_markCommandWithoutListNumber_exceptionThrown() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"mark\") instanceof MarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"        } catch(MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    public void parse_MarkCommandNotNumber_exceptionThrown() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"mark hello\") instanceof MarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"    // Unmark command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctUnmarkCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"unmark 1\") instanceof UnmarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"    public void parse_unmarkCommandWithoutListNumber_exceptionThrown() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"unmark\") instanceof UnmarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"        } catch(MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"    public void parse_unmarkCommandNotNumber_exceptionThrown() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"unmark hello\") instanceof UnmarkCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"    // Todo command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctTodoCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"todo test\") instanceof TodoCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"jingjie88"},"content":"    public void parse_emptyTodo_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"todo\") instanceof TodoCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"jingjie88"},"content":"    public void parse_whitespaceAfterTodo_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"todo       \") instanceof TodoCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"jingjie88"},"content":"    // Deadline command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctDeadlineCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"deadline do ip /by 2024-09-12 1200\") instanceof DeadlineCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"jingjie88"},"content":"    public void parse_emptyDeadline_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"deadline\") instanceof DeadlineCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your deadline like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /by \u003cdeadline\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"jingjie88"},"content":"    @Test public void parse_deadlineWithNoBy_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"deadline do ip\") instanceof DeadlineCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your deadline like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /by \u003cdeadline\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"jingjie88"},"content":"    public void parse_deadlineWithIncorrectDateFormat_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"deadline do ip /by monday\") instanceof TodoCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"Format your deadline in yyyy-MM-dd HHmm format\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"jingjie88"},"content":"    public void parse_deadlineWithNoTask_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"deadline /by 2024-12-03\") instanceof TodoCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your deadline like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /by \u003cdeadline\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"jingjie88"},"content":"    // Event command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctEventCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"event do ip /from 2pm /to 4pm\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"jingjie88"},"content":"    public void parse_EmptyEvent_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"jingjie88"},"content":"    public void parse_eventWithoutTime_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event do ip\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"jingjie88"},"content":"    public void parse_eventWithFromButNoTo_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event do ip /from 2pm\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"jingjie88"},"content":"    public void parse_eventWithToButNoFrom_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event do ip /to 4pm\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"jingjie88"},"content":"    public void parse_eventArgumentsInWrongOrder_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event do ip /to 4pm /from 2pm\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"jingjie88"},"content":"    public void parse_eventNoTask_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"event /to 4pm /from 2pm\") instanceof EventCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"You must format your event like this:\\n\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"jingjie88"},"content":"                    \"\\t\\tdeadline \u003ctask\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"jingjie88"},"content":"    // Delete command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctDeleteCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"delete 1\") instanceof DeleteCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":217,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":218,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":219,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":220,"author":{"gitId":"jingjie88"},"content":"    public void parse_deleteCommandNoNumber_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":222,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"delete\") instanceof DeleteCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":223,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":225,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":226,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":228,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":230,"author":{"gitId":"jingjie88"},"content":"    public void parse_deleteCommandNotNumber_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"jingjie88"},"content":"            assertTrue(parse(\"delete hello\") instanceof DeleteCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":234,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Please provide a list number\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":236,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":237,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"jingjie88"},"content":"    // Exit command tests","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":241,"author":{"gitId":"jingjie88"},"content":"    public void parse_correctExitCommand_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":242,"author":{"gitId":"jingjie88"},"content":"        assertTrue(parse(\"bye\") instanceof ExitCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":243,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":244,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jingjie88":244}},{"path":"src/test/java/monke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"package monke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"import monke.tasks.Todo;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"    private Todo taskOne;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"    private Todo taskTwo;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"    private Todo taskThree;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"    public void init() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"            this.taskOne \u003d new Todo(\"task 1\");","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"            this.taskTwo \u003d new Todo(\"task 2\");","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"            this.taskThree \u003d new Todo(\"task 3\");","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"            tasks.add(taskOne);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"            tasks.add(taskTwo);","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"            tasks.add(taskThree);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"    public void getTask_numbersWithinRange_success() throws MonkeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"        assertEquals(taskOne, tasks.getTask(\"1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"        assertEquals(taskTwo, tasks.getTask(\"2\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"        assertEquals(taskThree, tasks.getTask(\"3\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"    public void getTask_zeroInput_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"            assertEquals(taskOne, tasks.getTask(\"0\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Your number is out of range. :(\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"jingjie88"},"content":"    public void getTask_numberMoreThanListLength_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"jingjie88"},"content":"            tasks.getTask(\"4\");","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"jingjie88"},"content":"            assertEquals(taskOne, tasks.getTask(\"5\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"jingjie88"},"content":"            assertEquals(taskOne, tasks.getTask(\"6\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"jingjie88"},"content":"            assertEquals(taskOne, tasks.getTask(\"1000\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"jingjie88"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Your number is out of range. :(\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"jingjie88"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"jingjie88"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"jingjie88"},"content":"    public void getTask_negativeNumber_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"jingjie88"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"jingjie88"},"content":"            assertEquals(taskOne, tasks.getTask(\"-1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"jingjie88"},"content":"        } catch (MonkeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"jingjie88"},"content":"            assertEquals(\"OOGA BOOGA!! Your number is out of range. :(\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"jingjie88"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"jingjie88"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"jingjie88"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"jingjie88":70}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jingjie88"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"jingjie88"},"content":"deadline finish project /by August 23rd","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"jingjie88"},"content":"event project meeting /from June 6th 3pm /to 5pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"jingjie88"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"jingjie88"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jingjie88"},"content":"event study /from Monday 9am /to 10am","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"jingjie88"},"content":"mark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jingjie88"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"jingjie88"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"jingjie88"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jingjie88"},"content":"unmark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"jingjie88"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jingjie88"},"content":"unmark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"jingjie88"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"jingjie88"},"content":"mark","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"jingjie88"},"content":"unmark","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"mark 10","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"jingjie88"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"jingjie88"},"content":"deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"jingjie88"},"content":"event","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"jingjie88"},"content":"deadline do something","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"event do something","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"event do something /from 2pm","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"jingjie88"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"jingjie88"},"content":"delete 4","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"jingjie88"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"jingjie88"},"content":"delete 10","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"jingjie88"},"content":"delete not a number","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"jingjie88"},"content":"event do something /from /to","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"jingjie88"},"content":"event do something /from /to 2pm","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"jingjie88"},"content":"event do something /from 2pm /to","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"jingjie88"},"content":"event do some","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"jingjie88"},"content":"deadline do something /by","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"jingjie88"},"content":"deadline /by do something","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"jingjie88"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"jingjie88"},"content":"event do something   /from    /to","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"jingjie88"},"content":"deadline do something2 /by","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"jingjie88"},"content":"deadline     /by 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"jingjie88"},"content":"event       /from 2pm /to 3pm","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"jingjie88"},"content":"event study/from2pm/to3pm","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"jingjie88"},"content":"deadline submit assignment/by 3pm","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"jingjie88"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jingjie88":42}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"jingjie88"},"content":"REM run the program, feed monke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jingjie88":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"jingjie88"},"content":"# run the program, feed monke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"jingjie88"},"content":"java -classpath ../bin Monke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jingjie88":2,"-":36}}]
