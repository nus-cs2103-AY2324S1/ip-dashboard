[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"starrylight99":1,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import duke.Utils.Session;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"   public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"       Session chatBot \u003d new Session();","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"       chatBot.start();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"starrylight99":6,"-":4}},{"path":"src/main/java/duke/Utils/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"import java.lang.NumberFormatException;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":" * The Command class provides utility methods for parsing and validating","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":" * command arguments in a specific format.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"public class Command {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"    // Regular expression pattern for date and time in the format \"YYYY-MM-DD HH:mm\"","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"    private static final Pattern DATE_RX \u003d Pattern.compile(","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        \"^\"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"        + \"(\"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        + \"((2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26]))-02-29)\" ","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))\"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))\" ","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))\"","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"        + \")\"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"        + \"\\\\s\"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"        + \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"        + \"$\"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"      ); // YYYY-MM-DD HH:mm","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"     * Enumeration representing the types of command arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"    enum Type {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"        NONE,","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"        INTEGER,","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"        STRING,","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"        DATETIME","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"     * Extracts the value of a specific argument from an input string.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"     * @param input      The input string containing arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"     * @param targetArg  The name of the argument to extract.","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"     * @return           The value of the specified argument.","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"    private static String getArg(String input, String targetArg) {","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"        String[] args \u003d input.split(\"/\");","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"        for (String arg : args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"            String[] words \u003d arg.split(\" \");","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"            String argName \u003d words[0];","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"            if (argName.equals(targetArg)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"                return Arrays.stream(words).skip(1).collect(Collectors.joining(\" \"));","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"        return \"\";","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"     * Validates and retrieves a string argument from the input.","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"     * @param input     The input string containing arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"     * @param argName   The name of the string argument to validate and retrieve.","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"     * @return          The validated string argument value.","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidArgumentException if the argument is missing or empty.","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"    protected static String assertString(String input, String argName) throws InvalidArgumentException {","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"        String arg \u003d Command.getArg(input, argName);","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"        if (arg.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidArgumentException(argName, Type.STRING);","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"        return arg;","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"     * Validates and retrieves an integer argument from the input.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"     * @param input     The input string containing arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"     * @param argName   The name of the integer argument to validate and retrieve.","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"     * @return          The validated integer argument value.","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidArgumentException if the argument is missing, empty, or not a valid integer.","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"    protected static Integer assertInteger(String input, String argName) throws InvalidArgumentException {","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"            String arg \u003d Command.getArg(input, argName);","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"            if (arg.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"                throw new InvalidArgumentException(argName, Type.INTEGER);","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"            return Integer.parseInt(arg);","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidArgumentException(argName, Type.INTEGER);","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"starrylight99"},"content":"     * Validates and retrieves a LocalDateTime argument from the input.","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"starrylight99"},"content":"     * @param input     The input string containing arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"starrylight99"},"content":"     * @param argName   The name of the DateTime argument to validate and retrieve.","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"starrylight99"},"content":"     * @return          The validated LocalDateTime argument value.","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidArgumentException if the argument is missing or not in the expected format.","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"starrylight99"},"content":"    protected static LocalDateTime assertDateTime(String input, String argName) throws InvalidArgumentException {","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"starrylight99"},"content":"        String arg \u003d Command.getArg(input, argName);","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"starrylight99"},"content":"        System.out.println(arg + \u0027|\u0027);","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"starrylight99"},"content":"        if (!Command.DATE_RX.matcher(arg).matches()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidArgumentException(argName, Type.DATETIME);","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"starrylight99"},"content":"        String[] timeSplit \u003d arg.split(\" \");","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"starrylight99"},"content":"        CharSequence timeSequence \u003d ","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"starrylight99"},"content":"            timeSplit[0]","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"starrylight99"},"content":"            + \"T\"","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"starrylight99"},"content":"            + timeSplit[1]","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"starrylight99"},"content":"            + \":00\";","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"starrylight99"},"content":"        return LocalDateTime.parse(timeSequence);","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"starrylight99":117}},{"path":"src/main/java/duke/Utils/CommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The CommandNotFoundException class represents an exception that is thrown when","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * a command is not found or recognized by the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"public class CommandNotFoundException extends DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new CommandNotFoundException with a default error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"     * The error message indicates that there is no such command.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    protected CommandNotFoundException() {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"        super(\"I\u0027m sorry, but there is no such command.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"starrylight99":15}},{"path":"src/main/java/duke/Utils/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The Deadline class represents a task with a deadline in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * It extends the Task class and includes additional information about the deadline.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    private LocalDateTime start;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Deadline object with the specified title and start date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"     * @param title The title of the deadline task.","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"     * @param start The date and time of the deadline.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"    protected Deadline(String title, LocalDateTime start) {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        super(title, Task.Type.DEADLINE);","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Deadline object with the specified title, marked status, and start date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"     * @param title  The title of the deadline task.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"     * @param marked A boolean indicating whether the task is marked as completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"     * @param start  The date and time of the deadline.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"    protected Deadline(String title, boolean marked, LocalDateTime start) {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"        this(title, start);","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"        if (marked) {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"            this.mark();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"     * Creates a new Deadline object from an array of arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"     * @param args An array of strings containing information to create a Deadline object.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"     * @return A new Deadline object created from the provided arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"    protected static Deadline of(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"        boolean marked \u003d FileIO.assertBoolean(args[1]);","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"        String title \u003d FileIO.assertString(args[2]);","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"        LocalDateTime start \u003d FileIO.assertDateTime(args[3]);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"        return new Deadline(title, marked, start);","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"     * Converts the Deadline object to a CSV (Comma-Separated Values) string.","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"     * @return A CSV string representation of the Deadline object.","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"    public String toCsv() {","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"        return FileIO.joinCsv(","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"            this.type(),","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"            this.marked(),","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"            this.name(),","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"            Task.dateToString(start)","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"     * Returns a string representation of the Deadline object, including its type and deadline information.","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"     * @return A string representation of the Deadline object.","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"        return this.type() + super.toString() + \" (by: \" + Task.dateToString(start) + \")\";","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":75}},{"path":"src/main/java/duke/Utils/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The DukeException class is a custom runtime exception class for handling exceptions","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * specific to the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * It extends the RuntimeException class and includes a custom error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"    private String errorMessage;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new DukeException with a custom error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"     * @param errorMessage The custom error message to be associated with the exception.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"    protected DukeException(String errorMessage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"     * Returns a string representation of the DukeException, including an error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"     * @return A string containing the error message preceded by \"OOPS!!!\".","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"        return \"OOPS!!! \" + errorMessage;","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"starrylight99":30}},{"path":"src/main/java/duke/Utils/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The Event class represents a task with a specific start and end date and time in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * It extends the Task class and includes additional information about the event.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    private LocalDateTime start;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    private LocalDateTime end;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Event object with the specified title, start date and time, and end date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"     * @param title The title of the event task.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"     * @param start The date and time when the event starts.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"     * @param end   The date and time when the event ends.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"    protected Event(String title, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        super(title, Task.Type.EVENT);","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Event object with the specified title, marked status, start date and time,","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"     * and end date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"     * @param title  The title of the event task.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"     * @param marked A boolean indicating whether the task is marked as completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"     * @param start  The date and time when the event starts.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"     * @param end    The date and time when the event ends.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"    protected Event(String title, boolean marked, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"        this(title, start, end);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"        if (marked) {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"            this.mark();","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"     * Creates a new Event object from an array of arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"     * @param args An array of strings containing information to create an Event object.","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"     * @return A new Event object created from the provided arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"    protected static Event of(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"        boolean marked \u003d FileIO.assertBoolean(args[1]);","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        String title \u003d FileIO.assertString(args[2]);","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"        LocalDateTime start \u003d FileIO.assertDateTime(args[3]);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"        LocalDateTime end \u003d FileIO.assertDateTime(args[4]);","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"        return new Event(title, marked, start, end);","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"     * Converts the Event object to a CSV (Comma-Separated Values) string.","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"     * @return A CSV string representation of the Event object.","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"    public String toCsv() {","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"        return FileIO.joinCsv(","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"            this.type(),","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"            this.marked(),","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"            this.name(),","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"            Task.dateToString(this.start),","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"            Task.dateToString(this.end)","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"     * Returns a string representation of the Event object, including its type and event time information.","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"     * @return A string representation of the Event object.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"        return this.type()","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"            + super.toString()","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"            + \" (from: \" + Task.dateToString(this.start)","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"            + \" to: \" + Task.dateToString(this.end)","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"            + \")\";","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":86}},{"path":"src/main/java/duke/Utils/FileIO.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":" * The FileIO class provides utility methods for reading and writing data to/from files","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":" * in the context of the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"public class FileIO {","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"    private static final String DELIMITER \u003d \"-|-\";","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"    private static final String SPLIT_DELIMITER \u003d \"(-\\\\|-)\";","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"    private static final Pattern DATE_REGEX \u003d Pattern.compile(","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        \"^\"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"        + \"(\"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        + \"((2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26]))-02-29)\" ","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))\"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))\" ","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        + \"|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))\"","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"        + \")\"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"        + \"\\\\s\"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"        + \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"        + \"$\"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"      ); // YYYY-MM-DD HH:mm","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"     * Joins an array of objects into a single string, using the specified delimiter.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"     * @param str The objects to be joined.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"     * @return The joined string.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"    protected static String joinCsv(Object... str) {","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"        return Stream.of(str)","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"            .map(Object::toString)","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"            .collect(Collectors.joining(FileIO.DELIMITER));","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"     * Reads a list of CSV lines and converts them into a list of Task objects.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"     * @param lines The list of CSV lines to be parsed.","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"     * @return A list of Task objects parsed from the CSV lines.","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the data in the file is invalid or cannot be parsed.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"    protected static ArrayList\u003cTask\u003e readCsv(ArrayList\u003cString\u003e lines) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        for (String line : lines) {","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"            String[] args \u003d line.split(FileIO.SPLIT_DELIMITER);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"            Task.Type type \u003d Task.Type.of(args[0]);","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"            assertParams(args, type);","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"            switch(type) {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"            case TODO:","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"                tasks.add(Todo.of(args));","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"                break;","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"            case DEADLINE:","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"                tasks.add(Deadline.of(args));","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"                break;","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"            case EVENT:","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"                tasks.add(Event.of(args));","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"                break;","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"            default:","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"                throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"        return tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"     * Asserts that the number of parameters in an argument array matches the expected number","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"     * based on the Task type.","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"     * @param args The argument array to be checked.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     * @param type The Task type used to determine the expected number of parameters.","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the number of parameters does not match the expected count.","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"    protected static void assertParams(String[] args, Task.Type type) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"        if (args.length !\u003d type.param()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"     * Asserts that a string is not empty.","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"     * @return The input string if it is not empty.","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the input string is empty.","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"starrylight99"},"content":"    protected static String assertString(String input) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":94,"author":{"gitId":"starrylight99"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"starrylight99"},"content":"        return input;","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"starrylight99"},"content":"     * Asserts that a string represents a boolean value (\"true\" or \"false\").","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"starrylight99"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"starrylight99"},"content":"     * @return The boolean value represented by the input string.","lastModifiedDate":"2023-09-08"},{"lineNumber":105,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the input string does not represent a valid boolean.","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"starrylight99"},"content":"    protected static boolean assertBoolean(String input) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"starrylight99"},"content":"        if (input.equals(\"true\")) {","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"starrylight99"},"content":"            return true;","lastModifiedDate":"2023-09-06"},{"lineNumber":110,"author":{"gitId":"starrylight99"},"content":"        } else if (input.equals(\"false\")) {","lastModifiedDate":"2023-09-06"},{"lineNumber":111,"author":{"gitId":"starrylight99"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":112,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"starrylight99"},"content":"        throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"starrylight99"},"content":"     * Asserts that a string can be parsed into an integer.","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"starrylight99"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"starrylight99"},"content":"     * @return The integer value parsed from the input string.","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the input string cannot be parsed as an integer.","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"starrylight99"},"content":"    protected static Integer assertInteger(String input) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":124,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"starrylight99"},"content":"            if (input.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"starrylight99"},"content":"                throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":128,"author":{"gitId":"starrylight99"},"content":"            return Integer.parseInt(input);","lastModifiedDate":"2023-09-06"},{"lineNumber":129,"author":{"gitId":"starrylight99"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":130,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":132,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":133,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":134,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"starrylight99"},"content":"     * Asserts that a string matches a specific date and time format, particularly [YYYY-MM-DD HH:mm].","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"starrylight99"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"starrylight99"},"content":"     * @return The LocalDateTime object representing the parsed date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the input string does not match the expected date and time format.","lastModifiedDate":"2023-09-08"},{"lineNumber":140,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":141,"author":{"gitId":"starrylight99"},"content":"    protected static LocalDateTime assertDateTime(String input) throws InvalidFileDataException {","lastModifiedDate":"2023-09-07"},{"lineNumber":142,"author":{"gitId":"starrylight99"},"content":"        if (!FileIO.DATE_REGEX.matcher(input).matches()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":143,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2023-09-07"},{"lineNumber":144,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":145,"author":{"gitId":"starrylight99"},"content":"        String[] timeSplit \u003d input.split(\" \");","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"starrylight99"},"content":"        CharSequence timeSequence \u003d ","lastModifiedDate":"2023-09-07"},{"lineNumber":147,"author":{"gitId":"starrylight99"},"content":"            timeSplit[0]","lastModifiedDate":"2023-09-07"},{"lineNumber":148,"author":{"gitId":"starrylight99"},"content":"            + \"T\"","lastModifiedDate":"2023-09-07"},{"lineNumber":149,"author":{"gitId":"starrylight99"},"content":"            + timeSplit[1]","lastModifiedDate":"2023-09-07"},{"lineNumber":150,"author":{"gitId":"starrylight99"},"content":"            + \":00\";","lastModifiedDate":"2023-09-07"},{"lineNumber":151,"author":{"gitId":"starrylight99"},"content":"        return LocalDateTime.parse(timeSequence);","lastModifiedDate":"2023-09-07"},{"lineNumber":152,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":153,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"starrylight99":153}},{"path":"src/main/java/duke/Utils/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The Input class is responsible for handling user input and executing commands","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public class Input {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.csv\";","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    private static final String FOLDER_PATH \u003d \"./data\";","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"    private String input;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Input object and initializes storage and task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"    protected Input() {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        this.storage \u003d new Storage(Input.FILE_PATH, Input.FOLDER_PATH);","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        this.tasks \u003d new TaskList(this.storage.load());","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"     * Reads a command from the user via the console input.","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"     * @return The response generated after executing the user\u0027s command.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"    protected Response command() {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"        this.input \u003d Input.scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"        return executeCommand();","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"     * Executes the user\u0027s command and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"     * @return The response generated after executing the user\u0027s command.","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"    protected Response executeCommand() {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"        String command \u003d this.input.split(\" \")[0];","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"            return Response.TERMINATE;","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"            Response response \u003d this.tasks.execute(this.input, command);","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"            this.storage.save(this.tasks.csvArray());","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"            return response;","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"            return Response.generate(e.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":53}},{"path":"src/main/java/duke/Utils/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import duke.Utils.Command.Type;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The InvalidArgumentException class represents an exception that is thrown when","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * an invalid argument is provided in a user command in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" * It extends the DukeException class and includes a custom error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new InvalidArgumentException with a custom error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"     * @param arg  The name of the argument.","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"     * @param type The expected type of the argument.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"    protected InvalidArgumentException(String arg, Type type) {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        super(String.format(","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"            \"I\u0027m sorry, but you have keyed in an invalid argument for the argType /%s. Try again with /%s [%s]\", ","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"            arg,","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"            arg,","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"            type","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"          ));","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"starrylight99":25}},{"path":"src/main/java/duke/Utils/InvalidFileDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The InvalidFileDataException class represents an exception that is thrown when","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * the integrity of file data is compromised or data cannot be parsed properly in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * It extends the DukeException class and includes a custom error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"public class InvalidFileDataException extends DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new InvalidFileDataException with a custom error message","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"     * indicating that the file data integrity is compromised.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    protected InvalidFileDataException() {","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"        super(\"File data integrity is compromised.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"starrylight99":16}},{"path":"src/main/java/duke/Utils/OutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The OutOfRangeException class represents an exception that is thrown when","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * a user provides an input number that is out of range of the current tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"public class OutOfRangeException extends DukeException {","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new OutOfRangeException with a default error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    protected OutOfRangeException() {","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"        super(\"I\u0027m sorry, but your input number is out of range of the current tasks\");","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"starrylight99":14}},{"path":"src/main/java/duke/Utils/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.util.List;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The Response class represents a response generated by the Duke application","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * to provide feedback to the user.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public class Response {","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"    private String messageOutput;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    private static final String LINE \u003d \"    ____________________________________________________________\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    private static final String TAB \u003d \"    \";","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    protected static final Response GREETINGS \u003d Response.greeting();","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    protected static final Response TERMINATE \u003d Response.terminate();","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"    private Response() {","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"        this.messageOutput \u003d \"\";","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"    private void add(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        this.messageOutput +\u003d Response.TAB + message + \"\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"     * Generates a response with a single message.","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"     * @param message The message to be included in the response.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object containing the specified message.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"    protected static Response generate(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"        response.add(message);","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"     * Generates a response with an array of messages.","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"     * @param messageArray An array of messages to be included in the response.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object containing the specified messages.","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"    protected static Response generate(String[] messageArray) {","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"        for (int i \u003d 0; i \u003c messageArray.length; i++) {","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"            response.add(messageArray[i]);","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"     * Generates a response with a list of messages.","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"     * @param messageList A list of messages to be included in the response.","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object containing the specified messages.","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"    protected static Response generate(List\u003cString\u003e messageList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"        for (String s : messageList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"            response.add(s);","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"     * Generates a greeting response.","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object with a standard greeting message.","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"    protected static Response greeting() {","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"        response.add(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"        response.add(\"What can I do for you?\");","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     * Generates a termination response.","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object with a standard termination message.","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"    protected static Response terminate() {","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"        Response response \u003d new Response();","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"        response.add(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"     * Returns a string representation of the response, including message content.","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"     * @return A string representation of the response.","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"starrylight99"},"content":"        return Response.LINE + this.messageOutput + Response.LINE;","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":96}},{"path":"src/main/java/duke/Utils/Session.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The Session class represents a user session in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * It manages user input and responses during the session.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"public class Session {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"    private Response response;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"    private Input input;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Session object.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    public Session() {}","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"     * Starts the user session, initializing it with a greeting message","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"     * and processing user commands until termination.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"    public void start() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        print(Response.GREETINGS);","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        this.input \u003d new Input();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        while (this.response !\u003d Response.TERMINATE) {","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"            this.response \u003d this.input.command();","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"            print(this.response);","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"     * Prints a response to the console.","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"     * @param r The response to be printed.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"    private void print(Response r) {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"        System.out.println(r);","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":37}},{"path":"src/main/java/duke/Utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.io.File;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":" * The Storage class is responsible for reading and writing data to/from storage files","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":" * in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"public class Storage {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"    enum Type {","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"        INTEGER,","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        STRING","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"    private final String filePath;","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Storage object with the specified file path and folder path.","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"     * If the file does not exist, it creates the file.","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"     * @param filePath   The path to the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"     * @param folderPath The path to the folder where the storage file should be located.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"    protected Storage(String filePath, String folderPath) {","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"            Files.createDirectories(Paths.get(folderPath));","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"     * Loads data from the storage file and returns a list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"     * @return A list of Task objects loaded from the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"    protected ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e taskData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"                taskData.add(line);","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"            scanner.close();","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"            return FileIO.readCsv(taskData);","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"            System.out.println(Response.generate(e.toString()));","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"     * Saves a list of task data to the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"     * @param taskData A list of task data to be saved to the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"    protected void save(ArrayList\u003cString\u003e taskData) {","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"            for (String line : taskData) {","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"                writer.write(line + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"            writer.close();","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"starrylight99":87}},{"path":"src/main/java/duke/Utils/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * The Task class is an abstract base class for representing tasks in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"    enum Type {","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"        TODO(\"[T]\", 3),","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"        DEADLINE(\"[D]\", 4),","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"        EVENT(\"[E]\", 5);","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"        private final String name;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"        private final int numParams;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        private Type(String name, int numParams) {","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"            this.numParams \u003d numParams;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        /**","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"         * Retrieves the Type enum based on its name.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"         *","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"         * @param name The name of the Type enum.","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"         * @return The Type enum corresponding to the given name.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"         * @throws DukeException if no matching Type enum is found.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"         */","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"        protected static Type of(String name) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"            for (Type type : values()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"                if (type.name.equals(name)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"                    return type;","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"            throw new InvalidFileDataException();","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"        /**","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"         * Gets the number of parameters expected for this task type.","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"         *","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"         * @return The number of parameters.","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"         */","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"        protected int param() {","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"            return this.numParams;","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"        @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"        public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"            return this.name;","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"    private static final String MARKED_CHECKBOX \u003d \"[X]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"    private static final String UNMARKED_CHECKBOX \u003d \"[ ]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"    private static final DateTimeFormatter DATETIME_FORMAT \u003d","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"    private String title;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"    private Type type;","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"    private boolean checked;","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Task object with a title and a task type.","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"     * @param title The title of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"     * @param type  The type of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"    protected Task(String title, Type type) {","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"        this.checked \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"     * Gets the title of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"     * @return The title of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"    protected String name() {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"        return this.title;","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"     * @return The type of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"    protected Type type() {","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"        return this.type;","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"starrylight99"},"content":"     * Checks if the task is marked (completed).","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"starrylight99"},"content":"     * @return true if the task is marked; false otherwise.","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"starrylight99"},"content":"    protected boolean marked() {","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"starrylight99"},"content":"        return this.checked;","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":101,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"starrylight99"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":105,"author":{"gitId":"starrylight99"},"content":"    protected void mark() {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"starrylight99"},"content":"        this.checked \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"starrylight99"},"content":"     * Unmarks the task as completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"starrylight99"},"content":"    protected void unmark() {","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"starrylight99"},"content":"        this.checked \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"starrylight99"},"content":"     * Converts the task to a CSV (Comma-Separated Values) string.","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"starrylight99"},"content":"     * @return A CSV string representation of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"starrylight99"},"content":"    protected abstract String toCsv();","lastModifiedDate":"2023-09-06"},{"lineNumber":122,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":123,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"starrylight99"},"content":"     * Converts a LocalDateTime object to a formatted string.","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"starrylight99"},"content":"     * @param datetime The LocalDateTime object to be converted.","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"starrylight99"},"content":"     * @return A formatted string representation of the date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"starrylight99"},"content":"    protected static String dateToString(LocalDateTime datetime) {","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"starrylight99"},"content":"        return datetime.format(Task.DATETIME_FORMAT);","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":133,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"starrylight99"},"content":"        return String.format(\"%s %s\",","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"starrylight99"},"content":"            this.checked ? Task.MARKED_CHECKBOX : Task.UNMARKED_CHECKBOX,","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"starrylight99"},"content":"            this.name()","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"starrylight99"},"content":"          );","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":140}},{"path":"src/main/java/duke/Utils/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" * The TaskList class represents a list of tasks in the Duke application","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":" * and provides methods to manage and manipulate these tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"     * Enumeration representing various command types for task manipulation.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"    enum Type {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"        MARK(\"mark\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"        UNMARK(\"unmark\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        LIST(\"list\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"        TODO(\"todo\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        DEADLINE(\"deadline\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"        EVENT(\"event\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"        FIND(\"find\"),","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"        NOTFOUND(\"\");","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"        private final String name;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"        private Type(String name) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"        /**","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"         * Retrieves the Type enum based on its name.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"         *","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"         * @param name The name of the Type enum.","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"         * @return The Type enum corresponding to the given name.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"         */","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"        protected static Type of(String name) {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"            for (Type type : values()) {","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"                if (type.name.equals(name)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"                    return type;","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"                }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"            return NOTFOUND;","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new TaskList object with an initial list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"     * @param tasks The initial list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"    protected TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"     * Converts the list of tasks to a list of CSV strings.","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"     * @return A list of CSV strings representing the tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"    protected ArrayList\u003cString\u003e csvArray() {","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e csv \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"            csv.add(task.toCsv());","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"        return csv;","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"    ","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"     * Executes a user command and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"     * @param input   The user input command.","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"     * @param command The command keyword extracted from the input.","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object representing the response to the command.","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"     * @throws DukeException if there\u0027s an error executing the command.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"    protected Response execute(String input, String command) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"        Task task;","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"        switch (Type.of(command)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"        case TODO:","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"            task \u003d new Todo(Command.assertString(input, command));","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"            task \u003d new Deadline(","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"                Command.assertString(input, command), ","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"                Command.assertDateTime(input, \"by\")","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"            );","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"starrylight99"},"content":"        case EVENT:","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"starrylight99"},"content":"            task \u003d new Event(","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"starrylight99"},"content":"                Command.assertString(input, command), ","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"starrylight99"},"content":"                Command.assertDateTime(input, \"from\"), ","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"starrylight99"},"content":"                Command.assertDateTime(input, \"to\")","lastModifiedDate":"2023-09-07"},{"lineNumber":96,"author":{"gitId":"starrylight99"},"content":"            );","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"starrylight99"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"starrylight99"},"content":"        case MARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"starrylight99"},"content":"            return this.mark(Command.assertInteger(input, command));","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"starrylight99"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"starrylight99"},"content":"            return this.unmark(Command.assertInteger(input, command));","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"starrylight99"},"content":"        case DELETE:","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"starrylight99"},"content":"            return this.delete(Command.assertInteger(input, command));","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"starrylight99"},"content":"        case LIST:","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"starrylight99"},"content":"            return this.list();","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"starrylight99"},"content":"        case FIND:","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"starrylight99"},"content":"            return this.find(Command.assertString(input, command));","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"starrylight99"},"content":"        default:","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"starrylight99"},"content":"            throw new CommandNotFoundException();","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"starrylight99"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(new String[]{","lastModifiedDate":"2023-09-05"},{"lineNumber":113,"author":{"gitId":"starrylight99"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-09-05"},{"lineNumber":114,"author":{"gitId":"starrylight99"},"content":"            \"  \" + task.toString(),","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"starrylight99"},"content":"            String.format(\"Now you have %d tasks in the list.\", tasks.size())","lastModifiedDate":"2023-09-05"},{"lineNumber":116,"author":{"gitId":"starrylight99"},"content":"        });","lastModifiedDate":"2023-09-05"},{"lineNumber":117,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"starrylight99"},"content":"     * Lists all tasks and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object listing all tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"starrylight99"},"content":"    protected Response list() {","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":126,"author":{"gitId":"starrylight99"},"content":"        output.add(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-05"},{"lineNumber":127,"author":{"gitId":"starrylight99"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"starrylight99"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"starrylight99"},"content":"            output.add(String.format(\"%d.%s\",","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"starrylight99"},"content":"                ++count,","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"starrylight99"},"content":"                task.toString()","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"starrylight99"},"content":"            ));","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(output);","lastModifiedDate":"2023-09-05"},{"lineNumber":135,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"starrylight99"},"content":"     * Checks if the given index is within a valid range.","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":140,"author":{"gitId":"starrylight99"},"content":"     * @param idx The index to check.","lastModifiedDate":"2023-09-08"},{"lineNumber":141,"author":{"gitId":"starrylight99"},"content":"     * @return true if the index is within a valid range; false otherwise.","lastModifiedDate":"2023-09-08"},{"lineNumber":142,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":143,"author":{"gitId":"starrylight99"},"content":"    private boolean inRange(int idx) {","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"starrylight99"},"content":"        return (idx \u003e 0 \u0026\u0026 this.tasks.size() \u003e --idx);","lastModifiedDate":"2023-09-05"},{"lineNumber":145,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"starrylight99"},"content":"     * Marks a task as completed and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":150,"author":{"gitId":"starrylight99"},"content":"     * @param idx The index of the task to mark.","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object indicating that the task has been marked as done.","lastModifiedDate":"2023-09-08"},{"lineNumber":152,"author":{"gitId":"starrylight99"},"content":"     * @throws DukeException if the task index is out of range.","lastModifiedDate":"2023-09-08"},{"lineNumber":153,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":154,"author":{"gitId":"starrylight99"},"content":"    protected Response mark(int idx) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":155,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":156,"author":{"gitId":"starrylight99"},"content":"        if (!this.inRange(idx)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":157,"author":{"gitId":"starrylight99"},"content":"            throw new OutOfRangeException();","lastModifiedDate":"2023-09-08"},{"lineNumber":158,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":159,"author":{"gitId":"starrylight99"},"content":"        Task task \u003d this.tasks.get(--idx);","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"starrylight99"},"content":"        task.mark();","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"starrylight99"},"content":"        output.add(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-09-05"},{"lineNumber":162,"author":{"gitId":"starrylight99"},"content":"        output.add(\"  \" + task.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":163,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":164,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(output);","lastModifiedDate":"2023-09-05"},{"lineNumber":165,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"starrylight99"},"content":"     * Unmarks a completed task and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":169,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"starrylight99"},"content":"     * @param idx The index of the task to unmark.","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object indicating that the task has been marked as not done yet.","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"starrylight99"},"content":"     * @throws DukeException if the task index is out of range.","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":174,"author":{"gitId":"starrylight99"},"content":"    protected Response unmark(int idx) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":175,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":176,"author":{"gitId":"starrylight99"},"content":"        if (!this.inRange(idx)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":177,"author":{"gitId":"starrylight99"},"content":"            throw new OutOfRangeException();","lastModifiedDate":"2023-09-08"},{"lineNumber":178,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":179,"author":{"gitId":"starrylight99"},"content":"        Task task \u003d this.tasks.get(--idx);","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"starrylight99"},"content":"        task.unmark();","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"starrylight99"},"content":"        output.add(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-09-05"},{"lineNumber":182,"author":{"gitId":"starrylight99"},"content":"        output.add(\"  \" + task.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":183,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":184,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(output);","lastModifiedDate":"2023-09-05"},{"lineNumber":185,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":187,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":188,"author":{"gitId":"starrylight99"},"content":"     * Deletes a task and returns a response.","lastModifiedDate":"2023-09-08"},{"lineNumber":189,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":190,"author":{"gitId":"starrylight99"},"content":"     * @param idx The index of the task to delete.","lastModifiedDate":"2023-09-08"},{"lineNumber":191,"author":{"gitId":"starrylight99"},"content":"     * @return A Response object indicating that the task has been deleted.","lastModifiedDate":"2023-09-08"},{"lineNumber":192,"author":{"gitId":"starrylight99"},"content":"     * @throws DukeException if the task index is out of range.","lastModifiedDate":"2023-09-08"},{"lineNumber":193,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":194,"author":{"gitId":"starrylight99"},"content":"    protected Response delete(int idx) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":195,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":196,"author":{"gitId":"starrylight99"},"content":"        if (!this.inRange(idx)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":197,"author":{"gitId":"starrylight99"},"content":"            throw new OutOfRangeException();","lastModifiedDate":"2023-09-08"},{"lineNumber":198,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":199,"author":{"gitId":"starrylight99"},"content":"        Task task \u003d this.tasks.get(--idx);","lastModifiedDate":"2023-09-05"},{"lineNumber":200,"author":{"gitId":"starrylight99"},"content":"        output.add(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-05"},{"lineNumber":201,"author":{"gitId":"starrylight99"},"content":"        output.add(\"  \" + task.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":202,"author":{"gitId":"starrylight99"},"content":"        this.tasks.remove(idx);","lastModifiedDate":"2023-09-05"},{"lineNumber":203,"author":{"gitId":"starrylight99"},"content":"        output.add(String.format(\"Now you have %d tasks in the list.\", tasks.size()));","lastModifiedDate":"2023-09-05"},{"lineNumber":204,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":205,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(output);","lastModifiedDate":"2023-09-05"},{"lineNumber":206,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":207,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":208,"author":{"gitId":"starrylight99"},"content":"    protected Response find(String keyword) throws DukeException {","lastModifiedDate":"2023-09-08"},{"lineNumber":209,"author":{"gitId":"starrylight99"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-08"},{"lineNumber":210,"author":{"gitId":"starrylight99"},"content":"        output.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-08"},{"lineNumber":211,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":212,"author":{"gitId":"starrylight99"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":213,"author":{"gitId":"starrylight99"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":214,"author":{"gitId":"starrylight99"},"content":"            if (task.name().contains(keyword)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":215,"author":{"gitId":"starrylight99"},"content":"                output.add(String.format(\"%d.%s\", ++count, task.toString()));","lastModifiedDate":"2023-09-08"},{"lineNumber":216,"author":{"gitId":"starrylight99"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":217,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":218,"author":{"gitId":"starrylight99"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-09-08"},{"lineNumber":219,"author":{"gitId":"starrylight99"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-09-08"},{"lineNumber":220,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":221,"author":{"gitId":"starrylight99"},"content":"        return Response.generate(output);","lastModifiedDate":"2023-09-08"},{"lineNumber":222,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":223,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":223}},{"path":"src/main/java/duke/Utils/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The TaskNotFoundException class represents an exception that is thrown when","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * a user provides a search keyword that does not match any of the current tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"public class TaskNotFoundException extends DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new TaskNotFoundException with a default error message.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"    protected TaskNotFoundException() {","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"        super(\"I\u0027m sorry, but none of the task matches your search keyword\");","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"starrylight99":14}},{"path":"src/main/java/duke/Utils/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":" * The Todo class represents a task of type \"Todo\" in the Duke application.","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":" * It extends the Task class and provides specific functionality for Todo tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Todo object with a title.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"     * @param title The title of the Todo task.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    protected Todo(String title) {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"        super(title, Task.Type.TODO);","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"     * Constructs a new Todo object with a title and a marked status.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"     * @param title  The title of the Todo task.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"     * @param marked true if the task is marked as completed; false otherwise.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    protected Todo(String title, boolean marked) {","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"        this(title);","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"        if (marked) {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"            this.mark();","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"     * Creates a Todo object from an array of string arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"     * @param args The array of string arguments containing task data.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"     * @return A Todo object created from the provided arguments.","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"     * @throws InvalidFileDataException if the input arguments are invalid.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"    protected static Todo of(String[] args) throws InvalidFileDataException {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"        boolean marked \u003d FileIO.assertBoolean(args[1]);","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"        String title \u003d FileIO.assertString(args[2]);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"        return new Todo(title, marked);","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"    public String toCsv() {","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"        return FileIO.joinCsv(this.type(), this.marked(), this.name());","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"        return this.type() + super.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"starrylight99":53}},{"path":"src/test/java/duke/Utils/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"starrylight99"},"content":"package duke.Utils;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"starrylight99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"starrylight99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"starrylight99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"starrylight99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"starrylight99"},"content":"public class CommandTest {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"starrylight99"},"content":"    public final String testCommand \u003d \"test\";","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"starrylight99"},"content":"    public void CommandValidStringTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"starrylight99"},"content":"        String[] validString \u003d { \"/test 12345 6789\", \"/test []\\\\-\u003d;\u0027:\u003c\u003e?.\" };","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"starrylight99"},"content":"        String[] actualString \u003d { \"12345 6789\", \"[]\\\\-\u003d;\u0027:\u003c\u003e?.\" };","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"starrylight99"},"content":"        for (int i \u003d 0; i \u003c validString.length; i++) {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"starrylight99"},"content":"            assertEquals(Command.assertString(validString[i], testCommand), actualString[i]);","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"starrylight99"},"content":"    public void CommandInvalidStringTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"starrylight99"},"content":"        String[] invalidString \u003d { \"/test\", \"/test \" };","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"starrylight99"},"content":"        for (String string : invalidString) {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"starrylight99"},"content":"            assertThrows(InvalidArgumentException.class, () -\u003e Command.assertString(string, testCommand));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"starrylight99"},"content":"    public void CommandValidIntegerTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"starrylight99"},"content":"        String[] validInteger \u003d { \"/test 99999999\", \"/test 123\", \"/test 0\" , \"/test -99999999\" };","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"starrylight99"},"content":"        int[] testInt \u003d { 99999999, 123, 0, -99999999 };","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"starrylight99"},"content":"        for (int i \u003d 0; i \u003c validInteger.length; i++) {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"starrylight99"},"content":"            assertEquals(Command.assertInteger(validInteger[i], testCommand), testInt[i]);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"starrylight99"},"content":"    public void CommandInvalidIntegerTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"starrylight99"},"content":"        String[] invalidInteger \u003d { \"/test\", \"/test 123 456\", \"/test 123.456\", \"/test 123]456\", \"/test asdgd qwe gew\" };","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"starrylight99"},"content":"        for (String string : invalidInteger) {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"starrylight99"},"content":"            assertThrows(InvalidArgumentException.class, () -\u003e Command.assertInteger(string, testCommand));","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"starrylight99"},"content":"    public void CommandValidDateTimeTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"starrylight99"},"content":"        String[] validDateTimeInput \u003d { ","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-09-07 12:34\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"starrylight99"},"content":"            \"test 1999-07-22 23:59\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"starrylight99"},"content":"            \"test 2040-12-31 00:00\"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"starrylight99"},"content":"          };","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"starrylight99"},"content":"        String[] validDateTimeString \u003d { ","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"starrylight99"},"content":"            \"2022-09-07T12:34:00\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"starrylight99"},"content":"            \"1999-07-22T23:59:00\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"starrylight99"},"content":"            \"2040-12-31T00:00:00\"","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"starrylight99"},"content":"        };","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"starrylight99"},"content":"        for (int i \u003d 0; i \u003c validDateTimeInput.length; i++) {","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"starrylight99"},"content":"            assertEquals(","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"starrylight99"},"content":"                Command.assertDateTime(validDateTimeInput[i], testCommand)","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"starrylight99"},"content":"                    .isEqual(LocalDateTime.parse(validDateTimeString[i])),","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"starrylight99"},"content":"                true","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"starrylight99"},"content":"              );","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"starrylight99"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"starrylight99"},"content":"    public void CommandInvalidDateTimeTest() {","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"starrylight99"},"content":"        String[] invalidDateTimeInput \u003d { ","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-09-07 1234\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"starrylight99"},"content":"            \"test 1999/07/22 23:59\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"starrylight99"},"content":"            \"test 00:00 2022-09-07\", ","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-13-01 00:00\",","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-04-31 00:00\",","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-05-32 00:00\",","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-09-07 24:00\",","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"starrylight99"},"content":"            \"test 2022-09-07 12:60\" ","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"starrylight99"},"content":"        };","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"starrylight99"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"starrylight99"},"content":"        for (String string : invalidDateTimeInput) {","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"starrylight99"},"content":"            assertThrows(InvalidArgumentException.class, () -\u003e Command.assertDateTime(string, testCommand));","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"starrylight99"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"starrylight99"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"starrylight99"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"starrylight99":90}}]
