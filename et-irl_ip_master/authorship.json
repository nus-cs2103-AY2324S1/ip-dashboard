[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"et-irl":1,"-":41}},{"path":"src/main/java/duke/DateFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":" * A utility class for formatting date strings.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"public class DateFormatter {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"     * Formats the input date string based on the specified format.","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     * @param input  The date string to be formatted.","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"     * @param format The desired format pattern for the output.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     * @return The formatted date string if input is a valid date, otherwise returns the original input.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    public static String format(String input, String format) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"            LocalDate date \u003d LocalDate.parse(input);","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"            return date.format(DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"            return input;","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"et-irl":27}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":" * Represents a task with a specified deadline.","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    private String endTime;","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"     * Constructs a deadline task with the given name and end time.","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"     * @param name    The name of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"     * @param endTime The end time of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"    public Deadline(String name, String endTime) {","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"        super(name);","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"        this.endTime \u003d DateFormatter.format(endTime, \"MMM d yyyy\");","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"     * Generates a formatted string representation of the deadline task.","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"     * @return A formatted string representing the deadline task.","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), this.endTime);","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":29}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":" * Duke is a simple task management program that allows users to add, delete, mark, and list tasks.","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"     * Greets the user with a welcome message.","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    public static void greet() {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"        Ui.greet();","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     * Displays a farewell message when exiting the program.","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    public static void exit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        Ui.exit();","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"     * Adds a task to the TaskList and displays a confirmation message.","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    public static void add(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"        Ui.add(task, taskList.size());","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"     * Deletes a task at the specified index from the TaskList and displays a confirmation message.","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"    public static void delete(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"        final Task task \u003d taskList.get(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"        taskList.delete(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"        Ui.delete(task, taskList.size());","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"     * Lists all tasks in the TaskList and displays them.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"    public static void list() {","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"        System.out.println(taskList);","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"     * Marks a task at the specified index as done and displays a confirmation message.","lastModifiedDate":"2023-08-19"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-19"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"    public static void mark(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"        taskList.mark(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"        Ui.mark(taskList.get(index));","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"     * Marks a task at the specified index as not done yet and displays a confirmation message.","lastModifiedDate":"2023-08-19"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":66,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be marked as not done yet.","lastModifiedDate":"2023-08-19"},{"lineNumber":67,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":68,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":69,"author":{"gitId":"et-irl"},"content":"    public static void unmark(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"et-irl"},"content":"        taskList.unmark(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"et-irl"},"content":"        Ui.unmark(taskList.get(index));","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":73,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":74,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":75,"author":{"gitId":"et-irl"},"content":"     * Main method to run the Duke program.","lastModifiedDate":"2023-08-19"},{"lineNumber":76,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":77,"author":{"gitId":"et-irl"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2023-08-19"},{"lineNumber":78,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"et-irl"},"content":"        final String DATA_DIRECTORY \u003d \"data\";","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"et-irl"},"content":"        String projectRoot \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"et-irl"},"content":"        String dataFilePath \u003d projectRoot + \"/\" + DATA_DIRECTORY + \"/tasks.ser\";","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"et-irl"},"content":"        taskList \u003d new TaskList(dataFilePath);","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":85,"author":{"gitId":"et-irl"},"content":"        Parser.start();","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"et-irl":83,"-":4}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":" * Represents an event task that occurs within a specified time frame.","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    private String startTime;","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"    private String endTime;","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"     * Constructs an event task with the given name, start time, and end time.","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"     * @param name      The name of the event.","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     * @param startTime The start time of the event.","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     * @param endTime   The end time of the event.","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"    public Event(String name, String startTime, String endTime) {","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"        super(name);","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"        this.startTime \u003d DateFormatter.format(startTime, \"MMM d yyyy\");","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        this.endTime \u003d DateFormatter.format(endTime, \"MMM d yyyy\");","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"     * Generates a formatted string representation of the event.","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"     * @return A formatted string representing the event.","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.startTime, this.endTime);","lastModifiedDate":"2023-08-19"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":32}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":" * Represents the parser of the chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"public class Parser {","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"    /** A scanner to read user input from the console. */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"    public final static Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"     * Starts the chatbot parser.","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     * \u003cp\u003ePrompts the user for input and processes commands until the chatbot should stop.","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"    public static void start() {","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"        Duke.greet();","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"        boolean continueParsing \u003d true;","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        while (continueParsing) {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"                continueParsing \u003d parseCommand(input);","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"                System.out.println(\"Argument Error: \" + e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"                System.out.println(\"Out of Bounds Error: \" + e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"        scanner.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"     * Parses the user\u0027s input and performs the corresponding action.","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"     * @param input The user\u0027s input command.","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"     * @return {@code true} if parsing should continue, {@code false} if parsing should stop.","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"     * @throws IllegalArgumentException If the input command has invalid arguments.","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the input command refers to an out-of-range index.","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"    public static boolean parseCommand(String input) {","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"        // Split into command and rest","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"        final String command \u003d parts[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"        final String rest \u003d parts.length \u003e 1 ? parts[1] : \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"        switch (command) {","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"            case \"bye\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"                Duke.exit();","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"                return false;","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"            case \"list\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"                Duke.list();","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"            case \"mark\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"                    throw new IllegalArgumentException(\"Task index is missing.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"                int index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"                Duke.mark(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"et-irl"},"content":"            case \"unmark\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"et-irl"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"et-irl"},"content":"                    throw new IllegalArgumentException(\"Task index is missing.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"et-irl"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"et-irl"},"content":"                int index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"et-irl"},"content":"                Duke.unmark(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"et-irl"},"content":"            case \"todo\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"et-irl"},"content":"                Duke.add(new ToDo(rest));","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"et-irl"},"content":"            case \"deadline\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"et-irl"},"content":"                try {","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"et-irl"},"content":"                    final String[] deadlineParts \u003d rest.split(\" /by \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"et-irl"},"content":"                    final String name \u003d deadlineParts[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"et-irl"},"content":"                    final String endTime \u003d deadlineParts[1];","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"et-irl"},"content":"                    Duke.add(new Deadline(name, endTime));","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"et-irl"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"et-irl"},"content":"                    throw new IllegalArgumentException(\"Invalid format. Usage: deadline \u003cname\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"et-irl"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"et-irl"},"content":"            case \"event\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"et-irl"},"content":"                try {","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"et-irl"},"content":"                    final String[] deadlineParts \u003d rest.split(\" /from \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"et-irl"},"content":"                    final String name \u003d deadlineParts[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"et-irl"},"content":"                    final String deadline \u003d deadlineParts[1];","lastModifiedDate":"2023-08-25"},{"lineNumber":99,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":100,"author":{"gitId":"et-irl"},"content":"                    final String[] startAndEndParts \u003d deadline.split(\" /to \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":101,"author":{"gitId":"et-irl"},"content":"                    final String startTime \u003d startAndEndParts[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":102,"author":{"gitId":"et-irl"},"content":"                    final String endTime \u003d startAndEndParts[1];","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"et-irl"},"content":"                    Duke.add(new Event(name, startTime, endTime));","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"et-irl"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"et-irl"},"content":"                    throw new IllegalArgumentException(\"Invalid format. Usage: event \u003cname\u003e /from \u003ctime\u003e /to \u003ctime\u003e\");","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"et-irl"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":111,"author":{"gitId":"et-irl"},"content":"            case \"delete\": {","lastModifiedDate":"2023-08-25"},{"lineNumber":112,"author":{"gitId":"et-irl"},"content":"                if (rest.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"et-irl"},"content":"                    throw new IllegalArgumentException(\"Task index is missing.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":114,"author":{"gitId":"et-irl"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":115,"author":{"gitId":"et-irl"},"content":"                int index \u003d Integer.parseInt(rest);","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"et-irl"},"content":"                Duke.delete(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"et-irl"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"et-irl"},"content":"            default: {","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"et-irl"},"content":"                throw new IllegalArgumentException(\"Unknown command.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"et-irl"},"content":"        return true;","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"et-irl":127}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import java.io.*;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":" * This class handles the storage and retrieval of task data using serialization.","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":" * It provides methods to save and load ArrayList of Task objects to/from a file on the hard disk.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"public class Storage {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"    private String filePath;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"     * @param filePath The path to the file where task data will be stored and retrieved.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     *                 If the file path does not exist, the necessary directories will be created.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        File parentDirectory \u003d file.getParentFile();","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"        if (!parentDirectory.exists()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"            parentDirectory.mkdirs();","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"                System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"     * Save the list of tasks to a file on the hard disk using serialization.","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"     * @throws IOException If there\u0027s an error while writing to the file.","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"        ObjectOutputStream outputStream \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"            outputStream \u003d new ObjectOutputStream(new FileOutputStream(filePath));","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"            outputStream.writeObject(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"        } finally {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"            if (outputStream !\u003d null) {","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"                outputStream.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"     * Load the list of tasks from a file on the hard disk using deserialization.","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"     * @return The loaded list of tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"     * @throws IOException            If there\u0027s an error while reading from the file.","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"     * @throws ClassNotFoundException If the class of the serialized object cannot be found.","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws IOException, ClassNotFoundException {","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"        ObjectInputStream inputStream \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"et-irl"},"content":"            inputStream \u003d new ObjectInputStream(new FileInputStream(filePath));","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"et-irl"},"content":"            // Suppressing unchecked cast warning because we know the deserialized object is an ArrayList\u003cTask\u003e.","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"et-irl"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"et-irl"},"content":"            ArrayList\u003cTask\u003e tasks \u003d (ArrayList\u003cTask\u003e) inputStream.readObject();","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"et-irl"},"content":"            return tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"et-irl"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"et-irl"},"content":"            // The file is empty: There are no tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"et-irl"},"content":"            return new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"et-irl"},"content":"        } finally {","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"et-irl"},"content":"            if (inputStream !\u003d null) {","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"et-irl"},"content":"                inputStream.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"et-irl":80}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":" * Represents a generic task.","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":" * This class implements Serializable to allow tasks to be serialized and deserialized,","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":" * enabling them to be stored and retrieved from external sources, such as files.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"    private String name;","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     * Constructs a task with the given name.","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     * @param name The name of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    public Task(String name) {","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-19"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-19"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"     * Checks if the task is done.","lastModifiedDate":"2023-08-19"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"     * @return {@code true} if the task is done, {@code false} otherwise.","lastModifiedDate":"2023-08-19"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"    public String getName() {","lastModifiedDate":"2023-08-19"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"        return this.name;","lastModifiedDate":"2023-08-19"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"     * Generates a formatted string representation of the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2023-08-19"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"        return \"[\" +","lastModifiedDate":"2023-08-19"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"            (isDone ? \"X\" : \" \") +","lastModifiedDate":"2023-08-19"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"            \"] \" +","lastModifiedDate":"2023-08-19"},{"lineNumber":66,"author":{"gitId":"et-irl"},"content":"            this.name;","lastModifiedDate":"2023-08-19"},{"lineNumber":67,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":68,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":68}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":" * Represents a TaskList that holds tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"public class TaskList {","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"    private Storage dataStorage;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"    public TaskList(String dataFilePath) {","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"        list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"        dataStorage \u003d new Storage(dataFilePath);","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"        load();","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"     * Save the list of tasks to the data file.","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"    private void save() {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"            dataStorage.saveTasks(list);","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"            System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"     * Load the list of tasks from the data file.","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"    private void load() {","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"            ArrayList\u003cTask\u003e tasks \u003d dataStorage.loadTasks();","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"            list \u003d tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"        } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"            System.out.println(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-19"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-19"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"        list.add(task);","lastModifiedDate":"2023-08-19"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"        save();","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"     * Deletes a task at the specified index.","lastModifiedDate":"2023-08-19"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-19"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"    public void delete(int index) {","lastModifiedDate":"2023-08-19"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2023-08-19"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"            throw new IndexOutOfBoundsException(\"Task index is out of range.\");","lastModifiedDate":"2023-08-19"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"        list.remove(index - 1);","lastModifiedDate":"2023-08-19"},{"lineNumber":66,"author":{"gitId":"et-irl"},"content":"        save();","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":68,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":69,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":70,"author":{"gitId":"et-irl"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-08-19"},{"lineNumber":71,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":72,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-19"},{"lineNumber":73,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":74,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":75,"author":{"gitId":"et-irl"},"content":"    public void mark(int index) {","lastModifiedDate":"2023-08-19"},{"lineNumber":76,"author":{"gitId":"et-irl"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2023-08-19"},{"lineNumber":77,"author":{"gitId":"et-irl"},"content":"            throw new IndexOutOfBoundsException(\"Task index is out of range.\");","lastModifiedDate":"2023-08-19"},{"lineNumber":78,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":79,"author":{"gitId":"et-irl"},"content":"        list.get(index - 1).markDone();","lastModifiedDate":"2023-08-19"},{"lineNumber":80,"author":{"gitId":"et-irl"},"content":"        save();","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":82,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":83,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":84,"author":{"gitId":"et-irl"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-08-19"},{"lineNumber":85,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":86,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-08-19"},{"lineNumber":87,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":88,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":89,"author":{"gitId":"et-irl"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-08-19"},{"lineNumber":90,"author":{"gitId":"et-irl"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2023-08-19"},{"lineNumber":91,"author":{"gitId":"et-irl"},"content":"            throw new IndexOutOfBoundsException(\"Task index is out of range.\");","lastModifiedDate":"2023-08-19"},{"lineNumber":92,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":93,"author":{"gitId":"et-irl"},"content":"        list.get(index - 1).markUndone();","lastModifiedDate":"2023-08-19"},{"lineNumber":94,"author":{"gitId":"et-irl"},"content":"        save();","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":96,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":97,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":98,"author":{"gitId":"et-irl"},"content":"     * Retrieves a task at the specified index.","lastModifiedDate":"2023-08-19"},{"lineNumber":99,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":100,"author":{"gitId":"et-irl"},"content":"     * @param index The index of the task to be retrieved.","lastModifiedDate":"2023-08-19"},{"lineNumber":101,"author":{"gitId":"et-irl"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-19"},{"lineNumber":102,"author":{"gitId":"et-irl"},"content":"     * @throws IndexOutOfBoundsException If the index is out of range.","lastModifiedDate":"2023-08-19"},{"lineNumber":103,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":104,"author":{"gitId":"et-irl"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-08-19"},{"lineNumber":105,"author":{"gitId":"et-irl"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2023-08-19"},{"lineNumber":106,"author":{"gitId":"et-irl"},"content":"            throw new IndexOutOfBoundsException(\"Task index is out of range.\");","lastModifiedDate":"2023-08-19"},{"lineNumber":107,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":108,"author":{"gitId":"et-irl"},"content":"        return list.get(index - 1);","lastModifiedDate":"2023-08-19"},{"lineNumber":109,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":110,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":111,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":112,"author":{"gitId":"et-irl"},"content":"     * Returns the number of tasks in the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":114,"author":{"gitId":"et-irl"},"content":"     * @return The number of tasks.","lastModifiedDate":"2023-08-19"},{"lineNumber":115,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":116,"author":{"gitId":"et-irl"},"content":"    public int size() {","lastModifiedDate":"2023-08-19"},{"lineNumber":117,"author":{"gitId":"et-irl"},"content":"        return list.size();","lastModifiedDate":"2023-08-19"},{"lineNumber":118,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":119,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":120,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":121,"author":{"gitId":"et-irl"},"content":"     * Generates a string representation of the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":123,"author":{"gitId":"et-irl"},"content":"     * @return A formatted string of tasks in the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":125,"author":{"gitId":"et-irl"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":126,"author":{"gitId":"et-irl"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":127,"author":{"gitId":"et-irl"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-08-19"},{"lineNumber":128,"author":{"gitId":"et-irl"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-19"},{"lineNumber":129,"author":{"gitId":"et-irl"},"content":"            result.append((i + 1) + \". \" + list.get(i));","lastModifiedDate":"2023-08-19"},{"lineNumber":130,"author":{"gitId":"et-irl"},"content":"            if (i + 1 \u003c list.size()) {","lastModifiedDate":"2023-08-19"},{"lineNumber":131,"author":{"gitId":"et-irl"},"content":"                result.append(\"\\n\");","lastModifiedDate":"2023-08-19"},{"lineNumber":132,"author":{"gitId":"et-irl"},"content":"            }","lastModifiedDate":"2023-08-19"},{"lineNumber":133,"author":{"gitId":"et-irl"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":134,"author":{"gitId":"et-irl"},"content":"        return result.toString();","lastModifiedDate":"2023-08-19"},{"lineNumber":135,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":136,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":136}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":" * Represents a ToDo task.","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"     * Constructs a ToDo task with the given name.","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"     * @param name The name of the ToDo task.","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"        super(name);","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     * Generates a formatted string representation of the ToDo task.","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"     * @return A formatted string representing the ToDo task.","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":25}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":" * The Ui class handles user interface interactions and displays messages to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"public class Ui {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"    public static void greet() {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Hello! I\u0027m Untitled!\");","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"     * Displays an exit message to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"    public static void exit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"     * Displays a message after adding a task.","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"     * @param newSize The new size of the task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    public static void add(Task task, int newSize) {","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Got it! I\u0027ve added this task:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Now you have \" + newSize + \" tasks in the list.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"     * Displays a message after deleting a task.","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"     * @param newSize The new size of the task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"    public static void delete(Task task, int newSize) {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Now you have \" + newSize + \" tasks in the list.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"et-irl"},"content":"     * Displays a message after marking a task as done.","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"et-irl"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"et-irl"},"content":"    public static void mark(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"et-irl"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"et-irl"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"et-irl"},"content":"     * Displays a message after marking a task as not done.","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"et-irl"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"et-irl"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"et-irl"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"et-irl"},"content":"    public static void unmark(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"et-irl"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"et-irl"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"et-irl":65}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", \"2023-08-15\");","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[D][ ] Submit report (by: Aug 15 2023)\", deadline.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"    public void testMarkDone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", \"2023-08-15\");","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"        deadline.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"        assertEquals(true, deadline.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    public void testMarkUndone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", \"2023-08-15\");","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"        deadline.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"        deadline.markUndone();","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"        assertEquals(false, deadline.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"    public void testGetName() {","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", \"2023-08-15\");","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"Submit report\", deadline.getName());","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"    public void testToStringWithInvalidDeadline() {","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", \"invalid-date\");","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[D][ ] Submit report (by: invalid-date)\", deadline.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"et-irl":40}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"public class EventTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"        Event event \u003d new Event(\"Meeting\", \"2023-08-15\", \"2023-08-16\");","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[E][ ] Meeting (from: Aug 15 2023 to: Aug 16 2023)\", event.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"    public void testMarkDone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"        Event event \u003d new Event(\"Party\", \"2023-08-20\", \"2023-08-21\");","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"        event.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"        assertTrue(event.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"    public void testMarkUndone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        Event event \u003d new Event(\"Conference\", \"2023-08-25\", \"2023-08-26\");","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"        event.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"        assertTrue(event.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"        event.markUndone();","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"    public void testGetName() {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"        Event event \u003d new Event(\"Gathering\", \"2023-08-30\", \"2023-08-31\");","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"Gathering\", event.getName());","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"    public void testToStringWithInvalidDates() {","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"        Event event \u003d new Event(\"Invalid Event\", \"invalid-start\", \"invalid-end\");","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[E][ ] Invalid Event (from: invalid-start to: invalid-end)\", event.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"et-irl":41}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"public class ToDoTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"    public void testMarkDone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"        ToDo todo \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"        ","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"        todo.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"    public void testMarkUndone() {","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"        ToDo todo \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"        todo.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"        ","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"et-irl"},"content":"        todo.markUndone();","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"et-irl"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"et-irl"},"content":"    public void testGetName() {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"et-irl"},"content":"        ToDo todo \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"Buy groceries\", todo.getName());","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"et-irl"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"et-irl"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"et-irl"},"content":"        ToDo todoUndone \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[T][ ] Buy groceries\", todoUndone.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"et-irl"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"et-irl"},"content":"        ToDo todoDone \u003d new ToDo(\"Buy groceries\");","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"et-irl"},"content":"        todoDone.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"et-irl"},"content":"        assertEquals(\"[T][X] Buy groceries\", todoDone.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"et-irl"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"et-irl"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"et-irl":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"et-irl"},"content":"todo borrow book","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"et-irl"},"content":"todo","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"et-irl"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"et-irl"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-19"},{"lineNumber":5,"author":{"gitId":"et-irl"},"content":"deadline return book","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"et-irl"},"content":"deadline","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"et-irl"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"et-irl"},"content":"event project meeting /from Mon 2pm","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"et-irl"},"content":"event project meeting","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"et-irl"},"content":"event","lastModifiedDate":"2023-08-19"},{"lineNumber":11,"author":{"gitId":"et-irl"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"et-irl"},"content":"event no idea /from no idea /to no idea","lastModifiedDate":"2023-08-19"},{"lineNumber":13,"author":{"gitId":"et-irl"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"et-irl"},"content":"unmark -2","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"et-irl"},"content":"mark -2","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"et-irl"},"content":"unmark 0","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"et-irl"},"content":"mark 0","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"et-irl"},"content":"unmark 0","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"et-irl"},"content":"mark 2","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"et-irl"},"content":"mark 4","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"et-irl"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"et-irl"},"content":"invalidcommand","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"et-irl"},"content":"bye","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"et-irl":23}}]
