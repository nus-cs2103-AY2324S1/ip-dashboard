[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"T | X | borrow book","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"D | O | return book | Sunday","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"E | X | project meeting | Mon 2pm-4pm","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"zacwong2151":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"    protected String by;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"        return \"D\" + super.toFileString() + \"| \" + by;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"zacwong2151":15}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"    static String indent \u003d \"   \";","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"    static String megaIndent \u003d \"     \";","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"    static String horizontalLines \u003d indent  + \"__________________________________________\";","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"    static ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"    static String dataFile \u003d \"data/duke.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"    public static void printWithIndent(String string) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(indent + string);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"zacwong2151"},"content":"     * @return the last Task from the taskArray","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"zacwong2151"},"content":"    public static Task getLastTask() {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"zacwong2151"},"content":"        return taskArray.get(taskArray.size() - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"zacwong2151"},"content":"     * displays the list of Tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"zacwong2151"},"content":"    public static void displayList() {","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(indent + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"zacwong2151"},"content":"        for (int i \u003d 0; i \u003c taskArray.size(); i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"zacwong2151"},"content":"            int num \u003d i + 1;","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"zacwong2151"},"content":"            Task curr \u003d taskArray.get(i);","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(indent + num + \".\" + curr.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"zacwong2151"},"content":"     * Everytime a Task is added to taskArray, clear the duke.txt file, then scan the whole","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"zacwong2151"},"content":"     * taskArray and rewrite the entire txt file","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"zacwong2151"},"content":"     * Initially, I did a writeToFile method where everytime a Task is added to taskArray, write","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"zacwong2151"},"content":"     * the new task to duke.txt. However, this may cause some problems when it comes to updating","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"zacwong2151"},"content":"     * or deleting tasks from the file, so I changed the implementation to rewriting the entire txt","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"zacwong2151"},"content":"     * file everytime there is a change to the list. This causes a longer run time but since this mod","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"zacwong2151"},"content":"     * is not about run time, it should be fine.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"zacwong2151"},"content":"     * @param filePath hardcoded relative path to duke.txt","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"zacwong2151"},"content":"     * @throws IOException if the file at the filePath does not exist (I think)","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"zacwong2151"},"content":"    private static void updateFile(String filePath) throws IOException {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"zacwong2151"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"zacwong2151"},"content":"        // Clear the existing content by opening in write mode and immediately closing","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"zacwong2151"},"content":"        fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"zacwong2151"},"content":"        for (int i \u003d 0; i \u003c taskArray.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"zacwong2151"},"content":"            fw.write(taskArray.get(i).toFileString() + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"zacwong2151"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"zacwong2151"},"content":"     * For an input such as \u0027todo borrow book\u0027, letter is \u0027T\u0027 and string is \u0027borrow book\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"zacwong2151"},"content":"     * After adding the Task to taskArray, duke.txt is updated to reflect the new list","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"zacwong2151"},"content":"     * @param letter the letter corresponding to the first letter of the Task","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"zacwong2151"},"content":"     * @param string the string corresponding to the chunk of text after the word todo, deadline, or event","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"zacwong2151"},"content":"    public static void whichTask(String letter, String string) {","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"zacwong2151"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"zacwong2151"},"content":"            if (letter.equals(\"T\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"zacwong2151"},"content":"                taskArray.add(new ToDo(string));","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"zacwong2151"},"content":"            if (letter.equals(\"D\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"zacwong2151"},"content":"                taskArray.add(new Deadline(getDescription(string), getBy(string)));","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"zacwong2151"},"content":"            if (letter.equals(\"E\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"zacwong2151"},"content":"                taskArray.add(new Event(getDescription(string), getFrom(string), getTo(string)));","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"zacwong2151"},"content":"            updateFile(dataFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"zacwong2151"},"content":"            int arrayLength \u003d taskArray.size();","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(horizontalLines);","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(indent + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(megaIndent + getLastTask().toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(indent + \"Now you have \" + arrayLength + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(horizontalLines);","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"zacwong2151"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"zacwong2151"},"content":"            printWithIndent(e.getMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":93,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"zacwong2151"},"content":"     * For deadline and event Tasks, obtains the description of the Task (before the first slash)","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027event project meeting /from Mon 2pm /to 4pm\u0027 will return \u0027project meeting\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"zacwong2151"},"content":"     * @param string of the Task","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"zacwong2151"},"content":"     * @return the description of the Task","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"zacwong2151"},"content":"    public static String getDescription(String string) {","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"zacwong2151"},"content":"        int len \u003d string.length();","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"zacwong2151"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"zacwong2151"},"content":"        for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"zacwong2151"},"content":"            if (string.charAt(i) \u003d\u003d \u0027/\u0027) {","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"zacwong2151"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"zacwong2151"},"content":"            count++;","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"zacwong2151"},"content":"        return string.substring(0, count);","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"zacwong2151"},"content":"     * A method for the Deadline class to obtain the by part of the Task description","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027deadline return book /by Sunday\u0027 will return \u0027Sunday\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"zacwong2151"},"content":"     * @param string the Task description","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"zacwong2151"},"content":"     * @return the deadline","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"zacwong2151"},"content":"     * @throws DukeException if the input string is formatted wrongly","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"zacwong2151"},"content":"    public static String getBy(String string) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"zacwong2151"},"content":"        String slash \u003d \"/\";","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"zacwong2151"},"content":"        int first \u003d string.indexOf(slash);","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"zacwong2151"},"content":"        int second \u003d first + 3;","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"zacwong2151"},"content":"        if (first \u003d\u003d -1 || !string.substring(first, second).equals(\"/by\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"zacwong2151"},"content":"            throw new DukeException(\"You need to add a by timing!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"zacwong2151"},"content":"        return string.substring(first + 4); // returns \"Sunday\"","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"zacwong2151"},"content":"     * A method for the Event class to obtain the from part of the Event description","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027event project meeting /from Mon 2pm /to 4pm\u0027 will return \u0027Mon 2pm\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"zacwong2151"},"content":"     * @param string the Task description","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"zacwong2151"},"content":"     * @return the from part of the event","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"zacwong2151"},"content":"     * @throws DukeException","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"zacwong2151"},"content":"    public static String getFrom(String string) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"zacwong2151"},"content":"        String slash \u003d \"/\";","lastModifiedDate":"2023-08-23"},{"lineNumber":141,"author":{"gitId":"zacwong2151"},"content":"        int firstSlash \u003d string.indexOf(slash);","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"zacwong2151"},"content":"        int secondSlash \u003d string.indexOf(slash, firstSlash + 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"zacwong2151"},"content":"        if (firstSlash \u003d\u003d -1 || secondSlash \u003d\u003d -1","lastModifiedDate":"2023-08-23"},{"lineNumber":145,"author":{"gitId":"zacwong2151"},"content":"                || !string.substring(firstSlash, firstSlash + 5).equals(\"/from\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"zacwong2151"},"content":"            throw new DukeException(\"You need to add a /from and /to for events\");","lastModifiedDate":"2023-08-23"},{"lineNumber":147,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":148,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":149,"author":{"gitId":"zacwong2151"},"content":"        return string.substring(firstSlash + 6, secondSlash - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":150,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"zacwong2151"},"content":"     * A method for the Event class to obtain the to part of the Event description","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027event project meeting /from Mon 2pm /to 4pm\u0027 will return \u00274pm\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"zacwong2151"},"content":"     * @param string the Task description","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"zacwong2151"},"content":"     * @return the to part of the event","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"zacwong2151"},"content":"     * @throws DukeException","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"zacwong2151"},"content":"    public static String getTo(String string) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":160,"author":{"gitId":"zacwong2151"},"content":"        String slash \u003d \"/\";","lastModifiedDate":"2023-08-23"},{"lineNumber":161,"author":{"gitId":"zacwong2151"},"content":"        int firstSlash \u003d string.indexOf(slash);","lastModifiedDate":"2023-08-23"},{"lineNumber":162,"author":{"gitId":"zacwong2151"},"content":"        int secondSlash \u003d string.indexOf(slash, firstSlash + 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":163,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"zacwong2151"},"content":"        if (!string.substring(secondSlash, secondSlash + 3).equals(\"/to\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":165,"author":{"gitId":"zacwong2151"},"content":"            throw new DukeException(\"You need to add a /to for events\");","lastModifiedDate":"2023-08-23"},{"lineNumber":166,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":167,"author":{"gitId":"zacwong2151"},"content":"        return string.substring(secondSlash + 4);","lastModifiedDate":"2023-08-23"},{"lineNumber":168,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":169,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":170,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"zacwong2151"},"content":"     * This method encapsulates the functionality of marking a task as completed or not","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027mark 1\u0027 will mark the Task at position 0 at the TaskArray as \u0027marked\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"zacwong2151"},"content":"     * After marking description, duke.txt is updated to reflect the new list","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"zacwong2151"},"content":"     * @param string the input string","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"zacwong2151"},"content":"    public static void markDescription(String string) {","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"zacwong2151"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":179,"author":{"gitId":"zacwong2151"},"content":"            String clean \u003d string.replaceAll(\"\\\\D+\", \"\"); //remove non-digits","lastModifiedDate":"2023-08-22"},{"lineNumber":180,"author":{"gitId":"zacwong2151"},"content":"            int pos \u003d Integer.parseInt(clean) - 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"zacwong2151"},"content":"            Task curr \u003d taskArray.get(pos);","lastModifiedDate":"2023-08-23"},{"lineNumber":182,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":183,"author":{"gitId":"zacwong2151"},"content":"            if (string.contains(\"unmark\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":184,"author":{"gitId":"zacwong2151"},"content":"                curr.markAsUnDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":185,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":186,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(indent + \"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":187,"author":{"gitId":"zacwong2151"},"content":"            } else if (string.contains(\"mark\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":188,"author":{"gitId":"zacwong2151"},"content":"                curr.markAsDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":189,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":190,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(indent + \"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":191,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":192,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(megaIndent + curr.getStatusIconWithBracket() + \" \" + curr.description);","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(horizontalLines);","lastModifiedDate":"2023-08-22"},{"lineNumber":194,"author":{"gitId":"zacwong2151"},"content":"            updateFile(dataFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"zacwong2151"},"content":"        } catch (IndexOutOfBoundsException | IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"zacwong2151"},"content":"            printWithIndent(\"You are trying to access a Task that does not exist!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":197,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":198,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":199,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":200,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"zacwong2151"},"content":"     * This method encapsulates deleting of a task from TaskArray","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"zacwong2151"},"content":"     * For example, the input \u0027delete 3\u0027 will delete the Task at position 2 of TaskArray","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"zacwong2151"},"content":"     * After deleting the Task, duke.txt is updated to reflect the new list","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"zacwong2151"},"content":"     * @param string the input string","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"zacwong2151"},"content":"    public static void deleteTask(String string) {","lastModifiedDate":"2023-08-23"},{"lineNumber":208,"author":{"gitId":"zacwong2151"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"zacwong2151"},"content":"            String clean \u003d string.replaceAll(\"\\\\D+\", \"\"); //remove non-digits","lastModifiedDate":"2023-08-23"},{"lineNumber":210,"author":{"gitId":"zacwong2151"},"content":"            int pos \u003d Integer.parseInt(clean);","lastModifiedDate":"2023-08-23"},{"lineNumber":211,"author":{"gitId":"zacwong2151"},"content":"            if (pos \u003e taskArray.size()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":212,"author":{"gitId":"zacwong2151"},"content":"                printWithIndent(\"You are trying to delete a Task that does not exist\");","lastModifiedDate":"2023-08-23"},{"lineNumber":213,"author":{"gitId":"zacwong2151"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":214,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":215,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(indent + \"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":216,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(megaIndent + taskArray.get(pos - 1).toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":217,"author":{"gitId":"zacwong2151"},"content":"                taskArray.remove(pos - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":218,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(indent + \"Now you have \" + taskArray.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":219,"author":{"gitId":"zacwong2151"},"content":"                System.out.println(horizontalLines);","lastModifiedDate":"2023-08-23"},{"lineNumber":220,"author":{"gitId":"zacwong2151"},"content":"                updateFile(dataFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"zacwong2151"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"zacwong2151"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"zacwong2151"},"content":"     * This function is called when the main method is run. It will print out all the tasks","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"zacwong2151"},"content":"     * in the list","lastModifiedDate":"2023-08-30"},{"lineNumber":230,"author":{"gitId":"zacwong2151"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":231,"author":{"gitId":"zacwong2151"},"content":"     * @param filePath the file where the lists of Tasks are stored. It is hardcoded to be \"data/duke.txt\"","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"zacwong2151"},"content":"     * @throws FileNotFoundException if the file at this filePath is not found (though I\u0027m not sure","lastModifiedDate":"2023-08-30"},{"lineNumber":233,"author":{"gitId":"zacwong2151"},"content":"     * when this will happen)","lastModifiedDate":"2023-08-30"},{"lineNumber":234,"author":{"gitId":"zacwong2151"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":235,"author":{"gitId":"zacwong2151"},"content":"    private static void printFileContents(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-08-30"},{"lineNumber":236,"author":{"gitId":"zacwong2151"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"zacwong2151"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2023-08-30"},{"lineNumber":238,"author":{"gitId":"zacwong2151"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":239,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(s.nextLine());","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":241,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":242,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":244,"author":{"gitId":"zacwong2151"},"content":"        String name \u003d \"zac\";","lastModifiedDate":"2023-08-21"},{"lineNumber":245,"author":{"gitId":"zacwong2151"},"content":"        Scanner obj \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":246,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":247,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-21"},{"lineNumber":248,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(indent + \"Hello! I\u0027m \" + name);","lastModifiedDate":"2023-08-21"},{"lineNumber":249,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(indent + \"What can I do for you?\");","lastModifiedDate":"2023-08-21"},{"lineNumber":250,"author":{"gitId":"zacwong2151"},"content":"        System.out.println(horizontalLines);","lastModifiedDate":"2023-08-21"},{"lineNumber":251,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":252,"author":{"gitId":"zacwong2151"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":253,"author":{"gitId":"zacwong2151"},"content":"            printFileContents(dataFile);","lastModifiedDate":"2023-08-30"},{"lineNumber":254,"author":{"gitId":"zacwong2151"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":255,"author":{"gitId":"zacwong2151"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":257,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":258,"author":{"gitId":"zacwong2151"},"content":"        while (true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":259,"author":{"gitId":"zacwong2151"},"content":"            String userInput \u003d obj.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":260,"author":{"gitId":"zacwong2151"},"content":"            if (userInput.equals(\"list\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":261,"author":{"gitId":"zacwong2151"},"content":"                displayList();","lastModifiedDate":"2023-08-21"},{"lineNumber":262,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":263,"author":{"gitId":"zacwong2151"},"content":"                printWithIndent(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":264,"author":{"gitId":"zacwong2151"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":265,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"unmark\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":266,"author":{"gitId":"zacwong2151"},"content":"                markDescription(userInput);","lastModifiedDate":"2023-08-22"},{"lineNumber":267,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"mark\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":268,"author":{"gitId":"zacwong2151"},"content":"                markDescription(userInput);","lastModifiedDate":"2023-08-22"},{"lineNumber":269,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"todo\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":270,"author":{"gitId":"zacwong2151"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":271,"author":{"gitId":"zacwong2151"},"content":"                    whichTask(\"T\", userInput.substring(5));","lastModifiedDate":"2023-08-22"},{"lineNumber":272,"author":{"gitId":"zacwong2151"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":273,"author":{"gitId":"zacwong2151"},"content":"                    printWithIndent(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":274,"author":{"gitId":"zacwong2151"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":275,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"deadline\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":276,"author":{"gitId":"zacwong2151"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":277,"author":{"gitId":"zacwong2151"},"content":"                    whichTask(\"D\", userInput.substring(9));","lastModifiedDate":"2023-08-22"},{"lineNumber":278,"author":{"gitId":"zacwong2151"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":279,"author":{"gitId":"zacwong2151"},"content":"                    printWithIndent(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":280,"author":{"gitId":"zacwong2151"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":281,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"event\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":282,"author":{"gitId":"zacwong2151"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":283,"author":{"gitId":"zacwong2151"},"content":"                    whichTask(\"E\", userInput.substring(6));","lastModifiedDate":"2023-08-22"},{"lineNumber":284,"author":{"gitId":"zacwong2151"},"content":"                } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":285,"author":{"gitId":"zacwong2151"},"content":"                    printWithIndent(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":286,"author":{"gitId":"zacwong2151"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":287,"author":{"gitId":"zacwong2151"},"content":"            } else if (userInput.contains(\"delete\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":288,"author":{"gitId":"zacwong2151"},"content":"                deleteTask(userInput);","lastModifiedDate":"2023-08-23"},{"lineNumber":289,"author":{"gitId":"zacwong2151"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":290,"author":{"gitId":"zacwong2151"},"content":"                printWithIndent(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-23"},{"lineNumber":291,"author":{"gitId":"zacwong2151"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":292,"author":{"gitId":"zacwong2151"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zacwong2151":290,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"    public DukeException(String error) {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"        super(error);","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"zacwong2151":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"    protected String from;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"    protected String to;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"        return \"[E]\" + super.toString() + \"(from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"        return \"E\" + super.toFileString() + \"| \" + from + \"-\" + to;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"zacwong2151":17}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"abstract class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"    protected boolean marked;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"        this.marked \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"    public String getStatusIconWithBracket() {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"        return marked ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"        return marked ? \"X\" : \"O\";","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"        this.marked \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"zacwong2151"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"zacwong2151"},"content":"        return this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"zacwong2151"},"content":"    public void markAsUnDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"zacwong2151"},"content":"        this.marked \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"zacwong2151"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"zacwong2151"},"content":"        return this.getStatusIconWithBracket() + \" \" + description;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"zacwong2151"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"zacwong2151"},"content":"        return \" | \" + this.getStatusIcon() + \" | \" + this.getDescription();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"zacwong2151":33}},{"path":"src/main/java/TaskArrayManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"//import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"public class TaskArrayManager {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"//    private ArrayList\u003cTask\u003e taskArray;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"//    private String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"//    public TaskArrayManager(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"//        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"//        this.taskArray \u003d loadTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"//    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"//    public ArrayList\u003cTask\u003e loadTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"zacwong2151"},"content":"//        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"zacwong2151"},"content":"//            ObjectMapper objectMapper \u003d new ObjectMapper();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"zacwong2151"},"content":"//        }s","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"zacwong2151"},"content":"//    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"zacwong2151":20}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"        return \"T\" + super.toFileString();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"zacwong2151":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zacwong2151"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"zacwong2151"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"zacwong2151"},"content":"deadline return book /y Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"deadline return book by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"zacwong2151"},"content":"event project meeting from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"zacwong2151"},"content":"event project meeting /rom Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"event project meeting /from Mon 2pm to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"zacwong2151"},"content":"event project meeting /from Mon 2pm /o 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"zacwong2151"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"zacwong2151"},"content":"todo randomthing","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"zacwong2151"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"zacwong2151"},"content":"mark 5","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"zacwong2151"},"content":"delete 4","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"zacwong2151"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"zacwong2151"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"zacwong2151":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"zacwong2151"},"content":"REM Set the working directory to the root directory (ip) before executing the script","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"zacwong2151"},"content":"CD /D ..\\","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"zacwong2151"},"content":"if not exist bin mkdir bin","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"zacwong2151"},"content":"del .\\text-ui-test\\ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"zacwong2151"},"content":"javac -cp src\\main\\java -Xlint:none -d bin src\\main\\java\\*.java","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"zacwong2151"},"content":"REM because now that the working directory is set to ip, ACTUAL.TXT and EXPECTED.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"zacwong2151"},"content":"REM can only be accessed with the appropriate cd","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"zacwong2151"},"content":"REM Run the program, feed commands from input.txt file, and redirect the output to ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"zacwong2151"},"content":"java -classpath bin Duke \u003c .\\text-ui-test\\input.txt \u003e .\\text-ui-test\\ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"zacwong2151"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"zacwong2151"},"content":"REM Compare the output to the expected output","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"zacwong2151"},"content":"FC .\\text-ui-test\\ACTUAL.TXT .\\text-ui-test\\EXPECTED.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zacwong2151":14,"-":14}}]
