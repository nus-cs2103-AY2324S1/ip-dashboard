[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sunzihan23":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sunzihan23":2,"-":41}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":" * The Deadline class represents a task with a specific deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" * It extends the Task class and adds functionality for handling deadlines.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a Deadline object with the specified task description and deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     * @param task The description of the task to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     * @param by The deadline of the task as a LocalDateTime object.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"    public Deadline(String task, LocalDateTime by) {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        super(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"     * Returns a string representation of the Deadline object.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"     * @return A string containing task type, completion status, task description and deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"        return String.format(\"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\");","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":34}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":" * The Duke class represents a simple task management application.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":" * It initializes necessary components and controls the main application flow.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"    private final Parser parser;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"    private final TaskList list;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a Duke object with the specified file path for task storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"        this.list \u003d new TaskList(filePath);","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        this.parser \u003d new Parser(this.list);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"     * Runs the main loop of the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"     * Greets the user, reads and parses commands, and executes corresponding actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"    public void run() {","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"        Ui.greet();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"        boolean shouldContinue \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"        while (shouldContinue) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"                String command \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"                this.parser.parse(command);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"                shouldContinue \u003d this.parser.getStatus();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"     * The main method to start the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"     * @param args Command-line arguments (not used in this context).","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sunzihan23":46,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":" * The DukeException class represents an exception specific to the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":" * It extends the RuntimeException class to handle custom exceptions for Duke.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a DukeException object with the specified error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     * Returns a string representation of the DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"     * @return A formatted error message followed by the exception message.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"        return \"OOPS! \" + super.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":26}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":" * The Event class represents a task that occurs within a specified time range.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" * It extends the Task class and includes details about the start and end times of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"     * Constructs an Event object with the specified task description, start time, and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     * @param task The description of the event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     * @param start The start time of the event as a LocalDateTime object.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"     * @param end The end time of the event as a LocalDateTime object.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"    public Event(String task, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"        super(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"     * Returns a string representation of the Event object.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"     * @return A string containing event type, completion status, task description, start and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"        return String.format(\"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"                + start.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \", to: \"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"                + end.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\");","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":38}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" * The Parser class is responsible for parsing user input and executing corresponding actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":" * It interacts with the TaskList and Ui classes to manage tasks and user interface interactions.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"public class Parser {","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"    private final TaskList list;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    private boolean shouldContinue;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a Parser object with the specified TaskList and Ui instances.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     * @param list The TaskList instance for managing tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"    public Parser(TaskList list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"        this.shouldContinue \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"     * Parses user input and executes corresponding actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"     * @param input The user input to be parsed and acted upon.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"     * @throws DukeException If there is an issue with parsing or executing the input.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"    public void parse(String input) throws DukeException {","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"        String action \u003d parts[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"        String details \u003d parts.length \u003d\u003d 1 ? \"\" : parts[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"        switch (action) {","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"            this.shouldContinue \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"            Ui.exit();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"        case \"list\":","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"            Ui.listTasks(this.list);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"                this.list.markAsDone(Integer.parseInt(details));","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"Please enter a valid number...\");","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"sunzihan23"},"content":"        case \"find\":","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"sunzihan23"},"content":"            if (details.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"So what exactly do you want to do?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"sunzihan23"},"content":"            this.list.findTasks(details);","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"sunzihan23"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"sunzihan23"},"content":"            if (details.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"So what exactly do you want to do?\");","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"sunzihan23"},"content":"            this.list.addTask(new ToDo(details));","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"sunzihan23"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"sunzihan23"},"content":"            String[] subParts \u003d details.split(\" /by \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"sunzihan23"},"content":"                LocalDateTime dateTime \u003d formatDateTime(subParts[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"sunzihan23"},"content":"                this.list.addTask(new Deadline(subParts[0], dateTime));","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"sunzihan23"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"Check the date time format again!\");","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"sunzihan23"},"content":"        case \"event\":","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"sunzihan23"},"content":"            String[] taskPart \u003d details.split(\" /from \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"sunzihan23"},"content":"            String[] timePart \u003d taskPart[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"sunzihan23"},"content":"                LocalDateTime from \u003d formatDateTime(timePart[0]);","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"sunzihan23"},"content":"                LocalDateTime to \u003d formatDateTime(timePart[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"sunzihan23"},"content":"                this.list.addTask(new Event(taskPart[0], from, to));","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"sunzihan23"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"Oh no! Check the date time format again!\");","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"sunzihan23"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"sunzihan23"},"content":"                this.list.deleteTask(Integer.parseInt(details));","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"sunzihan23"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"sunzihan23"},"content":"                throw new DukeException(\"Please enter a valid number...\");","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"sunzihan23"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"sunzihan23"},"content":"        default:","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"sunzihan23"},"content":"            throw new DukeException(\"I have no idea what that means...\");","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"sunzihan23"},"content":"     * Parses a string into a LocalDateTime object using a specific format.","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"sunzihan23"},"content":"     * @param input The input string representing a date and time.","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"sunzihan23"},"content":"     * @return A LocalDateTime object parsed from the input.","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"sunzihan23"},"content":"     * @throws DateTimeParseException If the input cannot be parsed into a valid LocalDateTime.","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"sunzihan23"},"content":"    private static LocalDateTime formatDateTime(String input) throws DateTimeParseException {","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"sunzihan23"},"content":"        return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"sunzihan23"},"content":"     * Returns the status of the Parser indicating whether the main application loop should continue in Duke.","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"sunzihan23"},"content":"     * @return True if the main loop should continue, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"sunzihan23"},"content":"    public boolean getStatus() {","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"sunzihan23"},"content":"        return this.shouldContinue;","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"sunzihan23"},"content":" }","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"sunzihan23":113}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.io.EOFException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":" * Storage class handles loading tasks from file and saving tasks in the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"    private String filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"                System.out.println(\"Error while creating file: \" + e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"     * Loads tasks from the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"     * @throws IOException If an I/O error occurs while reading the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"     * @throws ClassNotFoundException If the class of a serialized object cannot be found.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, ClassNotFoundException {","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"        ObjectInputStream in \u003d null;","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sunzihan23"},"content":"            FileInputStream fileIn \u003d new FileInputStream(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"            in \u003d new ObjectInputStream(fileIn);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sunzihan23"},"content":"            // Suppress warning as deserialised object is of ArrayList\u003cduke.Task\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"sunzihan23"},"content":"            @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sunzihan23"},"content":"            ArrayList\u003cTask\u003e list \u003d (ArrayList\u003cTask\u003e) in.readObject();","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sunzihan23"},"content":"            return list;","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sunzihan23"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sunzihan23"},"content":"            return new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sunzihan23"},"content":"        } finally {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sunzihan23"},"content":"            if (in !\u003d null) {","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sunzihan23"},"content":"                in.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"sunzihan23"},"content":"     * Saves tasks to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"sunzihan23"},"content":"     * @param list The ArrayList of Task objects to be saved to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"sunzihan23"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"sunzihan23"},"content":"    public void saveToFile(ArrayList\u003cTask\u003e list) throws IOException{","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sunzihan23"},"content":"        ObjectOutputStream out \u003d null;","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sunzihan23"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sunzihan23"},"content":"            FileOutputStream fileOut \u003d new FileOutputStream(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sunzihan23"},"content":"            out \u003d new ObjectOutputStream(fileOut);","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sunzihan23"},"content":"            out.writeObject(list);","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sunzihan23"},"content":"        } finally {","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sunzihan23"},"content":"            if (out !\u003d null) {","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sunzihan23"},"content":"                out.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sunzihan23":80}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":" * The Task class represents a generic task with a description and completion status.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":" * It serves as the base class for different types of tasks in the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"    private String task;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"    private String icon \u003d \"[ ]\";","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a Task object with the specified task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     * @param task The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"    public Task(String task) {","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"     * Marks the task as done and updates the completion status icon.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"        this.icon \u003d \"[X]\";","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"     * Checks if the task is done.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"     * @return True if the task is marked as done, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"     * @return The task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"    public String getTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"sunzihan23"},"content":"        return this.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"sunzihan23"},"content":"     * Returns a string representation of the Task object.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"sunzihan23"},"content":"     * @return A string containing the completion status icon and the task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"sunzihan23"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"sunzihan23"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"sunzihan23"},"content":"        return this.icon + \" \" + this.task;","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":59}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" * The TaskList class represents a list of tasks in the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":" * It manages tasks, their operations, and interactions with storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"public class TaskList {","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a TaskList object with the specified file path for task storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"    public TaskList(String filePath) {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"        fetchList();","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"     * Fetches the list of tasks from storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"    public void fetchList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"            this.list \u003d this.storage.load();","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"        } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"            System.out.println(\"Error when fetching todo list: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"     * Saves the current list of tasks to storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"    public void saveToFile() {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"            storage.saveToFile(this.list);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"            System.out.println(\"Error while saving to-do list: \" + e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"sunzihan23"},"content":"     * Adds a task to the list and saves the list to storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"sunzihan23"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"sunzihan23"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"sunzihan23"},"content":"        this.list.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"sunzihan23"},"content":"        Ui.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"sunzihan23"},"content":"        Ui.countTasks(this.list);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"sunzihan23"},"content":"        saveToFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"sunzihan23"},"content":"     * Marks a task as done and saves the list to storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"sunzihan23"},"content":"     * @param taskNum The index of the task to be marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"sunzihan23"},"content":"    public void markAsDone(int taskNum) {","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"sunzihan23"},"content":"        Task task \u003d this.list.get(taskNum - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"sunzihan23"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"sunzihan23"},"content":"        Ui.markAsDone(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"sunzihan23"},"content":"        saveToFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"sunzihan23"},"content":"     * Deletes a task from the list and saves the list to storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"sunzihan23"},"content":"     * @param taskNum The index of the task to be deleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"sunzihan23"},"content":"    public void deleteTask(int taskNum) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"sunzihan23"},"content":"        Task task \u003d this.list.get(taskNum - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"sunzihan23"},"content":"        this.list.remove(taskNum - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"sunzihan23"},"content":"        Ui.deleteTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"sunzihan23"},"content":"        Ui.countTasks(this.list);","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"sunzihan23"},"content":"        saveToFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"sunzihan23"},"content":"     * Searches for tasks that match a given input and returns a list of matches.","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"sunzihan23"},"content":"     * @param input The search query to match against task descriptions.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"sunzihan23"},"content":"    public void findTasks(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"sunzihan23"},"content":"        ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"sunzihan23"},"content":"        for (Task task : this.list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"sunzihan23"},"content":"            if (task.getTask().contains(input)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"sunzihan23"},"content":"                matches.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"sunzihan23"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"sunzihan23"},"content":"        Ui.findTasks(matches);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"sunzihan23"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"sunzihan23"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"sunzihan23"},"content":"    public int size() {","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"sunzihan23"},"content":"        return this.list.size();","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"sunzihan23"},"content":"     * Retrieves a task from the list at a specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"sunzihan23"},"content":"     * @param index The index of the task to be retrieved.","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"sunzihan23"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"sunzihan23"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"sunzihan23"},"content":"        return this.list.get(index);","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"sunzihan23":118}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":" * The ToDo class represents a task with no specific deadline or timing.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":" * It extends the Task class and adds functionality for managing to-do tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"     * Constructs a ToDo object with the specified task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"     * @param task The description of the to-do task.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    public ToDo(String task) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"        super(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"     * Returns a string representation of the ToDo object.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"     * @return A string containing task type, completion status and task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":26}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":" * The Ui class handles interactions with the user through the console.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":" * It provides methods for reading user input, greeting the user, and displaying information.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"public class Ui {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"    public static void greet() {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Hello! I\u0027m Bot\");","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"     * Displays an exit message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    public static void exit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"     * Displays a list of tasks to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"     * @param list The TaskList containing the tasks to be listed.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"    public static void listTasks(TaskList list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"            System.out.println(i + 1 + \". \" + list.get(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"sunzihan23"},"content":"     * Displays the details of an added task to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"sunzihan23"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"sunzihan23"},"content":"    public static void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"sunzihan23"},"content":"     * Displays the count of tasks in the list to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"sunzihan23"},"content":"     * @param list The list of tasks to be counted.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"sunzihan23"},"content":"    public static void countTasks(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"sunzihan23"},"content":"     * Displays the details of a marked task to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"sunzihan23"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"sunzihan23"},"content":"    public static void markAsDone(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"sunzihan23"},"content":"     * Displays the details of a deleted task to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"sunzihan23"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"sunzihan23"},"content":"    public static void deleteTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"sunzihan23"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"sunzihan23"},"content":"     * Displays a list of matching tasks to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"sunzihan23"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"sunzihan23"},"content":"     * @param list The list of matching tasks to be displayed.","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"sunzihan23"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"sunzihan23"},"content":"    public static void findTasks(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"sunzihan23"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"sunzihan23"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"sunzihan23"},"content":"            System.out.println(i + 1 + \". \" + list.get(i));","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"sunzihan23"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"sunzihan23":88}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"        Deadline newDeadline \u003d new Deadline(\"submit report\", formatDateTime(\"21/9/2023 1000\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[D][ ] submit report (by: Sep 21 2023 10:00)\", newDeadline.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"        Deadline done \u003d new Deadline(\"finish lab\", formatDateTime(\"11/9/2023 2200\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"        done.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[D][X] finish lab (by: Sep 11 2023 22:00)\", done.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    ","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"    public void testAsMark() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"        Deadline deadline \u003d new Deadline(\"buy lunch\", formatDateTime(\"3/9/2023 1300\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"        assertFalse(deadline.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"        deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"        assertTrue(deadline.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"    private static LocalDateTime formatDateTime(String input) throws DateTimeParseException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"        return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"sunzihan23":35}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"public class EventTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"        Event newEvent \u003d new Event(\"group meeting\", formatDateTime(\"2/9/2023 1000\"), formatDateTime(\"2/9/2023 1130\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[E][ ] group meeting (from: Sep 02 2023 10:00, to: Sep 02 2023 11:30)\", newEvent.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"        Event done \u003d new Event(\"attend tutorial\", formatDateTime(\"1/9/2023 1000\"), formatDateTime(\"1/9/2023 1130\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"        done.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[E][X] attend tutorial (from: Sep 01 2023 10:00, to: Sep 01 2023 11:30)\", done.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    public void testAsMark() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"        Event event \u003d new Event(\"discussion\", formatDateTime(\"10/9/2023 1000\"), formatDateTime(\"10/9/2023 1130\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"sunzihan23"},"content":"        assertFalse(event.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"sunzihan23"},"content":"        event.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"sunzihan23"},"content":"        assertTrue(event.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"sunzihan23"},"content":"    private static LocalDateTime formatDateTime(String input) throws DateTimeParseException {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"sunzihan23"},"content":"        return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"sunzihan23":34}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"public class ToDoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"        ToDo newTodo \u003d new ToDo(\"borrow books\");","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[T][ ] borrow books\", newTodo.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"sunzihan23"},"content":"        ToDo done \u003d new ToDo(\"return books\");","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"sunzihan23"},"content":"        done.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"sunzihan23"},"content":"        assertEquals(\"[T][X] return books\", done.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"sunzihan23"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"sunzihan23"},"content":"    public void testAsMark() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"sunzihan23"},"content":"        ToDo todo \u003d new ToDo(\"buy lunch\");","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"sunzihan23"},"content":"        assertFalse(todo.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"sunzihan23"},"content":"        todo.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"sunzihan23"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"sunzihan23"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"sunzihan23"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"sunzihan23":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sunzihan23"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sunzihan23"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sunzihan23"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sunzihan23"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sunzihan23"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sunzihan23"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"sunzihan23"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sunzihan23"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sunzihan23"},"content":"hi","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sunzihan23"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sunzihan23"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sunzihan23"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sunzihan23":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sunzihan23"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sunzihan23":1,"-":20}}]
