[{"path":"data/TaskData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"E | X | lol | 2020-07-05 | 2024-07-06","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"E |   | lol | 2001-07-07 | 2001-07-07","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"E |   | wowzers | 2001-06-07 | 2001-09-08","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"LoMaply":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"    protected LocalDateTime limit;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"    private Deadline(String title, LocalDateTime limit) {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"        super(title);","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"        this.limit \u003d limit;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"     * Adds a new Deadline task to the list of tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"     * @param title Title of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"     * @param limit Deadline of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"     * @return Task object created.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"    public static Task addDeadline(String title, LocalDateTime limit) {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"        Task deadline \u003d new Deadline(title, limit);","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"        taskList.add(deadline);","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"        return deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"        String time \u003d String.format(\" (by: %s)\", limit.format(displayFormat));","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"        return \"[D]\" + super.toString() + time;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"     * Convert Deadline task to a string for storing in data file.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"LoMaply"},"content":"     * @return Formatted string with data for Deadline task.","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"LoMaply"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"LoMaply"},"content":"        return \"D\" + super.toFileString() + \" | \" + limit.format(dataFormat);","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"LoMaply"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LoMaply":38}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"     * Formats chatbot output with borders, first line indentation and new line character at the end.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"     * @param message Formatted message to be displayed to user.","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    public static void output(String message) {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"        String line \u003d \"    ____________________________________________________________\\n\";","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"        String template \u003d line + \"     %s\\n\" + line;","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"        System.out.printf((template) + \"%n\", message);","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"     * Formats chatbot output specifically for adding/removing tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"     * @param task Task added to list.","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"    public static void taskOutput(Task task, String action) {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"        String taskMessage \u003d \"I\u0027ve %s the following task as requested:\\n       %s\\n     \"","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"                + \"There are currently %d tasks in your list.\";","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"        Duke.output(String.format(taskMessage, action, task.toString(), Task.taskList.size()));","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"     * Parses Date string input for Deadline/Event creation.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"     * @param dateString A string in the form [day.month.year 24hrTime].","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"     * @return LocalDate object.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"LoMaply"},"content":"     * @throws DateTimeParseException To be handled in parseUserInput().","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"LoMaply"},"content":"    private static LocalDateTime parseDate(String dateString) throws DateTimeParseException {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"LoMaply"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy HHmm\");","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"LoMaply"},"content":"        return LocalDateTime.parse(dateString, formatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"LoMaply"},"content":"     * Initialises chatbot by loading data from file, queries user for decision when file cannot be read.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"LoMaply"},"content":"    public static void initialise() {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"LoMaply"},"content":"        if (!Storage.loadData()) {  // Error with loading data file, prompts for user input for next step","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"LoMaply"},"content":"            boolean isUnresolved \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"LoMaply"},"content":"            Scanner userInput \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"LoMaply"},"content":"            while (isUnresolved) {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"LoMaply"},"content":"                String input \u003d userInput.nextLine().toUpperCase();","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"LoMaply"},"content":"                switch (input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"LoMaply"},"content":"                case \"Y\":","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"LoMaply"},"content":"                    parseUserInput();","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"LoMaply"},"content":"                    isUnresolved \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"LoMaply"},"content":"                case \"N\":","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"LoMaply"},"content":"                    isUnresolved \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Exiting program... Restore or delete the data file\");","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"LoMaply"},"content":"                default:","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Please reply with Y/N only\");","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"LoMaply"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"LoMaply"},"content":"            userInput.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"LoMaply"},"content":"        } else {    // No error with reading data","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"LoMaply"},"content":"            parseUserInput();","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"LoMaply"},"content":"     * Parses and acts on user input for chatbot.","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"LoMaply"},"content":"    private static void parseUserInput() {","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"LoMaply"},"content":"        boolean isRun \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":73,"author":{"gitId":"LoMaply"},"content":"        Scanner userInput \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"LoMaply"},"content":"        Duke.output(\"Hey its Jyuuni, your helpful assistant.\\n     How can I help you?\");","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":76,"author":{"gitId":"LoMaply"},"content":"        // Requests user input until program is instructed to end.","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"LoMaply"},"content":"        while (isRun) {","lastModifiedDate":"2023-08-20"},{"lineNumber":78,"author":{"gitId":"LoMaply"},"content":"            String input \u003d userInput.nextLine();","lastModifiedDate":"2023-08-20"},{"lineNumber":79,"author":{"gitId":"LoMaply"},"content":"            String[] splitInput \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"LoMaply"},"content":"            switch (splitInput[0]) {","lastModifiedDate":"2023-08-20"},{"lineNumber":82,"author":{"gitId":"LoMaply"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-20"},{"lineNumber":83,"author":{"gitId":"LoMaply"},"content":"                try {","lastModifiedDate":"2023-08-21"},{"lineNumber":84,"author":{"gitId":"LoMaply"},"content":"                    int index \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"LoMaply"},"content":"                    Task.changeStatusIndex(index, true);","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"LoMaply"},"content":"                } catch (NumberFormatException e) {             // If argument of \"mark\" is not a number.","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"You need to provide a valid number\");","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-20"},{"lineNumber":90,"author":{"gitId":"LoMaply"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-20"},{"lineNumber":91,"author":{"gitId":"LoMaply"},"content":"                try {","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"LoMaply"},"content":"                    int index \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"LoMaply"},"content":"                    Task.changeStatusIndex(index, false);","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"LoMaply"},"content":"                } catch (NumberFormatException e) {             // If argument of \"unmark\" is not a number.","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"You need to provide a valid number\");","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":97,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"LoMaply"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"LoMaply"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"LoMaply"},"content":"                    int index \u003d Integer.parseInt(splitInput[1]) - 1;","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"LoMaply"},"content":"                    Task.deleteTask(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"LoMaply"},"content":"                } catch (NumberFormatException e) {             // If argument of \"delete\" is not a number.","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"You need to provide a valid number:\\n\" + \"       eg. delete 1\");","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-20"},{"lineNumber":106,"author":{"gitId":"LoMaply"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"LoMaply"},"content":"                if (splitInput.length !\u003d 2) {                   // Checks for description before creating task.","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Wrong format, make sure your command is in the format:\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"LoMaply"},"content":"                            + \"       todo [DESCRIPTION]\");","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"LoMaply"},"content":"                } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":111,"author":{"gitId":"LoMaply"},"content":"                    Task todo \u003d Todo.addTodo(splitInput[1]);","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"LoMaply"},"content":"                    Duke.taskOutput(todo, \"added\");","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"LoMaply"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"LoMaply"},"content":"                try {","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"LoMaply"},"content":"                    String[] deadVar \u003d splitInput[1].split(\" /by \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":118,"author":{"gitId":"LoMaply"},"content":"                    Task deadline \u003d Deadline.addDeadline(deadVar[0], Duke.parseDate(deadVar[1]));","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"LoMaply"},"content":"                    Duke.taskOutput(deadline, \"added\");","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"LoMaply"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {    // String not split due to improper format","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Wrong format, make sure your command is in the format:\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"LoMaply"},"content":"                            + \"      deadline [DESCRIPTION] /by [dd.mm.yyyy]\");","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"LoMaply"},"content":"                } catch (DateTimeParseException e) {            // Date not formatted properly","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Try the date format [dd.mm.yyyy tttt]:\"","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"LoMaply"},"content":"                            + \"\\n       eg. [05.08.2020 1500] for 5 Aug 2020, 3PM\");","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":127,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-21"},{"lineNumber":128,"author":{"gitId":"LoMaply"},"content":"            case \"event\":","lastModifiedDate":"2023-08-21"},{"lineNumber":129,"author":{"gitId":"LoMaply"},"content":"                // Using 1 split statement that splits by /(from|to) allows wrong combos like \"/to x /from x\".","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"LoMaply"},"content":"                try {","lastModifiedDate":"2023-08-21"},{"lineNumber":131,"author":{"gitId":"LoMaply"},"content":"                    String[] eventVar \u003d splitInput[1].split(\" /from \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":132,"author":{"gitId":"LoMaply"},"content":"                    String[] times \u003d eventVar[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":133,"author":{"gitId":"LoMaply"},"content":"                    LocalDateTime start \u003d parseDate(times[0]);","lastModifiedDate":"2023-08-27"},{"lineNumber":134,"author":{"gitId":"LoMaply"},"content":"                    LocalDateTime end \u003d parseDate(times[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":135,"author":{"gitId":"LoMaply"},"content":"                    if (start.isAfter(end)) {                   // Checks that event start \u003c\u003d end","lastModifiedDate":"2023-08-27"},{"lineNumber":136,"author":{"gitId":"LoMaply"},"content":"                        Duke.output(\"An event cannot end before it starts... might wanna check your dates\");","lastModifiedDate":"2023-08-27"},{"lineNumber":137,"author":{"gitId":"LoMaply"},"content":"                    } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":138,"author":{"gitId":"LoMaply"},"content":"                        Task event \u003d Event.addEvent(eventVar[0], start, end);","lastModifiedDate":"2023-08-27"},{"lineNumber":139,"author":{"gitId":"LoMaply"},"content":"                        Duke.taskOutput(event, \"added\");","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"LoMaply"},"content":"                    }","lastModifiedDate":"2023-08-27"},{"lineNumber":141,"author":{"gitId":"LoMaply"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {    // String not split due to improper format","lastModifiedDate":"2023-08-27"},{"lineNumber":142,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Wrong format, make sure your command is in the format:\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":143,"author":{"gitId":"LoMaply"},"content":"                            + \"      event [DESCRIPTION] /from [dd.mm.yyyy] /to [dd.mm.yyyy]\");","lastModifiedDate":"2023-08-27"},{"lineNumber":144,"author":{"gitId":"LoMaply"},"content":"                } catch (DateTimeParseException e) {            // Date not formatted properly","lastModifiedDate":"2023-08-27"},{"lineNumber":145,"author":{"gitId":"LoMaply"},"content":"                    Duke.output(\"Try the date format [dd.mm.yyyy tttt]:\"","lastModifiedDate":"2023-08-27"},{"lineNumber":146,"author":{"gitId":"LoMaply"},"content":"                            + \"\\n       eg. [05.08.2020 1500] for 5 Aug 2020, 3PM\");","lastModifiedDate":"2023-08-27"},{"lineNumber":147,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":148,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-21"},{"lineNumber":149,"author":{"gitId":"LoMaply"},"content":"            case \"list\":","lastModifiedDate":"2023-08-20"},{"lineNumber":150,"author":{"gitId":"LoMaply"},"content":"                Duke.output(Task.listToString());","lastModifiedDate":"2023-08-26"},{"lineNumber":151,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-20"},{"lineNumber":152,"author":{"gitId":"LoMaply"},"content":"            case \"end\":","lastModifiedDate":"2023-08-20"},{"lineNumber":153,"author":{"gitId":"LoMaply"},"content":"                isRun \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":154,"author":{"gitId":"LoMaply"},"content":"                Duke.output(\"Come back if you need anything else!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":155,"author":{"gitId":"LoMaply"},"content":"                userInput.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":156,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-20"},{"lineNumber":157,"author":{"gitId":"LoMaply"},"content":"            default:","lastModifiedDate":"2023-08-20"},{"lineNumber":158,"author":{"gitId":"LoMaply"},"content":"                Duke.output(\"Sorry, I don\u0027t recognise this comment :(\");","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"LoMaply"},"content":"                break;","lastModifiedDate":"2023-08-26"},{"lineNumber":160,"author":{"gitId":"LoMaply"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":161,"author":{"gitId":"LoMaply"},"content":"            Storage.writeToFile(Task.taskList);","lastModifiedDate":"2023-08-26"},{"lineNumber":162,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":164,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"LoMaply"},"content":"        Duke.initialise();","lastModifiedDate":"2023-08-27"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":5,"LoMaply":163}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"public class Event extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"    private Event(String title, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"        super(title);","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"     * Adds a new Event task to the list of tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"     * @param title Title of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"     * @param start Start time of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"     * @param end End time of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"     * @return Task object created.","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"    public static Task addEvent(String title, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"        Task event \u003d new Event(title, start, end);","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"        taskList.add(event);","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"        return event;","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"        String from \u003d start.format(displayFormat);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"        String to \u003d end.format(displayFormat);","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"        String time \u003d String.format(\" (from: %s to: %s)\", from, to);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"LoMaply"},"content":"        return \"[E]\" + super.toString() + time;","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"LoMaply"},"content":"     * Convert Event task to a string for storing in data file.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"LoMaply"},"content":"     * @return Formatted string with data for Event task.","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"LoMaply"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"LoMaply"},"content":"        return \"E\" + super.toFileString() + String.format(\" | %s | %s\", start.format(dataFormat), end.format(dataFormat));","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"LoMaply"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LoMaply":43}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"public class Storage {","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"    public static final String FILE_DIRECTORY \u003d \"./data\";","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    public static final String FILE_NAME \u003d \"TaskData.txt\";","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"    public static final String FILE_LOCATION \u003d FILE_DIRECTORY + \"/\" + FILE_NAME;","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"     * Creates directory and txt file for storing task data if they do not exist, else does nothing.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"    private static void openFile() {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"        File directory \u003d new File(FILE_DIRECTORY);","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"        File dataFile \u003d new File(FILE_LOCATION);","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"            directory.mkdir();","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"     * Write data from ArrayList of tasks to a file.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"     * @param taskList An ArrayList of tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"LoMaply"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"LoMaply"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"LoMaply"},"content":"            FileWriter file \u003d new FileWriter(FILE_LOCATION);","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"LoMaply"},"content":"            StringBuilder fileData \u003d new StringBuilder();","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"LoMaply"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"LoMaply"},"content":"                String taskString \u003d task.toFileString() + \"\\n\";","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"LoMaply"},"content":"                fileData.append(taskString);","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"LoMaply"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"LoMaply"},"content":"            file.write(fileData.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"LoMaply"},"content":"            file.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"LoMaply"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"LoMaply"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"LoMaply"},"content":"     * Loads task data from txt file to chatbot.","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"LoMaply"},"content":"    public static boolean loadData() {","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"LoMaply"},"content":"        Storage.openFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"LoMaply"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"LoMaply"},"content":"            File dataFile \u003d new File(FILE_LOCATION);","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"LoMaply"},"content":"            Scanner reader \u003d new Scanner(dataFile);","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"LoMaply"},"content":"            // Add error checking for wrong data format (probably as long as split works shld be fine)","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"LoMaply"},"content":"            // Maybe add command to just delete data file and create new one if can\u0027t read","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"LoMaply"},"content":"            while (reader.hasNextLine()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"LoMaply"},"content":"                String data \u003d reader.nextLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"LoMaply"},"content":"                String[] splitInput \u003d data.split(\" \\\\| \");","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"LoMaply"},"content":"                boolean isDone \u003d splitInput[1].equals(\"X\");","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"LoMaply"},"content":"                // Data is in format [type, isDone, title, from/by, to], from/by/to are only present depending on type.","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"LoMaply"},"content":"                switch(splitInput[0]) {","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"LoMaply"},"content":"                case \"T\":","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"LoMaply"},"content":"                    Todo.addTodo(splitInput[2]).changeStatus(isDone);","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"LoMaply"},"content":"                case \"D\":","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"LoMaply"},"content":"                    Deadline.addDeadline(splitInput[2], LocalDateTime.parse(splitInput[3], Task.dataFormat)).changeStatus(isDone);","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"LoMaply"},"content":"                case \"E\":","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"LoMaply"},"content":"                    Event.addEvent(splitInput[2], LocalDateTime.parse(splitInput[3], Task.dataFormat), LocalDateTime.parse(splitInput[4], Task.dataFormat))","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"LoMaply"},"content":"                         .changeStatus(isDone);","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"LoMaply"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"LoMaply"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"LoMaply"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"LoMaply"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"LoMaply"},"content":"        } catch (ArrayIndexOutOfBoundsException e) { // File formatted with wrong no. of \" | \" dividers for task types.","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"LoMaply"},"content":"            Duke.output(\"There seems to be a problem with reading in data from:\\n      [\" + FILE_LOCATION","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"LoMaply"},"content":"                    + \"]\\n\\n     Proceeding will overwrite the current data file [Y/N]:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"LoMaply"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"LoMaply"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"LoMaply"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"LoMaply"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"LoMaply":87}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"public class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"    protected static final DateTimeFormatter displayFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mm a\");","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"    protected static final DateTimeFormatter dataFormat \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy HHmm\");","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"    protected static final ArrayList\u003cTask\u003e taskList\u003d new ArrayList\u003c\u003e(1);","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"    protected String title;","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"    protected Boolean isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    public Task(String title) {","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"        this.title \u003d title;","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"     * Get completed status of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"     * @return X if task is completed, a blank space otherwise.","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"    public String getStatus() {","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"     * Modify status of current task.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"     * @param isCompleted New status of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"    public void changeStatus(boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"        this.isDone \u003d isCompleted;","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"LoMaply"},"content":"     * Modify status of task based on index.","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"LoMaply"},"content":"     * @param index ArrayList index of task to be modified.","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"LoMaply"},"content":"     * @param isCompleted New status of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"LoMaply"},"content":"    public static void changeStatusIndex(int index, boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"LoMaply"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"LoMaply"},"content":"            Task pendingTask \u003d taskList.get(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"LoMaply"},"content":"            pendingTask.isDone \u003d isCompleted;","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"LoMaply"},"content":"            Duke.output(\"Task updated as requested:\\n       \" + pendingTask);","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"LoMaply"},"content":"        } catch (IndexOutOfBoundsException e) {                // When index falls outside ArrayList.","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"LoMaply"},"content":"            Duke.output(\"I can\u0027t modify a task that doesn\u0027t exist...\\n     Try a number from the list\");","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"LoMaply"},"content":"     * Delete task from taskList.","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"LoMaply"},"content":"     * @param index ArrayList index of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"LoMaply"},"content":"    public static void deleteTask(int index) {","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"LoMaply"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"LoMaply"},"content":"            Task delete \u003d taskList.remove(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"LoMaply"},"content":"            Duke.taskOutput(delete, \"removed\");","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"LoMaply"},"content":"        } catch (IndexOutOfBoundsException e) {                // When index falls outside ArrayList.","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"LoMaply"},"content":"            Duke.output(\"I can\u0027t remove a task that doesn\u0027t exist...\\n     Try a number from the list\");","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"LoMaply"},"content":"     * Converts a task to a formatted string.","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"LoMaply"},"content":"     * @return Status and title of task in string.","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"LoMaply"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":67,"author":{"gitId":"LoMaply"},"content":"        return String.format(\"[%s] %s\", this.getStatus(), title);","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":69,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"LoMaply"},"content":"     * Converts ArrayList of tasks to a string as a numbered list for chatbot output.","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"LoMaply"},"content":"     * @return List of all tasks, formatted as numbered list.","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"LoMaply"},"content":"    public static String listToString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"LoMaply"},"content":"        StringBuilder allTasks \u003d new StringBuilder(\"Here are your tasks:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"LoMaply"},"content":"        int taskNo \u003d taskList.size();","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"LoMaply"},"content":"        for (int i \u003d 0; i \u003c taskNo; i++) {","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"LoMaply"},"content":"            allTasks.append(String.format(\"\\n     %d.%s\", (i + 1), taskList.get(i).toString()));","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"LoMaply"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"LoMaply"},"content":"        return allTasks.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"LoMaply"},"content":"     * Returns a base string to be used for storing in data file.","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"LoMaply"},"content":"     * @return Formatted string, to be further modified by overriding methods in child classes.","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"LoMaply"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"LoMaply"},"content":"        return String.format(\" | %s | %s\", this.getStatus(), title);","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"LoMaply"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"LoMaply":90}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"    private Todo(String title) {","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"        super(title);","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"     * Adds a new To-do task to the list of tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"     * @param title Title of task.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"     * @return Task object created.","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"    public static Task addTodo(String title) {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"        Task todo \u003d new Todo(title);","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"        taskList.add(todo);","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"        return todo;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"     * Convert To-do task to a string for storing in data file.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"LoMaply"},"content":"     * @return Formatted string with data for To-do task.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"LoMaply"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"LoMaply"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"LoMaply"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"LoMaply"},"content":"        return \"T\" + super.toFileString();","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"LoMaply"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"LoMaply"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LoMaply":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LoMaply"},"content":"todo buy 2 groceries","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"LoMaply"},"content":"deadline eat lunch /by 1st june mon","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"LoMaply"},"content":"deadline eat lunch /by 01.06.2024 1500","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"LoMaply"},"content":"event holiday /to july","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"LoMaply"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"LoMaply"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"LoMaply"},"content":"event japan holiday trip /from 08.07.2023 0000 /to 07.07.2023 1930","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"LoMaply"},"content":"event japan holiday trip /from 06.07.2023 0000 /to 07.07.2023 1930","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"LoMaply"},"content":"deadline stuff /by 01 June 25 4am","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"LoMaply"},"content":"hello","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"LoMaply"},"content":"mark 3","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"LoMaply"},"content":"mark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"LoMaply"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"LoMaply"},"content":"unmark three","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"LoMaply"},"content":"todo","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LoMaply"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"LoMaply"},"content":"delete task 1","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"LoMaply"},"content":"delete 2","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"LoMaply"},"content":"delete 3","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"LoMaply"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"LoMaply"},"content":"delete 1","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"LoMaply"},"content":"delete 1","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"LoMaply"},"content":"list","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"LoMaply"},"content":"end","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LoMaply":24}}]
