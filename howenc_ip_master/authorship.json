[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"# duke project template","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"howenc":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"javafx {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"    version \u003d \"11\"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 ]","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"checkstyle {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"    archiveFileName \u003d \"duke.jar\"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"howenc":30,"-":41}},{"path":"src/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"todo CS2103T A-JUnit","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"howenc":1}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"import gui.Main;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" * This launches the application for duke.","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"public class Launcher {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"howenc":11}},{"path":"src/main/java/command/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-19"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import task.ListOfTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":" * This class uses its state to execute commands.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":" * The Commands factory methods should only be used by Parser class.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"public class Commands {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"     * List of both primary and secondary commands.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    public enum CommandEnum { BYE, LIST, TODO, DEADLINE, EVENT, MARK,","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"            UNMARK, DELETE, BY, FROM, TO, FIND, UNDO, UNKNOWN }","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    private final CommandEnum primaryCommand;","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    private String taskDescription;","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    private int index;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    private Commands(CommandEnum command) {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"        this.primaryCommand \u003d command;","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    private Commands(CommandEnum command, String task) {","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"        this.primaryCommand \u003d command;","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"        this.taskDescription \u003d task;","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"    private Commands(CommandEnum command, int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"        this.primaryCommand \u003d command;","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"    private Commands(CommandEnum command, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"        this.primaryCommand \u003d command;","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with only the primary command.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command) {","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"        return new Commands(command);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with both a primary command and task description.","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"     * @param task The task name or description.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command, String task) {","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"        return new Commands(command, task);","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with both a primary command and the index of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"     * @param index The index of the task that the command should act on.","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command, int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"        return new Commands(command, index);","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with both a primary command and the index of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"howenc"},"content":"     * @param dateTime The date and time of a command giving in the format of \u0027dd-MM-yyyy HHmm\u0027.","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"howenc"},"content":"        return new Commands(command, dateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with both a primary command and the index of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"howenc"},"content":"     * @param task The task name or description.","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"howenc"},"content":"     * @param secondaryCommand A sub-command that supplements the main command.","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command, String task, Commands secondaryCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"howenc"},"content":"        return new Commands.TwoCommands(command, task, secondaryCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"howenc"},"content":"     * Constructs a Commands object with both a primary command and the index of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"howenc"},"content":"     * @param command The command or action given by the Parse object.","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"howenc"},"content":"     * @param task The task name or description.","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"howenc"},"content":"     * @param secondaryCommand A sub-command that supplements the main command.","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"howenc"},"content":"     * @param tertiaryCommand A sub-command that supplements the main command and comes after the secondaryCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"howenc"},"content":"    public static Commands of(CommandEnum command, String task, Commands secondaryCommand, Commands tertiaryCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"howenc"},"content":"        return new Commands.ThreeCommands(command, task, secondaryCommand, tertiaryCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"howenc"},"content":"     * Checks if this object\u0027s COMMANDS is the same as command.","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"howenc"},"content":"     * @param command The COMMANDS enum that you want to compare","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"howenc"},"content":"     * @return Returns true same, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"howenc"},"content":"    public boolean checkCommand(CommandEnum command) {","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"howenc"},"content":"        return this.primaryCommand \u003d\u003d command;","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"howenc"},"content":"     * Executes the action or throws a DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"howenc"},"content":"     * @param taskList The list of tasks that the action will be executed in.","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"howenc"},"content":"     * @return Returns a string representing the task done, or an error or null.","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"howenc"},"content":"     * @throws DukeException The exception thrown when encountering any problems in executing.","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"howenc"},"content":"    public String execute(ListOfTask taskList) throws DukeException {","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"howenc"},"content":"        return execute(taskList, true);","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"howenc"},"content":"     * Executes the action or throws a DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"howenc"},"content":"     * @param taskList The list of tasks that the action will be executed in.","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"howenc"},"content":"     * @return Returns a string representing the task done, or an error or null.","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"howenc"},"content":"     * @throws DukeException The exception thrown when encountering any problems in executing.","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"howenc"},"content":"    public String execute(ListOfTask taskList, boolean print) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"howenc"},"content":"        String response;","lastModifiedDate":"2023-09-19"},{"lineNumber":137,"author":{"gitId":"howenc"},"content":"        switch (this.primaryCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":138,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"howenc"},"content":"        case BYE:","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"howenc"},"content":"            response \u003d Ui.exit();","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"howenc"},"content":"        case LIST:","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.listTasks();","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"howenc"},"content":"        case FIND:","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.find(this.taskDescription);","lastModifiedDate":"2023-09-13"},{"lineNumber":149,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"howenc"},"content":"        case TODO:","lastModifiedDate":"2023-09-13"},{"lineNumber":152,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.addToDo(this.taskDescription, print);","lastModifiedDate":"2023-09-13"},{"lineNumber":153,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"howenc"},"content":"        case MARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.markOrUnmark(this.index, true, print);","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"howenc"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.markOrUnmark(this.index, false, print);","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"howenc"},"content":"        case DELETE:","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.delete(this.index);","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":166,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":167,"author":{"gitId":"howenc"},"content":"        case UNDO:","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"howenc"},"content":"            response \u003d taskList.getPreviousCommand().undo(taskList);","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"howenc"},"content":"            break;","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":171,"author":{"gitId":"howenc"},"content":"        default:","lastModifiedDate":"2023-09-06"},{"lineNumber":172,"author":{"gitId":"howenc"},"content":"            // No tasks to do which is impossible as the Commands that are not here will not get through Parser.","lastModifiedDate":"2023-09-13"},{"lineNumber":173,"author":{"gitId":"howenc"},"content":"            return null;","lastModifiedDate":"2023-09-08"},{"lineNumber":174,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":176,"author":{"gitId":"howenc"},"content":"        // Adding the user\u0027s command input into the previous command stack","lastModifiedDate":"2023-09-13"},{"lineNumber":177,"author":{"gitId":"howenc"},"content":"        if (print) {","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"howenc"},"content":"            switch (primaryCommand) {","lastModifiedDate":"2023-09-13"},{"lineNumber":179,"author":{"gitId":"howenc"},"content":"            case TODO: case MARK: case UNMARK: case DELETE:","lastModifiedDate":"2023-09-15"},{"lineNumber":180,"author":{"gitId":"howenc"},"content":"                taskList.addCommand(this);","lastModifiedDate":"2023-09-13"},{"lineNumber":181,"author":{"gitId":"howenc"},"content":"                break;","lastModifiedDate":"2023-09-13"},{"lineNumber":182,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"howenc"},"content":"            default:","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":188,"author":{"gitId":"howenc"},"content":"        return response;","lastModifiedDate":"2023-09-13"},{"lineNumber":189,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":190,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":191,"author":{"gitId":"howenc"},"content":"    private String undo(ListOfTask taskList) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":192,"author":{"gitId":"howenc"},"content":"        switch (this.primaryCommand) {","lastModifiedDate":"2023-09-13"},{"lineNumber":193,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":194,"author":{"gitId":"howenc"},"content":"        case TODO: case DEADLINE: case EVENT:","lastModifiedDate":"2023-09-13"},{"lineNumber":195,"author":{"gitId":"howenc"},"content":"            int index \u003d taskList.size();","lastModifiedDate":"2023-09-13"},{"lineNumber":196,"author":{"gitId":"howenc"},"content":"            return taskList.delete(index);","lastModifiedDate":"2023-09-13"},{"lineNumber":197,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":198,"author":{"gitId":"howenc"},"content":"        case MARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":199,"author":{"gitId":"howenc"},"content":"            return taskList.markOrUnmark(this.index, false, true);","lastModifiedDate":"2023-09-13"},{"lineNumber":200,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":201,"author":{"gitId":"howenc"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":202,"author":{"gitId":"howenc"},"content":"            return taskList.markOrUnmark(this.index, true, true);","lastModifiedDate":"2023-09-13"},{"lineNumber":203,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":204,"author":{"gitId":"howenc"},"content":"        case DELETE:","lastModifiedDate":"2023-09-13"},{"lineNumber":205,"author":{"gitId":"howenc"},"content":"            return taskList.undoDeleteTask(this.index);","lastModifiedDate":"2023-09-13"},{"lineNumber":206,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":207,"author":{"gitId":"howenc"},"content":"        default:","lastModifiedDate":"2023-09-13"},{"lineNumber":208,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":209,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":210,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":211,"author":{"gitId":"howenc"},"content":"        return null;","lastModifiedDate":"2023-09-13"},{"lineNumber":212,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":213,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":215,"author":{"gitId":"howenc"},"content":"     * Compares LocalDateTime between this object and c.","lastModifiedDate":"2023-08-31"},{"lineNumber":216,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":217,"author":{"gitId":"howenc"},"content":"     * @param c Commands object to be compared to.","lastModifiedDate":"2023-08-31"},{"lineNumber":218,"author":{"gitId":"howenc"},"content":"     * @return Returns true if this object\u0027s time is before c\u0027s time, false for all other cases.","lastModifiedDate":"2023-08-31"},{"lineNumber":219,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"howenc"},"content":"    public boolean compareTime(Commands c) {","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":222,"author":{"gitId":"howenc"},"content":"            return this.dateTime.isBefore(c.dateTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":223,"author":{"gitId":"howenc"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":224,"author":{"gitId":"howenc"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":225,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":226,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"howenc"},"content":"    private static class TwoCommands extends Commands {","lastModifiedDate":"2023-08-31"},{"lineNumber":230,"author":{"gitId":"howenc"},"content":"        private final Commands secondaryCommand;","lastModifiedDate":"2023-09-19"},{"lineNumber":231,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":232,"author":{"gitId":"howenc"},"content":"        private TwoCommands(CommandEnum command, String str, Commands secondaryCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":233,"author":{"gitId":"howenc"},"content":"            super(command, str);","lastModifiedDate":"2023-08-29"},{"lineNumber":234,"author":{"gitId":"howenc"},"content":"            this.secondaryCommand \u003d secondaryCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":235,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":236,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"howenc"},"content":"        /**","lastModifiedDate":"2023-08-31"},{"lineNumber":238,"author":{"gitId":"howenc"},"content":"         * @inheritDoc","lastModifiedDate":"2023-08-31"},{"lineNumber":239,"author":{"gitId":"howenc"},"content":"         */","lastModifiedDate":"2023-08-31"},{"lineNumber":240,"author":{"gitId":"howenc"},"content":"        @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":241,"author":{"gitId":"howenc"},"content":"        public String execute(ListOfTask taskList, boolean print) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":242,"author":{"gitId":"howenc"},"content":"            String response;","lastModifiedDate":"2023-09-19"},{"lineNumber":243,"author":{"gitId":"howenc"},"content":"            if (Objects.requireNonNull(super.primaryCommand) \u003d\u003d CommandEnum.DEADLINE) {","lastModifiedDate":"2023-09-19"},{"lineNumber":244,"author":{"gitId":"howenc"},"content":"                response \u003d taskList.addDeadline(super.taskDescription, this.secondaryCommand.dateTime, print);","lastModifiedDate":"2023-09-13"},{"lineNumber":245,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":246,"author":{"gitId":"howenc"},"content":"                return null;","lastModifiedDate":"2023-09-08"},{"lineNumber":247,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":248,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":249,"author":{"gitId":"howenc"},"content":"            // Adding the user\u0027s command input into the previous command stack","lastModifiedDate":"2023-09-15"},{"lineNumber":250,"author":{"gitId":"howenc"},"content":"            if (print) {","lastModifiedDate":"2023-09-15"},{"lineNumber":251,"author":{"gitId":"howenc"},"content":"                taskList.addCommand(this);","lastModifiedDate":"2023-09-15"},{"lineNumber":252,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":253,"author":{"gitId":"howenc"},"content":"            return response;","lastModifiedDate":"2023-09-13"},{"lineNumber":254,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":255,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":256,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":257,"author":{"gitId":"howenc"},"content":"    private static class ThreeCommands extends Commands {","lastModifiedDate":"2023-08-31"},{"lineNumber":258,"author":{"gitId":"howenc"},"content":"        private final Commands phaseTwo;","lastModifiedDate":"2023-09-19"},{"lineNumber":259,"author":{"gitId":"howenc"},"content":"        private final Commands phaseThree;","lastModifiedDate":"2023-09-19"},{"lineNumber":260,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":261,"author":{"gitId":"howenc"},"content":"        private ThreeCommands(CommandEnum command, String str, Commands phaseTwo, Commands phaseThree) {","lastModifiedDate":"2023-09-06"},{"lineNumber":262,"author":{"gitId":"howenc"},"content":"            super(command, str);","lastModifiedDate":"2023-08-29"},{"lineNumber":263,"author":{"gitId":"howenc"},"content":"            this.phaseTwo \u003d phaseTwo;","lastModifiedDate":"2023-08-29"},{"lineNumber":264,"author":{"gitId":"howenc"},"content":"            this.phaseThree \u003d phaseThree;","lastModifiedDate":"2023-08-29"},{"lineNumber":265,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":266,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":267,"author":{"gitId":"howenc"},"content":"        /**","lastModifiedDate":"2023-08-31"},{"lineNumber":268,"author":{"gitId":"howenc"},"content":"         * @inheritDoc","lastModifiedDate":"2023-08-31"},{"lineNumber":269,"author":{"gitId":"howenc"},"content":"         */","lastModifiedDate":"2023-08-31"},{"lineNumber":270,"author":{"gitId":"howenc"},"content":"        @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":271,"author":{"gitId":"howenc"},"content":"        public String execute(ListOfTask taskList, boolean print) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":272,"author":{"gitId":"howenc"},"content":"            String response;","lastModifiedDate":"2023-09-19"},{"lineNumber":273,"author":{"gitId":"howenc"},"content":"            if (Objects.requireNonNull(super.primaryCommand) \u003d\u003d CommandEnum.EVENT) {","lastModifiedDate":"2023-09-19"},{"lineNumber":274,"author":{"gitId":"howenc"},"content":"                response \u003d taskList.addEvent(super.taskDescription, this.phaseTwo.dateTime,","lastModifiedDate":"2023-09-13"},{"lineNumber":275,"author":{"gitId":"howenc"},"content":"                        this.phaseThree.dateTime, print);","lastModifiedDate":"2023-09-13"},{"lineNumber":276,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-09-19"},{"lineNumber":277,"author":{"gitId":"howenc"},"content":"                return null;","lastModifiedDate":"2023-09-08"},{"lineNumber":278,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":279,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":280,"author":{"gitId":"howenc"},"content":"            // Adding the user\u0027s command input into the previous command stack","lastModifiedDate":"2023-09-15"},{"lineNumber":281,"author":{"gitId":"howenc"},"content":"            if (print) {","lastModifiedDate":"2023-09-15"},{"lineNumber":282,"author":{"gitId":"howenc"},"content":"                taskList.addCommand(this);","lastModifiedDate":"2023-09-15"},{"lineNumber":283,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":284,"author":{"gitId":"howenc"},"content":"            return response;","lastModifiedDate":"2023-09-13"},{"lineNumber":285,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":286,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":287,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"howenc":287}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import command.Commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import parser.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import task.ListOfTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":" * This is the file that outlines the logic in the chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"public class Duke {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"     * This is the format for all date and time input.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"    public static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    private static final ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"     * This starts the Duke chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"     * @param args Does nothing","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"        greet();","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"     * Greets the user and loads the duke from the save file.","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"     * @return Returns the greeting as well as the list of errors while loading, if any.","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"    public static String greet() {","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"        String str \u003d Storage.load(taskList);","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"        return Ui.greet() + str;","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"     * Takes the user input as the command and executes it.","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"     * @param command The user input string.","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"     * @return The string show the completion of a command or an error to show the command has an error.","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"    public static String nextCommand(String command) {","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"            Parser cmd \u003d new Parser(command);","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"            Commands action \u003d cmd.parse();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"            String dukeResponse \u003d action.execute(taskList);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"            assert(dukeResponse !\u003d null);","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"            return dukeResponse;","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"howenc":58,"-":1}},{"path":"src/main/java/dukeexceptions/DukeDateTimeParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class if for all the LocalDateTime parse errors","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeDateTimeParseException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeDateTimeParseException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/dukeexceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is just for all the general errors.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":11}},{"path":"src/main/java/dukeexceptions/DukeFromEarlierThanToException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for when the \u0027from\u0027 time is after the \u0027to\u0027 time for Event tasks.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeFromEarlierThanToException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeFromEarlierThanToException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/dukeexceptions/DukeLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for when duke met a corrupted file while loading.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeLoadException extends DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    private int lineNumber;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"    private String loadCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"     * Constructs a DukeLoadException object.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"     * @param message The string to print out as the message for the error.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"     * @param lineNumber The line number of the erroneous string that was loaded from the save file.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"     * @param loadCommand The erroneous string that was loaded from the save file.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"    public DukeLoadException(String message, int lineNumber, String loadCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"        this.lineNumber \u003d lineNumber;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"        this.loadCommand \u003d loadCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"     * Returns a custom message to state the lineNumber, error message and the corrupted line.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"     * @return Returns a string that states the lineNumber, error message and the corrupted line.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    public String getMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"        return this.lineNumber + \": \" + super.getMessage() + \" ---- \" + this.loadCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":30}},{"path":"src/main/java/dukeexceptions/DukeNullPointerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for when a NullPointerException happens.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeNullPointerException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeNullPointerException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/dukeexceptions/DukeNumberFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for the NumberFormatException errors.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeNumberFormatException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeNumberFormatException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/dukeexceptions/DukeSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for when an IOException happens when saving data.","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeSaveException extends DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeSaveException(String message) {","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/dukeexceptions/DukeUnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package dukeexceptions;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This Exception class is for when the parser is not able to parse the string.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class DukeUnknownCommandException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"    public DukeUnknownCommandException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":10}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"    private void flip() {","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"        db.flip();","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"        return db;","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":61}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"            stage.show();","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":32}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/profile-picture-default.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    private Image luxionImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Luxion.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"     * Initialize the GUI with the greeting by duke.","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.greet(), luxionImage));","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"     * Loads the controller of the main window to be this instance of duke.","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"     * @param d The instance of duke that will be set as the main window for the application.","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"        String response \u003d duke.nextCommand(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"                DialogBox.getDukeDialog(response, luxionImage)","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":63}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import static command.Commands.CommandEnum.BY;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import static command.Commands.CommandEnum.FROM;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import static command.Commands.CommandEnum.TO;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import command.Commands;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeDateTimeParseException;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeFromEarlierThanToException;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeNullPointerException;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeNumberFormatException;","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeUnknownCommandException;","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":" * This class takes in the user input and parses returns a Commands object.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"public class Parser {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    private final String command;","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    private String[] initialParse;","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    private String[] phaseParse;","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"     * Construct the Parser object.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"     * @param command The string that needs to be parsed.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"    public Parser(String command) {","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"     * Parses the string into actionable commands.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"     * @return Returns a Command object.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"     * @throws DukeException If the input is not a command","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"    public Commands parse() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"        Commands.CommandEnum mainCmd \u003d this.mainCommand();","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"        switch (mainCmd) {","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"        case BYE: case LIST: case UNDO:","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"            return Commands.of(mainCmd);","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"        case TODO: case FIND:","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"            if (this.secondString() \u003d\u003d null) {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"                throw new DukeException(\"Please add the task name\");","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"                return Commands.of(mainCmd, this.secondString());","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"        case BY: case FROM: case TO:","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"                String restOfCommand \u003d this.secondString().trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(restOfCommand, Duke.FORMAT);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"                return Commands.of(mainCmd, dateTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"            } catch (DateTimeParseException | NullPointerException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"                throw new DukeDateTimeParseException(\"The format for dates\u0026time is \u0027dd-MM-yyyy hhmm\u0027\");","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"        case MARK: case UNMARK: case DELETE:","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"                int index \u003d Integer.parseInt(this.secondString());","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"                return Commands.of(mainCmd, index);","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"            } catch (NumberFormatException | NullPointerException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"                throw new DukeNumberFormatException(\"Place a number after the command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"                String task \u003d this.commandPhaseParse();","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"howenc"},"content":"                String command2 \u003d this.phaseTwo();","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"howenc"},"content":"                if (task \u003d\u003d null) {","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"howenc"},"content":"                    // No task name","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"howenc"},"content":"                    throw new DukeException(\"Please add the task name\");","lastModifiedDate":"2023-09-15"},{"lineNumber":82,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-09-15"},{"lineNumber":83,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":84,"author":{"gitId":"howenc"},"content":"                Parser phaseTwo \u003d new Parser(command2);","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"howenc"},"content":"                Commands c \u003d phaseTwo.parse();","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"howenc"},"content":"                if (c.checkCommand(BY)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"howenc"},"content":"                    return Commands.of(mainCmd, task, c);","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"howenc"},"content":"                } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"howenc"},"content":"                    // Wrong format","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"howenc"},"content":"                    throw new NullPointerException();","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"howenc"},"content":"            } catch (DukeUnknownCommandException | NullPointerException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"howenc"},"content":"                // Wrong format","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"howenc"},"content":"                throw new DukeNullPointerException(\"The format for the command is: \"","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"howenc"},"content":"                        + \"deadline task /by date\u0026time\");","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"howenc"},"content":"        case EVENT:","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"howenc"},"content":"                String task \u003d this.commandPhaseParse();","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"howenc"},"content":"                String secondaryCommand \u003d this.phaseTwo();","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"howenc"},"content":"                String tertiaryCommand \u003d this.phaseThree();","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"howenc"},"content":"                if (task \u003d\u003d null) {","lastModifiedDate":"2023-09-15"},{"lineNumber":106,"author":{"gitId":"howenc"},"content":"                    throw new DukeException(\"Please add the task name\");","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"howenc"},"content":"                Parser phaseTwo \u003d new Parser(secondaryCommand);","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"howenc"},"content":"                Commands secCmd \u003d phaseTwo.parse();","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"howenc"},"content":"                Parser phaseThree \u003d new Parser(tertiaryCommand);","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"howenc"},"content":"                Commands terCmd \u003d phaseThree.parse();","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":114,"author":{"gitId":"howenc"},"content":"                if (!secCmd.compareTime(terCmd)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"howenc"},"content":"                    throw new DukeFromEarlierThanToException(\"From must be earlier than To\");","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"howenc"},"content":"                if (secCmd.checkCommand(FROM) \u0026\u0026 terCmd.checkCommand(TO)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"howenc"},"content":"                    return Commands.of(mainCmd, task, secCmd, terCmd);","lastModifiedDate":"2023-09-13"},{"lineNumber":120,"author":{"gitId":"howenc"},"content":"                } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"howenc"},"content":"                    // Wrong format","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"howenc"},"content":"                    throw new NullPointerException();","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":125,"author":{"gitId":"howenc"},"content":"            } catch (DukeUnknownCommandException | NullPointerException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"howenc"},"content":"                // Wrong format","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"howenc"},"content":"                throw new DukeNullPointerException(\"The format for the command is: \"","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"howenc"},"content":"                        + \"event task /from startDayDateTime /to endDayDateTime\");","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"howenc"},"content":"        default:","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"howenc"},"content":"            // Default would be unknown command, but that is an exception, thus it will be thrown.","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"howenc"},"content":"        throw new DukeUnknownCommandException(\"Unknown command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"howenc"},"content":"    private Commands.CommandEnum mainCommand() {","lastModifiedDate":"2023-09-06"},{"lineNumber":137,"author":{"gitId":"howenc"},"content":"        this.initialParse \u003d command.split(\" \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"howenc"},"content":"        switch (initialParse[0]) {","lastModifiedDate":"2023-08-28"},{"lineNumber":139,"author":{"gitId":"howenc"},"content":"        case (\"bye\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.BYE;","lastModifiedDate":"2023-09-06"},{"lineNumber":141,"author":{"gitId":"howenc"},"content":"        case (\"list\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.LIST;","lastModifiedDate":"2023-09-06"},{"lineNumber":143,"author":{"gitId":"howenc"},"content":"        case (\"undo\"):","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.UNDO;","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"howenc"},"content":"        case (\"todo\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":146,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.TODO;","lastModifiedDate":"2023-09-06"},{"lineNumber":147,"author":{"gitId":"howenc"},"content":"        case (\"deadline\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.DEADLINE;","lastModifiedDate":"2023-09-06"},{"lineNumber":149,"author":{"gitId":"howenc"},"content":"        case (\"event\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.EVENT;","lastModifiedDate":"2023-09-06"},{"lineNumber":151,"author":{"gitId":"howenc"},"content":"        case (\"mark\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":152,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.MARK;","lastModifiedDate":"2023-09-06"},{"lineNumber":153,"author":{"gitId":"howenc"},"content":"        case (\"unmark\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":154,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.UNMARK;","lastModifiedDate":"2023-09-06"},{"lineNumber":155,"author":{"gitId":"howenc"},"content":"        case (\"delete\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":156,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.DELETE;","lastModifiedDate":"2023-09-06"},{"lineNumber":157,"author":{"gitId":"howenc"},"content":"        case (\"by\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":158,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.BY;","lastModifiedDate":"2023-09-06"},{"lineNumber":159,"author":{"gitId":"howenc"},"content":"        case (\"from\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":160,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.FROM;","lastModifiedDate":"2023-09-06"},{"lineNumber":161,"author":{"gitId":"howenc"},"content":"        case (\"to\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":162,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.TO;","lastModifiedDate":"2023-09-06"},{"lineNumber":163,"author":{"gitId":"howenc"},"content":"        case (\"find\"):","lastModifiedDate":"2023-08-28"},{"lineNumber":164,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.FIND;","lastModifiedDate":"2023-09-06"},{"lineNumber":165,"author":{"gitId":"howenc"},"content":"        default:","lastModifiedDate":"2023-08-28"},{"lineNumber":166,"author":{"gitId":"howenc"},"content":"            return Commands.CommandEnum.UNKNOWN;","lastModifiedDate":"2023-09-06"},{"lineNumber":167,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":168,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":169,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":170,"author":{"gitId":"howenc"},"content":"    private String secondString() {","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":172,"author":{"gitId":"howenc"},"content":"            if (this.initialParse[1].equals(\"\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":173,"author":{"gitId":"howenc"},"content":"                return null;","lastModifiedDate":"2023-08-28"},{"lineNumber":174,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":175,"author":{"gitId":"howenc"},"content":"                return this.initialParse[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":176,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":177,"author":{"gitId":"howenc"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":178,"author":{"gitId":"howenc"},"content":"            return null;","lastModifiedDate":"2023-08-28"},{"lineNumber":179,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":180,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":181,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":182,"author":{"gitId":"howenc"},"content":"    private String commandPhaseParse() {","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":184,"author":{"gitId":"howenc"},"content":"            this.phaseParse \u003d this.initialParse[1].split(\"/\");","lastModifiedDate":"2023-08-28"},{"lineNumber":185,"author":{"gitId":"howenc"},"content":"            return phaseParse[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":186,"author":{"gitId":"howenc"},"content":"        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":187,"author":{"gitId":"howenc"},"content":"            return null;","lastModifiedDate":"2023-08-28"},{"lineNumber":188,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":189,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":190,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":191,"author":{"gitId":"howenc"},"content":"    private String phaseTwo() {","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":193,"author":{"gitId":"howenc"},"content":"            return this.phaseParse[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":194,"author":{"gitId":"howenc"},"content":"        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":195,"author":{"gitId":"howenc"},"content":"            return null;","lastModifiedDate":"2023-08-28"},{"lineNumber":196,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":197,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":198,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":199,"author":{"gitId":"howenc"},"content":"    private String phaseThree() {","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":201,"author":{"gitId":"howenc"},"content":"            return this.phaseParse[2];","lastModifiedDate":"2023-08-28"},{"lineNumber":202,"author":{"gitId":"howenc"},"content":"        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":203,"author":{"gitId":"howenc"},"content":"            return null;","lastModifiedDate":"2023-08-28"},{"lineNumber":204,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":205,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":206,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"howenc":206}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.io.File;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import command.Commands;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeSaveException;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"import task.ListOfTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"import task.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":" * This class handles all the reads and writes of the program.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":" * It will save the list and load the list.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"public class Storage {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"     * Saves the list to a specific file.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     * @param listOfTask The task list to save.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    public static void save(ArrayList\u003cTask\u003e listOfTask) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"        File writeData \u003d new File(\"./src/data/duke.txt\");","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"            writeData.createNewFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"            FileWriter writer \u003d new FileWriter(writeData);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"            // Created a boolean to watch the consumer","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"            boolean[] isThereException \u003d new boolean[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"            isThereException[0] \u003d false;","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"            listOfTask.forEach(x-\u003e {","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"                try {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"                    writer.write(x.write());","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"                    if (x.getIsDone()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"                        writer.write(\"mark \" + (listOfTask.indexOf(x) + 1) + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"                    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"                    // If the consumer has an error it becomes true","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"                    isThereException[0] \u003d true;","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"            });","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"            if (isThereException[0]) {","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"                throw new DukeSaveException(\"Nothing was saved as you do not have write access\");","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"            writer.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"            throw new DukeSaveException(\"You do not have access to save your file\");","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"     * Loads the task list from a specific line in the save file onwards.","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"     * @param taskList The task list that tasks are loaded into.","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"     * @return Returns a string of null or errors that occur in the loading of the file.","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"    public static String load(ListOfTask taskList) {","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"        return load(taskList, 1, \"\");","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"     * Loads the task list from a specific line in the save file onwards.","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"     * @param taskList The task list that tasks are loaded into.","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"     * @param startLine The line number to start loading from.","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"     * @param errorCarryForward The string with the accumulated errors of the load.","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"     * @return Returns a string of null or errors that occur in the loading of the file.","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"    private static String load(ListOfTask taskList, int startLine, String errorCarryForward) {","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"howenc"},"content":"        assert(startLine \u003e 0);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"howenc"},"content":"        assert(errorCarryForward !\u003d null);","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"howenc"},"content":"        File saveData \u003d new File(\"./src/data/duke.txt\");","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"howenc"},"content":"        String error \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"howenc"},"content":"            saveData.createNewFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"howenc"},"content":"            Scanner readData \u003d new Scanner(saveData);","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"howenc"},"content":"            // Continue from startLine","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"howenc"},"content":"            for (int i \u003d 0; i \u003c startLine - 1; i++) {","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"howenc"},"content":"                if (readData.hasNextLine()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"howenc"},"content":"                    readData.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"howenc"},"content":"            // Begin loading","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"howenc"},"content":"            while (readData.hasNextLine()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"howenc"},"content":"                String command \u003d readData.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"howenc"},"content":"                error \u003d command;","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"howenc"},"content":"                // If next line is empty, it is the end of file","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"howenc"},"content":"                if (command.equals(\"\\n\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":100,"author":{"gitId":"howenc"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"howenc"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"howenc"},"content":"                // Loads each line in the save file into the taskList","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"howenc"},"content":"                Parser cmd \u003d new Parser(command);","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"howenc"},"content":"                Commands action \u003d cmd.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"howenc"},"content":"                action.execute(taskList, false);","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"howenc"},"content":"                startLine++;","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":110,"author":{"gitId":"howenc"},"content":"            readData.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"howenc"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"howenc"},"content":"            startLine++;","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"howenc"},"content":"            // Carries the error to be shown at the end of the load","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"howenc"},"content":"            return load(taskList, startLine, errorCarryForward","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"howenc"},"content":"                    + \"line \" + startLine + \" corrupted: \" + error + \"\\n\");","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"howenc"},"content":"        } catch (IOException f) {","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"howenc"},"content":"            return \"You do not have access to create a save file\";","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"howenc"},"content":"        return errorCarryForward;","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"howenc":124}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":" * This class represents the task type Deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"class Deadline extends Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"    private final LocalDateTime dayDate;","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"     * Creates a Deadline object.","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"     * @param taskDescription The name of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"     * @param dayDate The date and time of the deadline of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    Deadline(String taskDescription, LocalDateTime dayDate) {","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"        super(taskDescription);","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"        this.dayDate \u003d dayDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + this.dayDate.format(Duke.FORMAT) + \")\";","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"    public String write() {","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"        return \"deadline \" + super.getTaskDescription() + \"/by \" + this.dayDate.format(Duke.FORMAT) + \"\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"howenc":39}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":" * This class represents the task type Event.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"class Event extends Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"    private final LocalDateTime startDayDateTime;","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"    private final LocalDateTime endDayDateTime;","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"     * Creates an Event object.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"     * @param taskDescription The name of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"     * @param startDayDateTime The date and time of the start of the event.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"     * @param endDayDateTime The date and time of the end of the event.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    Event(String taskDescription, LocalDateTime startDayDateTime, LocalDateTime endDayDateTime) {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"        super(taskDescription);","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"        this.endDayDateTime \u003d endDayDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"        this.startDayDateTime \u003d startDayDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"        return \"[E]\" + super.toString() + \"(from: \" + startDayDateTime.format(Duke.FORMAT)","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"                + \" to: \" + endDayDateTime.format(Duke.FORMAT) + \")\";","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"    public String write() {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"        return \"event \" + super.getTaskDescription() + \"/from \" + this.startDayDateTime.format(Duke.FORMAT)","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"                + \" /to \" + this.endDayDateTime.format(Duke.FORMAT) + \"\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"howenc":45}},{"path":"src/main/java/task/ListOfTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import java.util.EmptyStackException;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import java.util.Stack;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import command.Commands;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeSaveException;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":" * This class holds and controls all interactions with tasks and holds a list of them.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"public class ListOfTask {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    private final ArrayList\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"    private final Stack\u003cCommands\u003e logOfCommands \u003d new Stack\u003c\u003e();","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    private final Stack\u003cTask\u003e listOfDeletedTask \u003d new Stack\u003c\u003e();","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"     * The size of the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"     * @return Returns the size of the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    public int size() {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"        return listOfTask.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    private String addTask(Task task, boolean print) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"        assert(task !\u003d null);","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"        listOfTask.add(task);","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"        if (print) {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"            Storage.save(listOfTask);","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"            return \"added: \" + task;","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"        return null;","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"     * Undo the previous delete command.","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"     * @param index The index of the task that is to be added back.","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"     * @return Returns a string showing that the task has been added back.","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"     * @throws DukeSaveException If Duke is unable to save the task list.","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"    public String undoDeleteTask(int index) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"        Task task \u003d listOfDeletedTask.pop();","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"        listOfTask.add(index - 1, task);","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"        Storage.save(listOfTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"        return \"added at index \" + index + \": \" + task;","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"     * Adds the ToDo task into the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"     * @param task The task that is to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"     * @param print True to print messages, false to not print messages.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"     * @return Returns a message string if print is true and null if false.","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"     * @throws DukeSaveException If Duke is unable to save the task and updated the list.","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"    public String addToDo(String task, boolean print) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"        return addTask(new ToDo(task), print);","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"     * Adds the Deadline task into the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"     * @param task The task that is to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"     * @param dayDate The deadline of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"     * @param print True to print messages, false to not print messages.","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"     * @return Returns a message string if print is true and null if false.","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"     * @throws DukeSaveException If Duke is unable to save the task and updated the list.","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"    public String addDeadline(String task, LocalDateTime dayDate, boolean print) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"howenc"},"content":"        return addTask(new Deadline(task, dayDate), print);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"howenc"},"content":"     * Adds the Event task into the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"howenc"},"content":"     * @param task The task that is to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"howenc"},"content":"     * @param startDayDateTime The date and time of the start of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"howenc"},"content":"     * @param endDayDateTime The date and time of the end of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"howenc"},"content":"     * @param print True to print messages, false to not print message","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"howenc"},"content":"     * @return Returns a message string if print is true and null if false.","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"howenc"},"content":"     * @throws DukeSaveException If Duke is unable to save the task and updated the list.","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"howenc"},"content":"    public String addEvent(String task, LocalDateTime startDayDateTime,","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"howenc"},"content":"            LocalDateTime endDayDateTime, boolean print) throws DukeSaveException {","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"howenc"},"content":"        return addTask(new Event(task, startDayDateTime, endDayDateTime), print);","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"howenc"},"content":"     * Prints out the list of task.","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":98,"author":{"gitId":"howenc"},"content":"     * @return Returns the list of tasks if there are tasks, and a message if there are no tasks.","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"howenc"},"content":"    public String listTasks() {","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"howenc"},"content":"        // Initialized arrays to use as pointers","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"howenc"},"content":"        String[] list \u003d new String[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"howenc"},"content":"        int[] i \u003d new int[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"howenc"},"content":"        i[0] \u003d 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"howenc"},"content":"        assert(list[0] \u003d\u003d null);","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"howenc"},"content":"        listOfTask.forEach(x -\u003e {","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"howenc"},"content":"            // For each item in the array list, I am accessing the arrays above to update","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"howenc"},"content":"            // my list string and my iterator.","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"howenc"},"content":"            if (list[0] \u003d\u003d null) {","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"howenc"},"content":"                list[0] \u003d i[0] + \".\" + x + \"\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"howenc"},"content":"                list[0] +\u003d i[0] + \".\" + x + \"\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"howenc"},"content":"            i[0]++;","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"howenc"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"howenc"},"content":"        if (list[0] \u003d\u003d null) {","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"howenc"},"content":"            return \"There is nothing in the list\";","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"howenc"},"content":"        return list[0];","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"howenc"},"content":"     * Finds and prints index and tasks that contains the string str in its name.","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"howenc"},"content":"     * @param str The string that will be searched.","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"howenc"},"content":"     * @return Returns a string of a list of tasks found and a message if nothing is found.","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"howenc"},"content":"    public String find(String str) {","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"howenc"},"content":"        // Initialized arrays to use as pointers","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"howenc"},"content":"        String[] list \u003d new String[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"howenc"},"content":"        int[] foundCounter \u003d new int[1];","lastModifiedDate":"2023-09-05"},{"lineNumber":136,"author":{"gitId":"howenc"},"content":"        int[] listIndex \u003d new int[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"howenc"},"content":"        listIndex[0] \u003d 1;","lastModifiedDate":"2023-09-13"},{"lineNumber":138,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"howenc"},"content":"        listOfTask.forEach(task -\u003e {","lastModifiedDate":"2023-09-13"},{"lineNumber":140,"author":{"gitId":"howenc"},"content":"            // For each item in the array list, I am accessing the arrays above to update","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"howenc"},"content":"            // my list string, my iterator, and my found counter.","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"howenc"},"content":"            if (!task.getTaskDescription().contains(str)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"howenc"},"content":"                listIndex[0]++;","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"howenc"},"content":"                return;","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"howenc"},"content":"            if (list[0] \u003d\u003d null) {","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"howenc"},"content":"                list[0] \u003d listIndex[0] + \".\" + task + \"\\n\";","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"howenc"},"content":"                list[0] +\u003d listIndex[0] + \".\" + task + \"\\n\";","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"howenc"},"content":"            foundCounter[0]++;","lastModifiedDate":"2023-09-05"},{"lineNumber":152,"author":{"gitId":"howenc"},"content":"            listIndex[0]++;","lastModifiedDate":"2023-09-13"},{"lineNumber":153,"author":{"gitId":"howenc"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"howenc"},"content":"        if (foundCounter[0] \u003d\u003d 0) {","lastModifiedDate":"2023-09-05"},{"lineNumber":156,"author":{"gitId":"howenc"},"content":"            return \"Whoopys uWu, sorry I couldnyt fynd any taysk that contyain that strying. XD uWu\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":157,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"howenc"},"content":"        return list[0];","lastModifiedDate":"2023-09-08"},{"lineNumber":159,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"howenc"},"content":"     * Mark or unmark a task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":163,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"howenc"},"content":"     * @param index The index of the task based on the current task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"howenc"},"content":"     * @param markOrUnmark True to mark, false to unmark.","lastModifiedDate":"2023-09-05"},{"lineNumber":166,"author":{"gitId":"howenc"},"content":"     * @param print True to print messages, false to not print messages.","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"howenc"},"content":"     * @return Returns an empty string if print is false and a message if print is true.","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"howenc"},"content":"     * @throws DukeException If the number is outside the range of indexes in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"howenc"},"content":"    public String markOrUnmark(int index, boolean markOrUnmark, boolean print) throws DukeException {","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"howenc"},"content":"            if (markOrUnmark) {","lastModifiedDate":"2023-09-05"},{"lineNumber":173,"author":{"gitId":"howenc"},"content":"                listOfTask.get(index - 1).setDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"howenc"},"content":"            } else {","lastModifiedDate":"2023-09-05"},{"lineNumber":175,"author":{"gitId":"howenc"},"content":"                listOfTask.get(index - 1).setNotDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":176,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":177,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"howenc"},"content":"            if (print) {","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"howenc"},"content":"                Storage.save(listOfTask);","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"howenc"},"content":"                return listOfTask.get(index - 1).toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":181,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"howenc"},"content":"            return \"\";","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"howenc"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"howenc"},"content":"            throw new DukeException(\"Please select from index 1 to \" + listOfTask.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"howenc"},"content":"     * Delete a task from the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"howenc"},"content":"     * @param index The index of the task based on the current task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"howenc"},"content":"     * @return Returns a message string if print is true and null if false.","lastModifiedDate":"2023-09-13"},{"lineNumber":195,"author":{"gitId":"howenc"},"content":"     * @throws DukeException If the number is outside the range of indexes in the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"howenc"},"content":"    public String delete(int index) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":198,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"howenc"},"content":"            Task removed \u003d listOfTask.remove(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"howenc"},"content":"            listOfDeletedTask.add(removed);","lastModifiedDate":"2023-09-13"},{"lineNumber":201,"author":{"gitId":"howenc"},"content":"            Storage.save(listOfTask);","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"howenc"},"content":"            return removed + \" has been deleted\";","lastModifiedDate":"2023-09-08"},{"lineNumber":203,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":204,"author":{"gitId":"howenc"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"howenc"},"content":"            throw new DukeException(\"Please select from index 1 to \" + listOfTask.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":209,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":210,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":211,"author":{"gitId":"howenc"},"content":"     * Adds a command into the log of commands stack.","lastModifiedDate":"2023-09-13"},{"lineNumber":212,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":213,"author":{"gitId":"howenc"},"content":"     * @param command The command to be added to the log of commands stack.","lastModifiedDate":"2023-09-13"},{"lineNumber":214,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":215,"author":{"gitId":"howenc"},"content":"    public void addCommand(Commands command) {","lastModifiedDate":"2023-09-13"},{"lineNumber":216,"author":{"gitId":"howenc"},"content":"        logOfCommands.add(command);","lastModifiedDate":"2023-09-13"},{"lineNumber":217,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":218,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":219,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":220,"author":{"gitId":"howenc"},"content":"     * Returns the command at the top of the log of commands stack.","lastModifiedDate":"2023-09-13"},{"lineNumber":221,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":222,"author":{"gitId":"howenc"},"content":"     * @return Returns the task at the top of the log of commands stack.","lastModifiedDate":"2023-09-13"},{"lineNumber":223,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":224,"author":{"gitId":"howenc"},"content":"    public Commands getPreviousCommand() throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":225,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":226,"author":{"gitId":"howenc"},"content":"            return logOfCommands.pop();","lastModifiedDate":"2023-09-13"},{"lineNumber":227,"author":{"gitId":"howenc"},"content":"        } catch (EmptyStackException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":228,"author":{"gitId":"howenc"},"content":"            throw new DukeException(\"There is no previous command\");","lastModifiedDate":"2023-09-13"},{"lineNumber":229,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":230,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":231,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":232,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"howenc":232}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":" * This is an abstract class that contain the factory methods and all the methods that a task will have.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"    private final String taskDescription;","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"    private Boolean isDone;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"    Task(String taskName) {","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"        this.taskDescription \u003d taskName;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"     * The string that represents the object.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"     * @return Returns a string that represents the object.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"        return (\"[\" + (this.isDone ? \"X] \" : \" ] \") + this.taskDescription);","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"     * Mark the task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"    public void setDone() throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"        if (isDone) {","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"            throw new DukeException(\"Task is already done\");","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"     * Mark the task as undone.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"    public void setNotDone() throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"        if (!isDone) {","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"            throw new DukeException(\"Task is still not done\");","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"     * Check if the task is done.","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"     * @return Returns true if the task is done, false if otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"     * Returns the name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"     * @return Returns the name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"        return this.taskDescription;","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"     * Writes the initial command the user put that resulted in the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"     * @return Returns the initial command the user put for this task.","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"    public String write() {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"        return \"task \" + this.taskDescription + \"\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"howenc":76}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This class represents the task type ToDo.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"class ToDo extends Task {","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"     * Creates a ToDo object.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"     * @param taskDescription The name of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"    ToDo(String taskDescription) {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"        super(taskDescription);","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"     * @inheritDoc","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"    public String write() {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"        return \"todo \" + super.getTaskDescription() + \"\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"howenc":32}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":" * This class deals with the next user input and contains some standard prints.","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"public class Ui {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"     * Initialize the Ui object.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"    public Ui() {","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"     * Prints the greeting of the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"    public static String greet() {","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"        return \"Hello. I am Luxion. \\n\"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"                + \"What can I do for you?\";","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"     * Prints the exit of the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"    public static String exit() {","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"        return \"Bye. See you soon.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"howenc":29}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"        \u003cLabel fx:id\u003d\"dialog\" prefHeight\u003d\"99.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"         \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"howenc":19}},{"path":"src/test/java/command/CommandsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"howenc"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"howenc"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"howenc"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"howenc"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeDateTimeParseException;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeFromEarlierThanToException;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeNullPointerException;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeNumberFormatException;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"howenc"},"content":"import dukeexceptions.DukeUnknownCommandException;","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"howenc"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"howenc"},"content":"import task.ListOfTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"howenc"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"howenc"},"content":" * This class test the Commands class and thus test the Parser class and ListOfTask class.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"howenc"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"howenc"},"content":"public class CommandsTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteToDo() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\", \"todo \"};","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"howenc"},"content":"        String cmd2 \u003d \"CS2103T A-JUnit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"howenc"},"content":"        String cmd3 \u003d \"added: [T][ ] \";","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"howenc"},"content":"        for (int i \u003d 0; i \u003c cmd.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(cmd[i]);","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"howenc"},"content":"            ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"howenc"},"content":"            System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"howenc"},"content":"                assertEquals(cmd3 + cmd2, c.execute(new task.ListOfTask()));","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please add the task name\\r\\n\", e.getMessage() + \"\\r\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteDeadline() {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"deadline CS2103T A-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"howenc"},"content":"            \"deadline gyrdefsf /by 8411\",","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"howenc"},"content":"            \"deadline gyrdefsf /by \", \"deadline /b\"};","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"howenc"},"content":"        String cmd2 \u003d \"CS2103T A-JUnit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"howenc"},"content":"        String cmd3 \u003d \"added: [D][ ] \";","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"howenc"},"content":"        String cmd4 \u003d \" (by: 18-09-2023 0000)\";","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"howenc"},"content":"            final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"howenc"},"content":"            System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"howenc"},"content":"                assertEquals(cmd3 + cmd2 + cmd4, c.execute(new task.ListOfTask()));","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"howenc"},"content":"            } catch (DukeDateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"howenc"},"content":"                assertEquals(\"The format for dates\u0026time is \u0027dd-MM-yyyy hhmm\u0027\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"howenc"},"content":"            } catch (DukeNullPointerException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"howenc"},"content":"                assertEquals(\"The format for the command is: deadline task /by date\u0026time\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please add the task name\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteEvent() {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 9999\",","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 \",","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 /to 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to\",","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /t 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 / 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 9999\",","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09 1010\",","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from\",","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /fro\",","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from /to \",","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"howenc"},"content":"        String cmd2 \u003d \"CS2103T A-JUnit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"howenc"},"content":"        String cmd3 \u003d \"added: [E][ ] \";","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"howenc"},"content":"        String cmd4 \u003d \" (from: 18-09-2023 0000 to: 18-09-2024 0000)\";","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"howenc"},"content":"            final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"howenc"},"content":"            System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"howenc"},"content":"                assertEquals(cmd3 + cmd2 + cmd4, c.execute(new task.ListOfTask()));","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"howenc"},"content":"            } catch (DukeFromEarlierThanToException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"howenc"},"content":"                assertEquals(\"From must be earlier than To\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"howenc"},"content":"            } catch (DukeDateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"howenc"},"content":"                assertEquals(\"The format for dates\u0026time is \u0027dd-MM-yyyy hhmm\u0027\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"howenc"},"content":"            } catch (DukeNullPointerException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"howenc"},"content":"                assertEquals(\"The format for the command is: \"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"howenc"},"content":"                        + \"event task /from startDayDateTime /to endDayDateTime\",","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"howenc"},"content":"                        e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please add the task name\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteMark() {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"howenc"},"content":"            \"deadline CS2103T A-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"howenc"},"content":"        String[] cmdi \u003d {\"[T][X] CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"howenc"},"content":"            \"[D][X] CS2103T A-JUnit (by: 18-09-2023 0000)\",","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"howenc"},"content":"            \"[E][X] CS2103T A-JUnit (from: 18-09-2023 0000 to: 18-09-2024 0000)\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"howenc"},"content":"        ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":122,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"howenc"},"content":"                c.execute(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"howenc"},"content":"                System.out.println(\"check the test cases again\");","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"howenc"},"content":"        int[] indexes \u003d {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"howenc"},"content":"        for (int i \u003d 0; i \u003c indexes.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"howenc"},"content":"                final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"howenc"},"content":"                System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"howenc"},"content":"                String str \u003d taskList.markOrUnmark(indexes[i] + 1, true, true);","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"howenc"},"content":"                assertEquals(cmdi[i], str);","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"howenc"},"content":"            } catch (DukeNumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please select from index 1 to \" + taskList.size(), e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"howenc"},"content":"        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"howenc"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"howenc"},"content":"        String s \u003d \"mark a\";","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"howenc"},"content":"        Parser p \u003d new Parser(s);","lastModifiedDate":"2023-09-06"},{"lineNumber":147,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"howenc"},"content":"            Commands c \u003d p.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"howenc"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"howenc"},"content":"            assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteUnMark() {","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"howenc"},"content":"            \"mark 1\",","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"howenc"},"content":"            \"deadline CS2103T A-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"howenc"},"content":"            \"mark 2\",","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"howenc"},"content":"            \"mark 3\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"howenc"},"content":"        String[] cmdi \u003d {\"[T][ ] CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"howenc"},"content":"            \"[D][ ] CS2103T A-JUnit (by: 18-09-2023 0000)\",","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"howenc"},"content":"            \"[E][ ] CS2103T A-JUnit (from: 18-09-2023 0000 to: 18-09-2024 0000)\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"howenc"},"content":"        ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":168,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"howenc"},"content":"                c.execute(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":171,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"howenc"},"content":"                System.out.println(\"check the test cases again\");","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"howenc"},"content":"        int[] indexes \u003d {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"howenc"},"content":"        for (int i \u003d 0; i \u003c indexes.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"howenc"},"content":"                final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"howenc"},"content":"                System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"howenc"},"content":"                String str \u003d taskList.markOrUnmark(indexes[i] + 1, false, true);","lastModifiedDate":"2023-09-08"},{"lineNumber":181,"author":{"gitId":"howenc"},"content":"                assertEquals(cmdi[i], str);","lastModifiedDate":"2023-09-08"},{"lineNumber":182,"author":{"gitId":"howenc"},"content":"            } catch (DukeNumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please select from index 1 to \" + taskList.size(), e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"howenc"},"content":"        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"howenc"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"howenc"},"content":"        String s \u003d \"unmark a\";","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"howenc"},"content":"        Parser p \u003d new Parser(s);","lastModifiedDate":"2023-09-06"},{"lineNumber":194,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"howenc"},"content":"            Commands c \u003d p.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"howenc"},"content":"            assertEquals(\"Place a number after the command\", outContent.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"howenc"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"howenc"},"content":"            assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteDelete() {","lastModifiedDate":"2023-08-30"},{"lineNumber":204,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"howenc"},"content":"            \"deadline CS2103T A-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":207,"author":{"gitId":"howenc"},"content":"        String[] cmdi \u003d {\"[T][ ] CS2103T A-JUnit has been deleted\",","lastModifiedDate":"2023-08-30"},{"lineNumber":208,"author":{"gitId":"howenc"},"content":"            \"[D][ ] CS2103T A-JUnit (by: 18-09-2023 0000) has been deleted\",","lastModifiedDate":"2023-08-30"},{"lineNumber":209,"author":{"gitId":"howenc"},"content":"            \"[E][ ] CS2103T A-JUnit (from: 18-09-2023 0000 to: 18-09-2024 0000) has been deleted\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":210,"author":{"gitId":"howenc"},"content":"        ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-08-30"},{"lineNumber":211,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":212,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":213,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":214,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":215,"author":{"gitId":"howenc"},"content":"                c.execute(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":216,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":217,"author":{"gitId":"howenc"},"content":"                System.out.println(\"check the test cases again\");","lastModifiedDate":"2023-08-30"},{"lineNumber":218,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":219,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":220,"author":{"gitId":"howenc"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"howenc"},"content":"                final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"howenc"},"content":"                System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"howenc"},"content":"                assertEquals(cmdi[i], taskList.delete(1));","lastModifiedDate":"2023-09-13"},{"lineNumber":225,"author":{"gitId":"howenc"},"content":"            } catch (DukeNumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please select from index 1 to \" + taskList.size(), e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":230,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":231,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"howenc"},"content":"        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":233,"author":{"gitId":"howenc"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":234,"author":{"gitId":"howenc"},"content":"        String s \u003d \"mark a\";","lastModifiedDate":"2023-08-30"},{"lineNumber":235,"author":{"gitId":"howenc"},"content":"        Parser p \u003d new Parser(s);","lastModifiedDate":"2023-09-06"},{"lineNumber":236,"author":{"gitId":"howenc"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"howenc"},"content":"            Commands c \u003d p.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":238,"author":{"gitId":"howenc"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":239,"author":{"gitId":"howenc"},"content":"            assertEquals(\"Place a number after the command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":241,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":242,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":243,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":244,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":245,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\",","lastModifiedDate":"2023-08-30"},{"lineNumber":246,"author":{"gitId":"howenc"},"content":"            \"deadline CS2103T A-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-30"},{"lineNumber":247,"author":{"gitId":"howenc"},"content":"            \"event CS2103T A-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":248,"author":{"gitId":"howenc"},"content":"        String cmdi \u003d \"1.[T][ ] CS2103T A-JUnit\\n\"","lastModifiedDate":"2023-09-08"},{"lineNumber":249,"author":{"gitId":"howenc"},"content":"            + \"2.[D][ ] CS2103T A-JUnit (by: 18-09-2023 0000)\\n\"","lastModifiedDate":"2023-09-08"},{"lineNumber":250,"author":{"gitId":"howenc"},"content":"            + \"3.[E][ ] CS2103T A-JUnit (from: 18-09-2023 0000 to: 18-09-2024 0000)\\n\";","lastModifiedDate":"2023-09-08"},{"lineNumber":251,"author":{"gitId":"howenc"},"content":"        ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-08-30"},{"lineNumber":252,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-30"},{"lineNumber":253,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":254,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":255,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"howenc"},"content":"                c.execute(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":257,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":258,"author":{"gitId":"howenc"},"content":"                System.out.println(\"check the test cases again\");","lastModifiedDate":"2023-08-30"},{"lineNumber":259,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":261,"author":{"gitId":"howenc"},"content":"        String[] cmdj \u003d {\"l\", \"list \", \"list\"};","lastModifiedDate":"2023-08-30"},{"lineNumber":262,"author":{"gitId":"howenc"},"content":"        for (String str : cmdj) {","lastModifiedDate":"2023-08-30"},{"lineNumber":263,"author":{"gitId":"howenc"},"content":"            final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"howenc"},"content":"            System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"howenc"},"content":"            Parser p \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":266,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":267,"author":{"gitId":"howenc"},"content":"                Commands c \u003d p.parse();","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"howenc"},"content":"                assertEquals(cmdi, c.execute(taskList));","lastModifiedDate":"2023-09-08"},{"lineNumber":269,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Unknown command\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":271,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":272,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":273,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":274,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":275,"author":{"gitId":"howenc"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":276,"author":{"gitId":"howenc"},"content":"    public void commandsExecuteFind() {","lastModifiedDate":"2023-08-31"},{"lineNumber":277,"author":{"gitId":"howenc"},"content":"        String[] cmd \u003d {\"todo CS2103T A-JUnit\",","lastModifiedDate":"2023-08-31"},{"lineNumber":278,"author":{"gitId":"howenc"},"content":"            \"deadline CS2103T B-JUnit /by 18-09-2023 0000\",","lastModifiedDate":"2023-08-31"},{"lineNumber":279,"author":{"gitId":"howenc"},"content":"            \"event CS2103T C-JUnit /from 18-09-2023 0000 /to 18-09-2024 0000\"};","lastModifiedDate":"2023-08-31"},{"lineNumber":280,"author":{"gitId":"howenc"},"content":"        String[] cmdi \u003d {\"3.[E][ ] CS2103T C-JUnit (from: 18-09-2023 0000 to: 18-09-2024 0000)\\n\",","lastModifiedDate":"2023-09-08"},{"lineNumber":281,"author":{"gitId":"howenc"},"content":"            \"2.[D][ ] CS2103T B-JUnit (by: 18-09-2023 0000)\\n\",","lastModifiedDate":"2023-09-08"},{"lineNumber":282,"author":{"gitId":"howenc"},"content":"            \"1.[T][ ] CS2103T A-JUnit\\n\",","lastModifiedDate":"2023-09-08"},{"lineNumber":283,"author":{"gitId":"howenc"},"content":"            \"Whoopys uWu, sorry I couldnyt fynd any taysk that contyain that strying. XD uWu\\n\"};","lastModifiedDate":"2023-09-08"},{"lineNumber":284,"author":{"gitId":"howenc"},"content":"        ListOfTask taskList \u003d new ListOfTask();","lastModifiedDate":"2023-08-31"},{"lineNumber":285,"author":{"gitId":"howenc"},"content":"        for (String str : cmd) {","lastModifiedDate":"2023-08-31"},{"lineNumber":286,"author":{"gitId":"howenc"},"content":"            Parser cm \u003d new Parser(str);","lastModifiedDate":"2023-09-06"},{"lineNumber":287,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":288,"author":{"gitId":"howenc"},"content":"                Commands c \u003d cm.parse();","lastModifiedDate":"2023-08-31"},{"lineNumber":289,"author":{"gitId":"howenc"},"content":"                c.execute(taskList);","lastModifiedDate":"2023-09-04"},{"lineNumber":290,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":291,"author":{"gitId":"howenc"},"content":"                System.out.println(\"check the test cases again\");","lastModifiedDate":"2023-08-31"},{"lineNumber":292,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":293,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":294,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":295,"author":{"gitId":"howenc"},"content":"        String[] cmdj \u003d {\"f\", \"find\", \"find \", \"find C-JUnit\", \"find B\", \"find A\", \"find d\"};","lastModifiedDate":"2023-08-31"},{"lineNumber":296,"author":{"gitId":"howenc"},"content":"        for (int i \u003d 0; i \u003c cmdj.length; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":297,"author":{"gitId":"howenc"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":298,"author":{"gitId":"howenc"},"content":"                final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-08-31"},{"lineNumber":299,"author":{"gitId":"howenc"},"content":"                System.setOut(new PrintStream(outContent));","lastModifiedDate":"2023-08-31"},{"lineNumber":300,"author":{"gitId":"howenc"},"content":"                Parser p \u003d new Parser(cmdj[i]);","lastModifiedDate":"2023-09-06"},{"lineNumber":301,"author":{"gitId":"howenc"},"content":"                Commands c \u003d p.parse();","lastModifiedDate":"2023-08-31"},{"lineNumber":302,"author":{"gitId":"howenc"},"content":"                assertEquals(cmdi[i - 3], c.execute(taskList));","lastModifiedDate":"2023-09-08"},{"lineNumber":303,"author":{"gitId":"howenc"},"content":"            } catch (DukeUnknownCommandException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":304,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Unknown command\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":305,"author":{"gitId":"howenc"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":306,"author":{"gitId":"howenc"},"content":"                assertEquals(\"Please add the task name\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":307,"author":{"gitId":"howenc"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":308,"author":{"gitId":"howenc"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":309,"author":{"gitId":"howenc"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":310,"author":{"gitId":"howenc"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":311,"author":{"gitId":"howenc"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"howenc":311}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"howenc"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"howenc":1}}]
