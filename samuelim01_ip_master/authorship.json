[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"checkstyle {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"javafx {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    version \u003d \u002717.0.2\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samuelim01":11,"-":43}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.StorageLoadException;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":" * Represents a chatbot. This initializes the chatbot application and is","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":" * the entry point to interaction with the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    /** The file path where the data of the chatbot is stored */","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    private static final String FILE_PATH \u003d \"data/tasks.txt\";","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"     * Initializes the chatbot application with the given file path.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"     * Loads up the data from the storage file, and shows the welcome message.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    public Duke() {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"        storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"        } catch (StorageLoadException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"            // Solution below inspired by Addressbook Level 2.","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"            // The application cannot be expected to recover from such an exception.","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"            throw new RuntimeException(e.getMessage());","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     * Returns the chatbot response after executing","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"     * the user input command.","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"     * @param input The input by the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"     * @return The response by the chatbot.","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    public CommandResult getResponse(String input) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"        return command.execute(tasks, storage);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"samuelim01":51,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":" * Represents a launcher for the Duke chatbot.","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * Launches the Duke chatbot application.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"     * @param args","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":18}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.gui.MainWindow;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":" * Represents a GUI for Duke","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    private final Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"            stage.setResizable(false);","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":35}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidDateException;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":" * Represents a command to add a new deadline to the list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"public class AddDeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Adds a new deadline.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code AddDeadlineCommand} with the given description, by dates.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     * If there is an error in parsing the date, throws a {@code DukeException}.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"     * @param by The due date of the event in \\\u0027yyyy-mm-dd\\\u0027 format.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"     * @throws DukeException If there is an error in parsing the by field as a date.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    public AddDeadlineCommand(String description, String by) throws DukeException {","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            this.toAdd \u003d new Deadline(description, LocalDate.parse(by));","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":35}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidDateException;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Event;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":" * Represents a command to add a new event to the list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"public class AddEventCommand extends AddTaskCommand {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Adds a new event.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code AddEventCommand} with the given description, from and to dates.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     * If there is an error in parsing the date, throws a {@code DukeException}.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"     * @param from The start date of the event in \\\u0027yyyy-mm-dd\\\u0027 format.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"     * @param to The end date of the event in \\\u0027yyyy-mm-dd\\\u0027 format.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"     * @throws DukeException If there is an error in parsing from and to as dates.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    public AddEventCommand(String description, String from, String to) throws DukeException {","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            this.toAdd \u003d new Event(description, LocalDate.parse(from), LocalDate.parse(to));","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidDateException();","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":35}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" * Represents a command to add a new task.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"public abstract class AddTaskCommand extends Command {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE_FORMAT \u003d","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"            \"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks in the list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    protected Task toAdd;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    protected String getCommandResponse(TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"        return String.format(COMMAND_RESPONSE_FORMAT, toAdd.toString(), tasks.size());","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        tasks.add(toAdd);","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(getCommandResponse(tasks));","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":28}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":" * Represents a command to add a new todo to the list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"public class AddTodoCommand extends AddTaskCommand {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Adds a new todo item.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        this.toAdd \u003d new Todo(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":17}},{"path":"src/main/java/duke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" * Represents a command to clear the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Clears all tasks.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Got it. I\u0027ve cleared all tasks.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        tasks.clear();","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE);","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":23}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" * Represents a command given by the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"     * Executes the command with the given tasks, and prints the necessary","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"     * results to the ui. If the list of tasks is modified, the storage file","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"     * is saved again.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"     * @param tasks The list of tasks in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"     * @param storage The storage file of the application.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"     * @return The response by the bot.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     * @throws DukeException If there is any issue with the constructed command.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public abstract CommandResult execute(TaskList tasks, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":24}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author samuelim01-reused","lastModifiedDate":"2023-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"// Reused from Addressbook Level 3 with minor modifications.","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents the result of a command execution","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private final String responseToUser;","lastModifiedDate":"2023-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final boolean isExit;","lastModifiedDate":"2023-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields","lastModifiedDate":"2023-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param responseToUser","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @param isExit","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult(String responseToUser, boolean isExit) {","lastModifiedDate":"2023-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.responseToUser \u003d responseToUser;","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult(String responseToUser) {","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this(responseToUser, false);","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public String getResponseToUser() {","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return responseToUser;","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return isExit;","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"//@@author","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"samuelim01":2,"-":35}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" * Represents a command to delete the specified task.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"public class DeleteCommand extends ModifyTaskCommand {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Deletes the given task.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE_SUCCESS \u003d \"Noted. I\u0027ve removed this task:\\n\\t\";","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public DeleteCommand(String taskIndex) {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        super(taskIndex);","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        Task task \u003d tasks.remove(taskIndex);","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE_SUCCESS + task);","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":28}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents a command to exit the chatbot application.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Exits the chatbot.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE, true);","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":20}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents a command to find tasks that match the keyword provided.","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Finds all tasks with the given keyword.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    private final String keyword;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code FindCommand} with the given keyword.","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     * @param keyword The specified keyword to filter the list of tasks by.","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        assert !keyword.trim().isEmpty() : \"The keyword should be non-empty\";","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        boolean containsWhitespace \u003d keyword.matches(\".*\\\\s.*\");","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"        assert !containsWhitespace : \"The keyword should be a single word\";","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"        TaskList filteredTasks \u003d tasks.filter(keyword);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE + filteredTasks.getFormattedList());","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"samuelim01":35}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents a command to list all existing commands","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Displays all commands.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-21"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"        String responseToUser \u003d ClearCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + AddDeadlineCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + DeleteCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + ExitCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + FindCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + HelpCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + ListCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + MarkCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + AddTodoCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"                + \"\\n\" + UnmarkCommand.COMMAND_DESCRIPTION;","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(responseToUser);","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"samuelim01":29}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents a command to list all existing tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Lists all tasks.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Here are the list of tasks:\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE + tasks.getFormattedList());","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":20}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" * Represents a command to mark the specified task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"public class MarkCommand extends ModifyTaskCommand {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Marks the given task as done.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t\";","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public MarkCommand(String taskIndex) {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        super(taskIndex);","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        Task task \u003d tasks.mark(taskIndex);","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE + task);","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":28}},{"path":"src/main/java/duke/command/ModifyTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents a command to modify an existing task.","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public abstract class ModifyTaskCommand extends Command {","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"    protected int taskIndex;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code ModifyTaskCommand} with the given task index.","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     * @param taskIndex The index of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public ModifyTaskCommand(String taskIndex) {","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"            this.taskIndex \u003d Integer.parseInt(taskIndex);","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"            assert false;","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"samuelim01":21}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":" * Represents a command to mark the specified task as not done yet.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"public class UnmarkCommand extends ModifyTaskCommand {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public static final String COMMAND_DESCRIPTION \u003d COMMAND_WORD + \": Marks the given task as not done yet.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    private static final String COMMAND_RESPONSE \u003d \"Nice! I\u0027ve marked this task as not done yet:\\n\\t\";","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public UnmarkCommand(String taskIndex) {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        super(taskIndex);","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        Task task \u003d tasks.unmark(taskIndex);","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        return new CommandResult(COMMAND_RESPONSE + task);","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":28}},{"path":"src/main/java/duke/data/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception with the duke chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * @param message The  error message of the exception.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelim01":16}},{"path":"src/main/java/duke/data/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Repesents an exception due to an invalid command.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"        super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":13}},{"path":"src/main/java/duke/data/exception/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception due to an invalid date.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class InvalidDateException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public InvalidDateException() {","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"        super(\"The dates must be filled in \\\"yyyy-mm-dd\\\" format.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":15}},{"path":"src/main/java/duke/data/exception/InvalidKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an invalid keyword for a {@code FindCommand}.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class InvalidKeywordException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    public InvalidKeywordException() {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"        super(\"The keyword must be specified and a single word.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":14}},{"path":"src/main/java/duke/data/exception/InvalidTaskArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception due to invalid task arguments.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class InvalidTaskArgumentException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     * @param message The  error message of the exception.","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    public InvalidTaskArgumentException(String message) {","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"        super(message);","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":15}},{"path":"src/main/java/duke/data/exception/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception due to an invalid task index.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class InvalidTaskIndexException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public InvalidTaskIndexException(String message) {","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        super(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":16}},{"path":"src/main/java/duke/data/exception/StorageLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception due to invalid storage data.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class StorageLoadException extends DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public StorageLoadException(String message) {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        super(message);","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":16}},{"path":"src/main/java/duke/data/exception/StorageSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.exception;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents an exception while trying to save data to the storage file.","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class StorageSaveException extends DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code DukeException} with the given error message.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * @param message The error message of the exception.","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public StorageSaveException(String message) {","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        super(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"samuelim01":16}},{"path":"src/main/java/duke/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents a deadline with a date to complete it by.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    private static final DateTimeFormatter PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    private static final DateTimeFormatter PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    private final LocalDate by;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code Deadline} with the given description, and","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"     * date to complete it by.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     * @param by The date to complete the deadline by.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"     * Returns a String representation of the due date of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"     * @param formatter The specified format of the date.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"     * @return The String representation of the due date of the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"    public String getFormattedBy(DateTimeFormatter formatter) {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"        return by.format(formatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), getFormattedBy(PRINT_FORMATTER));","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    public String getStorageString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"        return \"D | \" + super.getStorageString() + \" | \" + getFormattedBy(PARSE_FORMATTER);","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"            return true;","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"            Deadline deadline \u003d (Deadline) obj;","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"            return this.description.equals(deadline.description) \u0026\u0026 this.by.equals(deadline.by);","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"        return false;","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelim01":60}},{"path":"src/main/java/duke/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":" * Represents an event that has a start and end date.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    private static final DateTimeFormatter PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"    private static final DateTimeFormatter PRINT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    private final LocalDate from;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    private final LocalDate to;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code Event} with the given description,","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"     * start date and end date.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"     * @param from The start date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"     * @param to The end date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    public Event(String description, LocalDate from, LocalDate to) {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"     * Returns a String representation of the start date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"     * @param formatter The specified format of the date.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"     * @return The String representation of the start date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    public String getFormattedFrom(DateTimeFormatter formatter) {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"        return from.format(formatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"     * Returns a String representation of the end date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     * @param formatter The specified format of the date.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"     * @return The String representation of the end date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"    public String getFormattedTo(DateTimeFormatter formatter) {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"        return to.format(formatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"        return String.format(\"[E] %s (from: %s to: %s)\",","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"                super.toString(), getFormattedFrom(PRINT_FORMATTER), getFormattedTo(PRINT_FORMATTER));","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"    public String getStorageString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        return \"E | \" + super.getStorageString() + \" | \"","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"                + getFormattedFrom(PARSE_FORMATTER) + \" | \" + getFormattedTo(PARSE_FORMATTER);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"            return true;","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"            Event event \u003d (Event) obj;","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"            return this.description.equals(event.description)","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"                    \u0026\u0026 this.from.equals(event.from)","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"                    \u0026\u0026 this.to.equals(event.to);","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"        return false;","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelim01":77}},{"path":"src/main/java/duke/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents a task to be done.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /** The description of the given task. */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"    protected String description;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code Task} with the given description.","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"        assert !description.trim().isEmpty() : \"Task description should be nonempty.\";","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    /** Returns a string representation of whether the task is done. */","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"        return (isDone ? \"✘\" : \" \"); //return tick or X symbols","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    /** Sets the task as done. */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    /** Sets the task as not done yet. */","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"     * Returns a string representation of the task for when it is stored.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"     * @return","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    public String getStorageString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"        return String.format(\"%d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelim01":51}},{"path":"src/main/java/duke/data/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidTaskIndexException;","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":" * Represents a collection of tasks within the chatbot application.","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"public class TaskList {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    public TaskList(Task... tasks) {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(Arrays.asList(tasks));","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"     * Returns and removes the task specified from the collection of tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"     * @param taskNumber The index of the task in the list, starting from 1.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"     * @return The task specified.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"     * @throws InvalidTaskIndexException If no such task exists.","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    public Task remove(int taskNumber) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidTaskIndexException(\"No such task exists.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"        return tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"     * Returns and marks the task specified as done.","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"     * @param taskNumber The index of the task in the list, starting from 1.","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"     * @return The task specified.","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"     * @throws InvalidTaskIndexException If no such task exists.","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"    public Task mark(int taskNumber) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidTaskIndexException(\"No such task exists.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"        return task;","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"     * Returns and marks the task specified as not done yet.","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"     * @param taskNumber The index of the task in the list, starting from 1.","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"     * @return The task specified.","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"     * @throws InvalidTaskIndexException If no such task exists.","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    public Task unmark(int taskNumber) throws InvalidTaskIndexException {","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidTaskIndexException(\"No such task exists.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"        task.markAsUndone();","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"        return task;","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"    public void clear() {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"    public int size() {","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"    public List\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"        return tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"    public String getStorageString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"            stringBuilder.append(task.getStorageString()).append(\"\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code TaskList} with the tasks that","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"     * match the given keyword.","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"     * @param keyword The given keyword to match against the task descriptions.","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"     * @return An instance of {@code TaskList} with the matched tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"    public TaskList filter(String keyword) {","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"            boolean hasKeyword \u003d task.toString().contains(keyword);","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"            if (hasKeyword) {","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"        return new TaskList(filteredTasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"     * Returns the list of tasks as a formatted indexed list.","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"     * @return List of tasks as a formatted indexed list.","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"    public String getFormattedList() {","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"            sb.append(String.format(\"\\t%d. %s\\n\", i + 1, tasks.get(i)));","lastModifiedDate":"2023-09-07"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":132}},{"path":"src/main/java/duke/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Represents a todo item to be done.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"     * Returns an instance of {@code Todo} with the given description.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"        return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    public String getStorageString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        return \"T | \" + super.getStorageString();","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"            return true;","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"        if (obj instanceof Todo) {","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"            Todo todo \u003d (Todo) obj;","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"            return this.description.equals(todo.description);","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        return false;","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelim01":40}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    private static final String USER_RESOURCE \u003d \"/view/UserDialogBox.fxml\";","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    private static final String DUKE_RESOURCE \u003d \"/view/DukeDialogBox.fxml\";","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    private DialogBox(String text, String resource) {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(resource));","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    public static DialogBox getUserDialog(String text) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"        return new DialogBox(text, USER_RESOURCE);","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    public static DialogBox getDukeDialog(String text) {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"        return new DialogBox(text, DUKE_RESOURCE);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":42}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import duke.command.CommandResult;","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"        if (input.trim().isEmpty()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"        addUserDialog(input);","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"            CommandResult commandResult \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"            addDukeDialog(commandResult.getResponseToUser());","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"                handleExit();","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"            addDukeDialog(e.getMessage());","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"    private void addUserDialog(String message) {","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(message));","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"    private void addDukeDialog(String message) {","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message));","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"    private void handleExit() {","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"        userInput.setDisable(true);","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        sendButton.setDisable(true);","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":74}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.parser;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import duke.command.ClearCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidCommandException;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidKeywordException;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidTaskArgumentException;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.InvalidTaskIndexException;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":" * Represents the parser of user-given commands.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"public class Parser {","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern TASK_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctaskIndex\u003e-?\\\\d+)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern TODO_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern DEADLINE_DATA_ARGS_FORMAT \u003d","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"            Pattern.compile(\"(?\u003cdescription\u003e[^/]+)\"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"                    + \" /by (?\u003cby\u003e[^/]+)\");","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern EVENT_DATA_ARGS_FORMAT \u003d","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"            Pattern.compile(\"(?\u003cdescription\u003e[^/]+)\"","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"                    + \" /from (?\u003cfrom\u003e[^/]+)\"","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"                    + \" /to (?\u003cto\u003e[^/]+)\");","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    private static final Pattern KEYWORD_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ckeyword\u003e\\\\w+)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     * Returns a command from the given user input. If no such command matches","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"     * the user input, or there was an error with the command arguments,","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"     * throws a {@code DukeException}.","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"     * @param fullCommand The given user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"     * @return The command represented by the user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"     * @throws DukeException If no such command exists or there was an error with","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"     *                       the command arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        //@author samuelim01-reused","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"        // Reused from Addressbook Level 2 with minor modifications.","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(fullCommand.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"        case AddTodoCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"            return prepareTodo(arguments);","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"        case AddDeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"            return prepareDeadline(arguments);","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"            return prepareEvent(arguments);","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"            return prepareMark(arguments, true);","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"            return prepareMark(arguments, false);","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"            return prepareFind(arguments);","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"            return prepareDelete(arguments);","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"        default:","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Returns an {@code AddTodoCommand} from the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param arguments The user arguments to the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @return An instance of {@code AddTodoCommand} with the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws InvalidTaskArgumentException If the arguments were invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static Command prepareTodo(String arguments) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d TODO_DATA_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new InvalidTaskArgumentException(\"The description of a todo must be specified.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return new AddTodoCommand(matcher.group(\"description\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns an {@code AddDeadlineCommand} from the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param arguments The user arguments to the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @return An instance of {@code AddDeadlineCommand} with the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @throws InvalidTaskArgumentException If the arguments were invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private static Command prepareDeadline(String arguments) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d DEADLINE_DATA_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new InvalidTaskArgumentException(\"The description and the /by field must be specified.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return new AddDeadlineCommand(matcher.group(\"description\"), matcher.group(\"by\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns an {@code AddEventCommand} from the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @param arguments The user arguments to the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @return An instance of {@code AddEventCommand} with the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @throws InvalidTaskArgumentException If the arguments were invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private static Command prepareEvent(String arguments) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d EVENT_DATA_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new InvalidTaskArgumentException(\"The description and the /from and /to fields must be specified.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return new AddEventCommand(","lastModifiedDate":"2023-08-28"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                matcher.group(\"description\"),","lastModifiedDate":"2023-08-28"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                matcher.group(\"from\"),","lastModifiedDate":"2023-08-28"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                matcher.group(\"to\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns an {@code MarkCommand} or {@code UnmarkCommand} from the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @param arguments The user arguments to the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @param isMarked True if the command is meant to mark the task, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @return An instance of {@code MarkCommand} or {@code UnmarkCommand} with the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @throws InvalidTaskIndexException If the task was not specified or invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private static Command prepareMark(String arguments, boolean isMarked) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d TASK_INDEX_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new InvalidTaskIndexException(\"The task must be specified.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (isMarked) {","lastModifiedDate":"2023-08-28"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            return new MarkCommand(matcher.group(\"taskIndex\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return new UnmarkCommand(matcher.group(\"taskIndex\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Returns an {@code DeleteCommand} from the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * @param arguments The user arguments to the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * @return An instance of {@code DeleteCommand} with the given arguments.","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @throws DukeException If the task was not specified or invalid.","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private static Command prepareDelete(String arguments) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d TASK_INDEX_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-08-28"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw new InvalidTaskIndexException(\"The task must be specified.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return new DeleteCommand(matcher.group(\"taskIndex\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Returns a {@code FindCommand} from the given arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * @param arguments  The user arguments to the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * @return An instance of {@code FindCommand} with the given arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * @throws InvalidKeywordException If keyword was not specified or more than one.","lastModifiedDate":"2023-09-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private static Command prepareFind(String arguments) throws InvalidKeywordException {","lastModifiedDate":"2023-09-07"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d KEYWORD_DATA_ARGS_FORMAT.matcher(arguments.trim());","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            throw new InvalidKeywordException();","lastModifiedDate":"2023-09-07"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return new FindCommand(matcher.group(\"keyword\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-08-28"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":87,"-":105}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.StorageLoadException;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.StorageSaveException;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Event;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.TaskList;","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":" * Represents the file used to store task data.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    /** The file path where the task data is stored */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    private final String filePath;","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    /** Initializes the data file with the given path */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"     * Loads the data from the file and returns it as a list.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"     * @throws StorageLoadException If there was an issue running the file.","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    public List\u003cTask\u003e load() throws StorageLoadException {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"                return tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"            String saveString;","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"            while ((saveString \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"                String[] saveStringArgs \u003d saveString.split(\" \\\\| \");","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"                String type \u003d saveStringArgs[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"                boolean isMarked \u003d saveStringArgs[1].equals(\"1\");","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"                String description \u003d saveStringArgs[2];","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"                Task task;","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"                switch (type) {","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"                case \"T\":","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"                    task \u003d new Todo(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"                case \"D\":","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"                    String by \u003d saveStringArgs[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"                    LocalDate localBy \u003d LocalDate.parse(by);","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"                    task \u003d new Deadline(description, localBy);","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"                case \"E\":","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"                    String from \u003d saveStringArgs[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"                    String to \u003d saveStringArgs[4];","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"                    LocalDate localFrom \u003d LocalDate.parse(from);","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"                    LocalDate localTo \u003d LocalDate.parse(to);","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"                    task \u003d new Event(description, localFrom, localTo);","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"                default:","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"                    throw new StorageLoadException(\"Invalid save data.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"                if (isMarked) {","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"            return tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"            throw new StorageLoadException(\"There was an IOException while loading the tasks.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"     * Saves the list of tasks to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"     * @param tasks The list of tasks to be saved to the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"     * @throws StorageSaveException If there was an issue saving the file.","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"    public void save(TaskList tasks) throws StorageSaveException {","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"            file.getParentFile().mkdir();","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"            fileWriter.append(tasks.getStorageString());","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"            throw new StorageSaveException(\"There was an IOException while saving the tasks.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"samuelim01":110}},{"path":"src/main/resources/view/DukeDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"\u003cfx:root alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"8.0\" style\u003d\"-fx-background-color: #FFFFFF;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"            \u003cimage\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"                \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"            \u003c/image\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"BOTTOM_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #e9f3fd; -fx-background-radius: 20;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"            \u003cFont name\u003d\"Source Code Pro\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":27}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-radius: 20;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-radius: 20;\" text\u003d\"Send\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"            \u003cFont name\u003d\"Source Code Pro\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":20}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"8.0\" style\u003d\"-fx-background-color: #FFFFFF;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"BOTTOM_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #0076ff; -fx-background-radius: 20;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"            \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"            \u003cFont name\u003d\"Source Code Pro\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"         \u003cimage\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"            \u003cImage url\u003d\"@../images/DaUser.png\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"         \u003c/image\u003e\u003c/ImageView\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelim01":26}},{"path":"src/test/java/duke/data/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.data.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"    public void removeTask_invalidIndex_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"        TaskList taskList \u003d new TaskList(","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"                new Todo(\"todo\"),","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"                new Deadline(\"deadline\", LocalDate.now()),","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"                new Event(\"event\", LocalDate.now(), LocalDate.now())","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"        );","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DukeException.class, () -\u003e taskList.remove(-1));","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DukeException.class, () -\u003e taskList.remove(4));","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    public void removeTask_validIndexIndex_taskNotInList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"        Task toRemove \u003d new Todo(\"toRemove\");","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        TaskList taskList \u003d new TaskList(","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"                new Todo(\"todo\"),","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"                new Deadline(\"deadline\", LocalDate.now()),","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"                new Event(\"event\", LocalDate.now(), LocalDate.now()),","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"                toRemove","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"        );","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"            assertEquals(toRemove, taskList.remove(4));;","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"        for (Task task : taskList.getAllTasks()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"            assertFalse(task.equals(toRemove));","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":48}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package duke.parser;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import duke.data.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    public void parse_emptyCommandWord_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    public void parse_invalidCommandWord_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DukeException.class, () -\u003e Parser.parse(\"abc\"));","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    public void parse_byeCommandWord_returnsExitCommand() {","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"            assertEquals(Parser.parse(\"bye\").getClass(), ExitCommand.class);","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"    public void parse_emptyTodoDescription_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"todo\");","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Todo Command was successfully constructed with empty description.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    public void parse_validTodo_returnsAddTodoCommand() {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"        Command command;","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"            command \u003d Parser.parse(\"todo desc abc\");","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        assertEquals(command.getClass(), AddTodoCommand.class);","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"    public void parse_emptyDeadlineDescription_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"deadline\");","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Deadline Command was successfully constructed with empty description.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    public void parse_emptyDeadlineBy_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"deadline desc\");","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Deadline Command was successfully constructed without /by field.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"    public void parse_invalidDeadlineBy_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"deadline desc /by invalid\");","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Deadline Command was successfully constructed with invalid /by field.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"    public void parse_validDeadline_returnsAddDeadlineCommand() {","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"        Command command;","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"            command \u003d Parser.parse(\"deadline desc /by 2023-01-01\");","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"        assertEquals(command.getClass(), AddDeadlineCommand.class);","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"    public void parse_emptyEventDescription_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"event\");","lastModifiedDate":"2023-09-12"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Event Command was successfully constructed with empty description.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"    public void parse_invalidEventFrom_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"deadline desc /from invalid /to 2023-01-01\");","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Event Command was successfully constructed with invalid /from field.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"    public void parse_invalidEventTo_throwsDukeException() {","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"            Parser.parse(\"deadline desc /from 2023-01-01 /to invalid\");","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"        fail(\"Add Event Command was successfully constructed with invalid /to field.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":134,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-08-28"},{"lineNumber":135,"author":{"gitId":"samuelim01"},"content":"    public void parse_validEvent_returnsAddEventCommand() {","lastModifiedDate":"2023-08-28"},{"lineNumber":136,"author":{"gitId":"samuelim01"},"content":"        Command command;","lastModifiedDate":"2023-08-28"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"            command \u003d Parser.parse(\"event desc /from 2023-01-01 /to 2024-01-01\");","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"            fail(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"            return;","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"        assertEquals(command.getClass(), AddEventCommand.class);","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"samuelim01":146}}]
