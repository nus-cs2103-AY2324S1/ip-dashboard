[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"3. After that, locate the `src/main/java/bob/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rayyan35p":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"    mainClass.set(\"bob.Launcher\")","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"checkstyle {","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":21,"-":41}},{"path":"src/main/java/bob/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import bob.data.exception.DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import bob.data.task.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import bob.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"import bob.parser.Parser.Command;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import bob.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"import bob.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":" * Represents the main chatbot logic.","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"    private Parser parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    private TaskList list;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"        Storage storage \u003d new Storage();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"        TaskList list \u003d new TaskList(storage.getFile());","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"        list.open();","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"        String input \u003d ui.getFirstInput();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"        while (true) {","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"                Command command \u003d parser.parse(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"                if (command \u003d\u003d Parser.Command.BYE) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"                    list.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"                    ui.end();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"                    break;","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"                } else if (command \u003d\u003d Parser.Command.LIST) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"                    ui.print(list.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"                } else if (command \u003d\u003d Parser.Command.FIND) {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"                    ui.print(list.find(input));","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"                } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"                    list.executeCommand(command, input);","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"                System.out.println(e);","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"            input \u003d ui.getInput();","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"     * Initialise a new Duke object with its class fields.","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"    public void init() {","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"        this.list \u003d new TaskList(storage.getFile());","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"        list.open();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"    public void end() {","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"        this.list.close();","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"rayyan35p"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"rayyan35p"},"content":"        this.init();","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"rayyan35p"},"content":"        String response;","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"rayyan35p"},"content":"            Command command \u003d parser.parse(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":70,"author":{"gitId":"rayyan35p"},"content":"            if (command \u003d\u003d Parser.Command.BYE) {","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"rayyan35p"},"content":"                response \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"rayyan35p"},"content":"            } else if (command \u003d\u003d Parser.Command.LIST) {","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"rayyan35p"},"content":"                response \u003d this.list.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"rayyan35p"},"content":"            } else if (command \u003d\u003d Parser.Command.FIND) {","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"rayyan35p"},"content":"                response \u003d this.list.find(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"rayyan35p"},"content":"                response \u003d this.list.executeCommand(command, input);","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"rayyan35p"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"rayyan35p"},"content":"            return \"That didn\u0027t work as expected.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"rayyan35p"},"content":"        this.end();","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"rayyan35p"},"content":"        return response;","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"rayyan35p":83,"-":3}},{"path":"src/main/java/bob/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":12}},{"path":"src/main/java/bob/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import bob.ui.MainWindow;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":32}},{"path":"src/main/java/bob/data/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.exception;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":" * Represents an error specific to Duke.","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new exception with the specified detail message.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"     * @param s The detail message.","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"        super(message);","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"rayyan35p":15}},{"path":"src/main/java/bob/data/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":" * Represents a DeadlineTask that is stored in the TaskList.","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    /** Date of the deadline. */","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    private LocalDateTime deadlineDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"    /** Format for the DateTimeFormatter to follow. */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    private DateTimeFormatter formatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new DeadlineTask with the specified task description and its deadline date.","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"     * @param deadlineDate The datetime of the deadline of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    public DeadlineTask(String description, String deadlineDate) {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"            // time should be in format dd/mm/yyyy HHMM(24h)","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"            this.formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"            this.deadlineDate \u003d LocalDateTime.parse(deadlineDate, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"There was an error parsing the date given.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"     * Returns the type of task as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"     * @return The type of task.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"    public String getType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"        return \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"     * Returns the formatted(dd/MM/yyyy HHmm) deadline date as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"     * @return Datetime of the deadline.","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"    public String getDateTime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"        return formatter.format(this.deadlineDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"     * Returns the string representation of the DeadlineTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"     * @return A string representation of this DeadlineTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"        DateTimeFormatter stringFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm a\");","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + stringFormatter.format(this.deadlineDate) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":64}},{"path":"src/main/java/bob/data/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import bob.data.exception.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":" * Represents an EventTask that is stored in the TaskList.","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"    /** The start date of the EventTask. */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    private LocalDateTime startDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"    /** The end date of the EventTask. */","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    /** The format for the DateTimeFormatter to follow. */","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    private DateTimeFormatter formatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"     * Constructs an EventTask with the specified description, start date, and end date.","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"     * @param startDate The start datetime of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"     * @param endDate The end datetime of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"     * @throws DukeException If the end datetime is before or the same as the start datetime.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"    public EventTask(String description, String startDate, String endDate) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"            this.formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"            // time should be in format dd/mm/yyyy HHMM(24h)","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"            LocalDateTime start \u003d LocalDateTime.parse(startDate, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"            LocalDateTime end \u003d LocalDateTime.parse(endDate, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"            if (start.isBefore(end)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"                this.startDate \u003d start;","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"                this.endDate \u003d end;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(\"Your start date is either the same or after your end date!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"There was an error parsing the date given.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"     * Returns the type of task as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"     * @return The type of task.","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"    public String getType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"        return \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"     * Returns the formatted(dd/MM/yyyy HHmm) deadline date as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"     * @return Datetime of the deadline.","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"    public String getDateTime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"        return formatter.format(this.startDate) + \",\" + formatter.format(this.endDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"rayyan35p"},"content":"     * Returns the string representation of the EventTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"rayyan35p"},"content":"     * @return A string representation of this EventTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"rayyan35p"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"rayyan35p"},"content":"        DateTimeFormatter stringFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm a\");","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"rayyan35p"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + stringFormatter.format(this.startDate)","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"rayyan35p"},"content":"                + \" to: \" + stringFormatter.format(this.endDate) + \")\";","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":78}},{"path":"src/main/java/bob/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":" * Represents the base logic for task classes.","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"    private String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    /** The completion of the task. */","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new Task based on the specified description.","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"     * Set isDone to true.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"    public void setDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"     * Set isDone to false.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"     * Returns the type of task as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"     * @return The type of task.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"    public abstract String getType();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"     * Returns the formatted(dd/MM/yyyy HHmm) deadline date as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"     * @return Datetime of the deadline.","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"    public abstract String getDateTime();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"     * Returns the string representation of the Task. Box will be \"[ ]\" if isDone is false and \"[X]\" if true.","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"     * @return A string representation of this Task.","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"            return \"[X] \" + description;","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"        return \"[ ] \" + description;","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"rayyan35p"},"content":"     * Returns a string representation of a task that is in the format needed for storing and reading from a file.","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"rayyan35p"},"content":"     * @return A string representation of a task in a file storing/reading format.","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"rayyan35p"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"rayyan35p"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"rayyan35p"},"content":"        String type \u003d this.getType();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"rayyan35p"},"content":"        String completed;","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"rayyan35p"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"rayyan35p"},"content":"            completed \u003d \"1\";","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"rayyan35p"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"rayyan35p"},"content":"            completed \u003d \"0\";","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"rayyan35p"},"content":"        String title \u003d this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"rayyan35p"},"content":"        String dateTime \u003d this.getDateTime();","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"rayyan35p"},"content":"        if (this.getDateTime().length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"rayyan35p"},"content":"            output.append(type + \",\" + completed + \",\" + title + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"rayyan35p"},"content":"        } else {","lastModifiedDate":"2023-09-15"},{"lineNumber":83,"author":{"gitId":"rayyan35p"},"content":"            output.append(type + \",\" + completed + \",\" + title + \",\" + dateTime + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"rayyan35p"},"content":"        return output.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":87}},{"path":"src/main/java/bob/data/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"import bob.data.exception.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"import bob.parser.Parser;","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":" * Represents a TaskList that contains the tasks and writes to a specified file.","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"public class TaskList {","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    /** The ArrayList for storing all the tasks. */","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"    /** The file for writing/reading the task to/from. */","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    private File file;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new TaskList.","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new TaskList based on the specified file.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"     * @param file The file to write to or read from.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    public TaskList(File file) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"     * Reads the contents of the file and stores it into the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    public void open() {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"                String storedTask \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"                String[] taskArray \u003d storedTask.split(\",\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"                Task task;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"                if (taskArray[0].startsWith(\"Todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"                    task \u003d new ToDoTask(taskArray[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"                } else if (taskArray[0].startsWith(\"Deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"                    task \u003d new DeadlineTask(taskArray[2], taskArray[3]);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"                } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"                    task \u003d new EventTask(taskArray[2], taskArray[3], taskArray[4]);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"                if ((taskArray[1]).equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"                    task.setDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"                this.tasks.add(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"            scanner.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"An error occurred when trying to find the file.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"rayyan35p"},"content":"            e.getMessage();","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"rayyan35p"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"rayyan35p"},"content":"     * Calls a specific method with the specified input based on the specified command.","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"rayyan35p"},"content":"     * @param command The command to be run.","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input string for the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"rayyan35p"},"content":"     * @throws DukeException If an EventTask is instantiated with invalid dates.","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"rayyan35p"},"content":"    public String executeCommand(Parser.Command command, String input) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"rayyan35p"},"content":"        switch (command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"rayyan35p"},"content":"        case MARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"rayyan35p"},"content":"            return this.setTaskComplete(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"rayyan35p"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"rayyan35p"},"content":"            return this.setTaskIncomplete(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"rayyan35p"},"content":"        case DELETE:","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"rayyan35p"},"content":"            return this.deleteTask(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"rayyan35p"},"content":"        case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"rayyan35p"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"rayyan35p"},"content":"        case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"rayyan35p"},"content":"            return this.addTask(command, input);","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"rayyan35p"},"content":"        default:","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"rayyan35p"},"content":"            return \"Unknown command\";","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":97,"author":{"gitId":"rayyan35p"},"content":"     * Adds a specified task to the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":98,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"rayyan35p"},"content":"     * @param task The task to be added to the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"rayyan35p"},"content":"    public void addTask(Task task, boolean isMuted) {","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"rayyan35p"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"rayyan35p"},"content":"        if (!isMuted) {","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(task);","lastModifiedDate":"2023-08-21"},{"lineNumber":106,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"Now you have \" + this.tasks.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"rayyan35p"},"content":"     * Adds a task to the ArrayList based on the specified command and input.","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":113,"author":{"gitId":"rayyan35p"},"content":"     * @param command The command that determines which subclass of Task will be instantiated.","lastModifiedDate":"2023-09-03"},{"lineNumber":114,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input needed for the instantiation of the Task.","lastModifiedDate":"2023-09-03"},{"lineNumber":115,"author":{"gitId":"rayyan35p"},"content":"     * @throws DukeException If the EventTask is instantiated with invalid dates.","lastModifiedDate":"2023-09-03"},{"lineNumber":116,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":117,"author":{"gitId":"rayyan35p"},"content":"    public String addTask(Parser.Command command, String input) throws DukeException {","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"rayyan35p"},"content":"        Task taskToAdd;","lastModifiedDate":"2023-09-03"},{"lineNumber":119,"author":{"gitId":"rayyan35p"},"content":"        String taskDescription;","lastModifiedDate":"2023-09-15"},{"lineNumber":120,"author":{"gitId":"rayyan35p"},"content":"        String[] taskDescriptionArray;","lastModifiedDate":"2023-09-15"},{"lineNumber":121,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":122,"author":{"gitId":"rayyan35p"},"content":"        switch (command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"rayyan35p"},"content":"        case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"rayyan35p"},"content":"            taskDescription \u003d input.substring(5);","lastModifiedDate":"2023-09-15"},{"lineNumber":125,"author":{"gitId":"rayyan35p"},"content":"            taskToAdd \u003d new ToDoTask(taskDescription);","lastModifiedDate":"2023-09-15"},{"lineNumber":126,"author":{"gitId":"rayyan35p"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"rayyan35p"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"rayyan35p"},"content":"            taskDescription \u003d input.substring(9);","lastModifiedDate":"2023-09-15"},{"lineNumber":129,"author":{"gitId":"rayyan35p"},"content":"            taskDescriptionArray \u003d input.split(\" /by \");","lastModifiedDate":"2023-09-15"},{"lineNumber":130,"author":{"gitId":"rayyan35p"},"content":"            taskToAdd \u003d new DeadlineTask(taskDescriptionArray[0], taskDescriptionArray[1]);","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"rayyan35p"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"rayyan35p"},"content":"        case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"rayyan35p"},"content":"            taskDescription \u003d input.substring(6);","lastModifiedDate":"2023-09-15"},{"lineNumber":134,"author":{"gitId":"rayyan35p"},"content":"            taskDescriptionArray \u003d input.split(\" /from \");","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"rayyan35p"},"content":"            String description \u003d taskDescriptionArray[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":136,"author":{"gitId":"rayyan35p"},"content":"            String[] dateArray \u003d taskDescriptionArray[1].split(\" /to \");","lastModifiedDate":"2023-09-15"},{"lineNumber":137,"author":{"gitId":"rayyan35p"},"content":"            taskToAdd \u003d new EventTask(description, dateArray[0], dateArray[1]);","lastModifiedDate":"2023-09-15"},{"lineNumber":138,"author":{"gitId":"rayyan35p"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"rayyan35p"},"content":"        default:","lastModifiedDate":"2023-09-03"},{"lineNumber":140,"author":{"gitId":"rayyan35p"},"content":"            throw new DukeException(\"No such command found.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":141,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"rayyan35p"},"content":"        this.tasks.add(taskToAdd);","lastModifiedDate":"2023-09-03"},{"lineNumber":143,"author":{"gitId":"rayyan35p"},"content":"        String output \u003d \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"rayyan35p"},"content":"                + taskToAdd + \"\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"rayyan35p"},"content":"                + \"Now you have \" + this.tasks.size() + \" task(s) in the list.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"rayyan35p"},"content":"        return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":150,"author":{"gitId":"rayyan35p"},"content":"     * Set the task at the specified index of the ArrayList to be completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":151,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":152,"author":{"gitId":"rayyan35p"},"content":"     * @param i Index of the task to set as complete.","lastModifiedDate":"2023-09-03"},{"lineNumber":153,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":154,"author":{"gitId":"rayyan35p"},"content":"    public void setTaskComplete(int i) {","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":156,"author":{"gitId":"rayyan35p"},"content":"        task.setDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":157,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":158,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":160,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":161,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":162,"author":{"gitId":"rayyan35p"},"content":"     * Set the task at the index, based on the specified input string, of the ArrayList to be completed.","lastModifiedDate":"2023-09-03"},{"lineNumber":163,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":164,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input string containing the index of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":165,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":166,"author":{"gitId":"rayyan35p"},"content":"    public String setTaskComplete(String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"rayyan35p"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"rayyan35p"},"content":"        int taskNo \u003d Integer.parseInt(inputSplit[1]) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(taskNo);","lastModifiedDate":"2023-09-03"},{"lineNumber":170,"author":{"gitId":"rayyan35p"},"content":"        task.setDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"rayyan35p"},"content":"        String output \u003d \"OK, I\u0027ve marked this task as done:\\n\" + task;","lastModifiedDate":"2023-09-09"},{"lineNumber":172,"author":{"gitId":"rayyan35p"},"content":"        return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":173,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":176,"author":{"gitId":"rayyan35p"},"content":"     * Set the task at the specified index of the ArrayList to be incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":177,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":178,"author":{"gitId":"rayyan35p"},"content":"     * @param i Index of the task to set as incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":179,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":180,"author":{"gitId":"rayyan35p"},"content":"    public void setTaskIncomplete(int i) {","lastModifiedDate":"2023-08-21"},{"lineNumber":181,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":182,"author":{"gitId":"rayyan35p"},"content":"        task.setNotDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":183,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":184,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-21"},{"lineNumber":185,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":186,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":187,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":188,"author":{"gitId":"rayyan35p"},"content":"     * Set the task at the index, based on the specified input string, of the ArrayList to be incomplete.","lastModifiedDate":"2023-09-03"},{"lineNumber":189,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":190,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input string containing the index of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":191,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":192,"author":{"gitId":"rayyan35p"},"content":"    public String setTaskIncomplete(String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":193,"author":{"gitId":"rayyan35p"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"rayyan35p"},"content":"        int taskNo \u003d Integer.parseInt(inputSplit[1]) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(taskNo);","lastModifiedDate":"2023-09-03"},{"lineNumber":196,"author":{"gitId":"rayyan35p"},"content":"        task.setNotDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"rayyan35p"},"content":"        String output \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\" + task;","lastModifiedDate":"2023-09-09"},{"lineNumber":198,"author":{"gitId":"rayyan35p"},"content":"        return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":199,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":202,"author":{"gitId":"rayyan35p"},"content":"     * Returns the task at the specified index of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":203,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":204,"author":{"gitId":"rayyan35p"},"content":"     * @param i The index of the ArrayList to retrieve the task from.","lastModifiedDate":"2023-09-03"},{"lineNumber":205,"author":{"gitId":"rayyan35p"},"content":"     * @return A Task that is stored at the specified index of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":206,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":207,"author":{"gitId":"rayyan35p"},"content":"    public Task getTask(int i) {","lastModifiedDate":"2023-08-21"},{"lineNumber":208,"author":{"gitId":"rayyan35p"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":209,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":210,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":211,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":212,"author":{"gitId":"rayyan35p"},"content":"     * Removes the task at the specified index of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":213,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":214,"author":{"gitId":"rayyan35p"},"content":"     * @param i The index of the ArrayList containing the task to be removed.","lastModifiedDate":"2023-09-03"},{"lineNumber":215,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":216,"author":{"gitId":"rayyan35p"},"content":"    public void deleteTask(int i) {","lastModifiedDate":"2023-08-24"},{"lineNumber":217,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":218,"author":{"gitId":"rayyan35p"},"content":"        this.tasks.remove(i);","lastModifiedDate":"2023-09-03"},{"lineNumber":219,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":220,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":221,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"Now you have \" + this.tasks.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":222,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":223,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":224,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":225,"author":{"gitId":"rayyan35p"},"content":"     * Removes the task at an index, based on the specified input, of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":226,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":227,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input string containing the index of the task to be removed.","lastModifiedDate":"2023-09-03"},{"lineNumber":228,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":229,"author":{"gitId":"rayyan35p"},"content":"    public String deleteTask(String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":230,"author":{"gitId":"rayyan35p"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"rayyan35p"},"content":"        int taskNo \u003d Integer.parseInt(inputSplit[1]) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"rayyan35p"},"content":"        Task task \u003d this.tasks.get(taskNo);","lastModifiedDate":"2023-09-03"},{"lineNumber":233,"author":{"gitId":"rayyan35p"},"content":"        this.tasks.remove(taskNo);","lastModifiedDate":"2023-09-03"},{"lineNumber":234,"author":{"gitId":"rayyan35p"},"content":"        String output \u003d \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":235,"author":{"gitId":"rayyan35p"},"content":"                + task + \"\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":236,"author":{"gitId":"rayyan35p"},"content":"                + \"Now you have \" + this.tasks.size() + \" task(s) in the list.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":237,"author":{"gitId":"rayyan35p"},"content":"        return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":238,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":241,"author":{"gitId":"rayyan35p"},"content":"     * Prints all the tasks contained in the ArrayList in an indexed manner.","lastModifiedDate":"2023-09-03"},{"lineNumber":242,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":243,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":244,"author":{"gitId":"rayyan35p"},"content":"    public String toString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":245,"author":{"gitId":"rayyan35p"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-03"},{"lineNumber":246,"author":{"gitId":"rayyan35p"},"content":"            return \"\";","lastModifiedDate":"2023-09-03"},{"lineNumber":247,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":248,"author":{"gitId":"rayyan35p"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-03"},{"lineNumber":249,"author":{"gitId":"rayyan35p"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":250,"author":{"gitId":"rayyan35p"},"content":"            stringBuilder.append(i + 1 + \".\" + tasks.get(i) + \"\\n\");","lastModifiedDate":"2023-09-03"},{"lineNumber":251,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":252,"author":{"gitId":"rayyan35p"},"content":"        stringBuilder.deleteCharAt(stringBuilder.length() - 1);","lastModifiedDate":"2023-09-03"},{"lineNumber":253,"author":{"gitId":"rayyan35p"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2023-09-03"},{"lineNumber":254,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":255,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":257,"author":{"gitId":"rayyan35p"},"content":"     * Writes all the tasks in the ArrayList to the file.","lastModifiedDate":"2023-09-03"},{"lineNumber":258,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":259,"author":{"gitId":"rayyan35p"},"content":"    public void close() {","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":261,"author":{"gitId":"rayyan35p"},"content":"            FileWriter writer \u003d new FileWriter(this.file);","lastModifiedDate":"2023-08-30"},{"lineNumber":262,"author":{"gitId":"rayyan35p"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":263,"author":{"gitId":"rayyan35p"},"content":"                writer.write(task.toFileString());","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"rayyan35p"},"content":"            writer.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":266,"author":{"gitId":"rayyan35p"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":267,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"An error occurred while saving your tasks.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":269,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":271,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":272,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":273,"author":{"gitId":"rayyan35p"},"content":"     * Returns the size of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":274,"author":{"gitId":"rayyan35p"},"content":"     * @return An integer representing the size of the ArrayList.","lastModifiedDate":"2023-09-03"},{"lineNumber":275,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":276,"author":{"gitId":"rayyan35p"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-03"},{"lineNumber":277,"author":{"gitId":"rayyan35p"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-03"},{"lineNumber":278,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":279,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":280,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":281,"author":{"gitId":"rayyan35p"},"content":"     * Returns the String representation of all the tasks that are similar to the specified input in an indexed manner.","lastModifiedDate":"2023-09-03"},{"lineNumber":282,"author":{"gitId":"rayyan35p"},"content":"     * @param input The String to be compared with other tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":283,"author":{"gitId":"rayyan35p"},"content":"     * @return The String representation of matching tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":284,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":285,"author":{"gitId":"rayyan35p"},"content":"    public String find(String input) {","lastModifiedDate":"2023-09-03"},{"lineNumber":286,"author":{"gitId":"rayyan35p"},"content":"        String toFind \u003d input.substring(5);","lastModifiedDate":"2023-09-03"},{"lineNumber":287,"author":{"gitId":"rayyan35p"},"content":"        TaskList tasksFound \u003d new TaskList();","lastModifiedDate":"2023-09-03"},{"lineNumber":288,"author":{"gitId":"rayyan35p"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":289,"author":{"gitId":"rayyan35p"},"content":"            if (task.toString().contains(toFind)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":290,"author":{"gitId":"rayyan35p"},"content":"                tasksFound.addTask(task, true);","lastModifiedDate":"2023-09-03"},{"lineNumber":291,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":292,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":293,"author":{"gitId":"rayyan35p"},"content":"        if (tasksFound.getSize() \u003d\u003d 0) {","lastModifiedDate":"2023-09-03"},{"lineNumber":294,"author":{"gitId":"rayyan35p"},"content":"            return \"No tasks found matching that description.\";","lastModifiedDate":"2023-09-03"},{"lineNumber":295,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":296,"author":{"gitId":"rayyan35p"},"content":"        return tasksFound.toString();","lastModifiedDate":"2023-09-03"},{"lineNumber":297,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":298,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":298}},{"path":"src/main/java/bob/data/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":" * Represent a ToDoTask that is contained in the TaskList.","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new ToDoTask based on the specified description.","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    public ToDoTask(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"     * Returns the type of task as a String.","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"     * @return The type of task.","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    public String getType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"        return \"Todo\";","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"     * Returns a blank String.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"     * @return A blank String.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"    public String getDateTime() {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"        return \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"     * Returns the string representation of the ToDoTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"     * @return A string representation of this ToDoTask.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":45}},{"path":"src/main/java/bob/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import bob.data.exception.DukeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":" * Represents a Parser class that parses the input commands given by the user.","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    private static final String INPUT_TASK_NUMBER \u003d \"Input the task number\";","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"    private static final String INVALID_COMMAND \u003d \"Invalid command\";","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"     * Commands to be run based on the user\u0027s input.","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"    public enum Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"        BYE,","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"        LIST,","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"        MARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"        UNMARK,","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"        DELETE,","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"        FIND,","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"        TODO,","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"        DEADLINE,","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"        EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"     * Returns a command to be executed given a specified input provided by the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"     * @param input The input of the user.","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"     * @return A command to be exectued which is based on the user input.","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"     * @throws DukeException If the first word of the input is not a valid command.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"    public Command parse(String input) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"        Command command \u003d this.getCommand(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"        switch(command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"        case BYE:","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"            return Command.BYE;","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"        case LIST:","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"            return Command.LIST;","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"        case MARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"            if (inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INPUT_TASK_NUMBER);","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"            } else if (inputSplit.length \u003e 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"                return Command.MARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"            if (inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INPUT_TASK_NUMBER);","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"            } else if (inputSplit.length \u003e 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2023-09-15"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"                return Command.UNMARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"        case DELETE:","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"            if (inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INPUT_TASK_NUMBER);","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"            } else if (inputSplit.length \u003e 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(INVALID_COMMAND);","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"                return Command.DELETE;","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"rayyan35p"},"content":"        case FIND:","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"rayyan35p"},"content":"            if (input.length() \u003d\u003d 4) {","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(\"Input something to search for.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"rayyan35p"},"content":"            return Command.FIND;","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"rayyan35p"},"content":"        case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"rayyan35p"},"content":"            if (input.length() \u003d\u003d 4 || inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(\"Description of a todo cannot be empty\");","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"rayyan35p"},"content":"            return Command.TODO;","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"rayyan35p"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"rayyan35p"},"content":"            if (input.length() \u003d\u003d 8 || inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(\"Description of a deadline cannot be empty\");","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"rayyan35p"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"rayyan35p"},"content":"        case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"rayyan35p"},"content":"            if (input.length() \u003d\u003d 5 || inputSplit.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"rayyan35p"},"content":"                throw new DukeException(\"Description of an event cannot be empty\");","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"rayyan35p"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"rayyan35p"},"content":"        default:","lastModifiedDate":"2023-09-15"},{"lineNumber":86,"author":{"gitId":"rayyan35p"},"content":"            throw new DukeException(\"No such command.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":89,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"rayyan35p"},"content":"    private Command getCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"rayyan35p"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"rayyan35p"},"content":"            return Command.BYE;","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"rayyan35p"},"content":"        if (input.equals(\"list\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"rayyan35p"},"content":"            return Command.LIST;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"rayyan35p"},"content":"            return Command.MARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"rayyan35p"},"content":"            return Command.UNMARK;","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"rayyan35p"},"content":"            return Command.DELETE;","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"rayyan35p"},"content":"            return Command.FIND;","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"rayyan35p"},"content":"            return Command.TODO;","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"rayyan35p"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"rayyan35p"},"content":"        if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"rayyan35p"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"rayyan35p"},"content":"        throw new DukeException(\"I don\u0027t understand your command.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"rayyan35p":120}},{"path":"src/main/java/bob/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":" * Represents the logic for reading/writing the task data to the file.","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"    /** The file for reading/writing the tasks from/to */","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    private File file;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"     * Constructs the storage which will create a new directory called \"data\" and a new file called \"duke.txt\" in data","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"     * if not already created.","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    public Storage() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"            File dataDirectory \u003d new File(\"./data\");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"            dataDirectory.mkdir();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"            File taskFile \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"            if (taskFile.createNewFile()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"                System.out.println(\"Created new file to store your tasks!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"                System.out.println(\"Existing task file exists. \");","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"            this.file \u003d taskFile;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(\"Unable to create file.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"     * Returns the file that was created during the instantiation of this Storage object.","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"     * @return The file where the tasks are being read from or written to.","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"    public File getFile() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"        return this.file;","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"rayyan35p":42}},{"path":"src/main/java/bob/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    private Circle circle;","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"        this.circle.setFill(new ImagePattern(img));","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":61}},{"path":"src/main/java/bob/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import bob.Duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bob.png\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"     * Creates the dialogContainer with a starting message.","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"                DialogBox.getDukeDialog(\"Hello, my name is Bob! What can I do for you?\", dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"        boolean isAdded \u003d dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"rayyan35p"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"rayyan35p"},"content":"            Platform.exit();","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":63}},{"path":"src/main/java/bob/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":" * Represents the logic for the interaction between the chatbot and the user.","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    /** The scanner for reading the user\u0027s input.*/","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"     * Constructs a new Ui with a scanner.","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"    public Ui() {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"     * Returns a String that is based on the user\u0027s input.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"     * @return A String representation of the user\u0027s input.","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    public String getInput() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"        return input;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"        return \"Bob heard: \" + input;","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"     * Prints welcome statements then returns a String that is based on the user\u0027s input.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"     * @return A String representation of the user\u0027s input.","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"    public String getFirstInput() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"Hello! I\u0027m Bob\");","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"        return this.getInput();","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"     * Prints the specified input.","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"     * @param input The String to be printed.","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"    public void print(String input) {","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(input);","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"     * Prints a farewell message to indicate the end of the program.","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"rayyan35p"},"content":"    public void end() {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"rayyan35p"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"rayyan35p":58}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" cache\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"            \u003cInsets right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"            \u003cFont name\u003d\"Malgun Gothic\" size\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"      \u003cStackPane prefHeight\u003d\"43.0\" prefWidth\u003d\"112.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"            \u003cCircle fx:id\u003d\"circle\" radius\u003d\"50.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"      \u003c/StackPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"   \u003copaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"      \u003cInsets /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"   \u003c/opaqueInsets\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":30}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"bob.ui.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"rayyan35p":18}},{"path":"src/test/java/bob/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"rayyan35p":12}},{"path":"src/test/java/bob/data/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"        DeadlineTask testTask \u003d new DeadlineTask(\"test\", \"01/01/2023 1200\");","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"[D][ ] test (by: 01 Jan 2023 12:00 PM)\", testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"        testTask.setDone();","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"[D][X] test (by: 01 Jan 2023 12:00 PM)\", testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    public void getType_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"Deadline\", new DeadlineTask(\"test\", \"01/01/2023 1200\").getType());","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"    public void getDateTime_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"01/01/2023 1200\",","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"                new DeadlineTask(\"test\", \"01/01/2023 1200\").getDateTime());","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"rayyan35p":25}},{"path":"src/test/java/bob/data/task/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"import bob.data.exception.DukeException;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"public class EventTaskTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"            EventTask testTask \u003d new EventTask(\"test\",","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"                    \"01/01/2023 1200\", \"02/01/2023 1200\");","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"            assertEquals(\"[E][ ] test (from: 01 Jan 2023 12:00 PM to: 02 Jan 2023 12:00 PM)\",","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"                    testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"            testTask.setDone();","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"            assertEquals(\"[E][X] test (from: 01 Jan 2023 12:00 PM to: 02 Jan 2023 12:00 PM)\",","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"                    testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"rayyan35p"},"content":"    public void getType_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"rayyan35p"},"content":"            assertEquals(\"Event\", new EventTask(\"test\",","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"rayyan35p"},"content":"                    \"01/01/2023 1200\", \"02/01/2023 1200\").getType());","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"rayyan35p"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"rayyan35p"},"content":"    public void getDateTime_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"rayyan35p"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"rayyan35p"},"content":"            assertEquals(\"01/01/2023 1200,02/01/2023 1200\", new EventTask(\"test\",","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"rayyan35p"},"content":"                    \"01/01/2023 1200\", \"02/01/2023 1200\").getDateTime());","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"rayyan35p"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"rayyan35p"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"rayyan35p"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"rayyan35p"},"content":"    public void invalidToDate() {","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"rayyan35p"},"content":"        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e new EventTask(\"test\",","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"rayyan35p"},"content":"                \"02/01/2023 1200\", \"01/01/2023 1200\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"rayyan35p"},"content":"                \"Expected constructor to throw, but it didn\u0027t\");","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"rayyan35p"},"content":"        assertTrue(thrown.getMessage().contains(\"Your start date is either the same or after your end date!\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"rayyan35p":54}},{"path":"src/test/java/bob/data/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"      //Need to test this?","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"//    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"//    public void open_invalidFile_exceptionThrown() {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"//        FileNotFoundException thrown \u003d assertThrows(FileNotFoundException.class,","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"//                () -\u003e new TaskList(new File(\"./data/duke.txt\")).open(),","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"//                \"Expected open to throw but it didn\u0027t\");","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"//        assertTrue((thrown.getMessage().contains(\"\")));","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"//    }","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"//    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"//    public void testReadFromFile() {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"//        TaskList testTaskList \u003d new TaskList(new File(\"/testFile.txt\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"//    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"rayyan35p":17}},{"path":"src/test/java/bob/data/task/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"package bob.data.task;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"public class ToDoTaskTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"        ToDoTask testTask \u003d new ToDoTask(\"test\");","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"[T][ ] test\", testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"        testTask.setDone();","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"[T][X] test\", testTask.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"rayyan35p"},"content":"    public void getType_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"Todo\", new ToDoTask(\"test\").getType());","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"rayyan35p"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"rayyan35p"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"rayyan35p"},"content":"    public void getDateTime_emptyInput_correctString() {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"rayyan35p"},"content":"        assertEquals(\"\", new ToDoTask(\"test\").getDateTime());","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"rayyan35p"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"rayyan35p"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"rayyan35p":24}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"Todo,1,read book","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"Deadline,0,return book,06/06/2023 1200","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"Event,0,project meeting,06/08/2023 1400,06/08/2023 1600","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"Todo,1,join sports club","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"Todo,0,borrow book","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"rayyan35p":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rayyan35p"},"content":"todo read book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"rayyan35p"},"content":"deadline return book /by 06/06/2023 1200","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"rayyan35p"},"content":"event project meeting /from 06/08/2023 1400 /to 06/08/2023 1600","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"rayyan35p"},"content":"todo join sports club","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"rayyan35p"},"content":"todo borrow book","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"rayyan35p"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"rayyan35p"},"content":"mark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"rayyan35p"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"rayyan35p"},"content":"unmark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"rayyan35p"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"rayyan35p"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"rayyan35p":11}}]
