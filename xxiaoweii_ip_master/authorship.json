[{"path":"Level7File/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"0","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"0","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":2}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xxiaoweii":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xxiaoweii":1,"-":41}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.IncompleteMessageException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.DetailsUnknownException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.InvalidTaskNumberException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"public class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Command class","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"     * @param tasklist list of task created when the program runs","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"     * @param ui the Ui object created when the program runs","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    public Command(TaskList tasklist, Ui ui) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList \u003d tasklist;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     * method to handle the list command from user. Calls the listOutTask() method from TaskList","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"    public void handleList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList.listOutTasks();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"     * method to handle the delete command from user.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"     * Check if the user entered the command in the correct format. Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. delete entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when user did not specify what task to delete","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"     * @throws InvalidTaskNumberException when user specify a task number that does not exist","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"    public void handleDelete(String userInput, String keyword) throws IncompleteMessageException, InvalidTaskNumberException {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"        if (userInput.length() \u003d\u003d keyword.length()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"            throw new IncompleteMessageException(\"Delete\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"        String getIndex \u003d userInput.substring(keyword.length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"        int taskIndex \u003d Integer.parseInt(getIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"        if (taskIndex \u003e this.taskList.numOfTasks()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList.deleteTask(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"     * method that handles the mark done command from user.","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"     * Check if the user entered the command in the correct format. Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. mark entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when user did not specify what task to mark done","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"     * @throws InvalidTaskNumberException when user specify a task number that does not exist","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"    public void handleDone(String userInput, String keyword) throws IncompleteMessageException, InvalidTaskNumberException {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"        if (userInput.length() \u003d\u003d keyword.length()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"            throw new IncompleteMessageException(\"Done\");","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"        String getIndex \u003d userInput.substring(keyword.length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"        int taskIndex \u003d Integer.parseInt(getIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"xxiaoweii"},"content":"        if (taskIndex \u003e this.taskList.numOfTasks()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"xxiaoweii"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList.markAsDone(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"xxiaoweii"},"content":"     * method that handles the unmark done command from user.","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"xxiaoweii"},"content":"     * Check if the user entered the command in the correct format. Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":81,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. unmark entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when user did not specify what task to mark undone","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"xxiaoweii"},"content":"     * @throws InvalidTaskNumberException when user specify a task number that does not exist","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":87,"author":{"gitId":"xxiaoweii"},"content":"    public void handleUndone(String userInput, String keyword) throws IncompleteMessageException, InvalidTaskNumberException {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"xxiaoweii"},"content":"        if (userInput.length() \u003d\u003d keyword.length()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"xxiaoweii"},"content":"            throw new IncompleteMessageException(\"Undone\");","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"xxiaoweii"},"content":"        String getIndex \u003d userInput.substring(keyword.length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"xxiaoweii"},"content":"        int taskIndex \u003d Integer.parseInt(getIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"xxiaoweii"},"content":"        if (taskIndex \u003e this.taskList.numOfTasks()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"xxiaoweii"},"content":"            throw new InvalidTaskNumberException();","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList.markAsUndone(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"xxiaoweii"},"content":"     * method that handles the addition of deadline task.","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"xxiaoweii"},"content":"     * check if the necessary details such as the deadline are entered and whether they are in the right format.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"xxiaoweii"},"content":"     * Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. deadline entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when the user only enter the keyword deadline with no other details","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"xxiaoweii"},"content":"     * @throws DetailsUnknownException when user did not enter the deadline of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"xxiaoweii"},"content":"    public void handleDeadline(String userInput, String keyword) throws IncompleteMessageException, DetailsUnknownException {","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"xxiaoweii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"xxiaoweii"},"content":"            String[] inputToArr \u003d Parser.splitInput(userInput); //return [keyword, task /by time]","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"xxiaoweii"},"content":"            if (userInput.length() \u003d\u003d keyword.length()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"xxiaoweii"},"content":"                throw new IncompleteMessageException(\"D\");","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"xxiaoweii"},"content":"            String[] taskArr \u003d Parser.splitDeadlineDetails(inputToArr[1]); // return [task, /by time]","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"xxiaoweii"},"content":"            String taskDescription \u003d taskArr[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"xxiaoweii"},"content":"            String taskTime \u003d taskArr[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"xxiaoweii"},"content":"            Deadline deadline \u003d new Deadline(taskDescription, taskTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"xxiaoweii"},"content":"            this.taskList.addTask(deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"xxiaoweii"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"xxiaoweii"},"content":"            throw new DetailsUnknownException();","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"xxiaoweii"},"content":"        } catch (IncompleteMessageException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"xxiaoweii"},"content":"            e.getMessage();","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":135,"author":{"gitId":"xxiaoweii"},"content":"     * method that handles the addition of event task.","lastModifiedDate":"2023-09-03"},{"lineNumber":136,"author":{"gitId":"xxiaoweii"},"content":"     * check if the necessary details such as the start and end timing are entered and whether they are in the right format.","lastModifiedDate":"2023-09-03"},{"lineNumber":137,"author":{"gitId":"xxiaoweii"},"content":"     * Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":138,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":139,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":140,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. event entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":141,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when the user only enter the keyword deadline with no other details","lastModifiedDate":"2023-09-03"},{"lineNumber":142,"author":{"gitId":"xxiaoweii"},"content":"     * @throws DetailsUnknownException when user did not enter the start or end timing of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":143,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":144,"author":{"gitId":"xxiaoweii"},"content":"    public void handleEvent(String userInput, String keyword) throws IncompleteMessageException, DetailsUnknownException {","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"xxiaoweii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"xxiaoweii"},"content":"            String[] inputToArr \u003d Parser.splitInput(userInput); // return [kw, task /from time /to time]","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"xxiaoweii"},"content":"            if (userInput.length() \u003d\u003d keyword.length()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"xxiaoweii"},"content":"                throw new IncompleteMessageException(\"E\");","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"xxiaoweii"},"content":"            String[] taskArr \u003d Parser.splitEventDetails(inputToArr[1]); // return [task, /from time /to time]","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"xxiaoweii"},"content":"            String taskDescription \u003d taskArr[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"xxiaoweii"},"content":"            String taskTime \u003d taskArr[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"xxiaoweii"},"content":"            Event event \u003d new Event(taskDescription, taskTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"xxiaoweii"},"content":"            this.taskList.addTask(event);","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"xxiaoweii"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"xxiaoweii"},"content":"            throw new DetailsUnknownException();","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"xxiaoweii"},"content":"        } catch (IncompleteMessageException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"xxiaoweii"},"content":"            e.getMessage();","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":167,"author":{"gitId":"xxiaoweii"},"content":"     * method that handles the addition of todo task.","lastModifiedDate":"2023-09-03"},{"lineNumber":168,"author":{"gitId":"xxiaoweii"},"content":"     * check if the necessary details such as the task details and whether they are in the right format.","lastModifiedDate":"2023-09-03"},{"lineNumber":169,"author":{"gitId":"xxiaoweii"},"content":"     * Else throw the relevant exception.","lastModifiedDate":"2023-09-03"},{"lineNumber":170,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":171,"author":{"gitId":"xxiaoweii"},"content":"     * @param userInput the input entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":172,"author":{"gitId":"xxiaoweii"},"content":"     * @param keyword the key command word i.e. todo entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":173,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IncompleteMessageException when the user only enter the keyword todo with no other details","lastModifiedDate":"2023-09-03"},{"lineNumber":174,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":175,"author":{"gitId":"xxiaoweii"},"content":"    public void handleTodo(String userInput, String keyword) throws IncompleteMessageException {","lastModifiedDate":"2023-09-03"},{"lineNumber":176,"author":{"gitId":"xxiaoweii"},"content":"        if (userInput.length() \u003c\u003d keyword.length() + 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"xxiaoweii"},"content":"            throw new IncompleteMessageException(\"duke.ToDo\");","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":179,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"xxiaoweii"},"content":"        String taskDescription \u003d userInput.substring(keyword.length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"xxiaoweii"},"content":"        ToDo task \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"xxiaoweii"},"content":"        this.taskList.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":185,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":185}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"    private LocalDateTime time;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Deadline class","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task description","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     * @param deadlineDetails the deadline of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"    public Deadline(String task, String deadlineDetails) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"        super(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"        LocalDateTime dueDateTime \u003d Parser.formatDate(deadlineDetails);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"        this.time \u003d dueDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"     * A getter to get the deadline of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     * @return the deadline of this task","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"    public LocalDateTime getTime() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"        return this.time;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"        String timeToString \u003d Parser.dateToString(this.time);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + timeToString + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"xxiaoweii":35}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.UnknownCommandException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.ChattyException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.DetailsUnknownException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"    private Messages messages;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"    private TaskList tasklist;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"     * An empty constructor for Duke","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    public Duke() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"        this.messages \u003d new Messages();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"        this.tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Duke. Takes in the path of the file as argument. Load the file if the file exists.","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"     * @param filePath the path to the file","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"            tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"            storage.loadTask();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"            tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"        } catch (DetailsUnknownException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"            e.getMessage();","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"     * invoke the startChatting() method for the chatbot to start running","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"     * @param args","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"        new Duke(\"Level7File/tasks.txt\").startChatting();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"     * Run the chatbot depending on what command the user entered","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"    public void startChatting() {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"        Messages.Greet();","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"        String exitC \u003d \"bye\";","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"        String listC \u003d \"list\";","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"        String deleteC \u003d \"delete\";","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"        String doneC \u003d \"mark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"        String undoneC \u003d \"unmark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"        String deadlineC \u003d \"deadline\";","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"        String eventC \u003d \"event\";","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"        String todoC \u003d \"todo\";","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"xxiaoweii"},"content":"        String userInput;","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"xxiaoweii"},"content":"        do {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"xxiaoweii"},"content":"            userInput \u003d ui.getInput();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"xxiaoweii"},"content":"            Command command \u003d new Command(tasklist, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"xxiaoweii"},"content":"            if (!userInput.equalsIgnoreCase(exitC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"xxiaoweii"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"xxiaoweii"},"content":"                    if (userInput.equalsIgnoreCase(listC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleList();","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(deleteC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleDelete(userInput, deleteC);","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(doneC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleDone(userInput, doneC);","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(undoneC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleUndone(userInput, undoneC);","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(deadlineC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleDeadline(userInput, deadlineC);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(eventC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleEvent(userInput, eventC);","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"xxiaoweii"},"content":"                    } else if (userInput.startsWith(todoC)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"xxiaoweii"},"content":"                        command.handleTodo(userInput, todoC);","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"xxiaoweii"},"content":"                    } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"xxiaoweii"},"content":"                        throw new UnknownCommandException();","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"xxiaoweii"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"xxiaoweii"},"content":"                    storage.saveTaskToFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"xxiaoweii"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"xxiaoweii"},"content":"                    System.out.println(\"Error parsing date and time: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"xxiaoweii"},"content":"                } catch (DetailsUnknownException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"xxiaoweii"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"xxiaoweii"},"content":"                } catch (UnknownCommandException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"xxiaoweii"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"xxiaoweii"},"content":"                } catch (ChattyException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"xxiaoweii"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"xxiaoweii"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"xxiaoweii"},"content":"        } while (!userInput.equalsIgnoreCase(exitC));","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"xxiaoweii"},"content":"        this.messages.Exit();","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"xxiaoweii":105,"-":4}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.DetailsUnknownException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for the Event class.","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     * Extract the start and end details of the event task","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task description of the task entered by user","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"     * @param dateTimeDetails the details of the event task such as its start and end timing","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"     * @throws DetailsUnknownException throws details unknown exception if the start or end details of the event task is missing","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"    public Event(String task, String dateTimeDetails) throws DetailsUnknownException {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"        super(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"            String[] timeArr \u003d Parser.splitEventDateTime(dateTimeDetails); // return [start time, end time]","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"            this.startDateTime \u003d Parser.formatDate(timeArr[0]);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"            this.endDateTime \u003d Parser.formatDate(timeArr[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"            throw new DetailsUnknownException();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"     * A getter to get the start details of this event task","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"     * @return the start details of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"        return this.startDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"     * A getter to get the end details of this event task","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"     * @return the end details of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"        return this.endDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"        String formattedStart \u003d Parser.dateToString(startDateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"        String formattedEnd \u003d Parser.dateToString(endDateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formattedStart + \" to: \" + formattedEnd + \") \";","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"xxiaoweii":55}},{"path":"src/main/java/duke/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class Messages {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for the Message class","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"     * Print the greeting message and create a new Ui object to allow for user input","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    public Messages() {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"        Messages.Greet();","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"     * Print the greeting message when called","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    public static final void Greet() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Hello! I\u0027m Chatty!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"What can I do for you today? \");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     * Print the exit message when called","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"    public static final void Exit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Bye bye! Hope to see you again soon\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xxiaoweii":28}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"     * Parses the input date from String to LocalDateTime format","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"     * @param dateTimeString the date and time details in String","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * @return the date and time in LocalDateTime format","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"    public static LocalDateTime formatDate(String dateTimeString) {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"        LocalDateTime parseDate \u003d LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"        return parseDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"     * Parses the input date from LocalDateTime format to String","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     * @param dateTime the date and time details in LocalDateTime format","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     * @return the date and time in String format","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"    public static String dateToString(LocalDateTime dateTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\");","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"        String formattedDate \u003d dateTime.format(outputFormatter);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"        return formattedDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"     * Split the user input into 2 parts, the keyword and the other details, including task description","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"     * @param oriInput the original input by user","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"     * @return a String array with the keyword at index 0 and the other details at index 1","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"    public static String[] splitInput(String oriInput) {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"        // split the input into at most 2 parts to get the task type and the task details","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"        return oriInput.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"     * split the input into 2 parts, the task description and the deadline of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"     * @param oriInput the input which includes the task description and the deadline of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"     * @return a String[] with the task description at index 0 and deadline at index 1","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"    public static String[] splitDeadlineDetails(String oriInput) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"        // split the input to get the deadline task description and deadline time","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"        return oriInput.split(\"/by \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"     * split the input into 2 parts, the event task description and the start and end details of the event","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"     * @param oriInput the input which includes the task description and the start and end details","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"     * @return a String[] with the event task description at index 0 and the start and end details at index 1","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"    public static String[] splitEventDetails(String oriInput) {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"        // split the input to get the event task description and the date time details","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"        return oriInput.split(\"/from \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"     * split the start and end details into 2 parts","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"     * @param input the input which is a String with the start and end details of the event task","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"     * @return a String[] with the start detail at index 0 and the end detail at index 1","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"xxiaoweii"},"content":"    public static String[] splitEventDateTime(String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"xxiaoweii"},"content":"        // split the input again to get the start time of the event and the end time of the event","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"xxiaoweii"},"content":"        return input.split(\" /to \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":75}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import duke.exception.DetailsUnknownException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"import java.io.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    private String filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Storage class","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"     * @param filePath the path to the storage file","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"     * Saves all the tasks added into the storage file","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IOException if the storage file cannot be found","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"    public void saveTaskToFile() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.filePath));","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"            StringBuilder tasks \u003d new StringBuilder();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"            for (Task task: TaskList.getList()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"                tasks.append(task.getStatus()).append(\" | \").append(task.getTaskType(task)).append(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"            writer.write(tasks.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"            writer.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"            System.out.println(\"An error occur while trying to save tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"     * Load the task from the file storage to the user interface","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"     * @throws IOException if the storage file cannot be found","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"    public void loadTask() throws IOException, DetailsUnknownException {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"            String taskData \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"            String[] keywords \u003d taskData.split(\" \\\\|\\\\| \");","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"            Task currT \u003d null;","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"            switch (keywords[0]) {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"                case \"T\":","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"                    currT \u003d new ToDo(keywords[2]);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"                case \"D\":","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"                    currT \u003d new Deadline(keywords[2], keywords[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"                case \"E\":","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"                    currT \u003d new Event(keywords[2], keywords[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"                default:","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"xxiaoweii"},"content":"                    System.out.println(\"Error: Unknown task type. \");","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"xxiaoweii"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"xxiaoweii"},"content":"            if (keywords[1].equals(\"1\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"xxiaoweii"},"content":"                currT.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"xxiaoweii"},"content":"            TaskList.getList().add(currT);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"xxiaoweii"},"content":"        scanner.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":81}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"    private String task;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Task class","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task description","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"    public Task(String task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"     * Mark the task as done","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"     * Mark the task as not done","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"     * Get the status of the task","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"     * @return 1 represents done and 0 represents not done","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"    public String getStatus() {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"            return \"1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"            return \"0\";","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"     * Get the type of the task: Event, ToDo or Deadline","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task to check for task type","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"     * @return \"E\", \"D\" or \"T\", which stands for Event task, todo task and deadline task respectively","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"    public String getTaskType(Task task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"            return \"E | \" + this.task + \"| \" + ((Event) task).getStartDateTime() + \" to \" + ((Event) task).getEndDateTime();","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"            return \"D | \" + this.task + \"| \" + ((Deadline) task).getTime();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"        } else if (task instanceof ToDo) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"            return \"T | \" + this.task;","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"            return \"Unknown\";","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"        return \"[\" + (this.isDone? \"X\" : \" \") + \"] \" + this.task;","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xxiaoweii":69}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"public class TaskList {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"    private static ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"     * Method to add a new task into the task list.","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task to be added","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"        listOfTasks.add(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Now you have \" + listOfTasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"     * Method to delete the task from the list","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"     * @param index the index of the task to be removed","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"        Task removedTask \u003d listOfTasks.remove(index - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(removedTask.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Now you have \" + listOfTasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"xxiaoweii"},"content":"     * List out the current task list when the command word is entered","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"xxiaoweii"},"content":"    public void listOutTasks() {","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xxiaoweii"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xxiaoweii"},"content":"            System.out.println(\"There is currently no task in your list.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xxiaoweii"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xxiaoweii"},"content":"            System.out.println(\"Here are the tasks in your list: \");","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xxiaoweii"},"content":"            for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xxiaoweii"},"content":"                System.out.println((i + 1) + \".\" + listOfTasks.get(i));","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xxiaoweii"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xxiaoweii"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"xxiaoweii"},"content":"     * handle the mark done request from user. Call the markDone() method from the task class","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"xxiaoweii"},"content":"     * @param i the index of the task to be mark as done","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"xxiaoweii"},"content":"    public void markAsDone(int i) {","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xxiaoweii"},"content":"        listOfTasks.get(i - 1).markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n \" + listOfTasks.get(i - 1));","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"xxiaoweii"},"content":"     * handle the mark undone request from user. Call the markDAsUndone() method from the task class","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"xxiaoweii"},"content":"     * @param i the index of the task to be mark as undone","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"xxiaoweii"},"content":"    public void markAsUndone(int i) {","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"xxiaoweii"},"content":"        listOfTasks.get(i - 1).markUndone();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"xxiaoweii"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n \" + listOfTasks.get(i - 1));","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"xxiaoweii"},"content":"     * return the number of task currently in the task list","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"xxiaoweii"},"content":"     * @return the number of task in the list","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"xxiaoweii"},"content":"    public int numOfTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"xxiaoweii"},"content":"        return listOfTasks.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"xxiaoweii"},"content":"     * return the list of task","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"xxiaoweii"},"content":"     * @return the current list of task","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"xxiaoweii"},"content":"    public static ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"xxiaoweii"},"content":"        return listOfTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xxiaoweii":82}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for ToDO class","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"     * @param task the task description","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    public ToDo(String task) {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"        super(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"xxiaoweii":18}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"     * Constructor for Ui class","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"     * Create a Scanner object","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"    public Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"xxiaoweii"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"xxiaoweii"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"xxiaoweii"},"content":"     * Get the next line from the user","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"xxiaoweii"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"xxiaoweii"},"content":"     * @return the user input","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"xxiaoweii"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"xxiaoweii"},"content":"    public String getInput() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"xxiaoweii"},"content":"        return this.scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":26}},{"path":"src/main/java/duke/exception/ChattyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class ChattyException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"    public ChattyException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"xxiaoweii":8}},{"path":"src/main/java/duke/exception/DetailsUnknownException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class DetailsUnknownException extends ChattyException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"    public DetailsUnknownException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"        super(\"The details are missing. Please check your input again\");","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":9}},{"path":"src/main/java/duke/exception/IncompleteMessageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class IncompleteMessageException extends ChattyException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"    public IncompleteMessageException(String errorMessage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"        super(\"The command you entered is incomplete. Please give me more information.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":7}},{"path":"src/main/java/duke/exception/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class InvalidTaskNumberException extends ChattyException {","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"    public InvalidTaskNumberException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"        super(\"The task number you have entered is invalid, please double check.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"xxiaoweii":8}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"public class UnknownCommandException extends ChattyException {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"        super(\"Sorry, I don\u0027t understand what that means.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"xxiaoweii":7}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"import duke.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"        assertEquals(\"[D][ ] Complete iP (by: Sep 05 2023 2:00PM)\", new Deadline(\"Complete iP\", \"2023-09-05 1400\").toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"xxiaoweii":13}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xxiaoweii"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"xxiaoweii"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"xxiaoweii"},"content":"import duke.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"xxiaoweii"},"content":"public class ToDoTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"xxiaoweii"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"xxiaoweii"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"xxiaoweii"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"xxiaoweii"},"content":"        assertEquals(\"[T][ ] Complete iP\", new ToDo(\"Complete iP\").toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"xxiaoweii"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"xxiaoweii"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"xxiaoweii":13}}]
