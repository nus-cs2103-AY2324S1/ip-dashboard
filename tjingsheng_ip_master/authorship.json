[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"# Duke project","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"## Hello from","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"      ██╗██╗███╗   ██╗ ██████╗     ███████╗██╗  ██╗███████╗███╗   ██╗ ██████╗ ","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"      ██║██║████╗  ██║██╔════╝     ██╔════╝██║  ██║██╔════╝████╗  ██║██╔════╝ ","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"      ██║██║██╔██╗ ██║██║  ███╗    ███████╗███████║█████╗  ██╔██╗ ██║██║  ███╗","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":" ██   ██║██║██║╚██╗██║██║   ██║    ╚════██║██╔══██║██╔══╝  ██║╚██╗██║██║   ██║","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":" ╚█████╔╝██║██║ ╚████║╚██████╔╝    ███████║██║  ██║███████╗██║ ╚████║╚██████╔╝","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"  ╚════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"## Project Description","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"This is my project, created from a template for a greenfield Java project.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"It\u0027s named after the Java mascot _Duke_.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"This project is a Java application that aims to provide a user-friendly task management system. It allows users to manage their tasks efficiently and keep track of their schedules.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"## Features","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"- **Task Creation**: Users can add various types of tasks, including todo, deadline, and event tasks.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"- **Task List**: View a list of all tasks, including their descriptions and completion status.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"- **Task Completion**: Mark tasks as complete when they are done.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"- **Task Deletion**: Remove tasks that are no longer needed.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"- **Task Searching**: Search for tasks based on keywords.","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"- **Data Storage**: Data is automatically saved and loaded for seamless usage.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"## Installation Option 1","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"1. Go to tjingsheng ip [releases](https://github.com/tjingsheng/ip/releases)","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"2. **Get Java**: Ensure you have a functioning version of Java.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"3. **Copy the JAR File**: Copy the JAR file you want to run into an empty folder.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"4. **Open a Command Window**: Open a command prompt (Windows) or terminal (macOS/Linux) in the same folder where you copied the JAR file.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"5. **Run the Command**: Use the following command to run the JAR file:","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"6. **Enjoy**: Duke is very fun.","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"   ```shell","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"   java -jar woof.jar","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"## Installation Option 2","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"1. Clone the tjingsheng ip [repository](https://github.com/tjingshengg/ip) to your local machine.","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"2. Open the project in your preferred Java development environment.","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"3. Build and run the application.","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"4. Enjoy","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"## Todo List","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"- [x] Task 1 : Get woof","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"- [ ] Task 2 : Experiment with it","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"- [ ] Task 3 : Profit ???","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"- [ ] Task 4 : ~~Cry~~","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"## Project Sample","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"```","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     * Runs the Duke application, allowing the user to interact with it via the command line.","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    public static void runDuke() {","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        Ui.helloWorld();","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        boolean isConversing \u003d true;","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        while (isConversing) {","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"            String rawCommand \u003d Ui.getUserInput(scanner);","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"            TaskList taskList \u003d TaskFileHandler.readFromFile();","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"            Ui.getBotMessage();","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"            Command command \u003d Parser.parse(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"            command.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"            TaskFileHandler.saveToFile(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"            isConversing \u003d !command.isByeCommand();","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"```","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"\u003e\u003e\u003e\u003e\u003e \"Duke hehe Duke hehe\" - Jing Sheng","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":70,"-":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"plugins {","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"checkstyle {","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"repositories {","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"    mavenCentral()","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"dependencies {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    implementation \u0027com.google.code.gson:gson:2.10.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"javafx {","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    version \u003d \"17.0.7\"","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"test {","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    testLogging {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        showExceptions true","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        showCauses true","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        showStackTraces true","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"application {","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    mainClass.set(\"woof.Woof\")","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"shadowJar {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    archiveBaseName \u003d \"woof\"","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"run{","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"tjingsheng":54}},{"path":"src/main/java/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `ByeCommand` class represents a command to exit the application.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * When executed, it displays a bye message to the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `ByeCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    public ByeCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"bye\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) {","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.BYE, args, 1);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.BYE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.BYE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.BYE, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"bye\" command. It shows the bye message to the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            validate(super.getRawCommand());","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        return Ui.getByeUserMessage();","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":57}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import enums.ExceptionMessage;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofException;","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":" * The `Command` class is an abstract class representing a command in the application.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":" * All specific command classes should inherit from this class and implement the `execute` method.","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * The raw command entered by the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    private final String rawCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `Command` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    public Command(String rawCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        this.rawCommand \u003d rawCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"     * Executes the command. Subclasses must implement this method to define their behavior.","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list to perform the command on.","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    public abstract String execute(TaskList taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     * Gets the DateTimeFormatter used for formatting dates and times in the application.","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     * @return The DateTimeFormatter instance for formatting dates and times.","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    public DateTimeFormatter getDateTimeFormatter() {","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"        return Woof.getDateTimeFormatter();","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     * Gets the raw command entered by the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     * @return The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    public String getRawCommand() {","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        return this.rawCommand;","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     * Checks if the command is a \"bye\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if it\u0027s a \"bye\" command, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    public boolean isByeCommand() {","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        return CommandWord.commandWordToValueMap(Parser.getArgs(rawCommand)[0]).equals(CommandWord.BYE);","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"     * Validates the length of the input string array `args` against the specified `length`. If the length","lastModifiedDate":"2023-09-16"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"     * of the array does not match the expected length, a `WoofInvalidCommandException` is thrown with","lastModifiedDate":"2023-09-16"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"     * a message indicating the invalid number of arguments for the given `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"     * @param args          The input string array to be validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"     * @param correctLength The expected length of the `args` array.","lastModifiedDate":"2023-09-16"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord   The command word associated with the operation for which the arguments are being validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the length of `args` does not match the expected `length`.","lastModifiedDate":"2023-09-16"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    public static void validateArgsLengthEquals(CommandWord commandWord, String[] args, int correctLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        assert args !\u003d null : \"args cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        assert correctLength \u003e\u003d 0 : \"correct length must more than or equals to 0\";","lastModifiedDate":"2023-09-16"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        if (args.length !\u003d correctLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.INVALID_NUMBER_OF_ARGUMENTS.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"                    commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"                )","lastModifiedDate":"2023-09-16"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"     * Validates the length of the input string array `args` against the specified `length`. If the length","lastModifiedDate":"2023-09-16"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"     * of the array matches the unexpected length, a `WoofInvalidCommandException` is thrown with","lastModifiedDate":"2023-09-16"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"     * a message indicating the invalid number of arguments for the given `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"     * @param args             The input string array to be validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"     * @param unexpectedLength The expected length of the `args` array.","lastModifiedDate":"2023-09-16"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord      The command word associated with the operation for which the arguments are being","lastModifiedDate":"2023-09-16"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"     *                         validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the length of `args` does not match the expected `length`.","lastModifiedDate":"2023-09-16"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"    public static void validateArgsLengthNotEquals(CommandWord commandWord, String[] args, int unexpectedLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"        assert args !\u003d null : \"args cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"        if (args.length \u003d\u003d unexpectedLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.INVALID_NUMBER_OF_ARGUMENTS.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"                    commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"                )","lastModifiedDate":"2023-09-16"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"     * Validates the length of the input string array `args` against the specified `length`. If the length","lastModifiedDate":"2023-09-16"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"     * of the array does not match the expected length, a `WoofInvalidCommandException` is thrown with","lastModifiedDate":"2023-09-16"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"     * a message indicating the invalid number of arguments for the given `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"     * @param args        The input string array to be validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"     * @param minLength   The minimium length of the `args` array.","lastModifiedDate":"2023-09-16"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord The command word associated with the operation for which the arguments are being validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":127,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":128,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the length of `args` does not match the expected `length`.","lastModifiedDate":"2023-09-16"},{"lineNumber":129,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":130,"author":{"gitId":"tjingsheng"},"content":"    public static void validateArgsLengthMoreThanEquals(CommandWord commandWord, String[] args, int minLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":131,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":132,"author":{"gitId":"tjingsheng"},"content":"        assert args !\u003d null : \"args cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":133,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":134,"author":{"gitId":"tjingsheng"},"content":"        if (args.length \u003c minLength) {","lastModifiedDate":"2023-09-16"},{"lineNumber":135,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":136,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.INVALID_NUMBER_OF_ARGUMENTS.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":137,"author":{"gitId":"tjingsheng"},"content":"                    commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":138,"author":{"gitId":"tjingsheng"},"content":"                )","lastModifiedDate":"2023-09-16"},{"lineNumber":139,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":140,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":141,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":142,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":143,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":144,"author":{"gitId":"tjingsheng"},"content":"     * Validates that none of the provided arguments are null. If any of the arguments are null,","lastModifiedDate":"2023-09-16"},{"lineNumber":145,"author":{"gitId":"tjingsheng"},"content":"     * a `WoofInvalidCommandException` is thrown with a message indicating null arguments for","lastModifiedDate":"2023-09-16"},{"lineNumber":146,"author":{"gitId":"tjingsheng"},"content":"     * the given `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":147,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":148,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord The command word associated with the operation for which the arguments are being validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":149,"author":{"gitId":"tjingsheng"},"content":"     * @param args        The arguments to check for null values.","lastModifiedDate":"2023-09-16"},{"lineNumber":150,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":151,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If any of the arguments are null.","lastModifiedDate":"2023-09-16"},{"lineNumber":152,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":153,"author":{"gitId":"tjingsheng"},"content":"    public static void validateNotNullArgs(CommandWord commandWord, String... args) {","lastModifiedDate":"2023-09-16"},{"lineNumber":154,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":155,"author":{"gitId":"tjingsheng"},"content":"        assert args !\u003d null : \"args cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":156,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":157,"author":{"gitId":"tjingsheng"},"content":"        for (String arg : args) {","lastModifiedDate":"2023-09-16"},{"lineNumber":158,"author":{"gitId":"tjingsheng"},"content":"            if (arg \u003d\u003d null) {","lastModifiedDate":"2023-09-16"},{"lineNumber":159,"author":{"gitId":"tjingsheng"},"content":"                throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":160,"author":{"gitId":"tjingsheng"},"content":"                    ExceptionMessage.NULL_ARGUMENT.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":161,"author":{"gitId":"tjingsheng"},"content":"                        commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":162,"author":{"gitId":"tjingsheng"},"content":"                    )","lastModifiedDate":"2023-09-16"},{"lineNumber":163,"author":{"gitId":"tjingsheng"},"content":"                );","lastModifiedDate":"2023-09-16"},{"lineNumber":164,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-16"},{"lineNumber":165,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":166,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":167,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":168,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":169,"author":{"gitId":"tjingsheng"},"content":"     * Validates that none of the provided arguments are empty (have zero length). If any of the arguments are empty,","lastModifiedDate":"2023-09-16"},{"lineNumber":170,"author":{"gitId":"tjingsheng"},"content":"     * a `WoofInvalidCommandException` is thrown with a message indicating empty arguments for the given `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":171,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":172,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord The command word associated with the operation for which the arguments are being validated.","lastModifiedDate":"2023-09-16"},{"lineNumber":173,"author":{"gitId":"tjingsheng"},"content":"     * @param args        The arguments to check for empty values.","lastModifiedDate":"2023-09-16"},{"lineNumber":174,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":175,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If any of the arguments are empty.","lastModifiedDate":"2023-09-16"},{"lineNumber":176,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":177,"author":{"gitId":"tjingsheng"},"content":"    public static void validateNotEmptyArgs(CommandWord commandWord, String... args) {","lastModifiedDate":"2023-09-16"},{"lineNumber":178,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":179,"author":{"gitId":"tjingsheng"},"content":"        assert args !\u003d null : \"args cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":180,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":181,"author":{"gitId":"tjingsheng"},"content":"        for (String arg : args) {","lastModifiedDate":"2023-09-16"},{"lineNumber":182,"author":{"gitId":"tjingsheng"},"content":"            if (arg.isEmpty()) {","lastModifiedDate":"2023-09-16"},{"lineNumber":183,"author":{"gitId":"tjingsheng"},"content":"                throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":184,"author":{"gitId":"tjingsheng"},"content":"                    ExceptionMessage.EMPTY_ARGUMENT.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":185,"author":{"gitId":"tjingsheng"},"content":"                        commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":186,"author":{"gitId":"tjingsheng"},"content":"                    )","lastModifiedDate":"2023-09-16"},{"lineNumber":187,"author":{"gitId":"tjingsheng"},"content":"                );","lastModifiedDate":"2023-09-16"},{"lineNumber":188,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-16"},{"lineNumber":189,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":190,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":191,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":192,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":193,"author":{"gitId":"tjingsheng"},"content":"     * Validates that the argument provided matches the expected `CommandWord`. If it doesn\u0027t match,","lastModifiedDate":"2023-09-16"},{"lineNumber":194,"author":{"gitId":"tjingsheng"},"content":"     * a `WoofInvalidCommandException` is thrown with a message indicating an invalid command word for","lastModifiedDate":"2023-09-16"},{"lineNumber":195,"author":{"gitId":"tjingsheng"},"content":"     * the expected `commandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":196,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":197,"author":{"gitId":"tjingsheng"},"content":"     * @param commandWord The expected `CommandWord` for validation.","lastModifiedDate":"2023-09-16"},{"lineNumber":198,"author":{"gitId":"tjingsheng"},"content":"     * @param arg         The argument to check for the command word.","lastModifiedDate":"2023-09-16"},{"lineNumber":199,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":200,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the first argument doesn\u0027t match the expected `CommandWord`.","lastModifiedDate":"2023-09-16"},{"lineNumber":201,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":202,"author":{"gitId":"tjingsheng"},"content":"    public static void validateCommandWord(CommandWord commandWord, String arg) {","lastModifiedDate":"2023-09-16"},{"lineNumber":203,"author":{"gitId":"tjingsheng"},"content":"        assert commandWord !\u003d null : \"command word cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":204,"author":{"gitId":"tjingsheng"},"content":"        assert arg !\u003d null : \"arg cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":205,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":206,"author":{"gitId":"tjingsheng"},"content":"        if (!CommandWord.commandWordToValueMap(arg).equals(commandWord)) {","lastModifiedDate":"2023-09-16"},{"lineNumber":207,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":208,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.INVALID_COMMAND_WORD.getValueFormat(","lastModifiedDate":"2023-09-16"},{"lineNumber":209,"author":{"gitId":"tjingsheng"},"content":"                    commandWord.getValue()","lastModifiedDate":"2023-09-16"},{"lineNumber":210,"author":{"gitId":"tjingsheng"},"content":"                )","lastModifiedDate":"2023-09-16"},{"lineNumber":211,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":212,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":213,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":214,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":215,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":216,"author":{"gitId":"tjingsheng"},"content":"     * Validates a date and time string against a specific date and time format. The format is determined","lastModifiedDate":"2023-09-16"},{"lineNumber":217,"author":{"gitId":"tjingsheng"},"content":"     * by the `getDateTimeFormatter()` method.","lastModifiedDate":"2023-09-16"},{"lineNumber":218,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":219,"author":{"gitId":"tjingsheng"},"content":"     * @param string The date and time string to validate.","lastModifiedDate":"2023-09-16"},{"lineNumber":220,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":221,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the string is null or doesn\u0027t match the expected date and time format.","lastModifiedDate":"2023-09-16"},{"lineNumber":222,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":223,"author":{"gitId":"tjingsheng"},"content":"    public static void validateDateTime(String string) {","lastModifiedDate":"2023-09-16"},{"lineNumber":224,"author":{"gitId":"tjingsheng"},"content":"        assert string !\u003d null : \"datetime string cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":225,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":226,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":227,"author":{"gitId":"tjingsheng"},"content":"            Woof.validateDateTime(string);","lastModifiedDate":"2023-09-16"},{"lineNumber":228,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":229,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(ExceptionMessage.INVALID_DATE_TIME_FORMAT.getValueFormat(string));","lastModifiedDate":"2023-09-16"},{"lineNumber":230,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":231,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":232,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":233,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":234,"author":{"gitId":"tjingsheng"},"content":"     * Validates a task index string to ensure it is a valid index for tasks in the application.","lastModifiedDate":"2023-09-16"},{"lineNumber":235,"author":{"gitId":"tjingsheng"},"content":"     * It delegates the validation to the `TaskList.validateTaskIndex` method and handles any exceptions","lastModifiedDate":"2023-09-16"},{"lineNumber":236,"author":{"gitId":"tjingsheng"},"content":"     * by throwing a `WoofInvalidCommandException` with an appropriate error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":237,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":238,"author":{"gitId":"tjingsheng"},"content":"     * @param string The task index string to validate.","lastModifiedDate":"2023-09-16"},{"lineNumber":239,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":240,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the task index is invalid, or if there\u0027s a problem during validation.","lastModifiedDate":"2023-09-16"},{"lineNumber":241,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":242,"author":{"gitId":"tjingsheng"},"content":"    public static void validateTaskIndex(TaskList taskList, String string) {","lastModifiedDate":"2023-09-16"},{"lineNumber":243,"author":{"gitId":"tjingsheng"},"content":"        assert string !\u003d null : \"task index string cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":244,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":245,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":246,"author":{"gitId":"tjingsheng"},"content":"            TaskList.validateTaskIndex(string, taskList);","lastModifiedDate":"2023-09-16"},{"lineNumber":247,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":248,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(ExceptionMessage.INVALID_TASK_INDEX.getValueFormat(string));","lastModifiedDate":"2023-09-16"},{"lineNumber":249,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":250,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":251,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":251}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" * The `DeadlineCommand` class represents a command to create a new deadline task.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command and adds a new deadline task to the task list.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `DeadlineCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    public DeadlineCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"deadline\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException is the command is invalid.","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.DEADLINE, args, 4);","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.DEADLINE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.DEADLINE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.DEADLINE, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.BY, args[2]);","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        validateDateTime(args[3]);","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"deadline\" command. It parses the command, validates it, and adds a new","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     * deadline task to the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list to which the deadline task is added.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        String description \u003d args[1];","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(args[3], super.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        return taskList.addTask(new DeadlineTask(description, endDate));","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":67}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `DeleteCommand` class represents a command to delete a task.","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command, validates it, and deletes","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * the specified task from the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `DeleteCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    public DeleteCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"delete\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted and if the specified task index is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList   The task list against which to validate the task index.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand, TaskList taskList) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.DELETE, args, 2);","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.DELETE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.DELETE, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.DELETE, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        validateTaskIndex(taskList, args[1]);","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"delete\" command. It parses the command, validates it, and deletes","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * the specified task from the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list from which the task is deleted.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand, taskList);","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        return taskList.deleteTask(args[1]);","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":67}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" * The `EventCommand` class represents a command to create a new event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command, validates it, and adds a","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":" * new event task to the task list if the command is valid.","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `EventCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    public EventCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"event\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.EVENT, args, 6);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.EVENT, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.EVENT, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.EVENT, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.FROM, args[2]);","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        validateDateTime(args[3]);","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.TO, args[4]);","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"        validateDateTime(args[5]);","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"event\" command. It parses the command, validates it, and adds a new","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * event task to the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list to which the event task is added.","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        String description \u003d args[1];","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        LocalDate startDate \u003d LocalDate.parse(args[3], super.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(args[5], super.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        return taskList.addTask(new EventTask(description, startDate, endDate));","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":71}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `FindCommand` class represents a command to search for tasks based on a keyword in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `FindCommand` with the given raw command.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command input by the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"    public FindCommand(String rawCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     * Validates the `FindCommand` based on the raw command input.","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command input by the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthMoreThanEquals(CommandWord.FIND, args, 2);","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.FIND, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.FIND, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.FIND, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     * Executes the `FindCommand` to search for tasks based on the specified keyword.","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list in which to search for tasks.","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        String keySentence \u003d args[1];","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        return taskList.findTask(keySentence.split(\"\\\\s+\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":57}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `ListCommand` class represents a command to list all tasks.","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * When executed, it validates the command and displays a list of all tasks in the task list.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `ListCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    public ListCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"list\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.LIST, args, 1);","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.LIST, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.LIST, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.LIST, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"list\" command. It validates the command and displays","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     * a list of all tasks in the task list.","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list from which tasks are listed.","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        return taskList.listAllTasks();","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":61}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `MarkCommand` class represents a command to mark a task as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command, validates it, and marks","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * the specified task as done in the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `MarkCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    public MarkCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"mark\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted and if the specified task index is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList   The task list against which to validate the task index.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand, TaskList taskList) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.MARK, args, 2);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.MARK, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.MARK, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.MARK, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        validateTaskIndex(taskList, args[1]);","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"mark\" command. It parses the command, validates it, and marks","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * the specified task as done in the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list in which the task is marked as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand, taskList);","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(super.getRawCommand());","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        String taskIndex \u003d args[1];","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        return taskList.markTaskDone(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":67}},{"path":"src/main/java/command/NullCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `NullCommand` class represents a command that is not recognized or is not valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * When executed, it shows a \"confused\" message to the user.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"public class NullCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `NullCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    public NullCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"null\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthNotEquals(CommandWord.NULL_COMMAND, args, 0);","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.NULL_COMMAND, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.NULL_COMMAND, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.NULL_COMMAND, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"null\" command. It validates the command and displays","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     * a \"confused\" message to the user if the command is not recognized or valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        return Ui.getConfusedMessage();","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":60}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `TodoCommand` class represents a command to create a new todo task.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command, validates it, and adds","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" * a new todo task to the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `TodoCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    public TodoCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"todo\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.TODO, args, 2);","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.TODO, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.TODO, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.TODO, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"todo\" command. It parses the command, validates it, and adds a new","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     * todo task to the task list if the command is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list to which the todo task is added.","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand);","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        String description \u003d args[1];","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        return taskList.addTask(new TodoTask(description));","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":62}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import enums.ExceptionMessage;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `UnmarkCommand` class represents a command to unmark a task as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * When executed, it parses the command, validates it, and marks the specified task as","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" * undone in the task list if the command is valid.","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new `UnmarkCommand` with the specified raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    public UnmarkCommand(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"        super(rawCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * Validates the \"unmark\" command.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * It checks if the command is correctly formatted and if the specified task index is valid.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw command string.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList   The task list against which to validate the task index.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofInvalidCommandException If the command is invalid, it throws a woof invalid command exception with an","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     *     error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    public static void validate(String rawCommand, TaskList taskList) throws WoofInvalidCommandException {","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        validateArgsLengthEquals(CommandWord.UNMARK, args, 2);","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        validateNotNullArgs(CommandWord.UNMARK, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        validateNotEmptyArgs(CommandWord.UNMARK, args);","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        validateCommandWord(CommandWord.UNMARK, args[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        validateTaskIndex(taskList, args[1]);","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     * Executes the \"unmark\" command. It parses the command, validates it, and marks the specified task as","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     * undone in the task list if the command is valid.","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The task list in which the task is marked as undone.","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    public String execute(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        assert taskList !\u003d null : \"task list cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        String rawCommand \u003d super.getRawCommand();","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            validate(rawCommand, taskList);","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        } catch (WoofInvalidCommandException e) {","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        String[] args \u003d Parser.getArgs(super.getRawCommand());","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        String taskIndex \u003d args[1];","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        return taskList.markTaskUndone(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":66}},{"path":"src/main/java/enums/CommandWord.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package enums;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `CommandWord` enum represents the possible command words used in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"public enum CommandWord {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"    FIND(\"find\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    EXIT(\"exit\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"    NULL_COMMAND(\"\"),","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    BY(\"/by\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    FROM(\"/from\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    TO(\"/to\");","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    private final String value;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `CommandWord` enum with the given value.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * @param value The string representation of the command word.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    CommandWord(String value) {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"     * Maps a string value to the corresponding `CommandWord` enum.","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"     * If no match is found, it returns the `NULL_COMMAND` enum.","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"     * @param value The string value to map to a command word.","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     * @return The corresponding `CommandWord` enum, or `NULL_COMMAND` if no match is found.","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    public static CommandWord commandWordToValueMap(String value) {","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        for (CommandWord e : values()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            if (e.getValue().equals(value)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"                return e;","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"        return NULL_COMMAND;","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * Gets the string representation of the command word.","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     * @return The string representation of the command word.","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"    public String getValue() {","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        return this.value;","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tjingsheng":57}},{"path":"src/main/java/enums/ExceptionMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package enums;","lastModifiedDate":"2023-09-16"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `ExceptionMessage` enum represents the possible exception messages used in the Woof application.","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-16"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"public enum ExceptionMessage {","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"    // INVALID COMMAND EXCEPTION MESSAGES","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"    INVALID_NUMBER_OF_ARGUMENTS(\"wrong number of arguments for \u0027%s\u0027!\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"    NULL_ARGUMENT(\"null argument not allowed for \u0027%s\u0027!\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"    EMPTY_ARGUMENT(\"I don\u0027t want empty arguments for \u0027%s\u0027 :(\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"    INVALID_COMMAND_WORD(\"bad command word for \u0027%s\u0027...\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"    INVALID_DATE_TIME_FORMAT(\"me no understand your datetime format \u0027%s\u0027\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"    // STORAGE EXCEPTION MESSAGES","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    UNABLE_TO_READ_FILE(\"me can\u0027t \u0027%s\u0027 file. Computer go \u0027%s\u0027\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    UNABLE_TO_SAVE_FILE(\"me can\u0027t save file. Computer go \u0027%s\u0027\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"    UNABLE_TO_CREATE_FILE(\"me can\u0027t create file. Computer go \u0027%s\u0027\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    // TASK INDEX EXCEPTION MESSAGE","lastModifiedDate":"2023-09-16"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    INVALID_TASK_INDEX(\"bad task index \u0027%s\u0027, give me integer!\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    UNABLE_TO_PARSE_INDEX(\"idk how to parse \u0027%s\u0027, Computer go \u0027%s\u0027\"),","lastModifiedDate":"2023-09-16"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    TASK_INDEX_NOT_IN_LIST(\"\u0027%s\u0027 not in my task list\");","lastModifiedDate":"2023-09-16"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final String value;","lastModifiedDate":"2023-09-16"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `Exception Message` enum with the given value.","lastModifiedDate":"2023-09-16"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @param value The string representation of the command word.","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    ExceptionMessage(String value) {","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        assert value !\u003d null : \"value cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     * Gets the string representation of the exception message with the appropriate command word.","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     * @param args The arguments to replace placeholders in the exception message.","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     * @return The string representation of the exception message with the appropriate command word.","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    public String getValueFormat(String ... args) {","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        return String.format(this.value, (Object) args);","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-16"}],"authorContributionMap":{"tjingsheng":46}},{"path":"src/main/java/enums/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package enums;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `TaskType` enum represents the different types of tasks in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"public enum TaskType {","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"    TODO(\"[T]\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"    DEADLINE(\"[D]\"),","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"    EVENT(\"[E]\");","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"    private final String symbol;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `TaskType` enum with the given symbol.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * @param symbol The symbol associated with the task type.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    TaskType(String symbol) {","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"        this.symbol \u003d symbol;","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * Returns the symbol associated with the task type.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * @return The symbol associated with the task type.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    public String toSymbol() {","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        return this.symbol;","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":30}},{"path":"src/main/java/exceptions/WoofException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package exceptions;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `WoofException` class represents a custom exception specific to the Woof application.","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" * It is used to indicate exceptional situations or errors within the application.","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"public class WoofException extends RuntimeException {","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new WoofException with the specified error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"     * @param message The error message describing the exception.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    public WoofException(String message) {","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"        super(String.format(\"Woof! %s\", message));","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tjingsheng":16}},{"path":"src/main/java/exceptions/WoofInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package exceptions;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `WoofInvalidCommandException` class represents a custom exception specific to the Woof application.","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" * It is used to indicate that an invalid command has been encountered.","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"public class WoofInvalidCommandException extends WoofException {","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new WoofInvalidCommandException with the specified error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"     * @param message The error message describing the invalid command.","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    public WoofInvalidCommandException(String message) {","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"        super(String.format(\"command bad ... %s\", message));","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tjingsheng":16}},{"path":"src/main/java/exceptions/WoofStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package exceptions;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":" * The `WoofStorageException` class represents a custom exception specific to the Woof application.","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":" * It is used to indicate exceptions related to storage operations,","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":" * such as reading from or writing to storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"public class WoofStorageException extends WoofException {","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a new WoofStorageException with the specified error message.","lastModifiedDate":"2023-09-16"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"     * @param message The error message describing the storage-related exception.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"    public WoofStorageException(String message) {","lastModifiedDate":"2023-09-16"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"        super(String.format(\"storage... %s\", message));","lastModifiedDate":"2023-09-16"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":17}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import command.ByeCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import command.Command;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import command.DeadlineCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import command.EventCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import command.FindCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import command.NullCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import command.TodoCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import enums.CommandWord;","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":" * The `Parser` class is responsible for parsing user commands and creating corresponding `Command` objects.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"public class Parser {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * Parses a raw user command and returns the corresponding `Command` object.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw user command.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * @return A `Command` object representing the parsed command.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    public static Command parse(String rawCommand) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        switch (CommandWord.commandWordToValueMap(getArgs(rawCommand)[0])) {","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        case BYE:","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"            return new ByeCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        case FIND:","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"            return new FindCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        case LIST:","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"            return new ListCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        case MARK:","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"            return new MarkCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"            return new UnmarkCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        case DELETE:","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            return new DeleteCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        case TODO:","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            return new TodoCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            return new DeadlineCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"        case EVENT:","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            return new EventCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"        default:","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            return new NullCommand(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     * Splits a raw user command into individual arguments.","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"     * @param rawCommand The raw user command.","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"     * @return An array of individual arguments.","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    public static String[] getArgs(String rawCommand) {","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        assert rawCommand !\u003d null : \"raw command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        String[] words \u003d rawCommand.split(\"\\\\s+\");","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        if (words.length \u003d\u003d 0) {","lastModifiedDate":"2023-09-16"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"            return result.toArray(new String[0]);","lastModifiedDate":"2023-09-16"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        String mainCommand \u003d words[0];","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        assert mainCommand !\u003d null : \"main command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        StringBuilder subCommand \u003d new StringBuilder();","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        result.add(mainCommand);","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        for (int i \u003d 1; i \u003c words.length; i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"            String currentWord \u003d words[i];","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"            if (currentWord.startsWith(\"/\")) {","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"                if (!subCommand.toString().trim().isEmpty()) {","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"                    result.add(subCommand.toString().trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"                }","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"                result.add(currentWord);","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"                subCommand \u003d new StringBuilder();","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"            } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"                subCommand.append(\" \").append(currentWord.trim());","lastModifiedDate":"2023-09-10"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        if (!subCommand.toString().trim().isEmpty()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"            result.add(subCommand.toString().trim());","lastModifiedDate":"2023-09-03"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"        return result.toArray(new String[0]);","lastModifiedDate":"2023-09-03"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":94}},{"path":"src/main/java/storage/LocalDateAdapter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package storage;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.lang.reflect.Type;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonDeserializationContext;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonDeserializer;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonElement;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonParseException;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonPrimitive;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonSerializationContext;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonSerializer;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":" * The `LocalDateAdapter` class is a Gson adapter for serializing and deserializing `LocalDate` objects.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"public class LocalDateAdapter implements JsonSerializer\u003cLocalDate\u003e, JsonDeserializer\u003cLocalDate\u003e {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     * Deserialize a `LocalDate` object from a JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * @param json    The JSON element containing the date as a string.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * @param typeOfT The type of the object to deserialize.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * @param context The deserialization context.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * @return A `LocalDate` object deserialized from the JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @throws JsonParseException If there is an issue with JSON parsing.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    public LocalDate deserialize(","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"                JsonElement json,","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"                Type typeOfT,","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"                JsonDeserializationContext context","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    ) throws JsonParseException {","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        String dateStr \u003d json.getAsString();","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        return LocalDate.parse(dateStr, Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     * Serialize a `LocalDate` object to a JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     * @param src       The `LocalDate` object to serialize.","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"     * @param typeOfSrc The type of the source object.","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"     * @param context   The serialization context.","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"     * @return A JSON element representing the serialized `LocalDate` object.","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    public JsonElement serialize(LocalDate src, Type typeOfSrc, JsonSerializationContext context) {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        return new JsonPrimitive(Woof.getDateTimeFormatter().format(src));","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":52}},{"path":"src/main/java/storage/TaskAdapter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package storage;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.lang.reflect.Type;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonDeserializationContext;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonDeserializer;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonElement;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonObject;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonParseException;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonSerializationContext;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.JsonSerializer;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":" * The `TaskAdapter` class is a Gson adapter for serializing and deserializing `Task` objects.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"public class TaskAdapter implements JsonDeserializer\u003cTask\u003e, JsonSerializer\u003cTask\u003e {","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     * Serialize a `Task` object to a JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     * @param src       The `Task` object to serialize.","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * @param typeOfSrc The type of the source object.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * @param context   The serialization context.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     * @return A JSON element representing the serialized `Task` object.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    public JsonElement serialize(Task src, Type typeOfSrc, JsonSerializationContext context) {","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        JsonObject jsonObject \u003d new JsonObject();","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        jsonObject.addProperty(\"type\", src.getClass().getName());","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        jsonObject.add(\"data\", context.serialize(src));","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        return jsonObject;","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"     * Deserialize a `Task` object from a JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     * @param json    The JSON element containing the serialized `Task` object.","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     * @param typeOfT The type of the object to deserialize.","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     * @param context The deserialization context.","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     * @return A `Task` object deserialized from the JSON element.","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     * @throws JsonParseException If there is an issue with JSON parsing.","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    public Task deserialize(","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            JsonElement json,","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            Type typeOfT,","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            JsonDeserializationContext context","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    ) throws JsonParseException {","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        JsonObject jsonObject \u003d json.getAsJsonObject();","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"        String type \u003d jsonObject.get(\"type\").getAsString();","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        JsonElement data \u003d jsonObject.get(\"data\");","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            Class\u003c?\u003e clazz \u003d Class.forName(type);","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"            return context.deserialize(data, clazz);","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        } catch (ClassNotFoundException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            throw new JsonParseException(e);","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":60}},{"path":"src/main/java/storage/TaskFileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package storage;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.io.File;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.Gson;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import com.google.gson.GsonBuilder;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import enums.ExceptionMessage;","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofStorageException;","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":" * The `TaskFileHandler` class is responsible for reading and writing tasks to a JSON file.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"public class TaskFileHandler {","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * The file path where tasks are stored as JSON data.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    private static final String FILE_PATH \u003d \"data/tasks.json\";","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * Reads tasks from the JSON file and returns a `TaskList` object.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * @return A `TaskList` containing the tasks read from the file.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofStorageException If there is an issue with reading or parsing the file.","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public static TaskList readFromFile() {","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        createFileIfNotExists();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        Gson gson \u003d new GsonBuilder()","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"                .registerTypeAdapter(Task.class, new TaskAdapter())","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"                .registerTypeAdapter(LocalDate.class, new LocalDateAdapter())","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"                .setPrettyPrinting()","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"                .create();","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        Task[] tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        try (FileReader r \u003d new FileReader(FILE_PATH)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            tasks \u003d gson.fromJson(r, Task[].class);","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofStorageException(ExceptionMessage.UNABLE_TO_READ_FILE.getValueFormat(e.getMessage()));","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * Saves tasks to the JSON file.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     * @param taskList The `TaskList` containing tasks to be saved.","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofStorageException If there is an issue with writing to the file.","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    public static void saveToFile(TaskList taskList) {","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        Task[] tasks \u003d taskList.getTasks();","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        Gson gson \u003d new GsonBuilder()","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"                .registerTypeAdapter(Task.class, new TaskAdapter())","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"                .registerTypeAdapter(LocalDate.class, new LocalDateAdapter())","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"                .setPrettyPrinting()","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"                .create();","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        try (FileWriter w \u003d new FileWriter(FILE_PATH)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"            gson.toJson(tasks, w);","lastModifiedDate":"2023-09-03"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofStorageException(ExceptionMessage.UNABLE_TO_SAVE_FILE.getValueFormat(e.getMessage()));","lastModifiedDate":"2023-09-16"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"     * Creates the JSON file if it does not exist.","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"     * @throws WoofStorageException If there is an issue with file creation.","lastModifiedDate":"2023-09-16"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"    private static void createFileIfNotExists() {","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"            try {","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-03"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"                throw new WoofStorageException(ExceptionMessage.UNABLE_TO_CREATE_FILE.getValueFormat(e.getMessage()));","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":86}},{"path":"src/main/java/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import enums.TaskType;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `DeadlineTask` class represents a task with a specific deadline in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * It extends the `Task` class and includes the deadline information.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     * The deadline date of the task.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    private final LocalDate endDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `DeadlineTask` with the given description and deadline date.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     * @param endDate     The deadline date of the task.","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    public DeadlineTask(String description, LocalDate endDate) {","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * Gets the deadline date formatted as a string.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the deadline date.","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"\\n%s~By: %s\", getTabSpace(), endDate.format(super.getDateTimeformatter()));","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     * Generates a string representation of the `DeadlineTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the task, including its symbol, description, and deadline.","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        return TaskType.DEADLINE.toSymbol() + super.toString() + getDeadline();","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * Checks if this `DeadlineTask` is equal to another object.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * @param o The object to compare to.","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the objects are equal, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            return true;","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        if (!(o instanceof DeadlineTask)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        if (!super.equals(o)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        DeadlineTask otherDeadlineTask \u003d (DeadlineTask) o;","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        return this.endDate.equals(otherDeadlineTask.endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"     * Generates a hash code for this `DeadlineTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"     * @return A hash code for the task, including its description and deadline.","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"    public int hashCode() {","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        return Objects.hash(super.hashCode(), this.endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":78}},{"path":"src/main/java/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import enums.TaskType;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * The `EventTask` class represents an event task with a specific start and end date in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * It extends the `Task` class and includes the event date range information.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     * The start date of the event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    private final LocalDate startDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * The end date of the event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    private final LocalDate endDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * Constructs an `EventTask` with the given description, start date, and end date.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     * @param startDate   The start date of the event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param endDate     The end date of the event task.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    public EventTask(String description, LocalDate startDate, LocalDate endDate) {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"     * Gets the event date range formatted as a string.","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the event date range.","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"    public String getEventRange() {","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"\\n%s~From: %s\\n%s~To  : %s\",","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            getTabSpace(),","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            startDate.format(super.getDateTimeformatter()),","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            getTabSpace(),","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            endDate.format(super.getDateTimeformatter()));","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * Generates a string representation of the `EventTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the task, including its symbol, description, and event date range.","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        return TaskType.EVENT.toSymbol() + super.toString() + getEventRange();","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"     * Checks if this `EventTask` is equal to another object.","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"     * @param o The object to compare to.","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the objects are equal, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"            return true;","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        if (!(o instanceof EventTask)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        if (!super.equals(o)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        EventTask eventTask \u003d (EventTask) o;","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        return this.startDate.equals(eventTask.startDate) \u0026\u0026 this.endDate.equals(eventTask.endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"     * Generates a hash code for this `EventTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"     * @return A hash code for the task, including its description and event date range.","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"    public int hashCode() {","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        return Objects.hash(super.hashCode(), this.startDate, this.endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":89}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import woofwoof.WoofWoof;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `Task` class represents a task in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     * The description of the task.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    protected String description;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"     * A flag indicating whether the task is marked as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    private boolean isDone;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `Task` with the given description and initializes it as not done.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        assert description !\u003d null : \"description cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        this.description \u003d WoofWoof.wrapText(description, \u0027\\n\u0027 + getTabSpace(), 39);","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    public DateTimeFormatter getDateTimeformatter() {","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        return Woof.getDateTimeFormatter();","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     * Gets the status icon representing the task\u0027s completion status.","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     * @return The status icon (\"[X]\" for done, \"[ ]\" for not done).","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * Gets a tab space for doing to the next line of a task","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * @return The tab space \"            \".","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    protected String getTabSpace() {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        return \" \".repeat(12);","lastModifiedDate":"2023-09-15"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"     * Generates a string representation of the `Task`.","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the task, including its status icon and description.","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        return this.getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"    public void markUndone() {","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the task is done, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"        return this.isDone;","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"     * Checks if the task description contains a specified keyword.","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"     * @param keyword The keyword to search for within the task description.","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the task description contains the keyword, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"    public boolean hasKeyWord(String keyword) {","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"        return this.description.contains(keyword);","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"     * Checks if this `Task` is equal to another object.","lastModifiedDate":"2023-09-06"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"     * @param o The object to compare to.","lastModifiedDate":"2023-09-06"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the objects are equal, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"            return true;","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"        if (!(o instanceof Task)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"        Task otherTask \u003d (Task) o;","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"        return this.isDone \u003d\u003d otherTask.isDone \u0026\u0026 this.description.equals(otherTask.description);","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"     * Generates a hash code for this `Task`.","lastModifiedDate":"2023-09-06"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"     * @return A hash code for the task, including its description and completion status.","lastModifiedDate":"2023-09-06"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"    public int hashCode() {","lastModifiedDate":"2023-09-06"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"        return Objects.hash(description, isDone);","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":126}},{"path":"src/main/java/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import enums.ExceptionMessage;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" * The `TaskList` class represents a collection of tasks in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":" * It provides methods for adding, marking tasks as done/undone, deleting tasks,","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":" * and listing all tasks in the list.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"public class TaskList {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     * The list of tasks managed by this `TaskList`.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `TaskList` with an initial array of tasks.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * @param tasks The initial array of tasks to populate the list.","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    public TaskList(Task[] tasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"        if (tasks \u003d\u003d null) {","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"            this.tasks \u003d new ArrayList\u003c\u003e(1);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"            this.tasks \u003d new ArrayList\u003c\u003e(Arrays.asList(tasks));","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"     * Gets a task from the list by its index.","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"     * @param taskIndex The index of the task to retrieve.","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"     * @return The task at the specified index, or `null` if the index is out of bounds.","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            return null;","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        return this.tasks.get(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"     * Gets the number of tasks in the list.","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    public int size() {","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"     * Retrieves all tasks in the list as an array.","lastModifiedDate":"2023-09-10"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"     * @return An array containing all the tasks in the list.","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"    public Task[] getTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        Task[] taskArray \u003d new Task[this.size()];","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        return this.tasks.toArray(taskArray);","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"     * Adds a task to the list and returns a confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"     * @return A confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        return String.format(","lastModifiedDate":"2023-09-10"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"                \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"                        + \"     %s\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"                        + \"%s\",","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"                task, getTaskCountMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"     * Marks a task as done and returns a confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"     * @param text The text representing the task to be marked as done.","lastModifiedDate":"2023-09-10"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"     * @return A confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"    public String markTaskDone(String text) {","lastModifiedDate":"2023-09-10"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        int taskIndex \u003d Integer.parseInt(text) - 1;","lastModifiedDate":"2023-09-10"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d this.tasks.get(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"        task.markDone();","lastModifiedDate":"2023-09-10"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"Ok! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"                        + \"     %s\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"                        + \"%s\",","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"                task, getTaskCountMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"     * Marks a task as undone and returns a confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"     * @param text The text representing the task to be marked as undone.","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"     * @return A confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"    public String markTaskUndone(String text) {","lastModifiedDate":"2023-09-10"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"        int taskIndex \u003d Integer.parseInt(text) - 1;","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d this.tasks.get(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"        task.markUndone();","lastModifiedDate":"2023-09-10"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"Ok! I\u0027ve marked this task as undone:\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"                        + \"     %s\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"                        + \"%s\\n\",","lastModifiedDate":"2023-09-10"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"                task, getTaskCountMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"     * Deletes a task from the list and returns a confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"     * @param text The text representing the task to be deleted.","lastModifiedDate":"2023-09-10"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"     * @return A confirmation message.","lastModifiedDate":"2023-09-10"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"    public String deleteTask(String text) {","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"        int taskIndex \u003d Integer.parseInt(text) - 1;","lastModifiedDate":"2023-09-10"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d this.tasks.get(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"        this.tasks.remove(taskIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"Ok! I\u0027ve deleted this task:\\n \"","lastModifiedDate":"2023-09-10"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"                  + \"    %s\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"                  + \"%s\",","lastModifiedDate":"2023-09-10"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"                  task, getTaskCountMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":129,"author":{"gitId":"tjingsheng"},"content":"     * Lists all tasks in the list and returns them along with task numbers as a formatted string.","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":131,"author":{"gitId":"tjingsheng"},"content":"     * @return A formatted string containing the list of tasks with task numbers.","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":133,"author":{"gitId":"tjingsheng"},"content":"    public String listAllTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"tjingsheng"},"content":"        StringBuilder taskListBuilder \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"tjingsheng"},"content":"        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); ++i) {","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"tjingsheng"},"content":"            String taskNumber \u003d String.format(\"%3d.\", i);","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"tjingsheng"},"content":"            taskListBuilder.append(String.format(\"%s %s\\n\", taskNumber, this.tasks.get(i - 1).toString()));","lastModifiedDate":"2023-09-10"},{"lineNumber":138,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":139,"author":{"gitId":"tjingsheng"},"content":"        taskListBuilder.append(getTaskCountMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":140,"author":{"gitId":"tjingsheng"},"content":"        return taskListBuilder.toString();","lastModifiedDate":"2023-09-10"},{"lineNumber":141,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":142,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":143,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":144,"author":{"gitId":"tjingsheng"},"content":"     * Searches for tasks that contain any of the specified keywords in their descriptions.","lastModifiedDate":"2023-09-16"},{"lineNumber":145,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":146,"author":{"gitId":"tjingsheng"},"content":"     * @param keywords The keywords to search for within task descriptions.","lastModifiedDate":"2023-09-16"},{"lineNumber":147,"author":{"gitId":"tjingsheng"},"content":"     * @return A string containing the matching tasks or a message if no matches are found.","lastModifiedDate":"2023-09-16"},{"lineNumber":148,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":149,"author":{"gitId":"tjingsheng"},"content":"    public String findTask(String ...keywords) {","lastModifiedDate":"2023-09-16"},{"lineNumber":150,"author":{"gitId":"tjingsheng"},"content":"        StringBuilder matchingTasksBuilder \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-10"},{"lineNumber":151,"author":{"gitId":"tjingsheng"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2023-09-06"},{"lineNumber":152,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":153,"author":{"gitId":"tjingsheng"},"content":"        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); ++i) {","lastModifiedDate":"2023-09-06"},{"lineNumber":154,"author":{"gitId":"tjingsheng"},"content":"            Task currTask \u003d this.tasks.get(i - 1);","lastModifiedDate":"2023-09-06"},{"lineNumber":155,"author":{"gitId":"tjingsheng"},"content":"            if (containsKeywords(currTask, keywords)) {","lastModifiedDate":"2023-09-16"},{"lineNumber":156,"author":{"gitId":"tjingsheng"},"content":"                hasMatch \u003d true;","lastModifiedDate":"2023-09-06"},{"lineNumber":157,"author":{"gitId":"tjingsheng"},"content":"                String taskNumber \u003d String.format(\"%3d.\", i);","lastModifiedDate":"2023-09-06"},{"lineNumber":158,"author":{"gitId":"tjingsheng"},"content":"                matchingTasksBuilder.append(String.format(\"%s %s\\n\", taskNumber, currTask));","lastModifiedDate":"2023-09-10"},{"lineNumber":159,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":160,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":161,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":162,"author":{"gitId":"tjingsheng"},"content":"        if (!hasMatch) {","lastModifiedDate":"2023-09-06"},{"lineNumber":163,"author":{"gitId":"tjingsheng"},"content":"            matchingTasksBuilder.append(\"No tasks matched your keyword!\\n\");","lastModifiedDate":"2023-09-10"},{"lineNumber":164,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":165,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":166,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"%s%s\", matchingTasksBuilder, getTaskCountMessage());","lastModifiedDate":"2023-09-16"},{"lineNumber":167,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":168,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":169,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":170,"author":{"gitId":"tjingsheng"},"content":"     * Checks if a task contains any of the specified keywords within its description.","lastModifiedDate":"2023-09-16"},{"lineNumber":171,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":172,"author":{"gitId":"tjingsheng"},"content":"     * @param task     The task to check for keyword matches.","lastModifiedDate":"2023-09-16"},{"lineNumber":173,"author":{"gitId":"tjingsheng"},"content":"     * @param keywords The keywords to search for within the task\u0027s description.","lastModifiedDate":"2023-09-16"},{"lineNumber":174,"author":{"gitId":"tjingsheng"},"content":"     * @return true if the task contains any of the specified keywords, false otherwise.","lastModifiedDate":"2023-09-16"},{"lineNumber":175,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":176,"author":{"gitId":"tjingsheng"},"content":"    private boolean containsKeywords(Task task, String[] keywords) {","lastModifiedDate":"2023-09-16"},{"lineNumber":177,"author":{"gitId":"tjingsheng"},"content":"        for (String keyword : keywords) {","lastModifiedDate":"2023-09-16"},{"lineNumber":178,"author":{"gitId":"tjingsheng"},"content":"            if (task.hasKeyWord(keyword)) {","lastModifiedDate":"2023-09-16"},{"lineNumber":179,"author":{"gitId":"tjingsheng"},"content":"                return true;","lastModifiedDate":"2023-09-16"},{"lineNumber":180,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-16"},{"lineNumber":181,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":182,"author":{"gitId":"tjingsheng"},"content":"        return false;","lastModifiedDate":"2023-09-16"},{"lineNumber":183,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":184,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":185,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":186,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":187,"author":{"gitId":"tjingsheng"},"content":"     * Returns a string indicating the number of tasks in the task list.","lastModifiedDate":"2023-09-10"},{"lineNumber":188,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":189,"author":{"gitId":"tjingsheng"},"content":"     * @return A string mentioning the number of tasks in the task list.","lastModifiedDate":"2023-09-10"},{"lineNumber":190,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":191,"author":{"gitId":"tjingsheng"},"content":"    public String getTaskCountMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":192,"author":{"gitId":"tjingsheng"},"content":"        return String.format(\"You have %d tasks in the task list.\\n\", this.size());","lastModifiedDate":"2023-09-10"},{"lineNumber":193,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":194,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":195,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":196,"author":{"gitId":"tjingsheng"},"content":"     * Validates whether a task index is valid within the list.","lastModifiedDate":"2023-09-10"},{"lineNumber":197,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":198,"author":{"gitId":"tjingsheng"},"content":"     * @param text The text representing the task index to validate.","lastModifiedDate":"2023-09-10"},{"lineNumber":199,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":200,"author":{"gitId":"tjingsheng"},"content":"    public static void validateTaskIndex(String text, TaskList taskList) {","lastModifiedDate":"2023-09-16"},{"lineNumber":201,"author":{"gitId":"tjingsheng"},"content":"        int index;","lastModifiedDate":"2023-09-10"},{"lineNumber":202,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-10"},{"lineNumber":203,"author":{"gitId":"tjingsheng"},"content":"            index \u003d Integer.parseInt(text);","lastModifiedDate":"2023-09-10"},{"lineNumber":204,"author":{"gitId":"tjingsheng"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":205,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":206,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.INVALID_TASK_INDEX.getValueFormat(text)","lastModifiedDate":"2023-09-16"},{"lineNumber":207,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":208,"author":{"gitId":"tjingsheng"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":209,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":210,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.UNABLE_TO_PARSE_INDEX.getValueFormat(text, e.getMessage())","lastModifiedDate":"2023-09-16"},{"lineNumber":211,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":212,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":213,"author":{"gitId":"tjingsheng"},"content":"        if (index \u003c 1 || index \u003e taskList.size()) {","lastModifiedDate":"2023-09-16"},{"lineNumber":214,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofInvalidCommandException(","lastModifiedDate":"2023-09-16"},{"lineNumber":215,"author":{"gitId":"tjingsheng"},"content":"                ExceptionMessage.TASK_INDEX_NOT_IN_LIST.getValueFormat(text)","lastModifiedDate":"2023-09-16"},{"lineNumber":216,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-16"},{"lineNumber":217,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":218,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":219,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"tjingsheng":219}},{"path":"src/main/java/tasks/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import enums.TaskType;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":" * The `TodoTask` class represents a \"Todo\" task in the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":" * It is a specific type of task that has no specific due date or event range.","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"     * Constructs a `TodoTask` with the given description.","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     * @param description The description of the \"Todo\" task.","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"    public TodoTask(String description) {","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"        super(description);","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     * Generates a string representation of the `TodoTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representation of the \"Todo\" task, including its status icon and description.","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public String toString() {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        return TaskType.TODO.toSymbol() + super.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * Checks if this `TodoTask` is equal to another object.","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"     * @param o The object to compare to.","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"     * @return `true` if the objects are equal, `false` otherwise.","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"            return true;","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        if (!(o instanceof TodoTask)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            return false;","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        return super.equals(o);","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     * Generates a hash code for this `TodoTask`.","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * @return A hash code for the \"Todo\" task, including its description and completion status.","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    public int hashCode() {","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        return Objects.hash(super.hashCode());","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":56}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":" * The `Ui` class provides user interface-related functionality for the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":" * It includes methods for generating and returning messages, getting user input, and printing divider lines.","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"public class Ui {","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"     * Returns the width of the chat window.","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"     * @return The width of the chat window.","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"    public static int getChatWidth() {","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"        return 51;","lastModifiedDate":"2023-09-16"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"     * Generates and returns a welcome message when the Woof application starts.","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     * @return A welcome message.","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    public static String getHelloWorldMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"        return \"Woof Woof! I\u0027m Doggo\\nWhat can I do for you?\";","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     * Retrieves user input using a specified `Scanner` object and returns a user prompt.","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     * @param scanner The `Scanner` object for reading user input.","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"     * @return A user prompt.","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    public static String getUserInput(Scanner scanner) {","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"     * Generates and returns a title header for the bot\u0027s responses.","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"     * @return A message prompt for the bot.","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    public static String getBotTitle() {","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        return getDividerLine() + \"\\nDoggo: \";","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     * Generates and returns a title header for the user\u0027s responses.","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     * @return A message prompt for the bot.","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    public static String getUserTitle() {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        return getDividerLine() + \"\\nYou: \";","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"     * Returns a farewell message when the user exits the Woof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"     * @return A farewell message.","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"    public static String getByeUserMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        return \"Bye. Hope to see you again soon!\\n\"","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"                + \"Closing Woof Woof...\\n\";","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"     * Returns a message for cases when the bot is unable to understand the user\u0027s input.","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"     * @return A message indicating confusion.","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"    public static String getConfusedMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";","lastModifiedDate":"2023-09-10"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"     * Generates and returns a horizontal divider line as a string to separate messages in the chat window.","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"     * @return A string representing a horizontal divider line.","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"    public static String getDividerLine() {","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        return \"═\".repeat(getChatWidth());","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tjingsheng":84}},{"path":"src/main/java/woof/Woof.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import command.Command;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import enums.ExceptionMessage;","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofException;","lastModifiedDate":"2023-09-16"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import storage.TaskFileHandler;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":" * The `Woof` class is the main class for the Woof CLI application.","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":" * It handles user interactions and the core functionality of the CLI application.","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"public class Woof {","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"     * The main entry point for the Woof CLI application.","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        runWoofCli();","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"     * Runs the Woof CLI application, allowing the user to interact with it via the command line.","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public static void runWoofCli() {","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        System.out.println(Ui.getHelloWorldMessage());","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        boolean isConversing \u003d true;","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        while (isConversing) {","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"            TaskList taskList \u003d TaskFileHandler.readFromFile();","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"            System.out.println(Ui.getUserTitle());","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            String rawCommand \u003d Ui.getUserInput(scanner);","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            System.out.println(Ui.getBotTitle());","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            Command command \u003d Parser.parse(rawCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            System.out.print(command.execute(taskList));","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            isConversing \u003d !command.isByeCommand();","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            TaskFileHandler.saveToFile(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"     * Validates a date-time string using the application date-time formatter.","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"     * @param string The date-time string to validate.","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    public static void validateDateTime(String string) {","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        assert string !\u003d null : \"datetime string cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"            LocalDate.parse(string, getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"            throw new WoofException(ExceptionMessage.INVALID_DATE_TIME_FORMAT.getValueFormat(string));","lastModifiedDate":"2023-09-16"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"     * The getter for the datetime formatter used for parsing and formatting dates.","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"    public static DateTimeFormatter getDateTimeFormatter() {","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        return DateTimeFormatter.ISO_LOCAL_DATE;","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":73}},{"path":"src/main/java/woofwoof/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package woofwoof;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.effect.DropShadow;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":" * The `DialogBox` class represents a graphical dialog box for displaying messages in the GUI application.","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":" * It provides methods for creating user and application dialog boxes, flipping their alignment,","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":" * and setting text wrapping.","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"     * Private constructor to create a new `DialogBox`.","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"     * @param message The text content to be displayed in the dialog box.","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"     * @param img  The image to be displayed in the dialog box.","lastModifiedDate":"2023-09-10"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    private DialogBox(String message, Image img) {","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        assert message !\u003d null : \"message cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        assert img !\u003d null : \"image cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        this.setPadding(new Insets(10.0, 0.0, 10.0, 0.0));","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        DropShadow dropShadow \u003d createDropShadow();","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        Circle displayPicture \u003d createDisplayPicture(img);","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        Text text \u003d createText(message);","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        Rectangle messageBubble \u003d createMessageBubble(text);","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        displayPicture.setEffect(dropShadow);","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        messageBubble.setEffect(dropShadow);","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        StackPane bubbleDialog \u003d createBubbleDialog(messageBubble, text);","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        this.getChildren().addAll(bubbleDialog, displayPicture);","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"     * Create and configure the drop shadow effect for elements.","lastModifiedDate":"2023-09-15"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"     * @return The configured DropShadow effect.","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    private DropShadow createDropShadow() {","lastModifiedDate":"2023-09-15"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        DropShadow dropShadow \u003d new DropShadow();","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        dropShadow.setRadius(5.0);","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        dropShadow.setColor(new Color(0.0, 0.0, 0.0, 0.5));","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        return dropShadow;","lastModifiedDate":"2023-09-15"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"     * Create and configure the display picture (circle with an image fill).","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"     * @param img The display image to be displayed.","lastModifiedDate":"2023-09-15"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"     * @return The configured Circle element for the display picture.","lastModifiedDate":"2023-09-15"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    private Circle createDisplayPicture(Image img) {","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        assert img !\u003d null : \"image cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        Circle displayPicture \u003d new Circle(0, 0, 50);","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        displayPicture.setFill(new ImagePattern(img));","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        displayPicture.setEffect(createDropShadow());","lastModifiedDate":"2023-09-15"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        return displayPicture;","lastModifiedDate":"2023-09-15"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"     * Create a Text element with the given message content.","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"     * @param message The text content to be displayed.","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"     * @return The configured Text element.","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    private Text createText(String message) {","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        assert message !\u003d null : \"message cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        return new Text(message);","lastModifiedDate":"2023-09-15"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"     * Create and configure the message bubble (rounded rectangle).","lastModifiedDate":"2023-09-15"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"     * @param text The Text element to calculate the height of the bubble.","lastModifiedDate":"2023-09-15"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"     * @return The configured Rectangle element for the message bubble.","lastModifiedDate":"2023-09-15"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"    private Rectangle createMessageBubble(Text text) {","lastModifiedDate":"2023-09-15"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"        assert text !\u003d null : \"text cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"        double messageBubbleHeight \u003d text.getBoundsInLocal().getHeight() * 1.255 + 20;","lastModifiedDate":"2023-09-15"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"        Rectangle messageBubble \u003d new Rectangle(560, messageBubbleHeight);","lastModifiedDate":"2023-09-10"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"        messageBubble.setFill(Color.WHITE);","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"        messageBubble.setArcWidth(30);","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"        messageBubble.setArcHeight(30);","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"        messageBubble.setEffect(createDropShadow());","lastModifiedDate":"2023-09-15"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"        return messageBubble;","lastModifiedDate":"2023-09-15"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"     * Create a StackPane to combine the message bubble and text message.","lastModifiedDate":"2023-09-15"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"     * @param messageBubble The message bubble element.","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"     * @param text       The text message element.","lastModifiedDate":"2023-09-16"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"     * @return The configured StackPane containing the message bubble and text message.","lastModifiedDate":"2023-09-15"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"    private StackPane createBubbleDialog(Rectangle messageBubble, Text text) {","lastModifiedDate":"2023-09-16"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"        assert text !\u003d null : \"message cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"        Insets bubbleMargin \u003d new Insets(20.0); // top, right, bottom, left","lastModifiedDate":"2023-09-15"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"        StackPane bubbleDialog \u003d new StackPane(messageBubble, text);","lastModifiedDate":"2023-09-16"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"        StackPane.setMargin(text, bubbleMargin);","lastModifiedDate":"2023-09-16"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"        bubbleDialog.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-10"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"        bubbleDialog.setStyle(","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"            \"-fx-padding: 0px 20px 0px 20px;\"","lastModifiedDate":"2023-09-10"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-10"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"        return bubbleDialog;","lastModifiedDate":"2023-09-15"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"     * Flips the dialog box, changing the alignment to place the display picture on the left and message bubble","lastModifiedDate":"2023-09-15"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"     * on the right.","lastModifiedDate":"2023-09-15"},{"lineNumber":127,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"tjingsheng"},"content":"    private void flip() {","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"tjingsheng"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"tjingsheng"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-10"},{"lineNumber":131,"author":{"gitId":"tjingsheng"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"tjingsheng"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":136,"author":{"gitId":"tjingsheng"},"content":"     * Creates a new user dialog box.","lastModifiedDate":"2023-09-10"},{"lineNumber":137,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":138,"author":{"gitId":"tjingsheng"},"content":"     * @param message The message content to be displayed in the user dialog box.","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"tjingsheng"},"content":"     * @param img  The display image to be displayed in the user dialog box.","lastModifiedDate":"2023-09-15"},{"lineNumber":140,"author":{"gitId":"tjingsheng"},"content":"     * @return A new `DialogBox` representing the user\u0027s dialog.","lastModifiedDate":"2023-09-10"},{"lineNumber":141,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":142,"author":{"gitId":"tjingsheng"},"content":"    public static DialogBox getUserDialog(String message, Image img) {","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"tjingsheng"},"content":"        assert message !\u003d null : \"message cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":144,"author":{"gitId":"tjingsheng"},"content":"        assert img !\u003d null : \"image cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":145,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":146,"author":{"gitId":"tjingsheng"},"content":"        return new DialogBox(message, img);","lastModifiedDate":"2023-09-15"},{"lineNumber":147,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":148,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":149,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":150,"author":{"gitId":"tjingsheng"},"content":"     * Creates a new dialog box and flips it to place the ImageView on the left and message on the right.","lastModifiedDate":"2023-09-15"},{"lineNumber":151,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":152,"author":{"gitId":"tjingsheng"},"content":"     * @param message The message content to be displayed in the application dialog box.","lastModifiedDate":"2023-09-15"},{"lineNumber":153,"author":{"gitId":"tjingsheng"},"content":"     * @param img  The display image to be displayed in the application dialog box.","lastModifiedDate":"2023-09-15"},{"lineNumber":154,"author":{"gitId":"tjingsheng"},"content":"     * @return A new `DialogBox` representing the application\u0027s dialog.","lastModifiedDate":"2023-09-10"},{"lineNumber":155,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":156,"author":{"gitId":"tjingsheng"},"content":"    public static DialogBox getBotDialog(String message, Image img) {","lastModifiedDate":"2023-09-15"},{"lineNumber":157,"author":{"gitId":"tjingsheng"},"content":"        assert message !\u003d null : \"message cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":158,"author":{"gitId":"tjingsheng"},"content":"        assert img !\u003d null : \"image cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":159,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":160,"author":{"gitId":"tjingsheng"},"content":"        var db \u003d new DialogBox(message, img);","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"tjingsheng"},"content":"        db.flip();","lastModifiedDate":"2023-09-10"},{"lineNumber":162,"author":{"gitId":"tjingsheng"},"content":"        return db;","lastModifiedDate":"2023-09-10"},{"lineNumber":163,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":164,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"tjingsheng":164}},{"path":"src/main/java/woofwoof/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package woofwoof;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"public class Launcher {","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"        Application.launch(WoofWoof.class, args);","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"tjingsheng":12}},{"path":"src/main/java/woofwoof/WoofWoof.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package woofwoof;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import java.net.URL;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import java.util.concurrent.Executors;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import java.util.concurrent.ScheduledExecutorService;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import command.Command;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.ImageCursor;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"import storage.TaskFileHandler;","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":" * The `WoofWoof` class is the main class for the Woof GUI application.","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":" * It handles user interactions and the core functionality of the application.","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"public class WoofWoof extends Application {","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    private VBox dialogArea;","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"    private Button clearButton;","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"    private TextArea userInput;","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    private Woof woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    private final Image user \u003d new Image(","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/userDisplayPicture.jpeg\"))","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    );","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    private final Image doggo \u003d new Image(","lastModifiedDate":"2023-09-10"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/botDisplayPicture.jpeg\"))","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"    );","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"     * Initializes the WoofWoof application by reading the task list from a file","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"     * and loading the font.","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-10"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        this.taskList \u003d TaskFileHandler.readFromFile();","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        this.userInput.setOnKeyPressed(event -\u003e {","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"            if (event.getCode() \u003d\u003d KeyCode.ENTER) {","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"                handleUserSubmit();","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        });","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        this.sendButton.setOnMouseEntered(e -\u003e this.sendButton.setStyle(\"-fx-base: #C1E1C1\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        this.sendButton.setOnMouseExited(e -\u003e this.sendButton.setStyle(\"-fx-base: #C5CBEC\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        this.clearButton.setOnMouseEntered(e -\u003e this.clearButton.setStyle(\"-fx-base: #FAA0A0\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        this.clearButton.setOnMouseExited(e -\u003e this.clearButton.setStyle(\"-fx-base: #C5CBEC\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        this.sendButton.setOnMouseClicked(event -\u003e handleUserSubmit());","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"     * Sets the Woof instance for the application.","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"     * @param w The Woof instance to set.","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"    public void setWoof(Woof w) {","lastModifiedDate":"2023-09-10"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        this.woof \u003d w;","lastModifiedDate":"2023-09-10"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"     * Starts the WoofWoof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"     * @param primaryStage The primary stage for the application.","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2023-09-10"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"        loadAndSetCustomFont();","lastModifiedDate":"2023-09-10"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"        try {","lastModifiedDate":"2023-09-10"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(WoofWoof.class.getResource(\"/views/WoofWoof.fxml\"));","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"            this.scene \u003d new Scene(fxmlLoader.load());","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"            loadAndSetCustomCursor();","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"            loadCssStyles();","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"            primaryStage.setScene(this.scene);","lastModifiedDate":"2023-09-10"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"            primaryStage.setTitle(\"Woof Woof\");","lastModifiedDate":"2023-09-10"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"            primaryStage.setResizable(false);","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"            fxmlLoader.\u003cWoofWoof\u003egetController().setWoof(this.woof);","lastModifiedDate":"2023-09-10"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"            primaryStage.show();","lastModifiedDate":"2023-09-10"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-10"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"     * Loads, get, and set a custom font.","lastModifiedDate":"2023-09-10"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"    private void loadAndSetCustomFont() {","lastModifiedDate":"2023-09-10"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"        URL fontResource \u003d getClass().getResource(\"/fonts/sono/static/sono-light.ttf\");","lastModifiedDate":"2023-09-10"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"        Font.loadFont(Objects.requireNonNull(fontResource).toExternalForm(), 13);","lastModifiedDate":"2023-09-10"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"     * Loads, get, and set a custom cursor with fixed properties.","lastModifiedDate":"2023-09-10"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"    private void loadAndSetCustomCursor() {","lastModifiedDate":"2023-09-10"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"        String imagePath \u003d \"/images/paw.png\";","lastModifiedDate":"2023-09-10"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"        double imageWidth \u003d 40.0;","lastModifiedDate":"2023-09-10"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"        double imageHeight \u003d 40.0;","lastModifiedDate":"2023-09-10"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"        double hotspotX \u003d 20.0;","lastModifiedDate":"2023-09-10"},{"lineNumber":127,"author":{"gitId":"tjingsheng"},"content":"        double hotspotY \u003d 20.0;","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"tjingsheng"},"content":"        Image cursorImage \u003d new Image(imagePath, imageWidth, imageHeight, false, true);","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"tjingsheng"},"content":"        ImageCursor imageCursor \u003d new ImageCursor(cursorImage, hotspotX, hotspotY);","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"tjingsheng"},"content":"        this.scene.setOnMouseEntered(e -\u003e scene.setCursor(imageCursor));","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"tjingsheng"},"content":"     * Load CSS styles from file paths and apply them to the scene.","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":136,"author":{"gitId":"tjingsheng"},"content":"    private void loadCssStyles() {","lastModifiedDate":"2023-09-10"},{"lineNumber":137,"author":{"gitId":"tjingsheng"},"content":"        String[] cssFilePaths \u003d {","lastModifiedDate":"2023-09-10"},{"lineNumber":138,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/dialogArea.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/root.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":140,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/scrollPane.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":141,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/sendButton.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":142,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/userInput.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"tjingsheng"},"content":"            \"/styles/clearButton.css\",","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"tjingsheng"},"content":"        };","lastModifiedDate":"2023-09-10"},{"lineNumber":145,"author":{"gitId":"tjingsheng"},"content":"        for (String cssFilePath : cssFilePaths) {","lastModifiedDate":"2023-09-10"},{"lineNumber":146,"author":{"gitId":"tjingsheng"},"content":"            String css \u003d Objects.requireNonNull(getClass().getResource(cssFilePath)).toExternalForm();","lastModifiedDate":"2023-09-10"},{"lineNumber":147,"author":{"gitId":"tjingsheng"},"content":"            this.scene.getStylesheets().add(css);","lastModifiedDate":"2023-09-10"},{"lineNumber":148,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":149,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":150,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":151,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":152,"author":{"gitId":"tjingsheng"},"content":"     * Handles user submit, generates responses, and updates the dialog.","lastModifiedDate":"2023-09-10"},{"lineNumber":153,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":154,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-10"},{"lineNumber":155,"author":{"gitId":"tjingsheng"},"content":"    private void handleUserSubmit() {","lastModifiedDate":"2023-09-10"},{"lineNumber":156,"author":{"gitId":"tjingsheng"},"content":"        String message \u003d this.userInput.getText();","lastModifiedDate":"2023-09-10"},{"lineNumber":157,"author":{"gitId":"tjingsheng"},"content":"        if (!message.trim().isEmpty()) {","lastModifiedDate":"2023-09-16"},{"lineNumber":158,"author":{"gitId":"tjingsheng"},"content":"            String response \u003d processMessage(message);","lastModifiedDate":"2023-09-10"},{"lineNumber":159,"author":{"gitId":"tjingsheng"},"content":"            this.dialogArea.getChildren().addAll(","lastModifiedDate":"2023-09-10"},{"lineNumber":160,"author":{"gitId":"tjingsheng"},"content":"                    DialogBox.getUserDialog(wrapText(message, \"\\n\", 52), this.user),","lastModifiedDate":"2023-09-10"},{"lineNumber":161,"author":{"gitId":"tjingsheng"},"content":"                    DialogBox.getBotDialog(wrapText(response, \"\\n\", 52), this.doggo)","lastModifiedDate":"2023-09-10"},{"lineNumber":162,"author":{"gitId":"tjingsheng"},"content":"            );","lastModifiedDate":"2023-09-10"},{"lineNumber":163,"author":{"gitId":"tjingsheng"},"content":"            this.userInput.clear();","lastModifiedDate":"2023-09-10"},{"lineNumber":164,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":165,"author":{"gitId":"tjingsheng"},"content":"        Platform.runLater(() -\u003e Platform.runLater(()-\u003ethis.scrollPane.setVvalue(1.0)));","lastModifiedDate":"2023-09-16"},{"lineNumber":166,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":167,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":168,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":169,"author":{"gitId":"tjingsheng"},"content":"     * Handles user clear, clears the dialog area and text area.","lastModifiedDate":"2023-09-15"},{"lineNumber":170,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":171,"author":{"gitId":"tjingsheng"},"content":"    @FXML","lastModifiedDate":"2023-09-15"},{"lineNumber":172,"author":{"gitId":"tjingsheng"},"content":"    private void handleUserClear() {","lastModifiedDate":"2023-09-15"},{"lineNumber":173,"author":{"gitId":"tjingsheng"},"content":"        this.dialogArea.getChildren().clear();","lastModifiedDate":"2023-09-15"},{"lineNumber":174,"author":{"gitId":"tjingsheng"},"content":"        this.userInput.clear();","lastModifiedDate":"2023-09-15"},{"lineNumber":175,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":176,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":177,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":178,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":179,"author":{"gitId":"tjingsheng"},"content":"     * Schedule the closing of the JavaFX stage after a 1-second delay.","lastModifiedDate":"2023-09-10"},{"lineNumber":180,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":181,"author":{"gitId":"tjingsheng"},"content":"    private void scheduleCloseAfterDelay() {","lastModifiedDate":"2023-09-10"},{"lineNumber":182,"author":{"gitId":"tjingsheng"},"content":"        ScheduledExecutorService executorService \u003d Executors.newSingleThreadScheduledExecutor();","lastModifiedDate":"2023-09-10"},{"lineNumber":183,"author":{"gitId":"tjingsheng"},"content":"        executorService.schedule(() -\u003e Platform.runLater(() -\u003e {","lastModifiedDate":"2023-09-10"},{"lineNumber":184,"author":{"gitId":"tjingsheng"},"content":"            Stage currentStage \u003d (Stage) this.dialogArea.getScene().getWindow();","lastModifiedDate":"2023-09-10"},{"lineNumber":185,"author":{"gitId":"tjingsheng"},"content":"            currentStage.close();","lastModifiedDate":"2023-09-10"},{"lineNumber":186,"author":{"gitId":"tjingsheng"},"content":"            executorService.shutdown();","lastModifiedDate":"2023-09-10"},{"lineNumber":187,"author":{"gitId":"tjingsheng"},"content":"        }),","lastModifiedDate":"2023-09-10"},{"lineNumber":188,"author":{"gitId":"tjingsheng"},"content":"            2, TimeUnit.SECONDS","lastModifiedDate":"2023-09-10"},{"lineNumber":189,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-10"},{"lineNumber":190,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":191,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":192,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":193,"author":{"gitId":"tjingsheng"},"content":"     * Processes the message and generates a response to user input.","lastModifiedDate":"2023-09-10"},{"lineNumber":194,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":195,"author":{"gitId":"tjingsheng"},"content":"     * @param message The user\u0027s message.","lastModifiedDate":"2023-09-10"},{"lineNumber":196,"author":{"gitId":"tjingsheng"},"content":"     * @return The response message.","lastModifiedDate":"2023-09-10"},{"lineNumber":197,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":198,"author":{"gitId":"tjingsheng"},"content":"    private String processMessage(String message) {","lastModifiedDate":"2023-09-10"},{"lineNumber":199,"author":{"gitId":"tjingsheng"},"content":"        Command command \u003d Parser.parse(message);","lastModifiedDate":"2023-09-10"},{"lineNumber":200,"author":{"gitId":"tjingsheng"},"content":"        if (command.isByeCommand()) {","lastModifiedDate":"2023-09-10"},{"lineNumber":201,"author":{"gitId":"tjingsheng"},"content":"            scheduleCloseAfterDelay();","lastModifiedDate":"2023-09-10"},{"lineNumber":202,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":203,"author":{"gitId":"tjingsheng"},"content":"        return updateFileAndExecute(command);","lastModifiedDate":"2023-09-10"},{"lineNumber":204,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":205,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":206,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":207,"author":{"gitId":"tjingsheng"},"content":"     * Updates the task list by executing a command, saving the file, and returning the result.","lastModifiedDate":"2023-09-10"},{"lineNumber":208,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":209,"author":{"gitId":"tjingsheng"},"content":"     * @param command The command to be executed.","lastModifiedDate":"2023-09-10"},{"lineNumber":210,"author":{"gitId":"tjingsheng"},"content":"     * @return The result message of executing the command.","lastModifiedDate":"2023-09-10"},{"lineNumber":211,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":212,"author":{"gitId":"tjingsheng"},"content":"    private String updateFileAndExecute(Command command) {","lastModifiedDate":"2023-09-10"},{"lineNumber":213,"author":{"gitId":"tjingsheng"},"content":"        assert command !\u003d null : \"command cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":214,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":215,"author":{"gitId":"tjingsheng"},"content":"        this.taskList \u003d TaskFileHandler.readFromFile();","lastModifiedDate":"2023-09-10"},{"lineNumber":216,"author":{"gitId":"tjingsheng"},"content":"        String result \u003d command.execute(this.taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":217,"author":{"gitId":"tjingsheng"},"content":"        TaskFileHandler.saveToFile(this.taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":218,"author":{"gitId":"tjingsheng"},"content":"        return result;","lastModifiedDate":"2023-09-10"},{"lineNumber":219,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":220,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":221,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":222,"author":{"gitId":"tjingsheng"},"content":"     * Adds line breaks with a separator to the text.","lastModifiedDate":"2023-09-10"},{"lineNumber":223,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":224,"author":{"gitId":"tjingsheng"},"content":"    public static String wrapText(String message, String separator, int length) {","lastModifiedDate":"2023-09-16"},{"lineNumber":225,"author":{"gitId":"tjingsheng"},"content":"        assert message !\u003d null : \"text cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":226,"author":{"gitId":"tjingsheng"},"content":"        assert separator !\u003d null : \"seperator cannot be null\";","lastModifiedDate":"2023-09-16"},{"lineNumber":227,"author":{"gitId":"tjingsheng"},"content":"        assert length \u003e 0 : \"length has to be more than 0\";","lastModifiedDate":"2023-09-16"},{"lineNumber":228,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":229,"author":{"gitId":"tjingsheng"},"content":"        int currentLineLength \u003d 0;","lastModifiedDate":"2023-09-10"},{"lineNumber":230,"author":{"gitId":"tjingsheng"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-09-10"},{"lineNumber":231,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":232,"author":{"gitId":"tjingsheng"},"content":"        for (int i \u003d 0; i \u003c message.length(); i++) {","lastModifiedDate":"2023-09-16"},{"lineNumber":233,"author":{"gitId":"tjingsheng"},"content":"            char currentChar \u003d message.charAt(i);","lastModifiedDate":"2023-09-16"},{"lineNumber":234,"author":{"gitId":"tjingsheng"},"content":"            if (currentChar \u003d\u003d \u0027\\n\u0027) {","lastModifiedDate":"2023-09-10"},{"lineNumber":235,"author":{"gitId":"tjingsheng"},"content":"                currentLineLength \u003d 0;","lastModifiedDate":"2023-09-10"},{"lineNumber":236,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":237,"author":{"gitId":"tjingsheng"},"content":"            if (currentLineLength \u003e\u003d length) {","lastModifiedDate":"2023-09-10"},{"lineNumber":238,"author":{"gitId":"tjingsheng"},"content":"                result.append(separator);","lastModifiedDate":"2023-09-10"},{"lineNumber":239,"author":{"gitId":"tjingsheng"},"content":"                currentLineLength \u003d 0;","lastModifiedDate":"2023-09-10"},{"lineNumber":240,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":241,"author":{"gitId":"tjingsheng"},"content":"            if (currentLineLength !\u003d 0 || currentChar !\u003d \u0027 \u0027) {","lastModifiedDate":"2023-09-10"},{"lineNumber":242,"author":{"gitId":"tjingsheng"},"content":"                result.append(currentChar);","lastModifiedDate":"2023-09-10"},{"lineNumber":243,"author":{"gitId":"tjingsheng"},"content":"                currentLineLength++;","lastModifiedDate":"2023-09-10"},{"lineNumber":244,"author":{"gitId":"tjingsheng"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":245,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":246,"author":{"gitId":"tjingsheng"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":247,"author":{"gitId":"tjingsheng"},"content":"        return result.toString();","lastModifiedDate":"2023-09-10"},{"lineNumber":248,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":249,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":250,"author":{"gitId":"tjingsheng"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":251,"author":{"gitId":"tjingsheng"},"content":"     * The main entry point of the WoofWoof application.","lastModifiedDate":"2023-09-10"},{"lineNumber":252,"author":{"gitId":"tjingsheng"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":253,"author":{"gitId":"tjingsheng"},"content":"     * @param args The command-line arguments (not used in JavaFX applications).","lastModifiedDate":"2023-09-10"},{"lineNumber":254,"author":{"gitId":"tjingsheng"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":255,"author":{"gitId":"tjingsheng"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-10"},{"lineNumber":256,"author":{"gitId":"tjingsheng"},"content":"        launch(args);","lastModifiedDate":"2023-09-10"},{"lineNumber":257,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":258,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"tjingsheng":258}},{"path":"src/main/resources/fonts/Sono/OFL.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"Copyright 2020 The Sono Project Authors (https://github.com/sursly/sono)","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"This Font Software is licensed under the SIL Open Font License, Version 1.1.","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"This license is copied below, and is also available with a FAQ at:","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"http://scripts.sil.org/OFL","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"-----------------------------------------------------------","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"-----------------------------------------------------------","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"PREAMBLE","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"The goals of the Open Font License (OFL) are to stimulate worldwide","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"development of collaborative font projects, to support the font creation","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"efforts of academic and linguistic communities, and to provide a free and","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"open framework in which fonts may be shared and improved in partnership","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"with others.","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"The OFL allows the licensed fonts to be used, studied, modified and","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"redistributed freely as long as they are not sold by themselves. The","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"fonts, including any derivative works, can be bundled, embedded, ","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"redistributed and/or sold with any software provided that any reserved","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"names are not used by derivative works. The fonts and derivatives,","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"however, cannot be released under any other type of license. The","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"requirement for fonts to remain under this license does not apply","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"to any document created using the fonts or their derivatives.","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"DEFINITIONS","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"\"Font Software\" refers to the set of files released by the Copyright","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"Holder(s) under this license and clearly marked as such. This may","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"include source files, build scripts and documentation.","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"\"Reserved Font Name\" refers to any names specified as such after the","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"copyright statement(s).","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"\"Original Version\" refers to the collection of Font Software components as","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"distributed by the Copyright Holder(s).","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"\"Modified Version\" refers to any derivative made by adding to, deleting,","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"or substituting -- in part or in whole -- any of the components of the","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"Original Version, by changing formats or by porting the Font Software to a","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"new environment.","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"\"Author\" refers to any designer, engineer, programmer, technical","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"writer or other person who contributed to the Font Software.","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"PERMISSION \u0026 CONDITIONS","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"Permission is hereby granted, free of charge, to any person obtaining","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"a copy of the Font Software, to use, study, copy, merge, embed, modify,","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"redistribute, and sell modified and unmodified copies of the Font","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"Software, subject to the following conditions:","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"1) Neither the Font Software nor any of its individual components,","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"in Original or Modified Versions, may be sold by itself.","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"2) Original or Modified Versions of the Font Software may be bundled,","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"redistributed and/or sold with any software, provided that each copy","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"contains the above copyright notice and this license. These can be","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"included either as stand-alone text files, human-readable headers or","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"in the appropriate machine-readable metadata fields within text or","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"binary files as long as those fields can be easily viewed by the user.","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"3) No Modified Version of the Font Software may use the Reserved Font","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"Name(s) unless explicit written permission is granted by the corresponding","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"Copyright Holder. This restriction only applies to the primary font name as","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"presented to the users.","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"Software shall not be used to promote, endorse or advertise any","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"Modified Version, except to acknowledge the contribution(s) of the","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"Copyright Holder(s) and the Author(s) or with their explicit written","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"permission.","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"5) The Font Software, modified or unmodified, in part or in whole,","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"must be distributed entirely under this license, and must not be","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"distributed under any other license. The requirement for fonts to","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"remain under this license does not apply to any document created","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"using the Font Software.","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"TERMINATION","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"This license becomes null and void if any of the above conditions are","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"not met.","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"DISCLAIMER","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,","lastModifiedDate":"2023-09-14"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL","lastModifiedDate":"2023-09-14"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"OTHER DEALINGS IN THE FONT SOFTWARE.","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"tjingsheng":93}},{"path":"src/main/resources/fonts/Sono/README.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"Sono Variable Font","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"This download contains Sono as both a variable font and static fonts.","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"Sono is a variable font with these axes:","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"  MONO","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"  wght","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"This means all the styles are contained in a single file:","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"  Sono-VariableFont_MONO,wght.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"If your app fully supports variable fonts, you can now pick intermediate styles","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"that aren’t available as static fonts. Not all apps support variable fonts, and","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"in those cases you can use the static font files for Sono:","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-ExtraLight.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-Light.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-Regular.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-Medium.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-SemiBold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-Bold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"  static/Sono_Proportional-ExtraBold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-ExtraLight.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-Light.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-Regular.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-Medium.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-SemiBold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-Bold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"  static/Sono-ExtraBold.ttf","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"Get started","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"-----------","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"1. Install the font files you want to use","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"2. Use your app\u0027s font picker to view the font family and all the","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"available styles","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"Learn more about variable fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"-------------------------------","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"  https://variablefonts.typenetwork.com","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"  https://medium.com/variable-fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"In desktop apps","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"  https://theblog.adobe.com/can-variable-fonts-illustrator-cc","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"Online","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"  https://developers.google.com/fonts/docs/getting_started","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"Installing fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"  MacOS: https://support.apple.com/en-us/HT201749","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"  Linux: https://www.google.com/search?q\u003dhow+to+install+a+font+on+gnu%2Blinux","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"Android Apps","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"  https://developers.google.com/fonts/docs/android","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"License","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"-------","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"Please read the full license text (OFL.txt) to understand the permissions,","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"restrictions and requirements for usage, redistribution, and modification.","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"You can use them in your products \u0026 projects – print or digital,","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"commercial or otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"This isn\u0027t legal advice, please consider consulting a lawyer and see the full","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"license for all details.","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"tjingsheng":77}},{"path":"src/main/resources/views/WoofWoof.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"\u003cAnchorPane fx:controller\u003d\"woofwoof.WoofWoof\"","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"            xmlns\u003d\"http://javafx.com/javafx/17.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\"","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"                hbarPolicy\u003d\"NEVER\"","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"                hvalue\u003d\"1.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"                AnchorPane.topAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"                AnchorPane.leftAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"                AnchorPane.rightAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"                AnchorPane.bottomAnchor\u003d\"100.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    \u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"        \u003cVBox fx:id\u003d\"dialogArea\"","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"              alignment\u003d\"TOP_CENTER\"","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"              nodeOrientation\u003d\"LEFT_TO_RIGHT\"","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"              VBox.vgrow\u003d\"ALWAYS\"","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"        /\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    \u003cButton fx:id\u003d\"clearButton\"","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"            onAction\u003d\"#handleUserClear\"","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"            mnemonicParsing\u003d\"false\"","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"            text\u003d\"Clear\"","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"            AnchorPane.leftAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"            AnchorPane.bottomAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    /\u003e","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    \u003cTextArea fx:id\u003d\"userInput\" wrapText\u003d\"true\"","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"              AnchorPane.leftAnchor\u003d\"140.0\"","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"              AnchorPane.rightAnchor\u003d\"140.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"              AnchorPane.bottomAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    /\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    \u003cButton fx:id\u003d\"sendButton\"","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"            onAction\u003d\"#handleUserSubmit\"","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            mnemonicParsing\u003d\"false\"","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            text\u003d\"Woof\"","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            AnchorPane.bottomAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            AnchorPane.rightAnchor\u003d\"20.0\"","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"    /\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"tjingsheng":46}},{"path":"src/test/java/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-16"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"public class ByeCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-16"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-16"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-16"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-16"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-16"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        // Arrange, Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ByeCommand.validate(\"bye\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrows(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ByeCommand.validate(\"bye some argument\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrows(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ByeCommand.validate(\"list\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrows(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ByeCommand.validate(\"todo some task\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrows(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ByeCommand.validate(\"deadline some task\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteShowsByeMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        ByeCommand byeCommand \u003d new ByeCommand(\"bye\");","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d byeCommand.execute(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Bye. Hope to see you again soon!\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"                + \"Closing Woof Woof...\" + System.lineSeparator();","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoMessageDisplayedIfValidationFails() {","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        ByeCommand invalidCommand \u003d new ByeCommand(\"bye some argument\");","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        assertNotEquals(\"\", \"Invalid number of arguments for the \u0027bye\u0027 command.\");","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":78}},{"path":"src/test/java/command/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-16"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-16"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-16"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-16"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-16"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-16"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-16"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-16"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-16"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        // Arrange, Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeadlineCommand.validate(\"deadline study /by 2023-01-01\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeadlineCommand.validate(\"deadline       study /by 2023-01-01\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeadlineCommand.validate(\"deadline\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeadlineCommand.validate(\"deadline study /by 2023/01/01\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeadlineCommand.validate(\"deadline /by 2023-01-01\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteCreateTask() {","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(\"deadline some task /by 2023-12-31\");","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(\"2023-12-31\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        Task expectedTask \u003d new DeadlineTask(\"some task\", endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        deadlineCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        Task retrievedTask \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedTask, retrievedTask);","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskCreatedIfValidationFail() {","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        TodoCommand invalidCommand \u003d new TodoCommand(\"dealine\");","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":81}},{"path":"src/test/java/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        //Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        LocalDate startDate \u003d LocalDate.parse(\"2023-01-01\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(\"2023-12-31\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        Task task1 \u003d new TodoTask(\"some task 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        Task task2 \u003d new DeadlineTask(\"some task 2\", endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"        Task task3 \u003d new EventTask(\"some task 2\", startDate, endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(new Task[]{task1, task2, task3});","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"        // Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete 1\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete 2\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete a\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete 0\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e DeleteCommand.validate(\"delete 4\", taskList))","lastModifiedDate":"2023-09-16"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteDeleteTask() {","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(\"delete 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        Task task1 \u003d new TodoTask(\"some task 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(new Task[]{task1});","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        deleteCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(taskList.size(), 0);","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskDeletedIfValidationFails() {","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        DeleteCommand invalidCommand \u003d new DeleteCommand(\"delete 1?\");","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":93}},{"path":"src/test/java/command/EventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"public class EventCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        // Arrange, Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e EventCommand.validate(\"event some task /from 2023-01-01 /to 2023-12-31\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e EventCommand.validate(\"event\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e EventCommand.validate(\"event some task /from 2023-01-01\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e EventCommand.validate(\"event some task /to 2023-12-31\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e EventCommand.validate(\"event /from 2023-01-01 /to 2023-12-31\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteCreateTask() {","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        EventCommand eventCommand \u003d new EventCommand(\"event TaskName /from 2023-01-01 /to 2023-12-31\");","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        eventCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        LocalDate startDate \u003d LocalDate.parse(\"2023-01-01\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(\"2023-12-31\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        EventTask expectedTask \u003d new EventTask(\"TaskName\", startDate, endDate);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        Task retrievedTask \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(retrievedTask, expectedTask);","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskCreatedIfValidationFail() {","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        EventCommand invalidCommand \u003d new EventCommand(\"event\");","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":83}},{"path":"src/test/java/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"public class FindCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        // Act and Assert","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e FindCommand.validate(\"find keyword\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e FindCommand.validate(\"find keyword extra argument\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e FindCommand.validate(\"/find keyword\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e FindCommand.validate(\"find\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e FindCommand.validate(\"list keyword\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteFindsMatchingTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        LocalDate startDate \u003d LocalDate.parse(\"2023-01-01\");","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(\"2023-12-31\");","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new DeadlineTask(\"Task 2\", endDate));","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new EventTask(\"Task 3\", startDate, endDate));","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        FindCommand findCommand \u003d new FindCommand(\"find 2\");","lastModifiedDate":"2023-09-16"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Here are the matching tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"                + \"  2. [D][ ] Task 2\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"                + \"            ~By: 2023-12-31\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"                + \"You have 3 tasks in the task list.\" + System.lineSeparator();","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-16"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d findCommand.execute(taskList);","lastModifiedDate":"2023-09-16"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-16"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-16"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-16"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteFindsMatchingTasksForMultiKeywords() {","lastModifiedDate":"2023-09-16"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-16"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-16"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Eating\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Sleeping\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Drinking\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 3\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"22\"));","lastModifiedDate":"2023-09-16"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"        FindCommand findCommand \u003d new FindCommand(\"find 2 ing\");","lastModifiedDate":"2023-09-16"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Here are the matching tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"                + \"  1. [T][ ] Eating\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"                + \"  2. [T][ ] Sleeping\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"                + \"  3. [T][ ] Drinking\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"                + \"  5. [T][ ] Task 2\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"                + \"  7. [T][ ] 22\" + System.lineSeparator()","lastModifiedDate":"2023-09-16"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"                + \"You have 7 tasks in the task list.\" + System.lineSeparator();","lastModifiedDate":"2023-09-16"},{"lineNumber":100,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":101,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d findCommand.execute(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":103,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-10"},{"lineNumber":106,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":107,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoMatchingTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":110,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":111,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":112,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new DeadlineTask(\"Task 2\", LocalDate.parse(\"2023-12-31\")));","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new EventTask(\"Task 3\", LocalDate.parse(\"2023-01-01\"), LocalDate.parse(\"2023-12-31\")));","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":116,"author":{"gitId":"tjingsheng"},"content":"        FindCommand findCommand \u003d new FindCommand(\"find NonExistentTask\");","lastModifiedDate":"2023-09-06"},{"lineNumber":117,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Here are the matching tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":118,"author":{"gitId":"tjingsheng"},"content":"               + \"No tasks matched your keyword!\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"tjingsheng"},"content":"               + \"You have 3 tasks in the task list.\" + System.lineSeparator();","lastModifiedDate":"2023-09-10"},{"lineNumber":120,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":121,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":122,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d findCommand.execute(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":123,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":124,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-10"},{"lineNumber":126,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":127}},{"path":"src/test/java/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"import woof.Woof;","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"public class ListCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        // Act and Assert","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"list\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"/list\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"list some argument\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"todo\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"event some task\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e ListCommand.validate(\"deadline some task\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteListsTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        LocalDate startDate \u003d LocalDate.parse(\"2023-01-01\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        LocalDate endDate \u003d LocalDate.parse(\"2023-12-31\", Woof.getDateTimeFormatter());","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new DeadlineTask(\"Task 2\", endDate));","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new EventTask(\"Task 3\", startDate, endDate));","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        ListCommand listCommand \u003d new ListCommand(\"list\");","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Here are the tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"                + \"  1. [T][ ] Task 1\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"                + \"  2. [D][ ] Task 2\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"                + \"            ~By: 2023-12-31\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"                + \"  3. [E][ ] Task 3\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"                + \"            ~From: 2023-01-01\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"                + \"            ~To  : 2023-12-31\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"                + \"You have 3 tasks in the task list.\" + System.lineSeparator();","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d listCommand.execute(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteListsNoTasks() {","lastModifiedDate":"2023-09-10"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"        ListCommand listCommand \u003d new ListCommand(\"list\");","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"        String expectedOutput \u003d \"Here are the tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"                + \"You have 0 tasks in the task list.\" + System.lineSeparator();","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"        String actualOutput \u003d listCommand.execute(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":99}},{"path":"src/test/java/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"public class MarkCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        // Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark 1\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark 2\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark 0\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark 3\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e MarkCommand.validate(\"mark a\", taskList))","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteMarksTaskAsDone() {","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"mark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        markCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskMarkedIfValidationFails() {","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand invalidCommand \u003d new MarkCommand(\"mark 0\");","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"        assertNotEquals(\"\", task.isDone());","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":95}},{"path":"src/test/java/command/NullCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"public class NullCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        // Arrange, Act, Assert","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e NullCommand.validate(\"hehe\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e NullCommand.validate(\"    \")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e NullCommand.validate(\"unmark task 1\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e NullCommand.validate(\"todo abc\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteMarksTaskAsDone() {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"mark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(\"unmark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        markCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        unmarkCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        assertNotEquals(\"\", task.isDone());","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskMarkedIfValidationFails() {","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"mark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand invalidCommand \u003d new MarkCommand(\"unmark    1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        markCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":89}},{"path":"src/test/java/command/TodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"public class TodoCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"        // Act and Assert","lastModifiedDate":"2023-09-16"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e TodoCommand.validate(\"todo some task\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e TodoCommand.validate(\"todo\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e TodoCommand.validate(\"event some task\")), (","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e TodoCommand.validate(\"deadline some task\"))","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteCreateTask() {","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"        TodoCommand todoCommand \u003d new TodoCommand(\"todo TaskName\");","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        todoCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"        TodoTask expectedTask \u003d new TodoTask(\"TaskName\");","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(expectedTask, taskList.getTask(0));","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskCreatedIfValidationFail() {","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"        TodoCommand invalidCommand \u003d new TodoCommand(\"todo\");","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":78}},{"path":"src/test/java/command/UnmarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"package command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;","lastModifiedDate":"2023-09-16"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-16"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrowsExactly;","lastModifiedDate":"2023-09-16"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"tjingsheng"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"tjingsheng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"tjingsheng"},"content":"import exceptions.WoofInvalidCommandException;","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"tjingsheng"},"content":"import tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"tjingsheng"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"tjingsheng"},"content":"public class UnmarkCommandTest {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"tjingsheng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"tjingsheng"},"content":"    private final PrintStream originalOut \u003d System.out;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"tjingsheng"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"tjingsheng"},"content":"    public void setUpStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"tjingsheng"},"content":"        // Redirect System.out to the ByteArrayOutputStream","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(new PrintStream(this.outContent));","lastModifiedDate":"2023-09-16"},{"lineNumber":29,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"tjingsheng"},"content":"    @AfterEach","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"tjingsheng"},"content":"    public void restoreStreams() {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"tjingsheng"},"content":"        // Restore the original System.out","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"tjingsheng"},"content":"        System.setOut(this.originalOut);","lastModifiedDate":"2023-09-16"},{"lineNumber":35,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"tjingsheng"},"content":"    public void testValidate() {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"tjingsheng"},"content":"        // Act, Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"tjingsheng"},"content":"        assertAll((","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark 1\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertDoesNotThrow((","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark 2\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark 0\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark 3\", taskList)), (","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e assertThrowsExactly(WoofInvalidCommandException.class, (","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"tjingsheng"},"content":"            ) -\u003e UnmarkCommand.validate(\"unmark a\", taskList))","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"tjingsheng"},"content":"        );","lastModifiedDate":"2023-09-16"},{"lineNumber":59,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteMarksTaskAsDone() {","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"mark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"tjingsheng"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(\"unmark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"tjingsheng"},"content":"        markCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"tjingsheng"},"content":"        unmarkCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"tjingsheng"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"tjingsheng"},"content":"    @Test","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"tjingsheng"},"content":"    public void testExecuteNoTaskMarkedIfValidationFails() {","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"tjingsheng"},"content":"        // Arrange","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"tjingsheng"},"content":"        TaskList taskList \u003d new TaskList(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 1\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"tjingsheng"},"content":"        taskList.addTask(new TodoTask(\"Task 2\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand markCommand \u003d new MarkCommand(\"mark 1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":88,"author":{"gitId":"tjingsheng"},"content":"        MarkCommand invalidCommand \u003d new MarkCommand(\"unmark    1\");","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"tjingsheng"},"content":"        // Act","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"tjingsheng"},"content":"        markCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"tjingsheng"},"content":"        invalidCommand.execute(taskList);","lastModifiedDate":"2023-09-06"},{"lineNumber":93,"author":{"gitId":"tjingsheng"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":94,"author":{"gitId":"tjingsheng"},"content":"        // Assert","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"tjingsheng"},"content":"        Task task \u003d taskList.getTask(0);","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"tjingsheng"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"tjingsheng"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"tjingsheng"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"tjingsheng":98}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tjingsheng"},"content":"todo borrow book","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tjingsheng"},"content":"list","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tjingsheng"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tjingsheng"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tjingsheng"},"content":"list","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tjingsheng"},"content":"mark 1","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tjingsheng"},"content":"list","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tjingsheng"},"content":"unmark 1","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tjingsheng"},"content":"list","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tjingsheng":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tjingsheng"},"content":"java -classpath ..\\bin woof.Woof \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tjingsheng":1,"-":20}}]
