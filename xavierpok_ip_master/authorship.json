[{"path":"src/main/java/Kniaz.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"public class Kniaz {","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"//    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"//     * Seperator to make things a bit prettier","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"//    private static final String SEPERATOR \u003d \"_\".repeat(20) + \"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"//    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"//     * Logo to use to represent this chatbot in the command line","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"//    private static final String LOGO \u003d \"KNIAZ\";","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"//    // Placeholder for now, intend to make prettier later","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"//    // Kniaz is a rough equivalent for Duke in eastern europe - get it?","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"//    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"//     * Message to print when exiting.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"//    private static final String EXITMESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"//    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"//     * All tasks stored by Kniaz.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"//    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"//    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"//     * Main function of Kniaz, that is intended as entry point into the program.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"//     * @param args arguments to be entered into Kniaz when it is called from command line","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"//    public static void main(String[] args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"////        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"////                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"////                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"////                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"////                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"//        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"//        // initialise a scanner object to read from input","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(\"Hello from\\n\" + Kniaz.LOGO);","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"//        KniazSaver kniazSaver \u003d new KniazSaver(); // use default","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"//        KniazLoader kniazLoader \u003d new KniazLoader(); // use default","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"//        try { //wrap this in a try-catch because loading has many runtime exceptions that might occur","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"//            taskList \u003d kniazLoader.load();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"//        } catch (IOException e) { // For IOExceptions in general`","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"//            System.out.println(\"Could not load previous.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"//            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"//        } catch (ClassNotFoundException e) { // For when the data is corrupted","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"//            System.out.println(\"Data did not align to a class\");","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"//            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"//        CommandFactory nextCommand; //Initialise the input","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"//        while (true) { // I find this a bit icky but we rely on guard clauses to break instead","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"//            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//                nextCommand \u003d KniazLineParser.parseCommand(input.nextLine());","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//                // We try to parse...","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//            } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//                // And if there\u0027s an issue in parsing, we feedback user input!","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"//                // this needs to be here, because we skip the rest.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"//                continue;","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"//            }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"//            if (nextCommand.instructionEquals(InstructionType.QUIT)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"//                break; // exit if we are told to quit","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"//            }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"//            if (nextCommand.instructionEquals(InstructionType.LIST)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(taskList.toPrintString());","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"//                // print out if we are asked to list","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.MARK)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d MarkHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"As you say. The task has been marked as done.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.UNMARK)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d UnmarkHandler.handle(taskList, nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"Ah, so you didn\u0027t actually finish it. Correcting your mistake.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.DELETE)){","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d DeleteHandler.handle(taskList, nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"This task has been erased, mercy on its data :\");","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(String.format(\"Only %s tasks remain.\",taskList.size()));","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.TODO)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d ToDoHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"As you say. The task has been added To-Do : \");","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.DEADLINE)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d DeadlineHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"As you say. The task has been added as a Deadline : \");","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"xavierpok"},"content":"//            } else if (nextCommand.instructionEquals(InstructionType.EVENT)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"xavierpok"},"content":"//                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"xavierpok"},"content":"//                    String taskString \u003d EventHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(\"As you say. The task has been added To-Do : \");","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(taskString);","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"xavierpok"},"content":"//                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"xavierpok"},"content":"//                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"xavierpok"},"content":"//                }","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"xavierpok"},"content":"//            }","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"xavierpok"},"content":"//            // Each command input will invariably result in a seperator line being printed","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"xavierpok"},"content":"//            // Helps to keep it looking nice","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"xavierpok"},"content":"//            System.out.println((Kniaz.SEPERATOR));","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"xavierpok"},"content":"//            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"xavierpok"},"content":"//                kniazSaver.save(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"xavierpok"},"content":"//                // Every time a command is entered, storage.save.","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"xavierpok"},"content":"//                // This is because the list can only ever be updated via command.","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"xavierpok"},"content":"//            } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"xavierpok"},"content":"//                // When something goes wrong in trying to storage.save with regards to IO","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"xavierpok"},"content":"//                // Should not happen in usual operation","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(\"Something went wrong trying to storage.save, I won\u0027t remember your tasks on reload!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"xavierpok"},"content":"//                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"xavierpok"},"content":"//            } catch (SecurityException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"xavierpok"},"content":"//                // When the security manager doesn\u0027t let us storage.save","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"xavierpok"},"content":"//                // Complain back to the user","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(\"I couldn\u0027t storage.save because I wasn\u0027t allowed!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"xavierpok"},"content":"//                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"xavierpok"},"content":"//                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"xavierpok"},"content":"//            }","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(Kniaz.EXITMESSAGE);","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"xavierpok"},"content":"//        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"xavierpok"},"content":"//    }","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"xavierpok"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-20"},{"lineNumber":196,"author":{"gitId":"xavierpok"},"content":"        KniazSession.init().run();","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":198,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":199,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":200,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":201,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":202,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":203,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":204,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"xavierpok":204}},{"path":"src/main/java/exceptions/KniazRuntimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Exception that encapsulations typical Kniaz excpetions we expect to run into at runtime","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * Typically, these involve I/O of some kind, such as invalid commands or invalid inputs","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Most importantly, contains an additional user message that is meant to be seen by the user","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * And NOT for debugging/development purposes","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public class KniazRuntimeException extends RuntimeException{","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * The message that is meant to be seen by the user","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    private String userMessage \u003d \"\";","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * Constructor for an exception, which constructs it with a non-user facing message, a user-facing message and","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * a cause","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @param message the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param userMessage the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param cause what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    public KniazRuntimeException(String message, String userMessage, Throwable cause) {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"        super(message,cause);","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"        this.userMessage \u003d userMessage;","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * Getter method for the user-facing message","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing message of this exception","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    public String getUserMessage() {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        return userMessage;","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":36}},{"path":"src/main/java/exceptions/syntax/ArgErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"public abstract class ArgErrorException extends KniazRuntimeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     * Constructor for an exception, which constructs it with a non-user facing message, a user-facing message and","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     * a cause","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * @param message     the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * @param userMessage the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * @param cause       what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    public ArgErrorException(String message, String userMessage, Throwable cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"        super(message, userMessage, cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":19}},{"path":"src/main/java/exceptions/syntax/ArgFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Thrown when there is some error in how the argument is formatted -- Like if it cannot be parsed into an int, etc.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"public class ArgFormatException extends ArgErrorException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     * Constructor for this exception","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * @param message     the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * @param userMessage the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * @param cause       what caused this, see java.Exceptions for more details,","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     *                    typically an exception thrown by some other method","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    public ArgFormatException(String message, String userMessage, IllegalArgumentException cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"        super(message, userMessage, cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"xavierpok":22}},{"path":"src/main/java/exceptions/syntax/MissingNamedArgsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Exception thrown when an expected named argument is missing","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"public class MissingNamedArgsException extends ArgErrorException{","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * Constructor for this exception","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * @param expectedArgs     the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * @param providedArgs the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * @param cause       what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    public MissingNamedArgsException(List\u003c? extends String\u003e expectedArgs, List\u003c? extends String\u003e providedArgs,","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"                                     Throwable cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"        super(String.format(\"Expected all of %s args, but only got %s\",","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"                        expectedArgs.toString(), providedArgs.toString()),","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"                String.format(\"I need all of %s as arguments, but you gave me only %s!\",","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"                        expectedArgs.toString(), providedArgs.toString()),","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"                cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"xavierpok":25}},{"path":"src/main/java/exceptions/syntax/MissingUnnamedArgsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Exception to be thrown when a CommandHandler is missing unnamed arguments","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"public class MissingUnnamedArgsException extends ArgErrorException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     * Constructor for the exception","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * @param numGivenArgs     How many arguments were actually provided","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * @param numExpectedArgs How many arguments were expected","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * @param cause       what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    public MissingUnnamedArgsException(int numGivenArgs, int numExpectedArgs, Throwable cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"        super(String.format(\"User gave %s args, but expected %s args!\",","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"                        numGivenArgs, numExpectedArgs),","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"                String.format(\"You gave me only %s arguments, but I need at %s!\",","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"                        numGivenArgs, numExpectedArgs),","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"                cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"xavierpok":21}},{"path":"src/main/java/exceptions/syntax/TaskListBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Thrown when the user tries to perform an operation on an index out of bounds of a TaskList","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"public class TaskListBoundsException extends ArgErrorException {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     * Constructor for a TaskListBoundsException","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * @param listSize       the size of the list that was attempted to be accessed","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * @param attemptedIndex the message the user attempted to access","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * @param cause          what caused this, see java.Exceptions for more details,","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     *                       typically pass in whatever out-of-bounds exception forced us to throw this","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    public TaskListBoundsException(int listSize, int attemptedIndex, IndexOutOfBoundsException cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"        super(String.format(\"User tried to access index %s, but list was of size %s\",","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"                        attemptedIndex, listSize),","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"                String.format(\"Your index %s cannot be accepted, only indices 1 - %s are valid!\",","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"                        attemptedIndex + 1, listSize), //user expected 1-indexed","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"                cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"xavierpok":25}},{"path":"src/main/java/exceptions/syntax/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions.syntax;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"public class UnknownCommandException extends ArgErrorException {","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"     * Constructor for an exception, which constructs it with a non-user facing message, a user-facing message and","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"     * a cause","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     * @param message     the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     * @param userMessage the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * @param cause       what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    public UnknownCommandException(String message, String userMessage, Throwable cause) {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"        super(message,  userMessage,  cause);","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":15}},{"path":"src/main/java/main/KniazSession.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.CommandFactory;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.KniazCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import main.logic.handler.CommandHandler;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import storage.save.KniazLoader;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import storage.save.KniazSaver;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import ui.KniazInputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import ui.KniazOutputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"public class KniazSession {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    private KniazLoader loader;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    private KniazSaver saver;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    private KniazInputController inputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    private KniazOutputController outputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    private boolean isRunning;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * Getter for the tasklist of this session","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @return the tasklist of this session","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    private KniazSession(TaskList taskList,","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"                         KniazLoader loader,","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                         KniazSaver saver,","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"                         KniazInputController inputController,","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"                         KniazOutputController outputController) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        this.loader \u003d loader;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        this.saver \u003d saver;","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        this.inputController \u003d inputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        this.outputController \u003d outputController;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        this.isRunning \u003d true;","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     * Factory method that also performs any needed tasks that a KniazSession would","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"     * be expected to when starting up (Like printing starting messages,etc.)","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"     * @return a new KniazSession","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"    public static KniazSession init() {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        KniazLoader loader \u003d new KniazLoader();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"        KniazSaver saver \u003d new KniazSaver();","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        KniazInputController input \u003d new KniazInputController();","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        KniazOutputController output \u003d new KniazOutputController();","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"        output.printStartupMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"            tasks \u003d loader.load();","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"            output.printToOutput(\"I managed to load your tasks from last time.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"        } catch (KniazRuntimeException e){","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"            output.printToOutput(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"        return new KniazSession(tasks,loader,saver,input,output);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"     * Signals the run loop to quit. Should often result in a quit","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"     * @return a string with \"QUIT\", for messaging purposes","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"    public String quit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"        return \"QUIT\";","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"     * Start the main loop of this Session, to run it","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"     * @return a boolean true","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"    public boolean run(){","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"        isRunning \u003d true;","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"        while (isRunning){","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"            KniazCommand nextCommand \u003d inputController.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"            String printString;","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"            String flavour \u003d outputController.getFlavourFor(nextCommand);","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"                String feedback \u003d nextCommand.execute(this);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"                printString \u003d flavour + \u0027\\n\u0027 + feedback;","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"            } catch (KniazRuntimeException e){","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"                printString \u003d e.getUserMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"            outputController.printToOutput(printString);","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"                saver.save(this.taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"                outputController.printToOutput(e.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"        return true;","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":112}},{"path":"src/main/java/main/logic/command/CommandFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import main.logic.handler.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import ui.inputparser.InstructionType;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.EnumMap;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a command given to Kniaz, should only be instantiated via KniazParser when it parses a command","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public abstract class CommandFactory {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    private static final EnumMap\u003cInstructionType, CommandHandler\u003e INSTRUCT_TO_HANDLER \u003d","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"            new EnumMap\u003c\u003e(Map.of(","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.TODO, new ToDoHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.DEADLINE, new DeadlineHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.EVENT, new EventHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.MARK, new MarkHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.UNMARK, new UnmarkHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.LIST, new ListHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.QUIT, new QuitHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.DELETE, new DeleteHandler(),","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.INVALID, new InvalidHandler()","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"            ));","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * Makes a new KniazCommand from the provided instruction and arguments","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * @param instruction the instruction type the command is to have","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the unnamed arguments supplied to the commmand","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs the named arguments supplied to the command","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"     * @return the KniazCommand encapsulating the instruction + arguments","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    public static KniazCommand makeCommand(InstructionType instruction,","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"                                           List\u003cString\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                                           Map\u003c? extends String, ? extends  String\u003e namedArgs){","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        CommandHandler handler \u003d INSTRUCT_TO_HANDLER.getOrDefault(instruction, new InvalidHandler());","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        return new KniazCommand(instruction, handler, unnamedArgs, namedArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        // Guaranteed at this point command is valid","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":53}},{"path":"src/main/java/main/logic/command/KniazCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import main.logic.handler.CommandHandler;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import ui.inputparser.InstructionType;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Represents a command to be executed within the Kniaz application.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * A KniazCommand encapsulates the necessary information to execute a command,","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * including its instruction type, command handler, and arguments.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public class KniazCommand {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    private CommandHandler commandHandler;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    private List\u003cString\u003e unnamedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    private Map\u003c? extends String, ? extends String\u003e namedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private InstructionType instruct;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Constructs a new KniazCommand with the provided parameters.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param instruct       The type of instruction associated with this command.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param commandHandler The handler responsible for executing this command.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs    A list of unnamed arguments for the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs      A map of named arguments (key-value pairs) for the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    public KniazCommand(InstructionType instruct,","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"                        CommandHandler commandHandler,","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                        List\u003cString\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                        Map\u003c? extends String, ? extends String\u003e namedArgs) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        this.instruct \u003d instruct;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        this.commandHandler \u003d commandHandler;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"        this.unnamedArgs \u003d unnamedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        this.namedArgs \u003d namedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     * Executes the command using the provided KniazSession.","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * @param session The session in which the command is executed.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * @return The result of executing the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"    public String execute(KniazSession session) {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        return commandHandler.handle(session, this.unnamedArgs, this.namedArgs);","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     * Retrieves the instruction type associated with this command.","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"     * @return The instruction type of the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"    public InstructionType getInstruct() {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        return this.instruct;","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":57}},{"path":"src/main/java/main/logic/handler/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.UnknownCommandException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * Interface that encapsulates a class that executes a command.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"@FunctionalInterface","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"public interface CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * Handles/executes a command","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the unnamed arguments to this command","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arguments to this command. Unused named arguments are discarded without complaint.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @return the string output expected by this command","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException    when the arguments are somehow invalid(e.g. invalid index, wrong format)","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @throws UnknownCommandException when the command that is to be handled is invalid (unrecognised)","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends  String, ? extends  String\u003e namedArgs)","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"            throws UnknownCommandException,","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"            MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":35}},{"path":"src/main/java/main/logic/handler/DeadlineHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingNamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import task.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" * Encapsulates the execution of a deadline commmand, creating a new Deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"public class DeadlineHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    // the expected order of arguments to this command","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    private static final String BY_NAME \u003d \"by\";","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * Executes the command to create a new Deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arguments to this command","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the created Deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException when the number of unnamed args is somehow invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * @throws  MissingNamedArgsException when a required named arg is missing","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws MissingUnnamedArgsException,","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"            MissingNamedArgsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        if (!namedArgs.containsKey(BY_NAME)){","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"            throw new MissingNamedArgsException(List.of(BY_NAME)","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"                    ,new ArrayList\u003c\u003e(namedArgs.keySet()),","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        String taskName \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"        String taskBy \u003d namedArgs.get(BY_NAME);","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new Deadline(taskName,taskBy);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        session.getTaskList().add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"    //    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"//     * Handles the creation of a Deadline from a list of arguments, including input validation","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"//     * @param taskList the taskList to place the new Deadline into","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"//     * @param args the arguments supplied for the creation of a new Deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"//     * @return the user-facing string representation of this new Deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"//     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a Deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"//    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//        if (args.size() \u003e 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//            // Deadlines expect exactly 2 arguments -- name and time","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too many args into making deadline can only accept two,\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"//        } else if (args.size() \u003c 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"//            // Two arguments only!","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too few args into Deadline, can only accept two\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave not enough to make an Deadline, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"//        // handle creation down here","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"//        // pull teh parameters","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"//        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"//        String taskBy \u003d args.get(1);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"//        //make the deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"//        Task taskToAdd \u003d new Deadline(taskName, taskBy);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"//        // add it in","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"//        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"//        // for the user to see - their shiny new deadline","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"//        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":96}},{"path":"src/main/java/main/logic/handler/DeleteHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.ArgFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.TaskListBoundsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a handler for deleting tasks from a tasklist","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"public class DeleteHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":" * Handles deletion by deleting the task from a list, by index","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":" * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":" * @param unnamedArgs the unnamed arguments to this command, should just be index of the task to be deleted","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":" * @param namedArgs   Should be empty, no named arguments are taken","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":" * @return the user-facing string representation of the deleted task","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":" * @throws  ArgFormatException when the argument provided cannot be parsed into an integer","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":" * @throws TaskListBoundsException when an index out of bounds is attempted to be deleted","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws ArgFormatException,","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"            TaskListBoundsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        String indexAsString \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"            index \u003d Integer.parseInt(indexAsString) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"            throw new ArgFormatException(String.format(\"%s was invalid\", indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"I could not interpret %s as an integer, what is this?\",indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"                    e);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        TaskList sessionTaskList \u003d session.getTaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        if ((index \u003c 0 ) || (index \u003e\u003d sessionTaskList.size())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"            throw new TaskListBoundsException(session.getTaskList().size(),index,null);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        Task deletedTask \u003d session.getTaskList().remove(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"        return deletedTask.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"     * Deletes a task, and also performs input validation and checks if the operation makes sense.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"     * @param args     the arguments supplied for deletion","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string rep of the deleted task","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong with trying to delete this task","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//    public static String handle(TaskList taskList, List\u003cString\u003e args) {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//        if (args.size() \u003e 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//            // one argument only -- the index","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too many args into deletion, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave %s arguments for this operation. That is forbidden.\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"//        } else if (args.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"//            // one argument only","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"//                    String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"//                            \"%s is too few args into deletion, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"//                    String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"//                            \"You gave %s arguments for this operation. How am I to know which you want?\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"//        String numberAsString \u003d args.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"//        // guaranteed to have 1 at this point","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"//        try { //try to catch problems with indexing or conversion into int","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"//            int index \u003d Integer.parseInt(numberAsString) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"//            //Java is 0-indexed but user-facing I/O is 1-indexed, so subtract 1 to correct","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"//            Task removedTask \u003d taskList.remove(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"//            return removedTask.toPrintString(); // Tell the user the dark deed of deletion is done","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"//        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"//            // If taskList complains that the index we tried to mark as is invalid","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"//            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"//                    \"There is no such entry numbered %s. Try again, but correct.\", numberAsString);","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(e.getMessage(), userMessage, e);","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"//        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"//            // If we tried converting to an integer but it\u0027s not a valid integer","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"//            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"//                    \"%s is not a valid integer. Please consult your nearest mathematics textbook.\", numberAsString);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(e.getMessage(), userMessage, e);","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":110}},{"path":"src/main/java/main/logic/handler/EventHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingNamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import task.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" * Handles the event command, by creating a new Event object.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"public class EventHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * Handles the event command by creating a new Event","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the unnamed arguments to this command, should just be the name of the Event","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arugments to this command - Should just be from and to","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the event that was created","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException When the name is missing as an arg","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingNamedArgsException when /from or /to are missing","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs)","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"            throws MissingUnnamedArgsException, MissingNamedArgsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        if (!(namedArgs.containsKey(\"from\") \u0026\u0026 namedArgs.containsKey((\"to\")))){","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"            throw new MissingNamedArgsException(List.of(\"from\",\"to\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"                    new ArrayList\u003c\u003e(namedArgs.keySet()),","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        String taskName \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        String taskFrom \u003d namedArgs.get(\"from\");","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        String taskTo \u003d namedArgs.get(\"to\");","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new Event(taskName,taskFrom,taskTo);","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        session.getTaskList().add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"    //    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"//     * Handles the creation of an Event from a list of arguments, including input validation","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"//     * @param taskList the taskList to place the new Event into","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"//     * @param args the arguments supplied for the creation of a new Event","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"//     * @return the user-facing string representation of this new Event","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"//     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a Event","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"//    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"//        if (args.size() \u003e 3) {","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"//            //Event accepts only three arguments -- name, from, to.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too many args into Event, can only accept three,\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//        } else if (args.size() \u003c 3) {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//            // Three arguments only!","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too few args into Event, can only accept one\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave not enough to make an Event, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"//        // pull the indivivual arguments out","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"//        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"//        String taskFrom \u003d args.get(1);","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"//        String taskTo \u003d args.get(2);","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"//        //make the event","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"//        Task taskToAdd \u003d new Event(taskName,taskFrom,taskTo);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"//        // add it to the list","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"//        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"//        // pass the user-facing strip rep of this up so the user can see their new Event","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"//        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"//    }","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":95}},{"path":"src/main/java/main/logic/handler/InvalidHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.UnknownCommandException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Handles invalid commands, by throwing an exception when it is attempted to be executed","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"public class InvalidHandler implements  CommandHandler{","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * Handles invalid commands by throwing an exception","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arugments to this command","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @return nothing, should always throw an exception","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @throws UnknownCommandException when this is executed (i.e. always)","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws UnknownCommandException {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        throw new UnknownCommandException(\"Invalid command attempted to be executed\",","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"                \"I do not recognise this command\",null);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        //What\u0027s inside the box? Surprise! It\u0027s an exception!","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":30}},{"path":"src/main/java/main/logic/handler/ListHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Handles the list command, by getting the user-facing string representation of the session\u0027s TaskList","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"public class ListHandler implements  CommandHandler{","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    // no arguments allowed","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * Handles the list command by getting the relevant string representation","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command, ignored","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arugments to this command, ignored","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the linked session\u0027s TaskList","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        return session.getTaskList().toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":30}},{"path":"src/main/java/main/logic/handler/MarkHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.ArgFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.TaskListBoundsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" * Handles the mark command, by marking the specified task as done","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"public class MarkHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    // argument not expected to have prefix, just an index","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * Handles the mark command by marking the specified task as done, returning the user-facing string representation","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * of the marked task","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command, should just be the index of the task to mark","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arguments to this command, should be none","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the marked task","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException when the arguments are invalid, like when the index is out of bounds","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws MissingUnnamedArgsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        String indexAsString \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"            index \u003d Integer.parseInt(indexAsString) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"            throw new ArgFormatException(String.format(\"%s was invalid\", indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"I could not interpret %s as an integer, what is this?\",indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"                    e);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        TaskList sessionTaskList \u003d session.getTaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        if ((index \u003c 0 ) || (index \u003e\u003d sessionTaskList.size())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            throw new TaskListBoundsException(session.getTaskList().size(),index,null);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        Task markedTask \u003d session.getTaskList().markAsDone(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"        return markedTask.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"    //    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"//     * Marks a task as done, and also performs input validation and checks if the operation makes sense.","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"//     * Calls MarkUnmarkHandler for most of the actual implementation.","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"//     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"//     * @param args the arguments supplied to mark as done","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//     * @return the user-facing string rep of the task marked as done","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//     * @throws KniazRuntimeException what went wrong with trying to mark this task as done","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//     */","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//        return MarkUnmarkHandler.handle(taskList,args,true);","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//    }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":74}},{"path":"src/main/java/main/logic/handler/QuitHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * handles the bye command by instructing the session to quit","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"public class QuitHandler implements CommandHandler{","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    private static final String[] ARG_ORDER \u003d new String[]{};","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    // no arguments allowed","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * Handles the bye command by instruction the session to quit","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command, ignored","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arguments to this command, ignored","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @return The string displayed to the user when the session exits","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"        //this helps gatekeep this function and check inputs are right","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"        return session.quit();","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":32}},{"path":"src/main/java/main/logic/handler/ToDoHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import task.ToDo;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":" * Handles \"todo\" command by instantiating a new \"todo\".","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"public  class ToDoHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private static final String[] ARG_ORDER \u003d new String[]{\"\"};","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * Handles todo command by making a new ToDo","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command, should just be name of the Task","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs   the named arguments, ignored","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the newly made Task","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException when the name is missing","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws MissingUnnamedArgsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        String toDoName \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new ToDo(toDoName);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        session.getTaskList().add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * Handles the creation of a ToDo from a list of arguments, including input validation","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the taskList to place the new ToDo into","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied for the creation of a new ToDo","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this new ToDo","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a ToDo","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"//    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"//        if (args.size() \u003e 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"//            // ToDo accepts only one argument -- Name","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too many args into ToDo, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"//        } else if (args.size() \u003c 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"//            // one argument only!","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"//            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"%s is too few args into ToDo, can only accept one\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"//                    String.format(\"You gave no task to add, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"//                    null);","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"//        }","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"//        // extract from the arguments","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"//        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"//        // make the ToDo","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"//        Task taskToAdd \u003d new ToDo(taskName);","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"//        //Chuck it into the list","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"//        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"//        // pass up what the user needs to see for feedback","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"//        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"//","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"//    }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":84}},{"path":"src/main/java/main/logic/handler/UnmarkHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package main.logic.handler;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.ArgFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.TaskListBoundsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import main.KniazSession;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" * Handles the unmark command by un-marking specified task","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"public  class UnmarkHandler implements CommandHandler {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    private static final String[] ARG_ORDER \u003d new String[]{\"\"};","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * Handles unmark command by un-marking specified task","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param session     the linked KniazSession that this command is to execute in","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param unnamedArgs the arguments to this command, should just be index","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param namedArgs  the named arguments to this command","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of the unmarked task","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException when there is a problem with the arguments,","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * like index being out of bounds/unparseable","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    public String handle(KniazSession session,","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"                         List\u003c? extends String\u003e unnamedArgs,","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                         Map\u003c? extends String, ? extends String\u003e namedArgs) throws MissingUnnamedArgsException {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        if (unnamedArgs.size() \u003c 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"            throw new MissingUnnamedArgsException(unnamedArgs.size(), 1, null);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        String indexAsString \u003d unnamedArgs.get(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"            index \u003d Integer.parseInt(indexAsString) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"            throw new ArgFormatException(String.format(\"%s was invalid\", indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"I could not interpret %s as an integer, what is this?\",indexAsString),","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"                    e);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        TaskList sessionTaskList \u003d session.getTaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        if ((index \u003c 0 ) || (index \u003e\u003d sessionTaskList.size())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"            throw new TaskListBoundsException(session.getTaskList().size(),index,null);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        Task unmarkedTask \u003d session.getTaskList().markAsUndone(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        return unmarkedTask.toPrintString();","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":62}},{"path":"src/main/java/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a list of Tasks, supports easy string representation, refer to Task for more details about","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * what Tasks are.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"public class TaskList extends ArrayList\u003cTask\u003e implements Serializable {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    // Parent constructor is (implicitly) used","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * Returns the user-facing string representation of TaskList,","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * which is a numbered list of the user-facing string representation of each Task,","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * with a newline in between each entry","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @return the string representation of TaskList","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"        StringBuilder out \u003d new StringBuilder();","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        for (int i \u003d 0; i \u003c this.size(); i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"            Task currTask \u003d this.get(i);","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            String newLine \u003d String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    \"%d. %s\\n\", i+1 , currTask.toPrintString());","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"            // User probably expects to start counting from 1 instead of 0","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"            // so need to add 1 here","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"            out.append(newLine);","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        return out.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     * Marks a given task specified by index as done","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * @param index the index of the task to mark as done","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * @return the task that was unmarked","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    public Task markAsUndone(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        this.get(index).markAsUndone();","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        return this.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"     * Marks the given task specified by index as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"     * @param index the index of the task marked as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"     * @return the task that was marked","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"    public Task markAsDone(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        this.get(index).markAsDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        return this.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":66}},{"path":"src/main/java/storage/save/KniazLoader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package storage.save;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.io.File;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" *  Encapsulates a class to help load Kniaz tasklist data from disk.","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public class KniazLoader {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * The default path KniazLoader will try to storage.save to","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    public static final String DEFAULT_PATH \u003d KniazSaver.DEFAULT_PATH;","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Internal File object for reading","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    private File saveFile;","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazLoader that will try to load from the provided path.","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @param path the path to save files to","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public KniazLoader(String path) {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        this.saveFile \u003d new File(path);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazLoader that will try to load from provided path","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    public KniazLoader() {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        this(DEFAULT_PATH);","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * Attempts to load saved TaskList from the location that was previously provided to this class,","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * during construction","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     * @return the loaded TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"     * @throws  KniazRuntimeException when something goes wrong in retrieving data, will wrap around the root exception.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    public TaskList load() throws KniazRuntimeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.exists()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(\"Savefile does not exist\",","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"                    \"There is no saved data of your tasklist. We shall start from scratch.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"                    new IOException(String.format(\"%s does not exist\",this.saveFile.getAbsolutePath())));","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.canRead()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"                this.saveFile.setReadable(true);","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"            } catch (SecurityException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"                throw new KniazRuntimeException(\"Could not set savefile to read!\",","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"                        \"I could not access your tasklist saved data. We shall start from scratch.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"                        e);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"        // time to read it","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"            FileInputStream fileInputStream \u003d new FileInputStream(this.saveFile);","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"            ObjectInputStream taskInputStream \u003d new ObjectInputStream(fileInputStream);","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"            return (TaskList) taskInputStream.readObject();","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"        } catch (ClassNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(\"Missing class in saved file, probably corrupted\",","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"                    \"I could not interpret your savefile data. We shall start from scratch.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"                    e);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"        } catch (ClassCastException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(\"Could not cast savefile class, probably corrupted\",","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"                    \"I could not interpret your savefile data. We shall start from scratch.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"                    e);","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(\"Savefile does not exist\",","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"                    \"There is no saved data of your tasklist. We shall start from scratch.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"                    new IOException(String.format(\"%s does not exist\",this.saveFile.getAbsolutePath())));","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"            // should not normally be thrown because we verify up above, but to satisfy compiler requirements","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":94}},{"path":"src/main/java/storage/save/KniazSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package storage.save;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import storage.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a class to help storage.save Kniaz tasklist data to disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"public class KniazSaver {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * The default path KniazSaver will try to storage.save to","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    public final static String DEFAULT_PATH \u003d \"./data/Kniaz.dat\";","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * Internal File object for writing","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    private File saveFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazSaver that will try to storage.save at the provided path.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param path the path to storage.save files to","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    public KniazSaver(String path) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"        this.saveFile \u003d new File(path);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazSaver that will try to storage.save to DEFAULT_PATH","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    public KniazSaver() {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        this(DEFAULT_PATH);","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     * Saves the provided TaskList at the location this class was constructed with.","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the TaskList to storage.save to disk","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * @throws java.io.IOException If there is an error with I/O,","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * typically when an error occured in creating file or writing to file","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     * @throws java.lang.SecurityException If the security manager did not allow this class to write to file","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    public void save(TaskList taskList) throws java.io.IOException,java.lang.SecurityException {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.getParentFile().exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"            // Strictly speaking, do not need to wrap in an if.","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"            // Makes directory if file does not exist","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.getParentFile().mkdirs(); // may throw IOException","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"            // Also does not strictly need to be wrapped in an if block","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            // makes file if the file does not exist yet","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.createNewFile(); // May throw IOException","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.canWrite()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"            // Again, does not strictly need to be wrapped","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"            // Attempt to allow access to write to the file if possible","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.setWritable(true); //May throw SecurityException","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"        // Below syntax handles setting up of streams to write","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"        FileOutputStream fileOutputStream \u003d new FileOutputStream(this.saveFile);","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"        ObjectOutputStream taskListOutputStream \u003d new ObjectOutputStream(fileOutputStream);","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"        // This line does the writing to the data file","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"        taskListOutputStream.writeObject(taskList);","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"xavierpok":75}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import task.taskdatetime.TaskDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a task with a singular deadline,","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * so has a name, completion status, and a time representing the deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * D for [D]eadline","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[D]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * String representing the deadline of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    private TaskDateTime deadlineTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * Constructor for Deadline, setting name and time","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param deadlineName the name of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param deadlineTime the time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    public Deadline(String deadlineName, String deadlineTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        super(deadlineName, false);","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"        this.deadlineTime \u003d TaskDateTime.fromDateTimeString(deadlineTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Deadline, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(a Deadline), its name, when it is due, and whether it is done.","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this Deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        String postpend \u003d String.format(\"(by : %s)\",","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"                this.deadlineTime.getDateTimeAsString());","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        return Deadline.PREPEND + super.toPrintString() + postpend;","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":44}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import task.taskdatetime.TaskDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"     * E for [E]vent","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[E]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * String representing whene this Event starts","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    private TaskDateTime startTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * String representing when this Event ends","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    private TaskDateTime endTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * Constructor for Event, setting name, starting time, ending time","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param eventName the name of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @param startTime the starting time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param endTime the ending time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    public Event(String eventName, String startTime, String endTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"        super(eventName, false);","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        this.startTime \u003d TaskDateTime.fromDateTimeString(startTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        this.endTime \u003d TaskDateTime.fromDateTimeString(endTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Event, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(an Event), its name, when it starts, when it ends, and whether it is done.","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this Deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        String postpend \u003d String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"                \" from : %s to: %s\",","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"                this.startTime.getDateTimeAsString(), this.endTime.getDateTimeAsString()","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        ); //need a whitespace here for formatting reasons","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        return Event.PREPEND + super.toPrintString() + postpend;","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":48}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a single task to be done (by the user) in Kniaz","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * Whether this task is done","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * Name of this task","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private String taskName \u003d \"\";","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * The (protected) constructor for this task, mostly for inheritance by subclasses","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param taskName name of task","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param isDone whether it is done","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    protected Task(String taskName, boolean isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * Marks this task as done, does NOT check for if it was already done","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d true  ;","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * Marks this task as not done, does NOT check for if it was already undone","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Task, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * whether this task is done and its name","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        String statusIcon \u003d \"\";","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"            statusIcon \u003d \"X\";","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        } else if (!this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            statusIcon \u003d \" \";","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        return String.format(\"[%s] %s\", statusIcon, this.taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        // return in format [statusIcon] taskname","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":62}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a Task that is a to-do, lacking a date and only containing a name and completion status","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * T for [T]oDo","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[T]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * Constructor for a ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param toDoName the name of this ToDo","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    public ToDo(String toDoName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"        super(toDoName,false);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this ToDo, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(a ToDo), its name and whether it is done","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        return ToDo.PREPEND + super.toPrintString();","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":34}},{"path":"src/main/java/task/taskdatetime/TaskDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task.taskdatetime;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * Abstract class encapsulating a date, time component in a Task, parsing input if possible, saving it as a string","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * if not.","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public abstract class TaskDateTime implements Serializable {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * The output format for all TaskDateTimes, if we managed to parse the date","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    public static final String OUTPUT_FORMAT \u003d \"MMM dd yyyy HH:mm\";","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * Formatter object the output","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(OUTPUT_FORMAT);","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * Constructor for this object. Default constructor -- Should not be instantiated directly","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public TaskDateTime() {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        // default constructor","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * Factory method for TaskDateTime, instantiates instance by trying to parse the provided string.","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     * Will parse if and only if is in ISO-8601 format, such as","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"     * 2007-12-03T10:15:30, otherwise will not parse and storage.save entire string as a timing.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"     * @param dateTimeAsString the date-time as a string","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     * @return the TaskDateTime object that was created with the provided string","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"    public static TaskDateTime fromDateTimeString(String dateTimeAsString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"            // try to make one that we could parse if we can","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"            return new ParseableTaskDateTime(dateTimeAsString);","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"            // but if we tried to parse, and failed, it\u0027s unparseable. Save it as such.","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"            return new UnparseableTaskDateTime(dateTimeAsString);","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"     * Getter method for the dateTime, in string format. Parsed dates will be formatted as per OUTPUT_FORMAT,","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"     * dates we could not parse will be returned as they were input.","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"     * @return the dateTime in string format.","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"    public abstract String getDateTimeAsString();","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"     * Subclass of a TaskDateTime, representing a TaskDateTime that holds a parseable date \u0026 time","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"    private static class ParseableTaskDateTime extends  TaskDateTime {","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"         * the DateTime that we managed to parse","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"        private LocalDateTime date;","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"         * String representation, formatted. See TaskDateTime for details.","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"         * @return the string representation of the date","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"        public String getDateTimeAsString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"            return this.date.format(TaskDateTime.DATE_TIME_FORMATTER);","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"         * Constructor for a parseable date time. Attempts to parse.","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"         * @param dateTimeAsString the provided date \u0026 time","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"         * @throws DateTimeParseException if parsing failed","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"        private ParseableTaskDateTime (String dateTimeAsString)  throws DateTimeParseException {","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"            this.date \u003d LocalDateTime.parse(dateTimeAsString,DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"    private static class UnparseableTaskDateTime extends  TaskDateTime {","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"         * The entire string provided. Could not parse, so storage.save the whole string instead","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"        private String dateTimeAsString;","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"         * The string that was provided to this on instantiation","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"         * @return the string representation of the date and time provided on instantiation","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"        public String getDateTimeAsString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"            return this.dateTimeAsString;","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"        /**","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"         * Constructor for this class","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"         * @param dateTimeAsString the string that we should try to construct with","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"         */","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"        private UnparseableTaskDateTime(String dateTimeAsString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"            this.dateTimeAsString \u003d dateTimeAsString;","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":114}},{"path":"src/main/java/ui/KniazInputController.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.KniazCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import ui.inputparser.KniazLineParser;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a controller for input, takes in input from system.in and delegates parsing to","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * relevant classes","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"public class KniazInputController {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    //SHOULD : hand off all inputs to be parsed and pass up outputs from them","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    //CONSIDER : how are we going to spice up the messages?","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    private KniazLineParser parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    private Scanner input;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * Constructor for KniazInputController","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    public KniazInputController(){","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"        this.parser \u003d new KniazLineParser();","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"        this.input \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * Reads in the next line from input and automatically parses to a KniazCommand","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * @return the KniazCommand representing the commmand that was entered into input","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    public KniazCommand nextLine(){","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        return readCommand(input.nextLine());","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    private KniazCommand readCommand(String line) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        // passes a line off to the parser to parse into a Command","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        return parser.parseLine(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":46}},{"path":"src/main/java/ui/KniazOutputController.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.KniazCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import ui.inputparser.InstructionType;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * Class handling printing of output, including delegation of how to \u0027pretty\u0027 up output to user","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public class KniazOutputController {","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    private static final String GREETING \u003d \"Hello from KNIAZ\";","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private static final String SEPERATOR \u003d \"_\".repeat(20);","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    private static final KniazOutputFlavourer DEFAULT_FLAVOURER \u003d new KniazOutputFlavourer();","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    private KniazOutputFlavourer flavourer;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * Constructor for KniazOutputController","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    public KniazOutputController() {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"        this.flavourer \u003d DEFAULT_FLAVOURER;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * Prints line to output with a seperator line beneath.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @param toPrint the line to print to output","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * @return the successfully printed line","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    public String printToOutput(String toPrint){","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        System.out.println(toPrint);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        System.out.println(SEPERATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        return toPrint;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"     * Prints the expected startup message to output, using same format as printToOutput","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"     * @return the expected startup message","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    public String printStartupMessage(){","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        return printToOutput(GREETING);","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     * Retrives the \u0027flavour\u0027 string for a given Command, which is defined as a string printed purely","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * to give the chatbot more \u0027personality\u0027.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * @param command the KniazCommand to retrieve the flavour string for","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * @return the flavour string","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"    public String getFlavourFor(KniazCommand command) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        return this.flavourer.getFlavourFor(command.getInstruct());","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":54}},{"path":"src/main/java/ui/KniazOutputFlavourer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import ui.inputparser.InstructionType;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.EnumMap;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.util.Map;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Class storing \u0027flavour\u0027 strings for any given InstructionType, where \u0027flavour\u0027 strings are strings printed purely","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * to give the chatbot more personality.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"public class KniazOutputFlavourer {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    private static final EnumMap\u003cInstructionType, String\u003e INSTRUCT_TO_FLAVOURSTRING \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"            new EnumMap\u003c\u003e(Map.of(","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.TODO, \"As you say, the ToDo has been created :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.DEADLINE, \"As you say, the Deadline has been created :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.EVENT, \"As you say, the Event has been created :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.MARK, \"As you say, I have marked it as done :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.UNMARK, \"It is a poor practice to mark it when you are not yet done, but as you say :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.LIST, \"Time to get to work? Here are all your tasks : \",","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.QUIT, \"If that is all for now, then I bid you farewell\",","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.DELETE, \"It shall be as if this task never existed :\",","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"                    InstructionType.INVALID, \"I do not recognise this command.[THIS SHOULD NORMALLY NOT BE SEEN]\"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"            ));","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * Constructor for the class","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public KniazOutputFlavourer(){","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * Returns the appropriate flavour string","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     * @param instr the instruction to retrieve the flavour string for","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"     * @return the flavour string","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    public String getFlavourFor(InstructionType instr){","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        return INSTRUCT_TO_FLAVOURSTRING.getOrDefault(instr, \"I do not recognise this command.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"xavierpok":43}},{"path":"src/main/java/ui/inputparser/InstructionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package ui.inputparser;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * The types of instructions that Kniaz can accept","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * Each member of this enum has an alias, that represents the command typed into Kniaz","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * E.g. the DEADLINE InstructionType is related to the command \"deadline\".","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"public enum InstructionType {","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"    TODO(\"todo\", 1, 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"    DEADLINE(\"deadline\", 1, 1, new String[]{\"by\"}),","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    EVENT(\"event\", 1, 2, new String[]{\"from\",\"to\"}),","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    MARK(\"mark\", 1, 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    UNMARK(\"unmark\", 1, 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    LIST(\"list\", 0, 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    QUIT(\"bye\", 0 , 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    DELETE(\"delete\", 1, 0, new String[]{}),","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    INVALID(\"\", 0 , 0, new String[]{}); // placeholder for anything not recognised","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    public final String alias;","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    public final int numUnnamedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    public final int numNamedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    public final String[] argNames;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    public static final String[] EMPTY \u003d new String[]{};","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    private InstructionType(String alias, int numUnnamedArgs, int namedArgs, String[] argNames)","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            throws ExceptionInInitializerError {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        this.alias \u003d alias;","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        this.numUnnamedArgs \u003d numUnnamedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        this.numNamedArgs \u003d namedArgs;","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        this.argNames \u003d argNames;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"        if (this.numNamedArgs !\u003d argNames.length){","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"            throw new ExceptionInInitializerError(String.format(","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                    \"InstructionType should have %s named args specified, \" +","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"                    \"but only has %s!\", namedArgs, argNames.length));","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * Converts an alias as a string to an instruction type,","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     * returns an INVALID type if not recognised or is empty string","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"     * @param alias the alias of the instruction type to convert to","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     * @return the instruction corresponding to the alias","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"    public static InstructionType stringToInstrType(String alias) {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        InstructionType output \u003d INVALID;","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"        for (InstructionType instr : values()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"            if (instr.alias.equals(alias)) {","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"                output \u003d instr;","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        return output;","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":63}},{"path":"src/main/java/ui/inputparser/KniazLineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package ui.inputparser;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import exceptions.syntax.MissingUnnamedArgsException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.CommandFactory;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import main.logic.command.KniazCommand;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.*;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating logic of parsing \u0026 tokenizing commands given to Kniaz","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public class KniazLineParser {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    private static String ANYNUM_WHITESPACE \u003d \"\\\\s+\";","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private static String NAMED_ARG_MARKER \u003d \"/\";","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    private static String NAMED_ARG_REGEX \u003d \"\\\\s*\" + NAMED_ARG_MARKER;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    // this will change with whatever NAMED_ARG_MAKER is","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    // any number \u003e\u003d 0 of whitespace wrapping a \u0027/\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param line the line to parse","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @return the command that line represents, including the arguments","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     * @throws MissingUnnamedArgsException when the arguments are wrongly formatted","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    public  KniazCommand parseLine(String line) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        List\u003cString\u003e firstSplit \u003d splitInstructArgs(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        String instructAsString \u003d firstSplit.get(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        String allArgs \u003d firstSplit.get(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        InstructionType instruct \u003d InstructionType.stringToInstrType(instructAsString);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        List\u003cString\u003e splittedArgs \u003d splitArgTypes(allArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        // take the first instance of a named arg pattern as where the named args start","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        String unnamedArgsString \u003d splittedArgs.get(0);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        String namedArgsString \u003d splittedArgs.get(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        List\u003cString\u003e unnamedArgs \u003d getUnnamedArgs(unnamedArgsString, instruct.numUnnamedArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        Map\u003cString,String\u003e namedArgs \u003d getNamedArgs(namedArgsString);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        return CommandFactory.makeCommand(instruct,unnamedArgs,namedArgs);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"    private static List\u003cString\u003e splitInstructArgs(String original) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        List\u003cString\u003e out \u003d new ArrayList\u003c\u003e(List.of(original.split(ANYNUM_WHITESPACE, 2)));","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        // splits by the whitespace into instruction and arguments to instruction","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        while (out.size() \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"            out.add(\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"        return out;","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"    private static List\u003cString\u003e splitArgTypes(String original) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"        // splits into named and unnamed, going off the first \u0027/\u0027 marker","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"        if (!original.contains(NAMED_ARG_MARKER)){","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"            return List.of(original,\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"        int indexOfMarker \u003d original.indexOf(NAMED_ARG_MARKER);","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"        return List.of(original.substring(0,indexOfMarker),","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"                original.substring(indexOfMarker));","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"    private static List\u003cString\u003e getUnnamedArgs(String toRead, int numArgs){","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"        // Default behaviour is to consume the first _n_ arguments as unnamed args","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"        // assume they are whitespace-delimited","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"        // If there is an error in this assumption, parsing will be strange,","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"        // and possibly result in a thrown exception when trying to execute command","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"        // But it\u0027s difficult to impossible to fully validate user input this way","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"        return Arrays.asList(toRead.split(ANYNUM_WHITESPACE,numArgs));","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"    private static Map\u003cString,String\u003e getNamedArgs(String toRead){","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"        // gets the named args, marked by \u0027/\u0027 characters","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"        // Assumes they come in key-value pairs","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"        // So it assumes /from 2pm is a key value pair mapping","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"        // \u0027from\u0027 to \u00272pm\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"        HashMap\u003cString,String\u003e out \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"        if (!toRead.contains(NAMED_ARG_MARKER)){","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"            return out; //return an empty map because no named arguments","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"        int firstMarkerIndex \u003d toRead.indexOf(NAMED_ARG_MARKER);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"        String namedArgs \u003d toRead.substring(firstMarkerIndex + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"        // strip away the named arg marker, should normally be in the first spot, but in case, we search instead","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"        // We rely on split later, so getting rid of the first ensures all named arg tokens have the marker","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"        // stripped away.","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"        String[] tokens \u003d namedArgs.split(NAMED_ARG_REGEX);","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"        for (String token : tokens){","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"            String[] splitToken \u003d token.split(ANYNUM_WHITESPACE,2);","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"            String key \u003d splitToken[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"            String value \u003d splitToken[1];","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"xavierpok"},"content":"            out.put(key,value);","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"xavierpok"},"content":"        return out;","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"xavierpok":122}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"event project meeting /from 2010-12-03T10:15:30 /to 2011-12-03T09:15:15","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"test","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"test2","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"deadline fix dates /by 2007-12-03T10:15:30","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"event bad event /to 4pm from 2pm","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"event weirdly timed event /from apples /to oranges","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"event redundant arguments /from apples /to oranges /bad test","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"mark 1","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"mark 2","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"unmark 2","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"mark 500","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"delete 1","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"delete 500","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"xavierpok":29}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"java -classpath ../bin Kniaz \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xavierpok":1,"-":37}}]
