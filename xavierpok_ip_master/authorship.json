[{"path":"src/main/java/Kniaz.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import logic.taskhandling.*;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import parser.KniazCommand;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import parser.KniazParser;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"import save.KniazLoader;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"import save.KniazSaver;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"import task.Deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"import task.Event;","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"import task.ToDo;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"public class Kniaz {","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Seperator to make things a bit prettier","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    private static final String SEPERATOR \u003d \"_\".repeat(20) + \"\\n\";","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * Logo to use to represent this chatbot in the command line","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    private static final String LOGO \u003d \"KNIAZ\";","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    // Placeholder for now, intend to make prettier later","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    // Kniaz is a rough equivalent for Duke in eastern europe - get it?","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * Message to print when exiting.","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    private static final String EXITMESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * All tasks stored by Kniaz.","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * Main function of Kniaz, that is intended as entry point into the program.","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * @param args arguments to be entered into Kniaz when it is called from command line","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"//        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"//                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"//                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"//                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        // initialise a scanner object to read from input","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        System.out.println(\"Hello from\\n\" + Kniaz.LOGO);","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-20"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-20"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"        KniazSaver kniazSaver \u003d new KniazSaver(); // use default","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"        KniazLoader kniazLoader \u003d new KniazLoader(); // use default","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"        try { //wrap this in a try-catch because loading has many runtime exceptions that might occur","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"            taskList \u003d kniazLoader.load();","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"        } catch (IOException e) { // For IOExceptions in general","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"            System.out.println(\"Could not load previous.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"        } catch (ClassNotFoundException e) { // For when the data is corrupted","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"            System.out.println(\"Data did not align to a class\");","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"        KniazCommand nextCommand; //Initialise the input","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"        while (true) { // I find this a bit icky but we rely on guard clauses to break instead","lastModifiedDate":"2023-08-20"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"                nextCommand \u003d KniazParser.parseCommand(input.nextLine());","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"                // We try to parse...","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"            } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"                // And if there\u0027s an issue in parsing, we feedback user input!","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"                System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"                System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"                // this needs to be here, because we skip the rest.","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"                continue;","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"            if (nextCommand.instructionEquals(KniazParser.InstructionType.QUIT)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"                break; // exit if we are told to quit","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"            if (nextCommand.instructionEquals(KniazParser.InstructionType.LIST)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"                System.out.println(taskList.toPrintString());","lastModifiedDate":"2023-08-21"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"                // print out if we are asked to list","lastModifiedDate":"2023-08-20"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.MARK)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d MarkHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"As you say. The task has been marked as done.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.UNMARK)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":120,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":121,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d UnmarkHandler.handle(taskList, nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"Ah, so you didn\u0027t actually finish it. Correcting your mistake.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":123,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":125,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":129,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.DELETE)){","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d DeleteHandler.handle(taskList, nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"This task has been erased, mercy on its data :\");","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(String.format(\"Only %s tasks remain.\",taskList.size()));","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":138,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.TODO)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":141,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":143,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d ToDoHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"As you say. The task has been added To-Do : \");","lastModifiedDate":"2023-08-23"},{"lineNumber":145,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":147,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":148,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":149,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":150,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":151,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.DEADLINE)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":152,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":153,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":154,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d DeadlineHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":156,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"As you say. The task has been added as a Deadline : \");","lastModifiedDate":"2023-08-23"},{"lineNumber":157,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":158,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":160,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":161,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":162,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":163,"author":{"gitId":"xavierpok"},"content":"            } else if (nextCommand.instructionEquals(KniazParser.InstructionType.EVENT)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":164,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":165,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":166,"author":{"gitId":"xavierpok"},"content":"                try {","lastModifiedDate":"2023-08-23"},{"lineNumber":167,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":168,"author":{"gitId":"xavierpok"},"content":"                    String taskString \u003d EventHandler.handle(taskList ,nextCommand.getArgs());","lastModifiedDate":"2023-08-23"},{"lineNumber":169,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(\"As you say. The task has been added To-Do : \");","lastModifiedDate":"2023-08-23"},{"lineNumber":170,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(taskString);","lastModifiedDate":"2023-08-23"},{"lineNumber":171,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":172,"author":{"gitId":"xavierpok"},"content":"                } catch (KniazRuntimeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":173,"author":{"gitId":"xavierpok"},"content":"                    System.out.println(e.getUserMessage());","lastModifiedDate":"2023-08-23"},{"lineNumber":174,"author":{"gitId":"xavierpok"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":175,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":176,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":177,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":178,"author":{"gitId":"xavierpok"},"content":"            // Each command input will invariably result in a seperator line being printed","lastModifiedDate":"2023-08-23"},{"lineNumber":179,"author":{"gitId":"xavierpok"},"content":"            // Helps to keep it looking nice","lastModifiedDate":"2023-08-21"},{"lineNumber":180,"author":{"gitId":"xavierpok"},"content":"            System.out.println((Kniaz.SEPERATOR));","lastModifiedDate":"2023-08-20"},{"lineNumber":181,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":182,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":183,"author":{"gitId":"xavierpok"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":184,"author":{"gitId":"xavierpok"},"content":"                kniazSaver.save(taskList);","lastModifiedDate":"2023-08-27"},{"lineNumber":185,"author":{"gitId":"xavierpok"},"content":"                // Every time a command is entered, save.","lastModifiedDate":"2023-08-28"},{"lineNumber":186,"author":{"gitId":"xavierpok"},"content":"                // This is because the list can only ever be updated via command.","lastModifiedDate":"2023-08-28"},{"lineNumber":187,"author":{"gitId":"xavierpok"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":188,"author":{"gitId":"xavierpok"},"content":"                // When something goes wrong in trying to save with regards to IO","lastModifiedDate":"2023-08-28"},{"lineNumber":189,"author":{"gitId":"xavierpok"},"content":"                // Should not happen in usual operation","lastModifiedDate":"2023-08-28"},{"lineNumber":190,"author":{"gitId":"xavierpok"},"content":"                System.out.println(\"Something went wrong trying to save, I won\u0027t remember your tasks on reload!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":191,"author":{"gitId":"xavierpok"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":192,"author":{"gitId":"xavierpok"},"content":"                break;","lastModifiedDate":"2023-08-27"},{"lineNumber":193,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":194,"author":{"gitId":"xavierpok"},"content":"            } catch (SecurityException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":195,"author":{"gitId":"xavierpok"},"content":"                // When the security manager doesn\u0027t let us save","lastModifiedDate":"2023-08-28"},{"lineNumber":196,"author":{"gitId":"xavierpok"},"content":"                // Complain back to the user","lastModifiedDate":"2023-08-28"},{"lineNumber":197,"author":{"gitId":"xavierpok"},"content":"                System.out.println(\"I couldn\u0027t save because I wasn\u0027t allowed!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":198,"author":{"gitId":"xavierpok"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":199,"author":{"gitId":"xavierpok"},"content":"                break;","lastModifiedDate":"2023-08-27"},{"lineNumber":200,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":201,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":202,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":203,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":204,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":205,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":206,"author":{"gitId":"xavierpok"},"content":"        System.out.println(Kniaz.EXITMESSAGE);","lastModifiedDate":"2023-08-20"},{"lineNumber":207,"author":{"gitId":"xavierpok"},"content":"        System.out.println(Kniaz.SEPERATOR);","lastModifiedDate":"2023-08-20"},{"lineNumber":208,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":209,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":210,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":211,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":212,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":213,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":214,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":215,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":216,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"xavierpok":216}},{"path":"src/main/java/exceptions/KniazRuntimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package exceptions;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Exception that encapsulations typical Kniaz excpetions we expect to run into at runtime","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * Typically, these involve I/O of some kind, such as invalid commands or invalid inputs","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Most importantly, contains an additional user message that is meant to be seen by the user","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * And NOT for debugging/development purposes","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public class KniazRuntimeException extends RuntimeException{","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * The message that is meant to be seen by the user","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    private String userMessage \u003d \"\";","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * Constructor for an exception, which constructs it with a non-user facing message, a user-facing message and","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * a cause","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @param message the message that is NOT meant to be seen by the user, e.g. for debugging","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param userMessage the message that IS meant to be seen as user feedback","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param cause what caused this, see java.Exceptions for more details","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    public KniazRuntimeException(String message, String userMessage, Throwable cause) {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"        super(message,cause);","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"        this.userMessage \u003d userMessage;","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"     * Getter method for the user-facing message","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing message of this exception","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    public String getUserMessage() {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        return userMessage;","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":36}},{"path":"src/main/java/logic/taskhandling/DeadlineHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import logic.taskhandling.commandHandler;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import task.Deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import task.Event;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" * Encapsulation of an abstract class that handles the logic and input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":" * of Deadline(see task.Deadline) creation","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" * Includes handling of arguments into Deadline construction","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"public abstract class DeadlineHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * Handles the creation of a Deadline from a list of arguments, including input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the taskList to place the new Deadline into","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied for the creation of a new Deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this new Deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a Deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        if (args.size() \u003e 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"            // Deadlines expect exactly 2 arguments -- name and time","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too many args into making deadline can only accept two,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        } else if (args.size() \u003c 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"            // Two arguments only!","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too few args into Deadline, can only accept two\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave not enough to make an Deadline, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        // handle creation down here","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        // pull teh parameters","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        String taskBy \u003d args.get(1);","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        //make the deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new Deadline(taskName, taskBy);","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        // add it in","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        // for the user to see - their shiny new deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":57}},{"path":"src/main/java/logic/taskhandling/DeleteHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" * Abstract class containing logic of deleting a task from a list","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * Also handles input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"public abstract class DeleteHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * Deletes a task, and also performs input validation and checks if the operation makes sense.","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * @param args     the arguments supplied for deletion","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string rep of the deleted task","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong with trying to delete this task","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) {","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"        if (args.size() \u003e 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"            // one argument only -- the index","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too many args into deletion, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave %s arguments for this operation. That is forbidden.\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        } else if (args.isEmpty()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"            // one argument only","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                            \"%s is too few args into deletion, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"                    String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"                            \"You gave %s arguments for this operation. How am I to know which you want?\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        String numberAsString \u003d args.get(0);","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        // guaranteed to have 1 at this point","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        try { //try to catch problems with indexing or conversion into int","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"            int index \u003d Integer.parseInt(numberAsString) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"            //Java is 0-indexed but user-facing I/O is 1-indexed, so subtract 1 to correct","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"            Task removedTask \u003d taskList.remove(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"            return removedTask.toPrintString(); // Tell the user the dark deed of deletion is done","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"            // If taskList complains that the index we tried to mark as is invalid","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"                    \"There is no such entry numbered %s. Try again, but correct.\", numberAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(e.getMessage(), userMessage, e);","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"            // If we tried converting to an integer but it\u0027s not a valid integer","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"                    \"%s is not a valid integer. Please consult your nearest mathematics textbook.\", numberAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(e.getMessage(), userMessage, e);","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":62}},{"path":"src/main/java/logic/taskhandling/EventHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.Event;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * Encapsulation of an abstract class that handles the logic and input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" * of Event(see task.Event) creation","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":" * Includes handling of arguments into Event construction","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"public abstract class EventHandler implements  commandHandler{","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * Handles the creation of an Event from a list of arguments, including input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the taskList to place the new Event into","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied for the creation of a new Event","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this new Event","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a Event","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        if (args.size() \u003e 3) {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"            //Event accepts only three arguments -- name, from, to.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too many args into Event, can only accept three,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        } else if (args.size() \u003c 3) {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"            // Three arguments only!","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too few args into Event, can only accept one\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave not enough to make an Event, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        // pull the indivivual arguments out","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        String taskFrom \u003d args.get(1);","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        String taskTo \u003d args.get(2);","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        //make the event","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new Event(taskName,taskFrom,taskTo);","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        // add it to the list","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"        // pass the user-facing strip rep of this up so the user can see their new Event","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":55}},{"path":"src/main/java/logic/taskhandling/MarkHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * Abstract class containing logic of marking a task as done.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"public abstract class MarkHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * Marks a task as done, and also performs input validation and checks if the operation makes sense.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * Calls MarkUnmarkHandler for most of the actual implementation.","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied to mark as done","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string rep of the task marked as done","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong with trying to mark this task as done","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"        return MarkUnmarkHandler.handle(taskList,args,true);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":24}},{"path":"src/main/java/logic/taskhandling/MarkUnmarkHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" * Abstract class containing logic of marking a task as done AND undone.","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * Should not be called, call MarkHandler.handle or UnmarkHandler.handle respectively.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"public abstract class MarkUnmarkHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     * Marks a task as done / not done, depeending on the boolean supplied, including input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied (such as which to mark/unmark)","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * @param toSetToMarked whether to set the task as done(True) or undone(False)","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string rep of the task marked as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong with trying to mark this task as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    protected static String handle(TaskList taskList, List\u003cString\u003e args, boolean toSetToMarked) {","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"        if (args.size() \u003e 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"            // one argument only -- the index","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too many args into marking/unmarking, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave %s arguments for this operation. That is forbidden.\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        } else if (args.isEmpty()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"            // one argument only","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"                            \"%s is too few args into marking/unmarking, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"                    String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"                            \"You gave %s arguments for this operation. How am I to know which you want?\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        String numberAsString \u003d args.get(0);","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"        // guaranteed to have 1 at this point","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        try { //try to catch problems with indexing or conversion into int","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"            int index \u003d Integer.parseInt(numberAsString) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"            //Java is 0-indexed but user-facing I/O is 1-indexed, so subtract 1 to correct","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"            if (toSetToMarked) {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"                taskList.markAsDone(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"                taskList.markAsUndone(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"            return taskList.get(index).toPrintString(); // pass up the shiny changed task to show the user!","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"            // If taskList complains that the index we tried to mark as is invalid","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"                    \"There is no such entry numbered %s. Try again, but correct.\", numberAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(e.getMessage(), userMessage, e);","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"            // If we tried converting to an integer but it\u0027s not a valid integer","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"            String userMessage \u003d String.format(","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"                    \"%s is not a valid integer. Please consult your nearest mathematics textbook.\", numberAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(e.getMessage(),userMessage,e);","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":66}},{"path":"src/main/java/logic/taskhandling/ToDoHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import task.ToDo;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * Encapsulation of an abstract class that handles the logic and input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" * of ToDo(see task.ToDo) creation","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" * Includes handling of arguments into ToDo construction","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"public abstract class ToDoHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * Handles the creation of a ToDo from a list of arguments, including input validation","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the taskList to place the new ToDo into","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied for the creation of a new ToDo","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this new ToDo","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException An exception detailing what went wrong when we tried to make a ToDo","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        if (args.size() \u003e 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"            // ToDo accepts only one argument -- Name","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too many args into ToDo, can only accept one,\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave %s arguments for this operation. That is forbidden.\",args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        } else if (args.size() \u003c 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"            // one argument only!","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"%s is too few args into ToDo, can only accept one\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"You gave no task to add, what is the meaning of this?\", args.size()),","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        // extract from the arguments","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"        String taskName \u003d args.get(0);","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        // make the ToDo","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        Task taskToAdd \u003d new ToDo(taskName);","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"        //Chuck it into the list","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"        taskList.add(taskToAdd);","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        // pass up what the user needs to see for feedback","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"        return taskToAdd.toPrintString();","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":54}},{"path":"src/main/java/logic/taskhandling/UnmarkHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * Abstract class containing logic of marking a task as not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"public abstract class UnmarkHandler implements commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"     * Marks a task as not done, and also performs input validation and checks if the operation makes sense.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * Calls MarkUnmarkHandler for most of the actual implementation.","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the tasklist to perform operations on","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments supplied to mark as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string rep of the task marked as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong with trying to mark this task as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList taskList, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"        return MarkUnmarkHandler.handle(taskList,args,false);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":24}},{"path":"src/main/java/logic/taskhandling/commandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package logic.taskhandling;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" * Interface that encapsulates an abstract class that handles specific commands","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * Meant to be subclassed, this is just here as a template","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"public interface commandHandler {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * Handle whatever command this is supposed to. Should not be actually called, is a template","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param tasklist the relevant tasklist to do operations on","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments to this command","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @return the String feedback that this command should return (like the string rep. of the task that was created)","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException An exception telling you this method should not (typically) be called directly.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"    public static String handle(TaskList tasklist, List\u003cString\u003e args) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"        throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"                \"commandHandler.Handle called directly, not meant to be!\",","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"                \"You\u0027re not meant to see this\",","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"                null);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":28}},{"path":"src/main/java/parser/KniazCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package parser;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a command given to Kniaz, should only be instantiated via KniazParser when it parses a command","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public class KniazCommand {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * The type of instruction this command contains -- Such as list, event, bye, etc.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    private KniazParser.InstructionType instruction;","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * the arguments given to this command","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private List\u003cString\u003e args;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Protected constructor -- This shouldn\u0027t be instantiated from areas outside the parser package","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param instruction the type of instruction this command contains","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param args the arguments to the command","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    protected KniazCommand(KniazParser.InstructionType instruction, String... args) {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"        this.instruction \u003d instruction;","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        this.args \u003d Arrays.asList(args);","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"     * whether this has a certain instruction","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"     * @param compareTo the instruction to comapre against","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * @return whether this command has the supplied instruction","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    public boolean instructionEquals(KniazParser.InstructionType compareTo) {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        return this.instruction.equals(compareTo);","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * Getter method for the arguments in this command","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * @return the arguments in this command, in list form","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    public List\u003cString\u003e getArgs() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"        return args;","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":47}},{"path":"src/main/java/parser/KniazParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package parser;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import exceptions.KniazRuntimeException;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" * Abstract class encapsulating logic of parsing \u0026 tokenizing commands given to Kniaz","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"public abstract class KniazParser {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"    // doesn\u0027t need to be instantiated to do its job","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    // contains just the logic for parsing input/outputs after Kniaz decides what kind of input it is","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"    // helps keep Kniaz neat","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"     * Valid pattern for Event commands","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * TODO : Implement similar regex for all commands","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    private static final String EVENTPATTERN  \u003d \".*from.*to.*\";","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * The types of instructions that Kniaz can accept","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Each member of this enum has an alias, that represents the command typed into Kniaz","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * E.g. the DEADLINE InstructionType is related to the command \"deadline\".","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    public enum InstructionType {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        TODO(\"todo\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"        DEADLINE(\"deadline\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        EVENT(\"event\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"        MARK(\"mark\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"        UNMARK(\"unmark\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        LIST(\"list\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"        QUIT(\"bye\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        DELETE(\"delete\"),","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        INVALID(\"\"); // placeholder for anything not recognised","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"        public final String alias;","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        private InstructionType(String alias){","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"            this.alias \u003d alias;","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * Parses the given line and breaks it down into a KniazCommand","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * If an unknown instruction is entered, throws a KniazRunTimeException","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * @param rawLine the line to parse","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     * @return the Command that line represented","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"     * @throws KniazRuntimeException what went wrong, such as invalid commands","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"    public static KniazCommand parseCommand(String rawLine) throws KniazRuntimeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        String strippedLine \u003d rawLine.strip();","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        // The lines below are fairly self-explanatory","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        // Just checks for each alias in our enum and makes the right KniazCommand","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        // TODO : refactor this to get rid of the giant if-else ladder (if we can!)","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        if (strippedLine.equals(InstructionType.QUIT.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.QUIT);","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"        if (strippedLine.equals(InstructionType.LIST.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand((InstructionType.LIST));","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"            // print out if we are asked to list","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.MARK.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"            // handle parsing which entry the user wants to mark here","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"            String entryAsString \u003d KniazParser.getAfter(strippedLine,InstructionType.MARK.alias);","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.MARK, entryAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.UNMARK.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"xavierpok"},"content":"            // handle parsing which entry user wants to unmark here","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"xavierpok"},"content":"            String entryAsString \u003d KniazParser.getAfter(strippedLine,InstructionType.UNMARK.alias);","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.UNMARK, entryAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.DELETE.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"xavierpok"},"content":"            //handle parsing which entry user wants to delete here","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"xavierpok"},"content":"            String entryAsString \u003d KniazParser.getAfter(strippedLine,InstructionType.DELETE.alias);","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.DELETE,entryAsString);","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.TODO.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"xavierpok"},"content":"            String taskName \u003d KniazParser.getAfter(strippedLine,InstructionType.TODO.alias).strip();","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.TODO, taskName);","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.DEADLINE.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"xavierpok"},"content":"            // pull the args for this command","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"xavierpok"},"content":"            String deadlineArgs \u003d KniazParser.getAfter(strippedLine, InstructionType.DEADLINE.alias);","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"xavierpok"},"content":"            String[] tokenizedDlineArgs \u003d deadlineArgs.split(\"\\\\s*/\\\\s*(by)\\\\s*\");","lastModifiedDate":"2023-08-23"},{"lineNumber":103,"author":{"gitId":"xavierpok"},"content":"            // regex \\s* represents any arbitrary number of whitespace","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"xavierpok"},"content":"            // Also strips the by out","lastModifiedDate":"2023-08-23"},{"lineNumber":105,"author":{"gitId":"xavierpok"},"content":"            // so this split input strips whitespace in between delims","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"xavierpok"},"content":"            // Split it up by the slash and strip whitespace","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.DEADLINE, tokenizedDlineArgs);","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"xavierpok"},"content":"        } else if (strippedLine.startsWith(InstructionType.EVENT.alias)) {","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"xavierpok"},"content":"            String eventArgs \u003d KniazParser.getAfter(strippedLine, InstructionType.EVENT.alias);","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"xavierpok"},"content":"            if (!eventArgs.matches(KniazParser.EVENTPATTERN)) { //Handles format validation here for Events","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"xavierpok"},"content":"                throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"xavierpok"},"content":"                        String.format(\"Wrong input format in %s\",eventArgs),","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"xavierpok"},"content":"                        \"Your input is formatted wrongly, try again.\",","lastModifiedDate":"2023-08-23"},{"lineNumber":116,"author":{"gitId":"xavierpok"},"content":"                        null);","lastModifiedDate":"2023-08-23"},{"lineNumber":117,"author":{"gitId":"xavierpok"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"xavierpok"},"content":"            String[] tokenizedEventArgs \u003d eventArgs.split(\"\\\\s*/\\\\s*(from|to)\\\\s*\");","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"xavierpok"},"content":"            // gets rid of the from/to also, in addition to splitting and stripping whitespace","lastModifiedDate":"2023-08-23"},{"lineNumber":120,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":121,"author":{"gitId":"xavierpok"},"content":"            return new KniazCommand(InstructionType.EVENT, tokenizedEventArgs);","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"xavierpok"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"xavierpok"},"content":"            throw new KniazRuntimeException(","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"Unrecognised input : %s\", strippedLine),","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"xavierpok"},"content":"                    String.format(\"I did not recognise %s as an input, try again.\", strippedLine),","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"xavierpok"},"content":"                    null);","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"xavierpok"},"content":"     * Helper function to get after a given substring","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"xavierpok"},"content":"     * @param fullString full string to scan","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"xavierpok"},"content":"     * @param subString what substring to look for","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"xavierpok"},"content":"     * @return everything in fullString that comes after subString","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"xavierpok"},"content":"    private static String getAfter(String fullString, String subString) {","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"xavierpok"},"content":"        int indexOfSubString \u003d fullString.indexOf(subString);","lastModifiedDate":"2023-08-23"},{"lineNumber":138,"author":{"gitId":"xavierpok"},"content":"        return fullString.substring(indexOfSubString + subString.length()).strip();","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"xavierpok"},"content":"        // add the substring length to skip to the end of it","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":141,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"xavierpok":142}},{"path":"src/main/java/save/KniazLoader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package save;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import parser.KniazParser;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.io.File;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" *  Encapsulates a class to help load Kniaz tasklist data from disk.","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"public class KniazLoader {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * The default path KniazLoader will try to save to","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    public static final String DEFAULT_PATH \u003d KniazSaver.DEFAULT_PATH;","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Internal File object for reading","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"    private File saveFile;","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazLoader that will try to load from the provided path.","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     * @param path the path to save files to","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    public KniazLoader(String path) {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        this.saveFile \u003d new File(path);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazLoader that will try to load from provided path","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    public KniazLoader() {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        this(DEFAULT_PATH);","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * Attempts to load saved TaskList from the location that was previously provided to this class,","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * during construction","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     * @return the loaded TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"     * @throws IOException If there is an error in I/O, typically caused by the file not existing at the location,","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     * which may be caused by this being the first ever session of Kniaz","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * @throws SecurityException If the security manager did not allow this class to read from file","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * @throws ClassNotFoundException If the data loaded did not have an entry for the class name.","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * Typically caused by corruped data","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"    public TaskList load() throws IOException, SecurityException, ClassNotFoundException {","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.exists()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"            throw new IOException(String.format(\"%s does not exist\",this.saveFile.getAbsolutePath()));","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.canRead()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.setReadable(true);","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"        // time to read it","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"        FileInputStream fileInputStream \u003d new FileInputStream(this.saveFile);","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"        ObjectInputStream taskInputStream \u003d new ObjectInputStream(fileInputStream);","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"        return (TaskList) taskInputStream.readObject();","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"xavierpok":69}},{"path":"src/main/java/save/KniazSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package save;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a class to help save Kniaz tasklist data to disk.","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"public class KniazSaver {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * The default path KniazSaver will try to save to","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    public final static String DEFAULT_PATH \u003d \"./data/Kniaz.dat\";","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * Internal File object for writing","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    private File saveFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazSaver that will try to save at the provided path.","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     * @param path the path to save files to","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    public KniazSaver(String path) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"        this.saveFile \u003d new File(path);","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * Constructor for class. Makes a KniazSaver that will try to save to DEFAULT_PATH","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    public KniazSaver() {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        this(DEFAULT_PATH);","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * Saves the provided TaskList at the location this class was constructed with.","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     * @param taskList the TaskList to save to disk","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"     * @throws java.io.IOException If there is an error with I/O,","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"     * typically when an error occured in creating file or writing to file","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"     * @throws java.lang.SecurityException If the security manager did not allow this class to write to file","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"    public void save(TaskList taskList) throws java.io.IOException,java.lang.SecurityException {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.getParentFile().exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"            // Strictly speaking, do not need to wrap in an if.","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"            // Makes directory if file does not exist","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.getParentFile().mkdirs(); // may throw IOException","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            // Also does not strictly need to be wrapped in an if block","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"            // makes file if the file does not exist yet","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.createNewFile(); // May throw IOException","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"        if (!this.saveFile.canWrite()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"            // Again, does not strictly need to be wrapped","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"            // Attempt to allow access to write to the file if possible","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"xavierpok"},"content":"            this.saveFile.setWritable(true); //May throw SecurityException","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"xavierpok"},"content":"        // Below syntax handles setting up of streams to write","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"xavierpok"},"content":"        FileOutputStream fileOutputStream \u003d new FileOutputStream(this.saveFile);","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"xavierpok"},"content":"        ObjectOutputStream taskListOutputStream \u003d new ObjectOutputStream(fileOutputStream);","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"xavierpok"},"content":"        // This line does the writing to the data file","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"xavierpok"},"content":"        taskListOutputStream.writeObject(taskList);","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"xavierpok":76}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a task with a singular deadline,","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * so has a name, completion status, and a time representing the deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * D for [D]eadline","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[D]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * String representing the deadline of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"    private String deadlineTime \u003d \"\";","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"     * Constructor for Deadline, setting name and time","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * @param deadlineName the name of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param deadlineTime the time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"    public Deadline(String deadlineName, String deadlineTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"        super(deadlineName, false);","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"        this.deadlineTime \u003d deadlineTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Deadline, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(a Deadline), its name, when it is due, and whether it is done.","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this Deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        String postpend \u003d String.format(\"(by : %s)\",this.deadlineTime);","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"        return Deadline.PREPEND + super.toPrintString() + postpend;","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":41}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"     * E for [E]vent","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[E]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     * String representing whene this Event starts","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"    private String startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * String representing when this Event ends","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * Constructor for Event, setting name, starting time, ending time","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param eventName the name of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param startTime the starting time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * @param endTime the ending time of this Deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"    public Event(String eventName, String startTime, String endTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        super(eventName, false);","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Event, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(an Event), its name, when it starts, when it ends, and whether it is done.","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this Deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"        String postpend \u003d String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"                \" from : %s to: %s\", this.startTime, this.endTime","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"        ); //need a whitespace here for formatting reasons","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        return Event.PREPEND + super.toPrintString() + postpend;","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":45}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a single task to be done (by the user) in Kniaz","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"public abstract class Task implements Serializable {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * Whether this task is done","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * Name of this task","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    private String taskName \u003d \"\";","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"     * The (protected) constructor for this task, mostly for inheritance by subclasses","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"     * @param taskName name of task","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * @param isDone whether it is done","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"    protected Task(String taskName, boolean isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"     * Marks this task as done, does NOT check for if it was already done","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d true  ;","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"     * Marks this task as not done, does NOT check for if it was already undone","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this Task, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * whether this task is done and its name","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        String statusIcon \u003d \"\";","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"            statusIcon \u003d \"X\";","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"        } else if (!this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"            statusIcon \u003d \" \";","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"        return String.format(\"[%s] %s\", statusIcon, this.taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"        // return in format [statusIcon] taskname","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":62}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":" * Class encapsulating a list of Tasks, supports easy string representation, refer to Task for more details about","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":" * what Tasks are.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"public class TaskList extends ArrayList\u003cTask\u003e implements Serializable {","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    // Parent constructor is (implicitly) used","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * Returns the user-facing string representation of TaskList,","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * which is a numbered list of the user-facing string representation of each Task,","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     * with a newline in between each entry","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"     * @return the string representation of TaskList","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"        StringBuilder out \u003d new StringBuilder();","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"        for (int i \u003d 0; i \u003c this.size(); i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"            Task currTask \u003d this.get(i);","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"            String newLine \u003d String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"                    \"%d. %s\\n\", i+1 , currTask.toPrintString());","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"            // User probably expects to start counting from 1 instead of 0","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"            // so need to add 1 here","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"            out.append(newLine);","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"        return out.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"xavierpok"},"content":"     * Marks a given task specified by index as done","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"xavierpok"},"content":"     * @param index the index of the task to mark as done","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"xavierpok"},"content":"    public void markAsUndone(int index) {","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"xavierpok"},"content":"        this.get(index).markAsUndone();","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"xavierpok"},"content":"     * Marks the given task specified by index as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"xavierpok"},"content":"     * @param index the index of the task marked as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"xavierpok"},"content":"    public void markAsDone(int index) {","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"xavierpok"},"content":"        this.get(index).markAsDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":60}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"package task;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":" * Encapsulates a Task that is a to-do, lacking a date and only containing a name and completion status","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"     * String to put at the front of string rep of this, represents the name,","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"xavierpok"},"content":"     * T for [T]oDo","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"xavierpok"},"content":"    private final static String PREPEND \u003d \"[T]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"xavierpok"},"content":"     * Constructor for a ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"xavierpok"},"content":"     * @param toDoName the name of this ToDo","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"xavierpok"},"content":"    public ToDo(String toDoName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"xavierpok"},"content":"        super(toDoName,false);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"xavierpok"},"content":"     * The user-facing string representation of this ToDo, containing information about","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"xavierpok"},"content":"     * what kind of task this is(a ToDo), its name and whether it is done","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"xavierpok"},"content":"     * @return the user-facing string representation of this ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"xavierpok"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"xavierpok"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"xavierpok"},"content":"    public String toPrintString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"xavierpok"},"content":"        return ToDo.PREPEND + super.toPrintString();","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"xavierpok"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"xavierpok"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"xavierpok"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"xavierpok":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xavierpok"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"xavierpok"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"xavierpok"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"xavierpok"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"xavierpok"},"content":"test","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"xavierpok"},"content":"test2","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"xavierpok"},"content":"event bad event /to 4pm from 2pm","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"xavierpok"},"content":"delete 2","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"xavierpok"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"xavierpok":10}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"xavierpok"},"content":"java -classpath ../bin Kniaz \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xavierpok":1,"-":37}}]
