[{"path":"src/main/java/Chatbot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"content":"import java.io.FileWriter;"},{"lineNumber":4,"content":"import java.io.IOException;"},{"lineNumber":5,"content":"import java.time.LocalDate;"},{"lineNumber":6,"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"content":"import java.util.ArrayList;"},{"lineNumber":9,"content":"import java.util.List;"},{"lineNumber":10,"content":"import java.util.Scanner;"},{"lineNumber":11,"content":""},{"lineNumber":12,"content":"public class Chatbot {"},{"lineNumber":13,"content":"    /** Name of the Chatbot. */"},{"lineNumber":14,"content":"    private static final String NAME \u003d \"Bro\";"},{"lineNumber":15,"content":""},{"lineNumber":16,"content":"    /** Scanner for the Chatbot. */"},{"lineNumber":17,"content":"    private Scanner scanner;"},{"lineNumber":18,"content":""},{"lineNumber":19,"content":"    /** TaskList for the Chatbot. */"},{"lineNumber":20,"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":21,"content":""},{"lineNumber":22,"content":"    /**"},{"lineNumber":23,"content":"     * Constructor for the Chatbot."},{"lineNumber":24,"content":"     * Loads existing tasks from the hard disk and creates the data file and directory if it does not exist."},{"lineNumber":25,"content":"     */"},{"lineNumber":26,"content":"    private Chatbot() {"},{"lineNumber":27,"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":28,"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"content":"    }"},{"lineNumber":30,"content":""},{"lineNumber":31,"content":"    /**"},{"lineNumber":32,"content":"     * Greets the user."},{"lineNumber":33,"content":"     */"},{"lineNumber":34,"content":"    private void greet() {"},{"lineNumber":35,"content":"        System.out.println(\"Hello! I\u0027m \" + NAME + \"\\n\" + \"What can I do for you?\\n\");"},{"lineNumber":36,"content":"    }"},{"lineNumber":37,"content":""},{"lineNumber":38,"content":"    /**"},{"lineNumber":39,"content":"     * Causes Chatbot to exit."},{"lineNumber":40,"content":"     */"},{"lineNumber":41,"content":"    private void exit() {"},{"lineNumber":42,"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":43,"content":"        this.saveTasks();"},{"lineNumber":44,"content":"        this.scanner.close();"},{"lineNumber":45,"content":"    }"},{"lineNumber":46,"content":""},{"lineNumber":47,"content":"    /**"},{"lineNumber":48,"content":"     * Adds task inputted by user to taskList. Prints out confirmation."},{"lineNumber":49,"content":"     *"},{"lineNumber":50,"content":"     * @param input The command inputted by the user."},{"lineNumber":51,"content":"     * @throws InvalidTodoException If format of Todo entered is invalid."},{"lineNumber":52,"content":"     * @throws InvalidDeadlineException If format of Deadline entered is invalid."},{"lineNumber":53,"content":"     * @throws InvalidEventException If format of Event entered is invalid."},{"lineNumber":54,"content":"     * @throws InvalidCommandException If format of command entered is invalid."},{"lineNumber":55,"content":"     */"},{"lineNumber":56,"content":"    private void add(String input) throws InvalidTodoException,"},{"lineNumber":57,"content":"            InvalidDeadlineException, InvalidEventException, InvalidCommandException {"},{"lineNumber":58,"content":"        Task newTask \u003d null;"},{"lineNumber":59,"content":"        String nextInput;"},{"lineNumber":60,"content":""},{"lineNumber":61,"content":"        try {"},{"lineNumber":62,"content":"            nextInput \u003d input.substring(4);"},{"lineNumber":63,"content":""},{"lineNumber":64,"content":"            if (nextInput.isBlank()) {"},{"lineNumber":65,"content":"                throw new InvalidCommandException();"},{"lineNumber":66,"content":"            }"},{"lineNumber":67,"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":68,"content":"            throw new InvalidCommandException();"},{"lineNumber":69,"content":"        }"},{"lineNumber":70,"content":""},{"lineNumber":71,"content":"        if (nextInput.startsWith(\"todo\")) {"},{"lineNumber":72,"content":"            try {"},{"lineNumber":73,"content":"                String description \u003d nextInput.substring(5);"},{"lineNumber":74,"content":""},{"lineNumber":75,"content":"                if (description.isBlank()) {"},{"lineNumber":76,"content":"                    throw new InvalidTodoException();"},{"lineNumber":77,"content":"                } else {"},{"lineNumber":78,"content":"                    newTask \u003d new Todo(description);"},{"lineNumber":79,"content":"                }"},{"lineNumber":80,"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":81,"content":"                throw new InvalidTodoException();"},{"lineNumber":82,"content":"            }"},{"lineNumber":83,"content":"        } else if (nextInput.startsWith(\"deadline\")) {"},{"lineNumber":84,"content":"            try {"},{"lineNumber":85,"content":"                int by \u003d nextInput.indexOf(\"/by\");"},{"lineNumber":86,"content":"                String description \u003d nextInput.substring(9, by - 1);"},{"lineNumber":87,"content":"                LocalDate deadline \u003d LocalDate.parse(nextInput.substring(by + 4));"},{"lineNumber":88,"content":""},{"lineNumber":89,"content":"                if (description.isBlank()) {"},{"lineNumber":90,"content":"                    throw new InvalidDeadlineException();"},{"lineNumber":91,"content":"                } else {"},{"lineNumber":92,"content":"                    newTask \u003d new Deadline(description, deadline);"},{"lineNumber":93,"content":"                }"},{"lineNumber":94,"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":95,"content":"                throw new InvalidDeadlineException();"},{"lineNumber":96,"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":97,"content":"            throw new InvalidDeadlineException();"},{"lineNumber":98,"content":"            }"},{"lineNumber":99,"content":"        } else if (nextInput.startsWith(\"event\")) {"},{"lineNumber":100,"content":"            try {"},{"lineNumber":101,"content":"                int from \u003d nextInput.indexOf(\"/from\");"},{"lineNumber":102,"content":"                int to \u003d nextInput.indexOf(\"/to\");"},{"lineNumber":103,"content":"                String description \u003d nextInput.substring(6, from - 1);"},{"lineNumber":104,"content":"                LocalDate start \u003d LocalDate.parse(nextInput.substring(from + 6, to - 1));"},{"lineNumber":105,"content":"                LocalDate end \u003d LocalDate.parse(nextInput.substring(to + 4));"},{"lineNumber":106,"content":""},{"lineNumber":107,"content":"                if (description.isBlank()) {"},{"lineNumber":108,"content":"                    throw new InvalidEventException();"},{"lineNumber":109,"content":"                } else {"},{"lineNumber":110,"content":"                    newTask \u003d new Event(description, start, end);"},{"lineNumber":111,"content":"                }"},{"lineNumber":112,"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":113,"content":"                throw new InvalidEventException();"},{"lineNumber":114,"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":115,"content":"                throw new InvalidEventException();"},{"lineNumber":116,"content":"            }"},{"lineNumber":117,"content":"        } else {"},{"lineNumber":118,"content":"            throw new InvalidCommandException();"},{"lineNumber":119,"content":"        }"},{"lineNumber":120,"content":""},{"lineNumber":121,"content":"        if (newTask !\u003d null) {"},{"lineNumber":122,"content":"            this.taskList.add(newTask);"},{"lineNumber":123,"content":"            System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newTask);"},{"lineNumber":124,"content":"            System.out.println(\"Now you have \" + this.taskList.size() + \" tasks in the list.\\n\");"},{"lineNumber":125,"content":"        }"},{"lineNumber":126,"content":"    }"},{"lineNumber":127,"content":""},{"lineNumber":128,"content":"    /**"},{"lineNumber":129,"content":"     * Lists out all the tasks in taskList."},{"lineNumber":130,"content":"     */"},{"lineNumber":131,"content":"    private void listTasks() {"},{"lineNumber":132,"content":"        System.out.println(\"Here are the tasks in your list:\\n\");"},{"lineNumber":133,"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":134,"content":"            int num \u003d i + 1;"},{"lineNumber":135,"content":"            System.out.println(num +\". \" + taskList.get(i).toString());"},{"lineNumber":136,"content":"        }"},{"lineNumber":137,"content":"        System.out.print(\"\\n\");"},{"lineNumber":138,"content":"    }"},{"lineNumber":139,"content":""},{"lineNumber":140,"content":"    /**"},{"lineNumber":141,"content":"     * Marks specified task as done. Prints confirmation."},{"lineNumber":142,"content":"     *"},{"lineNumber":143,"content":"     * @param input The user input."},{"lineNumber":144,"content":"     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList."},{"lineNumber":145,"content":"     * @throws InvalidCommandException If format of command entered is invalid."},{"lineNumber":146,"content":"     */"},{"lineNumber":147,"content":"    private void markTaskStatusTrue(String input) throws InvalidTaskNumberException, InvalidCommandException {"},{"lineNumber":148,"content":"        int taskIndex;"},{"lineNumber":149,"content":"        try {"},{"lineNumber":150,"content":"            String nextInput \u003d input.substring(5);"},{"lineNumber":151,"content":"            if (nextInput.isBlank()) {"},{"lineNumber":152,"content":"                throw new InvalidCommandException();"},{"lineNumber":153,"content":"            } else {"},{"lineNumber":154,"content":"                taskIndex \u003d Integer.parseInt(nextInput);"},{"lineNumber":155,"content":"            }"},{"lineNumber":156,"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":157,"content":"            throw new InvalidCommandException();"},{"lineNumber":158,"content":"        }"},{"lineNumber":159,"content":""},{"lineNumber":160,"content":"        if (taskIndex \u003e this.taskList.size()) {"},{"lineNumber":161,"content":"            throw new InvalidTaskNumberException(taskIndex);"},{"lineNumber":162,"content":"        } else {"},{"lineNumber":163,"content":"            Task task \u003d taskList.get(taskIndex - 1);"},{"lineNumber":164,"content":"            task.markStatus(true);"},{"lineNumber":165,"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task + \"\\n\");"},{"lineNumber":166,"content":"        }"},{"lineNumber":167,"content":"    }"},{"lineNumber":168,"content":""},{"lineNumber":169,"content":"    /**"},{"lineNumber":170,"content":"     * Marks specified task as undone. Prints confirmation."},{"lineNumber":171,"content":"     *"},{"lineNumber":172,"content":"     * @param input The user input."},{"lineNumber":173,"content":"     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList."},{"lineNumber":174,"content":"     * @throws InvalidCommandException If format of command entered is invalid."},{"lineNumber":175,"content":"     */"},{"lineNumber":176,"content":"    private void markTaskStatusFalse(String input) throws InvalidTaskNumberException, InvalidCommandException {"},{"lineNumber":177,"content":"        int taskIndex;"},{"lineNumber":178,"content":"        try {"},{"lineNumber":179,"content":"            String nextInput \u003d input.substring(7);"},{"lineNumber":180,"content":"            if (nextInput.isBlank()) {"},{"lineNumber":181,"content":"                throw new InvalidCommandException();"},{"lineNumber":182,"content":"            } else {"},{"lineNumber":183,"content":"                taskIndex \u003d Integer.parseInt(nextInput);"},{"lineNumber":184,"content":"            }"},{"lineNumber":185,"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":186,"content":"            throw new InvalidCommandException();"},{"lineNumber":187,"content":"        }"},{"lineNumber":188,"content":""},{"lineNumber":189,"content":"        if (taskIndex \u003e this.taskList.size()) {"},{"lineNumber":190,"content":"            throw new InvalidTaskNumberException(taskIndex);"},{"lineNumber":191,"content":"        } else {"},{"lineNumber":192,"content":"            Task task \u003d taskList.get(taskIndex - 1);"},{"lineNumber":193,"content":"            task.markStatus(false);"},{"lineNumber":194,"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task + \"\\n\");"},{"lineNumber":195,"content":"        }"},{"lineNumber":196,"content":"    }"},{"lineNumber":197,"content":""},{"lineNumber":198,"content":"    /**"},{"lineNumber":199,"content":"     * Deletes the specified task in the list."},{"lineNumber":200,"content":"     *"},{"lineNumber":201,"content":"     * @param input The user input."},{"lineNumber":202,"content":"     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList."},{"lineNumber":203,"content":"     * @throws InvalidCommandException If format of command entered is invalid."},{"lineNumber":204,"content":"     */"},{"lineNumber":205,"content":"    public void delete(String input) throws InvalidTaskNumberException, InvalidCommandException {"},{"lineNumber":206,"content":"        int taskIndex;"},{"lineNumber":207,"content":"        try {"},{"lineNumber":208,"content":"            String nextInput \u003d input.substring(7);"},{"lineNumber":209,"content":"            if (nextInput.isBlank()) {"},{"lineNumber":210,"content":"                throw new InvalidCommandException();"},{"lineNumber":211,"content":"            } else {"},{"lineNumber":212,"content":"                taskIndex \u003d Integer.parseInt(nextInput);"},{"lineNumber":213,"content":"            }"},{"lineNumber":214,"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":215,"content":"            throw new InvalidCommandException();"},{"lineNumber":216,"content":"        }"},{"lineNumber":217,"content":""},{"lineNumber":218,"content":"        Task removed;"},{"lineNumber":219,"content":"        try {"},{"lineNumber":220,"content":"            removed \u003d this.taskList.remove(taskIndex - 1);"},{"lineNumber":221,"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":222,"content":"            throw new InvalidTaskNumberException(taskIndex);"},{"lineNumber":223,"content":"        }"},{"lineNumber":224,"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + removed + \"\\n\");"},{"lineNumber":225,"content":"    }"},{"lineNumber":226,"content":""},{"lineNumber":227,"content":"    /**"},{"lineNumber":228,"content":"     * Loads file input and adds respective tasks into chatbot taskList."},{"lineNumber":229,"content":"     */"},{"lineNumber":230,"content":"    private void loadTasksFromFile() {"},{"lineNumber":231,"content":"        File directory \u003d new File(\"data\");"},{"lineNumber":232,"content":"        if (!directory.exists()) {"},{"lineNumber":233,"content":"            directory.mkdir();"},{"lineNumber":234,"content":"        }"},{"lineNumber":235,"content":""},{"lineNumber":236,"content":"        File data \u003d new File(\"data/tasks.txt\");"},{"lineNumber":237,"content":"        try {"},{"lineNumber":238,"content":"            if (data.exists()) {"},{"lineNumber":239,"content":"                Scanner dataScanner \u003d new Scanner(data);"},{"lineNumber":240,"content":"                while (dataScanner.hasNextLine()) {"},{"lineNumber":241,"content":"                    String task \u003d dataScanner.nextLine();"},{"lineNumber":242,"content":"                    if (task.startsWith(\"[T]\")) {"},{"lineNumber":243,"content":"                        String description \u003d task.substring(7);"},{"lineNumber":244,"content":""},{"lineNumber":245,"content":"                        if (description.isBlank()) {"},{"lineNumber":246,"content":"                            throw new InvalidFileFormatException();"},{"lineNumber":247,"content":"                        } else {"},{"lineNumber":248,"content":"                            this.taskList.add(new Todo(description));"},{"lineNumber":249,"content":"                        }"},{"lineNumber":250,"content":"                    } else if (task.startsWith(\"[D]\")) {"},{"lineNumber":251,"content":"                        int by \u003d task.indexOf(\"(by: \");"},{"lineNumber":252,"content":"                        String description \u003d task.substring(7, by - 1);"},{"lineNumber":253,"content":"                        LocalDate deadline \u003d LocalDate.parse(task.substring(by + 5, task.length() - 1),"},{"lineNumber":254,"content":"                                DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":255,"content":""},{"lineNumber":256,"content":"                        if (description.isBlank()) {"},{"lineNumber":257,"content":"                            throw new InvalidFileFormatException();"},{"lineNumber":258,"content":"                        } else {"},{"lineNumber":259,"content":"                            this.taskList.add(new Deadline(description, deadline));"},{"lineNumber":260,"content":"                        }"},{"lineNumber":261,"content":"                    } else if (task.startsWith(\"[E]\")) {"},{"lineNumber":262,"content":"                        int from \u003d task.indexOf(\"(from: \");"},{"lineNumber":263,"content":"                        int to \u003d task.indexOf(\"to: \");"},{"lineNumber":264,"content":"                        String description \u003d task.substring(7, from - 1);"},{"lineNumber":265,"content":"                        LocalDate start \u003d LocalDate.parse(task.substring(from + 7, to - 1),"},{"lineNumber":266,"content":"                                DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":267,"content":"                        LocalDate end \u003d LocalDate.parse(task.substring(to + 4, task.length() - 1),"},{"lineNumber":268,"content":"                                DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":269,"content":""},{"lineNumber":270,"content":"                        if (description.isBlank()) {"},{"lineNumber":271,"content":"                            throw new InvalidFileFormatException();"},{"lineNumber":272,"content":"                        } else {"},{"lineNumber":273,"content":"                            this.taskList.add(new Event(description, start, end));"},{"lineNumber":274,"content":"                        }"},{"lineNumber":275,"content":"                    } else {"},{"lineNumber":276,"content":"                        throw new InvalidFileFormatException();"},{"lineNumber":277,"content":"                    }"},{"lineNumber":278,"content":"                }"},{"lineNumber":279,"content":"                dataScanner.close();"},{"lineNumber":280,"content":"            } else {"},{"lineNumber":281,"content":"                data.createNewFile();"},{"lineNumber":282,"content":"            }"},{"lineNumber":283,"content":"        } catch (Exception e) {"},{"lineNumber":284,"content":"            System.out.println(e.getMessage());"},{"lineNumber":285,"content":"        }"},{"lineNumber":286,"content":"    }"},{"lineNumber":287,"content":""},{"lineNumber":288,"content":"    /**"},{"lineNumber":289,"content":"     * Reads user input. Exits if user input is \"bye\", lists tasks if input is \"list\", else, echoes commands."},{"lineNumber":290,"content":"     * Update current state of tasks to data file."},{"lineNumber":291,"content":"     */"},{"lineNumber":292,"content":"    private void readInput() {"},{"lineNumber":293,"content":"        System.out.print(\"\u003e \");"},{"lineNumber":294,"content":"        String userInput \u003d scanner.nextLine();"},{"lineNumber":295,"content":""},{"lineNumber":296,"content":"        try {"},{"lineNumber":297,"content":"            if (userInput.equals(\"list\")) {"},{"lineNumber":298,"content":"                this.listTasks();"},{"lineNumber":299,"content":"            } else if (userInput.equals(\"bye\")) {"},{"lineNumber":300,"content":"                this.exit();"},{"lineNumber":301,"content":"            } else if (userInput.startsWith(\"add \")) {"},{"lineNumber":302,"content":"                this.add(userInput);"},{"lineNumber":303,"content":"            } else if (userInput.startsWith(\"mark \")) {"},{"lineNumber":304,"content":"                this.markTaskStatusTrue(userInput);"},{"lineNumber":305,"content":"            } else if (userInput.startsWith(\"unmark \")) {"},{"lineNumber":306,"content":"                this.markTaskStatusFalse(userInput);"},{"lineNumber":307,"content":"            } else if (userInput.startsWith(\"delete \")) {"},{"lineNumber":308,"content":"                this.delete(userInput);"},{"lineNumber":309,"content":"            } else {"},{"lineNumber":310,"content":"                throw new InvalidCommandException();"},{"lineNumber":311,"content":"            }"},{"lineNumber":312,"content":"            this.saveTasks();"},{"lineNumber":313,"content":"        } catch (Exception e) {"},{"lineNumber":314,"content":"            System.out.println(e.getMessage() + \"\\n\");"},{"lineNumber":315,"content":"        } finally {"},{"lineNumber":316,"content":"            if (!userInput.equals(\"bye\")) {"},{"lineNumber":317,"content":"                this.readInput();"},{"lineNumber":318,"content":"            }"},{"lineNumber":319,"content":"        }"},{"lineNumber":320,"content":"    }"},{"lineNumber":321,"content":""},{"lineNumber":322,"content":"    /**"},{"lineNumber":323,"content":"     * Saves current taskList to data file."},{"lineNumber":324,"content":"     */"},{"lineNumber":325,"content":"    public void saveTasks() {"},{"lineNumber":326,"content":"        try {"},{"lineNumber":327,"content":"            FileWriter fw \u003d new FileWriter(\"data/tasks.txt\");"},{"lineNumber":328,"content":"            for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":329,"content":"                fw.write(this.taskList.get(i).toString() + \"\\n\");"},{"lineNumber":330,"content":"            }"},{"lineNumber":331,"content":"            fw.close();"},{"lineNumber":332,"content":"        } catch (Exception e) {"},{"lineNumber":333,"content":"            System.out.println(e.getMessage());"},{"lineNumber":334,"content":"        }"},{"lineNumber":335,"content":"    }"},{"lineNumber":336,"content":""},{"lineNumber":337,"content":"    public static void main(String[] args) {"},{"lineNumber":338,"content":"        Chatbot chatbot \u003d new Chatbot();"},{"lineNumber":339,"content":"        chatbot.loadTasksFromFile();"},{"lineNumber":340,"content":"        chatbot.greet();"},{"lineNumber":341,"content":"        chatbot.readInput();"},{"lineNumber":342,"content":"    }"},{"lineNumber":343,"content":"}"}],"authorContributionMap":{"null":342,"emzm2023":1}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"    /** LocalDate deadline for Deadline. */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"emzm2023"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"emzm2023"},"content":"    /** Constructor for Deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"emzm2023"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"emzm2023"},"content":"     * @param by Deadline for Deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"emzm2023"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"emzm2023"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"emzm2023"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"emzm2023"},"content":"    /** toString method for Deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"emzm2023"},"content":"     * @return String representation of Deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"emzm2023"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"emzm2023"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"emzm2023"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"emzm2023":26}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"    /** Start time of Event. */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"emzm2023"},"content":"    protected LocalDate start;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"emzm2023"},"content":"    /** End time of Event. */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"emzm2023"},"content":"    protected LocalDate end;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"emzm2023"},"content":"    /** Constructor for Event.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"emzm2023"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"emzm2023"},"content":"     * @param start Start time of Event.","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"emzm2023"},"content":"     * @param end End time of Event.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"emzm2023"},"content":"    public Event(String description, LocalDate start, LocalDate end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"emzm2023"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"emzm2023"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"emzm2023"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"emzm2023"},"content":"    /** toString method for Event.","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"emzm2023"},"content":"     * @return String representation of Event.","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"emzm2023"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"emzm2023"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"emzm2023"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"emzm2023"},"content":"                + \" to: \"+ end.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"emzm2023":31}},{"path":"src/main/java/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidCommandException(){","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"OOPS!!! Please type a valid command!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidDeadlineException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidDeadlineException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"OOPS!!! Please specify the description and deadline for this Deadline!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidEventException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidEventException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"OOPS!!! Please specify the description, start, and end time for this Event!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/InvalidFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidFileFormatException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidFileFormatException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"Error loading tasks from file. Please check the format of the tasks in the data file!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidTaskNumberException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidTaskNumberException(int index){","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"OOPS!!! There is no task \" + index + \"!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/InvalidTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class InvalidTodoException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    public InvalidTodoException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"        super(\"OOPS!!! Please specify the description for this Todo!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"emzm2023":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"    /** The done status of the task. */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"emzm2023"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"emzm2023"},"content":"    /** Constructor for a task.","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"emzm2023"},"content":"     * @param description The task description.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"emzm2023"},"content":"     * */","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"emzm2023"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"emzm2023"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"emzm2023"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"emzm2023"},"content":"    /** Returns an X if the task is done.","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"emzm2023"},"content":"     * @return A string showing if the task has been done or not.","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"emzm2023"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"emzm2023"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"emzm2023"},"content":"    /** Prints out task done status along with the task description.","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"emzm2023"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"emzm2023"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"emzm2023"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"emzm2023"},"content":"    /** Marks the task done status with the boolean argument.","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"emzm2023"},"content":"     * @param status The boolean value to represent the task done status with.","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"emzm2023"},"content":"     * @return Returns true if successful.","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"emzm2023"},"content":"    public boolean markStatus(boolean status) {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"emzm2023"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"emzm2023"},"content":"        return true;","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"emzm2023":42}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"    /** Constructor for Todo.","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"emzm2023"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"emzm2023"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"emzm2023"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"emzm2023"},"content":"    /** toString method for Todo.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"emzm2023"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"emzm2023"},"content":"     * @return String representation of Todo.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"emzm2023"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"emzm2023"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"emzm2023"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"emzm2023"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"emzm2023"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"emzm2023"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"emzm2023":18}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"[T][ ] study","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"[T][X] study","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"[D][ ] read (by: Oct 4 2023)","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"emzm2023":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"emzm2023"},"content":"hi","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"emzm2023"},"content":"add","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"emzm2023"},"content":"add","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"emzm2023"},"content":"add todo","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"emzm2023"},"content":"add todo study","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"emzm2023"},"content":"add deadline","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"emzm2023"},"content":"add deadline read","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"emzm2023"},"content":"add deadline read /by","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"emzm2023"},"content":"add deadline /by 2023-10-04","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"emzm2023"},"content":"add deadline read /by 2023-10-04","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"emzm2023"},"content":"add event","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"emzm2023"},"content":"add event shop","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"emzm2023"},"content":"add event shop /from","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"emzm2023"},"content":"add event shop /from 2023-09-05","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"emzm2023"},"content":"add event shop /from 2023-09-05 /to 2023-09-10","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"emzm2023"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"emzm2023"},"content":"mark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"emzm2023"},"content":"mark","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"emzm2023"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"emzm2023"},"content":"unmark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"emzm2023"},"content":"unmark","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"emzm2023"},"content":"delete 5","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"emzm2023"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"emzm2023"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"emzm2023"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"emzm2023":25}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"emzm2023"},"content":"java -classpath ../bin Chatbot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"emzm2023"},"content":"## convert to UNIX format","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"emzm2023"},"content":"dos2unix ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"emzm2023"},"content":"dos2unix EXPECTED-UNIX.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":35,"emzm2023":4}}]
