[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"public enum Command {","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"    LIST,","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"    MARK,","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"    UNMARK,","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    BYE,","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"    ADD,","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    TODO,","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    EVENT,","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    DELETE;","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    public static final String[] validCommands \u003d","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"            {\"list\", \"bye\", \"todo \u003ctask_name\u003e\", \"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\",","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"                    \"event \u003ctask_name\u003e /from \u003cstart-time\u003e /to \u003cend-time\u003e\", \"mark \u003cnumber\u003e\",","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"                    \"unmark \u003cnumber\u003e\", \"delete \u003cnumber\u003e\"};","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    public static Command getCommand(String input) throws InvalidInputException {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        String[] inputtedWords \u003d input.split(\" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        // Command word should always be first word without space","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        String commandWord \u003d inputtedWords[0];","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"        if (commandWord.equals(\"list\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"            return Command.LIST;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.equals(\"bye\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"            return Command.BYE;","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"            return Command.MARK;","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            return Command.UNMARK;","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            return Command.TODO;","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"event\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"            return Command.DELETE;","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":43}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":" * Deadline encapsulates task that need to be done before a specific date or time","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"    private String deadline;","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    public Deadline(String taskName, String deadline) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task based on whether its done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * @param taskName  name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     * @param isDone    whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     * @param deadline  the deadline of the task","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"    public Deadline(String taskName, boolean isDone, String deadline) {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputTask which informs the user of the error and actions to take","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        String[] segementedString \u003d input.split(\" /by \");","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        if (segementedString.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputTask(\"/by command is required\",","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /by command using \u0027deadline \u003cname\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            String deadline \u003d segementedString[1];","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"                String taskNameDeadline \u003d segementedString[0].substring(Duke.DEADLINEOFFSET);","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"Task name cannot be blank\",","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"                        \"Enter a non-blank deadline task name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"            String taskNameDeadline \u003d segementedString[0].substring(Duke.DEADLINEOFFSET);","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"            if (taskNameDeadline.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"Task name cannot be blank\",","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"                        \"Enter a non-blank deadline task name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"            } else if (deadline.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"for /by \u003ctime\u003e, time cannot be blank\",","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"                        \"Please input valid text that are not space\");","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"     * Converts a Deadline task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"        return \"D\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"                + Storage.FILESEPERATORCHARACTER + this.deadline;","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \"","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"                + this.taskName + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":80}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"    public static final int DEADLINEOFFSET \u003d 9;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    public static final int EVENTOFFSET \u003d 6;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"        this.storage \u003d Storage.createStorage(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"        this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    public void run() {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        int totalItemNumber \u003d this.taskList.length();","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        String chatBotName \u003d \"Benedict Cucumber Badge\";","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Hello! I\u0027m \" + chatBotName);","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"        boolean dontTerminate \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        while (dontTerminate) {","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"                Command command \u003d Command.getCommand(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"                // Split the string based on spaces","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"                String[] splitString \u003d input.split(\" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"                try {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"                    switch (command) {","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"                        case BYE:","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"                            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"                            dontTerminate \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"                        case LIST:","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"                            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"                            for (int i \u003d 0; i \u003c this.taskList.length(); i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"                                System.out.println(i + 1 + \". \" + this.taskList.getTask(i));","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"                            }","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"                        case UNMARK:","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"                            // Order matters, if we check for marks first, unmark falls under mark loop","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"                            // Split the string based on spaces","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"                            // The input after the mark word should be task no (which should be index 1)","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"                            int taskNumberUnmark \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"                            // The above should throw a NumberFormatException","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.unmarkTask(taskNumberUnmark - 1, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"                        case MARK:","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"                            // The input after the mark word should be task no (which should be index 1)","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"                            int taskNumberMark \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"                            // The above should throw a NumberFormatException if not the right number","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.markTask(taskNumberMark - 1, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"                        case TODO:","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"                            // Test whether a ToDos input is valid","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"                            ToDos.taskValidator(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"                            // for To-Dos anything after the command is task name","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"                            Task toDo \u003d new ToDos(input.substring(5));","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"                            totalItemNumber++;","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.addTask(toDo, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"                        case DEADLINE:","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"                            // Test whether a deadline\u0027s input is valid","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"                            Deadline.taskValidator(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"                            // for Deadline is slightly more complex, we will split by /by","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"                            String[] segementedString \u003d input.split(\" /by \");","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"                            // We should only have 2 segments for the Array, before and after","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"                            String deadline \u003d segementedString[1];","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"                            // Hardcoded because we know how words are positioned","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"                            String taskNameDeadline \u003d segementedString[0].substring(DEADLINEOFFSET);","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"                            Task deadlineTask \u003d new Deadline(taskNameDeadline, deadline);","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"                            totalItemNumber++;","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.addTask(deadlineTask, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"                        case EVENT:","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"                            // Test whether a event\u0027s input is valid","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"                            Event.taskValidator(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"                            // Event, split string twice to get relevant component","lastModifiedDate":"2023-08-21"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"                            String[] segmentedViaBy \u003d input.split(\" /from \");","lastModifiedDate":"2023-08-21"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"                            String taskNameEvent \u003d segmentedViaBy[0].substring(EVENTOFFSET);","lastModifiedDate":"2023-08-21"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"                            String[] segmentedViaTo \u003d segmentedViaBy[1].split(\" /to \");","lastModifiedDate":"2023-08-21"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"                            String start \u003d segmentedViaTo[0];","lastModifiedDate":"2023-08-21"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"                            String end \u003d segmentedViaTo[1];","lastModifiedDate":"2023-08-21"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"                            Task event \u003d new Event(taskNameEvent, start, end);","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"                            totalItemNumber++;","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.addTask(event, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"                        case DELETE:","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"                            int taskNumberDelete \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"                            totalItemNumber--;","lastModifiedDate":"2023-08-22"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"                            this.taskList.deleteTask(taskNumberDelete - 1, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"                            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"                    }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"                } catch (NullPointerException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"                    // If we mark a task number outside the range","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"                    System.out.println(e.toString() + \"\\nPlease enter a valid task number from list\");","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"                    // If we mark a non int task number","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"                    System.out.println(\"Enter a valid task number that is a integer shown in list\");","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"                } catch (WrongInputTask e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"                    System.out.println(e.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"                    // To catch invalid number inputs for delete","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"                    System.out.println(\"Please enter a valid task number from the range in  list\");","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"                String commandWord \u003d input.split(\" \")[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"You have entered a invalid command, \"","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"                        + commandWord + \" is not a valid command\");","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"                String message \u003d \"valid commands: \";","lastModifiedDate":"2023-08-22"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"                for (int i \u003d 0; i \u003c Command.validCommands.length; i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"                    message +\u003d (\"\\n\" + Command.validCommands[i]);","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"                System.out.println(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sk2001git":121,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":" * Event encapsulates task that starts at a specific date / time and","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * ends at a specific date/time","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private String startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a Event","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    public Event(String taskName, String startTime, String endTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating an Event based on whether its done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * @param taskName  name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * @param isDone    whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     * @param startTime the start time of the event","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     * @param endTime   the end time of the event","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"    public Event(String taskName, boolean isDone, String startTime, String endTime) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputTask which informs the user of the error and actions to take","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"        String[] segmentedViaFrom \u003d input.split(\" /from \");","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"        if (segmentedViaFrom.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputTask(\"/from command is required\",","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /from command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\");","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"            String taskNameEvent \u003d segmentedViaFrom[0].substring(Duke.EVENTOFFSET);","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputTask(\"Task name cannot be blank\", \"Enter a non-blank name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        String taskNameEvent \u003d segmentedViaFrom[0].substring(Duke.EVENTOFFSET);","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"        String[] segmentedViaTo \u003d segmentedViaFrom[1].split(\" /to \");","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        if (segmentedViaTo.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputTask(\"/to command is required\",","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /to command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\");","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            String start \u003d segmentedViaTo[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"            String end \u003d segmentedViaTo[1];","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"            if (taskNameEvent.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"Task name cannot be blank\", \"Enter a non-blank name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"            } else if (start.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"/from \u003ccontent\u003e, content cannot be blank\",","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"                        \"Enter non-blank text after /from \");","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"            } else if (end.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputTask(\"/to \u003ccontent\u003e, content cannot be blank\", \"Enter text after /to \");","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"     * Converts an Event task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"        return \"E\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"                + Storage.FILESEPERATORCHARACTER + this.endTime + Storage.FILESEPERATORCHARACTER + this.startTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"        return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \"","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"                + this.taskName + \" (from: \"","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"                + this.startTime + \" to: \" + this.endTime + \")\";","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":93}},{"path":"src/main/java/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"public class FileManager {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     * Reads a file given the file path","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     * @param filePath the path directory to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    public void readFile(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"            String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"            System.out.println(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * Writes to a file when given the file path","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     * @param filePath the path directory to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     * @param textToAdd the text to add to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"     * @return","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"    public boolean writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(textToAdd);","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in writing the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":42}},{"path":"src/main/java/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"    public InvalidInputException() {","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"        super(\"Invalid command given.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"sk2001git":5}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"public class Parser {","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    private String input;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"    public Parser(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"        this.input \u003d input;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":10}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    public static final String FILESEPERATORCHARACTER \u003d \" | \";","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    private String filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    private File file;","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"    private Storage(String filePath, File file) {","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     * Factory method to creates a Storage object","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     * @param filePath","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * @return Storage containing the file path and file","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    public static Storage createStorage(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        if (isValidFile(filePath)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File detected, loading file\");","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"            return new Storage(filePath, new File(filePath));","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File not detected, creating file\");","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            File file \u003d createFile(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            return new Storage(filePath, file);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     * Checks if a file exists and is not a directory","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     * @param filePath","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"     * @return","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"    public static boolean isValidFile(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"        return file.exists() \u0026\u0026 !file.isDirectory();","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"     * Creates a directory if it does not exist","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     * @param directoryPath","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    public static void createDirectory(String directoryPath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        if (directory.exists() \u0026\u0026 directory.isDirectory()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Directory already exists\");","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"            return;","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"            if (directory.mkdir()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"Directory has been created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"Directory could not be created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"     * Creates a file if it does not exist","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"     * @param filePath","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"     * @return File object","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"    public static File createFile(String filePath)  {","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File created sucessfully\");","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File could not be created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"        return file;","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"     * Reads the file in the Storage object and prints out its data","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"    public void readFile() throws FileNotFoundException {","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"            String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"            System.out.println(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"        scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"     * Writes to the file in the Storage object","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"     * @param textToAdd the text to add to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"     * @return true if the write was successful, false otherwise","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"    public boolean writeToFile(String textToAdd) {","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(textToAdd + System.lineSeparator());","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"            fileWriter.flush();","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in writing the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"    public boolean clearFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(\"\");","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in cleaning the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":132,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":133,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":133}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":" * Task represents a task given by a user\u0027s input","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * It contains details of a task","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * Completes a task when called by setting it as done","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    public void completeTask() {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        // Double space to maintain consistency with rubrics","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     * Completes a task without printing anything","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"    public void quietlyCompleteTask() {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * Mark a task as undone by setting done as false","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"    public void undoTask() {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        // Double space to maintain consistency with rubrics","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"     * Checks whether a task is completed and return a nX if done","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"     * @return String X if done, a blank space string if not","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"    // Note that this is credited from the website partial solution","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"     * Checks whether a task is done through a string","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"     * @return  a string containing whether the task is done","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"    public String isDone() {","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        return String.valueOf(this.isDone);","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"     * Prints out a message that a task has been added","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"    public void taskAdded(int noOfTask) {","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Now you have \" + noOfTask + \" tasks in the list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"     * Prints out a message that a task has been deleted","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"    public void taskDeleted(int noOfTask) {","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Now you have \" + noOfTask + \" tasks in the list.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"     * Converts the task to a format that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved in the storage in a particular format","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"        return \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"            return \"[\" + this.getStatusIcon() + \"] \" + this.taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"            return \"[\" + this.getStatusIcon() + \"] \" + this.taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":98}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class TaskList {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private File textFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    public TaskList(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"        this.textFile \u003d textFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"        this.createTaskList(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    private void createTaskList(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"            this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"                this.taskList.add(TaskList.parseTask(data));","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"            scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File not found, unable to create list of tasks\");","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     * Parses a task from a string stored in a certain format","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     * @param storedTextLine the string representing a line of text in the file to be parsed","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"     * @return a Task object of the right task type","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    public static Task parseTask(String storedTextLine) {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        String[] splitString \u003d storedTextLine.split(\" \\\\| \");","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        String taskType \u003d splitString[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"        boolean taskStatus \u003d Boolean.parseBoolean(splitString[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"        String taskName \u003d splitString[2];","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"            case \"T\":","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"                return new ToDos(taskName,taskStatus);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            case \"D\":","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"                String deadline \u003d splitString[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"                return new Deadline(taskName, taskStatus, deadline);","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            case \"E\":","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"                String to \u003d splitString[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"                String from \u003d splitString[4];","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"                return new Event(taskName, taskStatus, from, to);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"            default:","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"                return null;","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"    private void addTaskInterally(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"    };","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"     * Adds a task to the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"     * @param task  the task to be added","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"     * @param totalItemCount the total number of the tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"    public void addTask(Task task, int totalItemCount, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"        task.taskAdded(totalItemCount);","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"        storage.writeToFile(task.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"     * Deletes a task in a taskList given the index","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"     * @param totalItemCount the total number of the tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"     * @return the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"    public void deleteTask(int index, int totalItemCount, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        Task task \u003d this.taskList.get(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"        task.taskDeleted(totalItemCount);","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"     * Returns the task at a particular index","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"     * @param index index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"     * @return  the toString of the task","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"    public String getTask(int index) {","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"        return this.taskList.get(index).toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"     * Marks a task as done given the index in the task list","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"    public void markTask(int index, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"        this.taskList.get(index).completeTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"     * Unmarks a task as done given the index in the task list","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"    public void unmarkTask(int index, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"        this.taskList.get(index).undoTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"     * Generates a new task list after a task has been added or deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"     * @param storage   the storage object that is used to write to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"    private void generateNewTaskList(Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"        storage.clearFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"            storage.writeToFile(task.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"     *  Returns the length of the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"     *  @return the length of the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"sk2001git"},"content":"    public int length() {","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"sk2001git"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":132,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":132}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":" * ToDos encapsulates a task without any date or timeline attached to it","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a To-Do Task","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    public ToDos(String taskName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a To-Do Task","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     * @param isDone  whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"    public ToDos(String taskName, boolean isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputTask which informs the user of the error and actions to take","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"        String[] splitString \u003d input.split(\" \");","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"        if (splitString.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputTask(\"Cannot be blank\", \"Enter a non-blank To-Do task\");","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"     * Converts a To-Do task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"        return \"T\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":57}},{"path":"src/main/java/WrongInputTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"public class WrongInputTask extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"    public WrongInputTask(String taskExceptionMessage, String solution) {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"        super(\"Invalid Format: \" + taskExceptionMessage + \"\\nRecommendation: \" + solution);","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"sk2001git":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"todo borrow book;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"list;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"deadline return book /by Sunday;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"event project meeting /from Mon 2pm /to 4pm;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"list;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"bye;","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":6}}]
