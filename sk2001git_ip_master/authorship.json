[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sk2001git":2,"-":41}},{"path":"data/dukeTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"T | false | Yoop","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"D | false | weewoop | Aug-25-2023 1800 PM","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"E | false | test | Aug-25-2023 1900 PM | Aug-25-2023 1800 PM","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":3}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent the different commands that can be given to the chatbot","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public enum Command {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    LIST,","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    MARK,","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    UNMARK,","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    BYE,","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    ADD,","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    TODO,","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    EVENT,","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    DELETE;","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"     * This array is used to represent the valid commands that can be given to the chatbot","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    public static final String[] validCommands \u003d","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"            {\"list\", \"bye\", \"todo \u003ctask_name\u003e\", \"deadline \u003ctask_name\u003e /by \u003cdeadline\u003e\",","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"                    \"event \u003ctask_name\u003e /from \u003cstart-time\u003e /to \u003cend-time\u003e\", \"mark \u003cnumber\u003e\",","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"                    \"unmark \u003cnumber\u003e\", \"delete \u003cnumber\u003e\"};","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     * This method is used to get the command from the user\u0027s input","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"     * @return  the command","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     * @throws InvalidInputException    if the input is invalid","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"    public static Command getCommand(String input) throws InvalidInputException {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"        String[] inputtedWords \u003d input.split(\" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        // Command word should always be first word without space","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"        String commandWord \u003d inputtedWords[0];","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        if (commandWord.equals(\"list\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"            return Command.LIST;","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.equals(\"bye\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"            return Command.BYE;","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"            return Command.MARK;","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            return Command.UNMARK;","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"            return Command.TODO;","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"            return Command.DEADLINE;","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"event\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"            return Command.EVENT;","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"        } else if (commandWord.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"            return Command.DELETE;","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"            throw new InvalidInputException();","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":58}},{"path":"src/main/java/duke/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent the date and time of a task.","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"public class DateTime {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private String inputDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a DateTime object","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     * @param dateTime the date and time in string format","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    private DateTime(String inputDateTime, LocalDateTime dateTime) {","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        this.inputDateTime \u003d inputDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     * Creates a DateTime object based on whether there is a valid input","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * @return  a DateTime object","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    public static DateTime createDateTime(String input) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        if (DateTimeParser.isValidDateTime(input)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            return new DateTime(input, DateTimeParser.createLocalDateTime(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"Invalid date and time format\",","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"                    \"Please enter a valid date and time format\");","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     * Creates a DateTime object based on the input from storage","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     * @param input the input from storage","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     * @return  a DateTime object","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    public static DateTime createDateTimeFromStorage(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"            return new DateTime(input, DateTimeParser.createLocalDateTime(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Unable to create DateTime object from storage\" + e.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"            return null;","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     * Gets the date and time in string format","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"     * @return  the date and time in string format","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"    public String getDateTime() {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        for (String dateTimeOutput: DateTimeParser.VALID_DATE_TIME_FORMAT_OUTPUT) {","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"                DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(dateTimeOutput);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"                String formattedTime \u003d this.dateTime.format(outputFormatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"                return formattedTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"Unable to output date and time for Date Time object\" + e.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"        return this.dateTime.toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"        return this.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":72}},{"path":"src/main/java/duke/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":" * This class is used to parse the date and time from the user input.","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"public class DateTimeParser {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    // Note that we take \"MMM-dd-yyyy HHmm a\" and \"MMM-d-yyyy HHmm a\" as valid date and time formats because","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    // we store the date and time in this format in the storage file. Therefore, in order to convert it back","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    // to DateTime, we need to take these formats as valid.","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    public static final String[] VALID_DATE_TIME_FORMAT \u003d {\"dd/MM/yyyy HHmm\", \"d/MM/yyyy HHmm\",","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"            \"MMM-dd-yyyy HHmm a\", \"MMM-d-yyyy HHmm a\"};","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"    public static final String[] VALID_DATE_TIME_FORMAT_OUTPUT \u003d {\"MMM-dd-yyyy HHmm a\", \"MMM-d-yyyy HHmm a\"};","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"     * Checks if the input is a valid date and time format","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * @return  true if the input is a valid date and time format, false otherwise","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    public static boolean isValidDateTime(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        for (String format : VALID_DATE_TIME_FORMAT) {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"                LocalDateTime.parse(input, DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"                return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"                // do nothing","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"     * Creates a LocalDateTime object based on the input","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * @param validDateTime a valid Date Time formatted String already checked by isValidDateTime","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     * @return  a LocalDateTime object","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException   if the input is not a valid date and time format","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"    public static LocalDateTime createLocalDateTime(String validDateTime) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        for (String format : VALID_DATE_TIME_FORMAT) {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(validDateTime, DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"                return dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"                // do nothing","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"        throw new WrongInputException(\"Invalid date and time format\",","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"                \"Please enter a valid date and time format\");","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"     *  Warns the user to follow a certain date and time format","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"     *  @return a String message to warn the user to follow a certain date and time format","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"    public static String getValidDateTimeFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"        String message \u003d \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"        message +\u003d \"Please enter a valid date and time format seen below\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        for (int i \u003d 0; i \u003c VALID_DATE_TIME_FORMAT.length; i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            message +\u003d VALID_DATE_TIME_FORMAT[i] + \"\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"        return message;","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":68}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * Deadline encapsulates task that need to be done before a specific date or time","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private String deadline;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    private DateTime dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    public Deadline(String taskName, DateTime dateTime) {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        this.deadline \u003d dateTime.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task based on whether its done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     * @param taskName  name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"     * @param isDone    whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"     * @param dateTime the date and time of the deadline stored in a DateTime object","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"    public Deadline(String taskName, boolean isDone, DateTime dateTime) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        this.deadline \u003d dateTime.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException which informs the user of the error and actions to take","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"        String[] segementedString \u003d input.split(\" /by \");","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"        if (segementedString.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"/by command is required\",","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /by command using \u0027deadline \u003cname\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"            String deadline \u003d segementedString[1];","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"                String taskNameDeadline \u003d segementedString[0].substring(Parser.DEADLINEOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Task name cannot be blank\",","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"                        \"Enter a non-blank deadline task name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            String taskNameDeadline \u003d segementedString[0].substring(Parser.DEADLINEOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"            if (taskNameDeadline.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Task name cannot be blank\",","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"                        \"Enter a non-blank deadline task name\");","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"            } else if (deadline.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"for /by \u003ctime\u003e, time cannot be blank\",","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"                        \"Please input valid text that are not space\");","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"            } else if (!DateTimeParser.isValidDateTime(deadline)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Invalid date and time format\",","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"                        DateTimeParser.getValidDateTimeFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"     * Converts a Deadline task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"        return \"D\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"                + Storage.FILESEPERATORCHARACTER + this.dateTime.toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"        return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \"","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"                + this.taskName + \" (by: \" + this.dateTime + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":91}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * Class to encapsulate the whole chatbot and its functionality","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private final Ui ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    private final Parser parser;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     * Constructor for Duke","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     * @param filePath  the path of the file","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        this.storage \u003d Storage.createStorage(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        this.parser \u003d new Parser(this.taskList, this.storage, this.ui);","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * Runs the chat bot","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"    public void run() {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        this.ui.showWelcome();","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        boolean hasCommands \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        while (hasCommands) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            String input \u003d this.ui.readCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"                Command command \u003d Command.getCommand(input);","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"                this.parser.parse(input, command);","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"                hasCommands \u003d this.parser.shouldContinue();","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"                this.ui.showCommandError(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sk2001git":44,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * Event encapsulates task that starts at a specific date / time and","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * ends at a specific date/time","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private String startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    private DateTime start;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    private DateTime end;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating an Event","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    public Event(String taskName, DateTime start, DateTime end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        this.startTime \u003d start.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"        this.endTime \u003d end.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating an Event based on whether its done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     * @param taskName  name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     * @param isDone    whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     * @param start    the start time of the event","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"     * @param end    the end time of the event","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    public Event(String taskName, boolean isDone, DateTime start, DateTime end) {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        this.startTime \u003d start.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        this.endTime \u003d end.getDateTime();","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException which informs the user of the error and actions to take","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"        String[] segmentedViaFrom \u003d input.split(\" /from \");","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        if (segmentedViaFrom.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"/from command is required\",","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /from command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\");","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"            String taskNameEvent \u003d segmentedViaFrom[0].substring(Parser.EVENTOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"Task name cannot be blank\", \"Enter a non-blank name\");","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"        String taskNameEvent \u003d segmentedViaFrom[0].substring(Parser.EVENTOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"        String[] segmentedViaTo \u003d segmentedViaFrom[1].split(\" /to \");","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"        if (segmentedViaTo.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"/to command is required\",","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"                    \"Use the /to command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\");","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"            String start \u003d segmentedViaTo[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"            String end \u003d segmentedViaTo[1];","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"            if (taskNameEvent.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Task name cannot be blank\", \"Enter a non-blank name\");","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"            } else if (start.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"/from \u003ccontent\u003e, content cannot be blank\",","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"                        \"Enter non-blank text after /from \");","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"            } else if (end.trim().isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"/to \u003ccontent\u003e, content cannot be blank\", \"Enter text after /to \");","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"            } else if (!DateTimeParser.isValidDateTime(start)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Invalid date and time format for /from \u003cdatetime\u003e\",","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"                        DateTimeParser.getValidDateTimeFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"            } else if (!DateTimeParser.isValidDateTime(end)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Invalid date and time format for /to \u003cdatetime\u003e\",","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"                        DateTimeParser.getValidDateTimeFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"     * Converts an Event task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"        return \"E\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"                + Storage.FILESEPERATORCHARACTER + this.end.toString() + Storage.FILESEPERATORCHARACTER","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"                + this.start.toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"        return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \"","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"                + this.taskName + \" (from: \"","lastModifiedDate":"2023-08-21"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"                + this.start.toString() + \" to: \" + this.end.toString() + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":108}},{"path":"src/main/java/duke/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent the Management of the files","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":" * TODO: Remove this class it is not needed","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"public class FileManager {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     * Reads a file given the file path","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     * @param filePath the path directory to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    public void readFile(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"            String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"            System.out.println(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     * Writes to a file when given the file path","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     * @param filePath the path directory to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     * @param textToAdd the text to add to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"     * @return","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"    public boolean writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(textToAdd);","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in writing the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":47}},{"path":"src/main/java/duke/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent an exception thrown when an invalid command is given","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating an InvalidInputException","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    public InvalidInputException() {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"        super(\"Invalid command given.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"sk2001git":14}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * Parser class that handles the parsing of user input","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"public class Parser {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"    public static final int DEADLINEOFFSET \u003d 9;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    public static final int EVENTOFFSET \u003d 6;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    private boolean hasCommands \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"     * Constructor for Parser","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     * @param taskList  the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     * @param storage   the storage","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"     * @param ui    the ui","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    public Parser(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     * Parses the user input and executes the relevant command","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"     * @param command   the command to be executed","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"    public void parse(String input, Command command) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        int totalItemNumber \u003d this.taskList.length();","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"        // Split the string based on spaces","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        String[] splitString \u003d input.split(\" \");","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"            switch (command) {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"                case BYE:","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"                    this.ui.terminate();","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"                    hasCommands \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"                case LIST:","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"                    this.ui.list(this.taskList);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"                    // Order matters, if we check for marks first, unmark falls under mark loop","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"                    // Split the string based on spaces","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"                    // The input after the mark word should be task no (which should be index 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"                    int taskNumberUnmark \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"                    // The above should throw a NumberFormatException","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.unmarkTask(taskNumberUnmark - 1, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"                case MARK:","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"                    // The input after the mark word should be task no (which should be index 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"                    int taskNumberMark \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"                    // The above should throw a NumberFormatException if not the right number","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.markTask(taskNumberMark - 1, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"                case TODO:","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"                    // Test whether a ToDos input is valid","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"                    ToDos.taskValidator(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"                    // for To-Dos anything after the command is task name","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"                    Task toDo \u003d new ToDos(input.substring(5));","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"                    totalItemNumber++;","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.addTask(toDo, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"                    // Test whether a deadline\u0027s input is valid","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"                    Deadline.taskValidator(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"                    // for Deadline is slightly more complex, we will split by /by","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"                    String[] segementedString \u003d input.split(\" /by \");","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"                    // We should only have 2 segments for the Array, before and after","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"                    String deadline \u003d segementedString[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"                    // Hardcoded because we know how words are positioned","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"                    String taskNameDeadline \u003d segementedString[0].substring(DEADLINEOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"                    DateTime deadlineDateTime \u003d DateTime.createDateTime(deadline);","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"                    Task deadlineTask \u003d new Deadline(taskNameDeadline, deadlineDateTime);","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"                    totalItemNumber++;","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.addTask(deadlineTask, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"                case EVENT:","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"                    // Test whether an event\u0027s input is valid","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"                    Event.taskValidator(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"                    // Event, split string twice to get relevant component","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"                    String[] segmentedViaBy \u003d input.split(\" /from \");","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"                    String taskNameEvent \u003d segmentedViaBy[0].substring(EVENTOFFSET);","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"                    String[] segmentedViaTo \u003d segmentedViaBy[1].split(\" /to \");","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"                    String start \u003d segmentedViaTo[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"                    DateTime startDateTime \u003d DateTime.createDateTime(start);","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"                    String end \u003d segmentedViaTo[1];","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"                    DateTime endDateTime \u003d DateTime.createDateTime(end);","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"                    Task event \u003d new Event(taskNameEvent, startDateTime, endDateTime);","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"                    totalItemNumber++;","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.addTask(event, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"                case DELETE:","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"                    int taskNumberDelete \u003d Integer.parseInt(splitString[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"                    totalItemNumber--;","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"                    this.taskList.deleteTask(taskNumberDelete - 1, totalItemNumber, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"                    break;","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"            // If we mark a task number outside the range","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"            System.out.println(e.toString() + \"\\nPlease enter a valid task number from list\");","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"            // If we mark a non int task number","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Enter a valid task number that is a integer shown in list\");","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"            // To catch invalid number inputs for delete","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Please enter a valid task number from the range in  list\");","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"     * Checks whether the program should continue running","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"     * @return  whether the program should continue running","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"    public boolean shouldContinue() {","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"        return this.hasCommands;","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":124}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent the storage of the chat bot","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    public static final String FILESEPERATORCHARACTER \u003d \" | \";","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    private final String filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    private final File file;","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    private Storage(String filePath, File file) {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * Factory method to creates a Storage object","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * @param filePath  the path of the file","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     * @return Storage containing the file path and file","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    public static Storage createStorage(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        if (isValidFile(filePath)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File detected, loading file\");","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"            return new Storage(filePath, new File(filePath));","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File not detected, creating file\");","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"            File file \u003d createFile(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"            return new Storage(filePath, file);","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     * Checks if a file exists and is not a directory","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"     * @param filePath  the path of the file","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"     * @return  true if the file exists and is not a directory, false otherwise","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"    public static boolean isValidFile(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"        return file.exists() \u0026\u0026 !file.isDirectory();","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     * Creates a directory if it does not exist","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"     * @param directoryPath the path of the directory","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"    public static void createDirectory(String directoryPath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"        File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        if (directory.exists() \u0026\u0026 directory.isDirectory()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Directory already exists\");","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"            if (directory.mkdir()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"Directory has been created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"            } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"                System.out.println(\"Directory could not be created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"     * Creates a file if it does not exist","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"     * @param filePath","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"     * @return File object","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"    public static File createFile(String filePath)  {","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File created sucessfully\");","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File could not be created\");","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"        return file;","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"     * Reads the file in the Storage object and prints out its data","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"    public void readFile() throws FileNotFoundException {","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"            String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"            System.out.println(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"        scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"     * Writes to the file in the Storage object","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"     * @param textToAdd the text to add to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"     * @return true if the write was successful, false otherwise","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"    public boolean writeToFile(String textToAdd) {","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(textToAdd + System.lineSeparator());","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"            fileWriter.flush();","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in writing the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"     * Clears the file in the Storage object","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"     * @return  true if the clear was successful, false otherwise","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"    public boolean clearFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"sk2001git"},"content":"            fileWriter.write(\"\");","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"sk2001git"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"sk2001git"},"content":"            return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"sk2001git"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"An error occurred in cleaning the file.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"sk2001git"},"content":"            return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":132,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":133,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":134,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":135,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":136,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":137,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":138,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":138}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":" * Task represents a task given by a user\u0027s input","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * It contains details of a task","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a task","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * Completes a task when called by setting it as done","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    public void completeTask() {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        // Double space to maintain consistency with rubrics","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"     * Completes a task without printing anything","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"    public void quietlyCompleteTask() {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * Mark a task as undone by setting done as false","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"    public void undoTask() {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        // Double space to maintain consistency with rubrics","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"     * Checks whether a task is completed and return a nX if done","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"     * @return String X if done, a blank space string if not","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"    // Note that this is credited from the website partial solution","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"     * Checks whether a task is done through a string","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"     * @return  a string containing whether the task is done","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"    public String isDone() {","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        return String.valueOf(this.isDone);","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"     * Prints out a message that a task has been added","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"    public void taskAdded(int noOfTask) {","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Now you have \" + noOfTask + \" tasks in the list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"     * Prints out a message that a task has been deleted","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"    public void taskDeleted(int noOfTask) {","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"  \" + this.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Now you have \" + noOfTask + \" tasks in the list.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"     * Converts the task to a format that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved in the storage in a particular format","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"        return \"\";","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"            return \"[\" + this.getStatusIcon() + \"] \" + this.taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"            return \"[\" + this.getStatusIcon() + \"] \" + this.taskName;","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":98}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent a list of tasks","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"public class TaskList {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    private File textFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    public TaskList(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"        this.textFile \u003d textFile;","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"        this.createTaskList(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    private void createTaskList(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"            this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"                Task task \u003d TaskList.parseTask(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"                this.taskList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"            scanner.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"File not found, unable to create list of tasks\");","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            System.out.println(\"Unable to create task from storage\" + e.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     * Parses a task from a string stored in a certain format","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     * @param storedTextLine the string representing a line of text in the file to be parsed","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     * @return a Task object of the right task type","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"    public static Task parseTask(String storedTextLine) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        String[] splitString \u003d storedTextLine.split(\" \\\\| \");","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"        String taskType \u003d splitString[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        boolean taskStatus \u003d Boolean.parseBoolean(splitString[1]);","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"        String taskName \u003d splitString[2];","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"        case \"T\":","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"            return new ToDos(taskName,taskStatus);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"        case \"D\":","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"            String deadline \u003d splitString[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"            DateTime deadlineDateTime \u003d DateTime.createDateTimeFromStorage(deadline);","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"            if (deadlineDateTime \u003d\u003d null) {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Stored deadline is invalid / corrupted\",","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"                        \"Please clear the folder and restart the program\");","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"            return new Deadline(taskName, taskStatus, deadlineDateTime);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"        case \"E\":","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"            String to \u003d splitString[3];","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"            String from \u003d splitString[4];","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            DateTime fromDateTime \u003d DateTime.createDateTimeFromStorage(from);","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"            DateTime toDateTime \u003d DateTime.createDateTimeFromStorage(to);","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"            if (fromDateTime \u003d\u003d null || toDateTime \u003d\u003d null) {","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"                throw new WrongInputException(\"Stored event is invalid / corrupted\",","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"                        \"Please clear the folder and restart the program\");","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"            return new Event(taskName, taskStatus, fromDateTime, toDateTime);","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"        default:","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"            return null;","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"    private void addTaskInterally(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"    };","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"     * Adds a task to the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"     * @param task  the task to be added","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"     * @param totalItemCount the total number of the tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"    public void addTask(Task task, int totalItemCount, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"        task.taskAdded(totalItemCount);","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"        storage.writeToFile(task.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"     * Deletes a task in a taskList given the index","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"     * @param totalItemCount the total number of the tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"     * @return the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"    public void deleteTask(int index, int totalItemCount, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"        Task task \u003d this.taskList.get(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"        task.taskDeleted(totalItemCount);","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"     * Returns the task at a particular index","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"     * @param index index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"     * @return  the toString of the task","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"    public String getTask(int index) {","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"        return this.taskList.get(index).toString();","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"     *  Returns the task object at a particular index","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"     *  @param index index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"     *  @return  the task object","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"    public Task getTaskObject(int index) {","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"        return this.taskList.get(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"     * Marks a task as done given the index in the task list","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"    public void markTask(int index, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"sk2001git"},"content":"        this.taskList.get(index).completeTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"sk2001git"},"content":"     * Unmarks a task as done given the index in the task list","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"sk2001git"},"content":"     * @param index the index of the task in the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":132,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":133,"author":{"gitId":"sk2001git"},"content":"    public void unmarkTask(int index, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":134,"author":{"gitId":"sk2001git"},"content":"        this.taskList.get(index).undoTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":135,"author":{"gitId":"sk2001git"},"content":"        this.generateNewTaskList(storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":136,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":137,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":138,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":139,"author":{"gitId":"sk2001git"},"content":"     * Generates a new task list after a task has been added or deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":140,"author":{"gitId":"sk2001git"},"content":"     * @param storage   the storage object that is used to write to the file","lastModifiedDate":"2023-08-27"},{"lineNumber":141,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":142,"author":{"gitId":"sk2001git"},"content":"    private void generateNewTaskList(Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":143,"author":{"gitId":"sk2001git"},"content":"        storage.clearFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":144,"author":{"gitId":"sk2001git"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2023-08-27"},{"lineNumber":145,"author":{"gitId":"sk2001git"},"content":"            storage.writeToFile(task.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":146,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":147,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":148,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":149,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":150,"author":{"gitId":"sk2001git"},"content":"     *  Returns the length of the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":151,"author":{"gitId":"sk2001git"},"content":"     *  @return the length of the taskList","lastModifiedDate":"2023-08-27"},{"lineNumber":152,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":153,"author":{"gitId":"sk2001git"},"content":"    public int length() {","lastModifiedDate":"2023-08-27"},{"lineNumber":154,"author":{"gitId":"sk2001git"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":155,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":156,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":157,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":158,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":159,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":160,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":160}},{"path":"src/main/java/duke/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * ToDos encapsulates a task without any date or timeline attached to it","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a To-Do Task","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    private String taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"    public ToDos(String taskName) {","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a To-Do Task","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"     * @param taskName name of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * @param isDone  whether the task is done or not","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    public ToDos(String taskName, boolean isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        super(taskName);","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            super.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"     * taskValidator does nothing if there are no wrong inputs but throws a WrongInputException","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"     * if inputs are invalid","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s string input","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException which informs the user of the error and actions to take","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"    public static void taskValidator(String input) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        String[] splitString \u003d input.split(\" \");","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        if (splitString.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"Cannot be blank\", \"Enter a non-blank To-Do task\");","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"     * Converts a To-Do task into a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"     * @return  a string that can be saved","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"    public String convertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"        return \"T\" + Storage.FILESEPERATORCHARACTER + this.isDone() + Storage.FILESEPERATORCHARACTER + this.taskName;","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":60}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" * Ui encapsulates the user interface of the chat bot","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"public class Ui {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    public Ui() {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"     * Shows the welcome message","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        String chatBotName \u003d \"Benedict Cucumber Badge\";","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Hello! I\u0027m \" + chatBotName);","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"     * Reads the user\u0027s command","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"     * @return the user\u0027s command","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        return this.scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"     * Shows the user the list of tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    public void terminate() {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"     * Shows the user the list of tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"     * @param taskList  the list of tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"    public void list(TaskList taskList) {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        for (int i \u003d 0; i \u003c taskList.length(); i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            System.out.println(i + 1 + \". \" +taskList.getTask(i));","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"     * Shows the user the error message when invalid command is given","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    public void showCommandError(String input) {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        String commandWord \u003d input.split(\" \")[0];","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        System.out.println(\"You have entered a invalid command, \"","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"                + commandWord + \" is not a valid command\");","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        String message \u003d \"valid commands: \";","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"        for (int i \u003d 0; i \u003c Command.validCommands.length; i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"            message +\u003d (\"\\n\" + Command.validCommands[i]);","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"        System.out.println(message);","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":67}},{"path":"src/main/java/duke/WrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent an exception thrown when a Wrong Input is given","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class WrongInputException extends Exception {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"     * Constructor for creating a WrongInputTask exception","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     * @param taskExceptionMessage What is the error or invalid format","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     * @param solution  What is the recommended solution","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"    public WrongInputException(String taskExceptionMessage, String solution) {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"        super(\"Invalid Format: \" + taskExceptionMessage + \"\\nRecommendation: \" + solution);","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"sk2001git":15}},{"path":"src/test/java/duke/DateTimeStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":" * This class is used to represent the date and time of a task.","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"public class DateTimeStub {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"     * Creates a DateTime object based on whether there is a valid input for testing","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"     * @param input the user\u0027s input","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"     * @return  a DateTime object","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"    public static DateTime createDateTime(String input) throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"        if (input \u003d\u003d \"25/08/2023 1800\") {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"            return DateTime.createDateTime(\"25/08/2023 1800\");","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        } else if (input \u003d\u003d \"25/08/2023 1900\") {","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"            return DateTime.createDateTime(\"25/08/2023 1900\");","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        else if (DateTimeParser.isValidDateTime(input)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"            return DateTime.createDateTime(input);","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"            throw new WrongInputException(\"Invalid date and time format\",","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"                    \"Please enter a valid date and time format\");","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":29}},{"path":"src/test/java/duke/EventTester.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"public class EventTester {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"     * Testing multiple random valid inputs for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":"     * should pass if no exception is thrown","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_validInputs_success() throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"        // We assume that it has passed the command test successfully","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"        // That is it starts with any command verbs","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"        // To verify that taskValidator has successfully worked, it should not throw any exception","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"        // Test case 1","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"        String input1 \u003d \"event test /from 25/08/2023 1800 /to 25/08/2023 1900\";","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"        assertDoesNotThrow(() -\u003e Event.taskValidator(input1));","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        // Test case 2","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        String input2  \u003d \"event event /from 13/01/2021 0000 /to 13/01/2021 0000\";","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        assertDoesNotThrow(() -\u003e Event.taskValidator(input2));","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"        // Test case 3","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"        String input3 \u003d \"event \u0027hey\u0027 /from 31/12/2022 2359 /to 1/01/2023 0000\";","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"        assertDoesNotThrow(() -\u003e Event.taskValidator(input3));","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"     * Testing additional commands for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"     * should pass if no exception is thrown and the additional commands are ignored","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_additionalCommands_success() {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        // Test case 4","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        String input4 \u003d \"event hey /from 25/08/2023 1800 /to 25/08/2023 1700 /from 25/08/2023 1800\";","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"            Event.taskValidator(input4);","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"     * Testing missing /to commands for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_missingTo_exceptionThrown() {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"        // Test case 1","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"        String input1 \u003d \"event test /from 25/08/2023 1800\";","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"            Event.taskValidator(input1);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"            assertEquals(\"Invalid Format: /to command is required\\n\" +","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"            \"Recommendation: Use the /to command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\",","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"     * Testing missing /from commands for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_missingFrom_exceptionThrown() {","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"        // Test case 2","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"        String input2 \u003d \"event test /to 25/08/2023 1900\";","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"            Event.taskValidator(input2);","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"            assertEquals(\"Invalid Format: /from command is required\\n\" +","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"                    \"Recommendation: Use the /from command in \u0027event \u003cevent_name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027\",","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"     * Testing missing task name for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_missingTaskName_exceptionThrown() {","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"        // Test case 3","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"        String input3 \u003d \"event /from 25/08/2023 1800 /to 25/08/2023 1900\";","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"            Event.taskValidator(input3);","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"            assertEquals(\"Invalid Format: Task name cannot be blank\\n\" +","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"                    \"Recommendation: Enter a non-blank name\", e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"     * Testing wrong format for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"     * Includes all the test cases above for wrong format","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_wrongFormat_exceptionThrown() {","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"        taskValidator_missingTaskName_exceptionThrown();;","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"        taskValidator_missingFrom_exceptionThrown();","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"        taskValidator_missingTo_exceptionThrown();","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":113,"author":{"gitId":"sk2001git"},"content":"     * Testing all valid inputs for taskValidator","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"sk2001git"},"content":"     * Includes all the test cases above for valid inputs","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"sk2001git"},"content":"    public void taskValidator_allValidInputs_success() {","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"sk2001git"},"content":"            taskValidator_validInputs_success();","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"sk2001git"},"content":"            taskValidator_additionalCommands_success();","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"sk2001git"},"content":"     * Testing out the convertToSaveFormat method by seeing if the output is of the format","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"sk2001git"},"content":"     * E | \u003cisDone\u003e | \u003ctask_name\u003e | \u003cstart_time\u003e | \u003cend_time\u003e where time is in the format","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"sk2001git"},"content":"     * MMM-dd-yyyy hhmm a","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":132,"author":{"gitId":"sk2001git"},"content":"    public void testConvertToSaveFormat() {","lastModifiedDate":"2023-08-27"},{"lineNumber":133,"author":{"gitId":"sk2001git"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":134,"author":{"gitId":"sk2001git"},"content":"            Event event \u003d new Event(\"test\", DateTimeStub.createDateTime(\"25/08/2023 1800\"),","lastModifiedDate":"2023-08-27"},{"lineNumber":135,"author":{"gitId":"sk2001git"},"content":"                    DateTimeStub.createDateTime(\"25/08/2023 1900\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":136,"author":{"gitId":"sk2001git"},"content":"            assertEquals(\"E | false | test | Aug-25-2023 1900 PM | Aug-25-2023 1800 PM\", event.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":137,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":138,"author":{"gitId":"sk2001git"},"content":"            event.quietlyCompleteTask();","lastModifiedDate":"2023-08-27"},{"lineNumber":139,"author":{"gitId":"sk2001git"},"content":"            assertEquals(\"E | true | test | Aug-25-2023 1900 PM | Aug-25-2023 1800 PM\", event.convertToSaveFormat());","lastModifiedDate":"2023-08-27"},{"lineNumber":140,"author":{"gitId":"sk2001git"},"content":"        } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"sk2001git"},"content":"            Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":142,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":143,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":144,"author":{"gitId":"sk2001git"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":145,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":146,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":147,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":147}},{"path":"src/test/java/duke/TaskListTester.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"sk2001git"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"sk2001git"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"sk2001git"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"sk2001git"},"content":"/**","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"sk2001git"},"content":" * This class is used to test the TaskList class","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"sk2001git"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"sk2001git"},"content":"public class TaskListTester {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"sk2001git"},"content":"     * The path of the test file","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"sk2001git"},"content":"    private final static String TEST_PATH \u003d \"./data/dukeTest.txt\";","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"sk2001git"},"content":"     * The storage object used for testing","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"sk2001git"},"content":"    private final Storage testStorage \u003d Storage.createStorage(TEST_PATH);","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"sk2001git"},"content":"        /**","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"sk2001git"},"content":"        * Testing the addTask method for valid input","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"sk2001git"},"content":"        */","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"sk2001git"},"content":"        @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"sk2001git"},"content":"        public void addTask_validInput_success() {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"sk2001git"},"content":"            // Always clear file to start a-fresh","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"sk2001git"},"content":"            testStorage.clearFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"sk2001git"},"content":"            TaskList taskList \u003d new TaskList(TEST_PATH);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"sk2001git"},"content":"            Task task \u003d new ToDos(\"test\");","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"sk2001git"},"content":"            taskList.addTask(task, 1, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"sk2001git"},"content":"            assertEquals(taskList.getTaskObject(0), task);","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"sk2001git"},"content":"        /**","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"sk2001git"},"content":"        * Testing the deleteTask method","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"sk2001git"},"content":"        */","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"sk2001git"},"content":"        @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"sk2001git"},"content":"        public void deleteTask_validInput_success() {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"sk2001git"},"content":"            // Always clear file to start a-fresh","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"sk2001git"},"content":"            testStorage.clearFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"sk2001git"},"content":"            TaskList taskList \u003d new TaskList(TEST_PATH);","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"sk2001git"},"content":"            Task task \u003d new ToDos(\"test\");","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"sk2001git"},"content":"            taskList.addTask(task, 0, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"sk2001git"},"content":"            taskList.deleteTask(0, 1, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"sk2001git"},"content":"            assertEquals(taskList.length(), 0);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"sk2001git"},"content":"     * Testing the parseTask method based on valid inputs","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"sk2001git"},"content":"     * @throws WrongInputException if the input is invalid however should not occur at all","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"sk2001git"},"content":"        public void parseTask_validInput_success() throws WrongInputException {","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"sk2001git"},"content":"           try {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"sk2001git"},"content":"               // Always clear file to start a-fresh","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"sk2001git"},"content":"               testStorage.clearFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"sk2001git"},"content":"               TaskList taskList \u003d new TaskList(TEST_PATH);","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"sk2001git"},"content":"               Task task \u003d new ToDos(\"Yoop\");","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"sk2001git"},"content":"               Task deadline \u003d new Deadline(\"weewoop\", DateTimeStub.createDateTime(\"25/08/2023 1800\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"sk2001git"},"content":"               Task event \u003d new Event(\"test\", DateTimeStub.createDateTime(\"25/08/2023 1800\"),","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"sk2001git"},"content":"                       DateTimeStub.createDateTime(\"25/08/2023 1900\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"sk2001git"},"content":"               taskList.addTask(task, 0, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"sk2001git"},"content":"               taskList.addTask(deadline, 1, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"sk2001git"},"content":"               taskList.addTask(event, 2, testStorage);","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"sk2001git"},"content":"               File file \u003d new File(TEST_PATH);","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"sk2001git"},"content":"               Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"sk2001git"},"content":"               int i \u003d 0;","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"sk2001git"},"content":"               while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"sk2001git"},"content":"                   String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"sk2001git"},"content":"                   Task scannedTask \u003d TaskList.parseTask(data);","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"sk2001git"},"content":"                   assertEquals(scannedTask.toString(), taskList.getTask(i));","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"sk2001git"},"content":"                   i++;","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"sk2001git"},"content":"               }","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"sk2001git"},"content":"           } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"sk2001git"},"content":"               Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"sk2001git"},"content":"           } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"sk2001git"},"content":"                Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"sk2001git"},"content":"           }","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"sk2001git"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"sk2001git"},"content":"     * Testing the parseTask method based on invalid inputs","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"sk2001git"},"content":"     * Should fail if it is able to run parseTask without throwing an exception","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"sk2001git"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"sk2001git"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"sk2001git"},"content":"    public void parseTask_corruptedData_exceptionThrown() {","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"sk2001git"},"content":"            String corruptedData3 \u003d \"E | false | test | WAug-25-2023 1900 PM | Aug-35-2023 9999 PM\";","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"sk2001git"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"sk2001git"},"content":"                TaskList.parseTask(corruptedData3);","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"sk2001git"},"content":"                Assertions.fail();","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"sk2001git"},"content":"            } catch (WrongInputException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"sk2001git"},"content":"                assertEquals(\"Invalid Format: Stored event is invalid / corrupted\\n\" +","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"sk2001git"},"content":"                                \"Recommendation: Please clear the folder and restart the program\",","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"sk2001git"},"content":"                        e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"sk2001git"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"sk2001git"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":108,"author":{"gitId":"sk2001git"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"sk2001git"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"sk2001git":109}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sk2001git"},"content":"todo borrow book;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"sk2001git"},"content":"list;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"sk2001git"},"content":"deadline return book /by Sunday;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"sk2001git"},"content":"event project meeting /from Mon 2pm /to 4pm;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"sk2001git"},"content":"list;","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"sk2001git"},"content":"bye;","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"sk2001git":6}}]
