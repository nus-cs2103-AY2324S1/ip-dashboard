[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    testImplementation \u0027org.mockito:mockito-inline:4.0.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    testImplementation \u0027org.mockito:mockito-junit-jupiter:4.0.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"javafx {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"    version \u003d \"17\"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    mainClass.set(\"jarvis.Launcher\")","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    archiveBaseName \u003d \"jarvis\"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"    archiveVersion \u003d \"0.1\"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":16,"-":40}},{"path":"data/jarvislist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"T | 0 | abc","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"T | 0 | efg","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"T | 0 | hij","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"T | 0 | jasd","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"T | 0 | sdfkjhd","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"T | 0 | sahdsf","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"T | 0 | sj","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public enum CommandType {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    LIST, FIND,","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"    MARK, UNMARK,","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    TODO, DEADLINE, EVENT,","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    DELETE,","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"    EXIT","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":9}},{"path":"src/main/java/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.EmptyArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidCommandException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.ITaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" * Represents a parser that parses the user input and executes the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    protected ITaskList taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    public Parser(ITaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"     * Parses the user input and executes the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     * @param userInput the user input with the command and arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the command is invalid or the arguments are invalid/empty or","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     *                         there are exceptions during execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    public String parseAndExecute(String userInput) throws JarvisException {","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"        String command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        String arguments \u003d userInput.replaceFirst(command, \"\").strip();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        return execute(command, arguments);","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"     * Executes the command with the given arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"     * This is a helper method for parseAndExecute.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"     * @param command the command to be executed.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"     * @param args    the argument list for the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the command is invalid or the arguments are invalid/empty or","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"     *                         there are exceptions during execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    protected String execute(String command, String args) throws JarvisException {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"            CommandType commandType \u003d CommandType.valueOf(command.toUpperCase());","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"            // go through commands without any arguments.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"            switch (commandType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"            case LIST:","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"                return taskList.show();","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"            case EXIT:","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"                return \"Goodbye, sir.\\n\" + \"Shutting down...\";","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"                throw new EmptyArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"            // go through commands with arguments.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"            switch (commandType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"            case FIND: {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"                return taskList.find(args);","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            case MARK: {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"                    int taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"                    return taskList.markDone(taskNumber);","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"                    throw new InvalidArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"            case UNMARK: {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"                    int taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"                    return taskList.markUndone(taskNumber);","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"                    throw new InvalidArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"            case TODO: {","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"                return taskList.add(args, CommandType.TODO);","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"            case DEADLINE: {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"                    String[] varargs \u003d args.split(\"\\\\s+/by\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"                    String description \u003d varargs[0], by \u003d varargs[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"                    return taskList.add(description, CommandType.DEADLINE, by);","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"                    throw new InvalidArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"            case EVENT: {","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"                    String[] varargs \u003d args.split(\"\\\\s+/from\\\\s+|\\\\s+/to\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"                    String description \u003d varargs[0], from \u003d varargs[1], to \u003d varargs[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"                    return taskList.add(description, CommandType.EVENT, from, to);","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"                    throw new InvalidArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"            case DELETE: {","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"                    int taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"                    return taskList.delete(taskNumber);","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"                    throw new InvalidArgumentException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"tanyyyming"},"content":"        // this line should never be reached.","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"tanyyyming"},"content":"        return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":114}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    private void flip() {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"    public static DialogBox getJarvisDialog(String text, Image img) {","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"        db.flip();","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        return db;","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":61}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import jarvis.Jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":" * A GUI for Jarvis using FXML.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    private Jarvis jarvis \u003d new Jarvis(\"data/jarvislist.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setJarvis(jarvis);","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"            stage.show();","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setGreetingMessage(jarvis.greet());","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":34}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import jarvis.Jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    private Jarvis jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    private Image jarvisImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.jpg\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"    public void setJarvis(Jarvis j) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"        jarvis \u003d j;","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    public void setGreetingMessage(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getJarvisDialog(message, jarvisImage));","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Jarvis\u0027s reply and then appends them to","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        String response \u003d jarvis.respond(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"                DialogBox.getJarvisDialog(response, jarvisImage)","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        );","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        if (input.equals(\"exit\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"            pause.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"            pause.play();","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":66}},{"path":"src/main/java/jarvis/Jarvis.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package jarvis;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.Parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.TextUi;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"public class Jarvis {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    public final static String JARVIS_LOGO \u003d \"                                                                 \\n\" +","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"            \"                          .::^^^^^^::.                           \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"            \"                     .^!??????777??????7~:                       \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"            \"                  .~?J?7!~^:::::::::^^~!?JJ7:                    \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"            \"                :7YJ!~^:..:::::7???7!~:::^~7Y?^                  \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"            \"              .!Y?~^^..:^^:.. :?::^~!?J?!::^^7Y?:                \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"            \"             .?Y~^^..^^.     :YP?.    .^?Y7::^^?Y~               \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"            \"            .JY^^: ^~.      :5PP5:       :JY~.~:75~              \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"            \"            ?5^^: ~^       ^5PP5:~J.       75! ~.?Y:             \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"            \"           ^5?:~ :~       ^5PP5:~PPJ.       ?Y::~^57             \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"            \"           ~Y~:: ^.      ~PPP5: !PPPY.      ~5! ^.J?             \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"            \"           .! .  .      :JYYJ:   ~PPPY:     ^57 . ^^             \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"            \"            ! ^^ ^^               ~5PPY:    !5~.~ ~:             \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"            \"            ~^ ! .!.  !JJJJJJJJJJJ?5PPP5:  :YJ.^: !              \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"            \"             !.:~ .~.!5PPPPPPPPPPPP5555PY:^YJ.:~ ~:              \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"            \"             .!.:~..~!^................:~JY7.^^ ~^               \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"            \"              .~^.^^..^^:.          .:!?J7::^:.~:                \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"            \"                :~::^^:.::^^:::!777?J?7~::^::^^.                 \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"            \"                  :^^::::::::::~~~~^^::::::^^.                   \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            \"                    .:^^:::::::::::::::^^^:                      \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            \"                        .:::::.  :::::..                         \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            \"                                                                 \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            \"                                                                 \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            \"          ^!.    ~7^    :77777!:  !!     ~7..!~  .~77777:        \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            \"          Y\u0026^   7\u0026B#^   :!!!!!Y\u0026! 7\u0026Y   7\u0026Y :\u00265  G#?!7!!:        \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"            \"          J\u0026^  !\u0026J.G#:  ^JJJJJPB~  7\u0026? ~\u0026Y  :#5  JBYJJY?:        \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            \"      :::^G#: !\u0026Y  .BB: !\u0026J^~G\u0026~    ?\u0026Y#5   :\u00265  .^~~~J\u0026J        \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"            \"     .YYYYJ: :5Y.   :5? ^P~  .YY:    ?PY.   .5?  7YYYYYJ:        \\n\" +","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"            \"                                                                 \";","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    private Parser parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"        String dataFilePath \u003d \"data/jarvislist.txt\";","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        new Jarvis(dataFilePath).run();","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"    public Jarvis(String dataFilePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        textUi \u003d new TextUi();","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"            taskList \u003d new TaskList(new Storage(dataFilePath));","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"            parser \u003d new Parser(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"            textUi.print(e.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"    public String respond(String userInput) {","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"            return parser.parseAndExecute(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"            return e.toString();","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"    public String greet() {","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"        return \"At your service, sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"    // Only used for text-ui.","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"    public void run() {","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"        System.out.println(JARVIS_LOGO);","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"        textUi.greet();","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"        while (!userInput.equals(\"exit\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"                textUi.print(parser.parseAndExecute(userInput));","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"            } catch (JarvisException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"                textUi.print(e.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"            userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"        scanner.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"        textUi.exit();","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"tanyyyming":95}},{"path":"src/main/java/jarvis/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import gui.Main;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class Launcher {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/services/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents the user interface of Jarvis.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class TextUi {","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"     * The horizontal line for formatting messages.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    private final static String HORIZONTAL_LINE \u003d \"__________________________________________________\"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"            + \"_______________________\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    public void exit() {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"        String exitMessage \u003d \"Goodbye, sir.\\n\" + \"Shutting down...\";","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        new TextUi().print(exitMessage);","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    public void print(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"        String messageWithHorizontalLine \u003d HORIZONTAL_LINE + message + \"\\n\" + HORIZONTAL_LINE;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"        System.out.print(messageWithHorizontalLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    public void greet() {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        String greetMessage \u003d \"At your service, sir.\";","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"        print(greetMessage);","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"tanyyyming":27}},{"path":"src/main/java/services/bizerrors/CreateNewFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class CreateNewFileException extends JarvisException {","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public CreateNewFileException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to create a new file.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/services/bizerrors/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class EmptyArgumentException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public EmptyArgumentException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, I did not catch what you say after the command (%s).\\nI beg your pardon.\", command));","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/services/bizerrors/IndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class IndexOutOfRangeException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public IndexOutOfRangeException(int index, int taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, your calendar does not contain this task index (%d).\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"                + \"It currently has %d tasks.\", index, taskCount));","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":8}},{"path":"src/main/java/services/bizerrors/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class InvalidArgumentException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public InvalidArgumentException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, please check again to ensure \"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"                + \"you provide the correct arguments for command (%s).\", command));","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":8}},{"path":"src/main/java/services/bizerrors/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class InvalidCommandException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public InvalidCommandException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sorry, sir. Executing this command (%s) is beyond my capabilities.\", command));","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/services/bizerrors/JarvisException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class JarvisException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public JarvisException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        // add the newline for formatting of the error message","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":8}},{"path":"src/main/java/services/bizerrors/ReadFromFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class ReadFromFileException extends JarvisException {","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public ReadFromFileException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to read your tasks from file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/services/bizerrors/SaveToFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class SaveToFileException extends JarvisException {","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    public SaveToFileException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to save your tasks to file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":7}},{"path":"src/main/java/services/tasklist/IStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.ReadFromFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":" * Represents a storage that stores the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":" * The storage is responsible for reading and writing the list of tasks to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"public interface IStorage {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * Saves the given list of tasks to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * The tasks are written to the file in string obtained","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * from calling encode() method of each task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"     * @param taskList the list of tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException if there is an error writing to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"     * @see Task#encode()","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    void save(List\u003cTask\u003e taskList) throws SaveToFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * Loads the list of tasks from the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     * The returned task list is empty if the data file is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"     * @return the list of tasks loaded from the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"     * @throws ReadFromFileException    if there is an error reading from the file, e,g. file not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     * @throws InvalidArgumentException if the data file contains invalid data format that cannot be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    List\u003cTask\u003e load() throws ReadFromFileException, InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":35}},{"path":"src/main/java/services/tasklist/ITaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":" * Represents a task list manager.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":" * It is responsible for adding, deleting, marking tasks as done/undone, and printing the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"public interface ITaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"     * @param description the content of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"     * @param taskType    the type of the task. See {@link CommandType}.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * @param args        the argument list of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task added and the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    String add(String description, CommandType taskType, String... args) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     * Deletes a task from the task list with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task deleted and the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    String delete(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     * Finds tasks that contain the given keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"     * @param keyword the keyword to be searched.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"     * @return the list of tasks that contain the given keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    String find(String keyword);","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"     * Marks a task as done with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"    String markDone(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"     * Marks a task as undone with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task marked as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"    String markUndone(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"     * Prints the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"     * @return the task list and each task\u0027s description.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"    String show();","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":63}},{"path":"src/main/java/services/tasklist/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.CreateNewFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.ReadFromFileException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"public class Storage implements IStorage {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    /** The file that stores the list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    private File dataFile;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new Storage object with the data file at the given path.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     * If the file does not exist, a new file is created.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * @param dataFilePath the path of the file that stores the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     * @throws CreateNewFileException if there is an error creating a new file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    public Storage(String dataFilePath) throws CreateNewFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            File file \u003d new File(dataFilePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            File parentDir \u003d file.getParentFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            if (!parentDir.exists() \u0026\u0026 !parentDir.mkdirs()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"                throw new CreateNewFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"            dataFile \u003d file;","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"            throw new CreateNewFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    public void save(List\u003cTask\u003e tasks) throws SaveToFileException {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"            FileWriter fileWriter \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"                fileWriter.write(task.encode() + \"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"            throw new SaveToFileException();","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"    public List\u003cTask\u003e load() throws ReadFromFileException, InvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"            Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"                String encodedTask \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"                Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"                String[] varargs \u003d encodedTask.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"                switch (encodedTask.charAt(0)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"                    task \u003d new Todo(varargs[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"                    task \u003d new Deadline(varargs[2], varargs[3]);","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"                    task \u003d new Event(varargs[2], varargs[3], varargs[4]);","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"                    return null;","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"                if (varargs[1].equals(\"1\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"                    task.setDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"                taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"            scanner.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"            return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"            throw new ReadFromFileException();","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":91}},{"path":"src/main/java/services/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.EmptyArgumentException;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.IndexOutOfRangeException;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Event;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"public class TaskList implements ITaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    /** The list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    protected List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    protected IStorage repo;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    /** The number of tasks in the list. */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    protected int taskCount;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new TaskList object with the given Storage object and Ui object.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     * @param repo   the Storage object that stores the list of tasks in a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * @param textUi the Ui object that prints the formatted task list to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    public TaskList(IStorage repo) {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        this.repo \u003d repo;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            taskList \u003d repo.load();","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            taskCount \u003d taskList.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            // Fix the problem here in the future.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            // System.out.println(e.toString() + \"\\nA temporary session is opened for you.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"            taskCount \u003d 0;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"    public String add(String description, CommandType taskType, String... args) throws JarvisException {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"        Task newTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"        // this if block is unnecessary currently (is never reached), but it may be useful in the future.","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"            throw new EmptyArgumentException(taskType.toString().toLowerCase());","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"        case TODO:","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Todo(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Deadline(description, args[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"        case EVENT:","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Event(description, args[0], args[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        default:","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"            // the program should never reach this point.","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            throw new JarvisException(\"Default case reached.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"        taskList.add(newTask);","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"        taskCount++;","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        repo.save(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"        return \"added: \" + newTask + \"\\n\" + taskCount + \" more tasks to do, Sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task deletion operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"    public String delete(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"        Task deletedTask \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"        taskList.remove(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"        taskCount--;","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"        repo.save(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"        return \"removed: \" + deletedTask + \"\\n\" + taskCount + \" tasks left, Sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"    public String find(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"        int count \u003d matchingTasks.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"            return \"Sir, there are no matching tasks on your calendar.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"        String result \u003d \"Sir, there are \" + count + \" matching tasks on your calendar:\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"        for (int i \u003d 1; i \u003c count; i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"            result +\u003d i + \". \" + matchingTasks.get(i - 1) + \"\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"        result +\u003d count + \". \" + matchingTasks.get(count - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"        return result;","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task marking operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"tanyyyming"},"content":"    public String markDone(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"tanyyyming"},"content":"        Task task \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"tanyyyming"},"content":"        task.setDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"tanyyyming"},"content":"        repo.save(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"tanyyyming"},"content":"        return \"Check.\\n\\t\" + task + \"\\n\" + \"Way to go, sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":128,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":129,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task unmarking operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"tanyyyming"},"content":"    public String markUndone(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":142,"author":{"gitId":"tanyyyming"},"content":"        Task task \u003d taskList.get(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":143,"author":{"gitId":"tanyyyming"},"content":"        task.setUndone();","lastModifiedDate":"2023-08-22"},{"lineNumber":144,"author":{"gitId":"tanyyyming"},"content":"        repo.save(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"tanyyyming"},"content":"        return \"As you wish, sir.\\n\\t\" + task;","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"tanyyyming"},"content":"    public String show() {","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"tanyyyming"},"content":"        if (taskCount \u003d\u003d 0) {","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"tanyyyming"},"content":"            return \"Sir, there are no tasks on your calendar.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"tanyyyming"},"content":"        String result \u003d \"Sir, there are \" + taskCount + \" tasks on your calendar:\\n\";","lastModifiedDate":"2023-08-22"},{"lineNumber":154,"author":{"gitId":"tanyyyming"},"content":"        for (int i \u003d 1; i \u003c taskCount; i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":155,"author":{"gitId":"tanyyyming"},"content":"            result +\u003d i + \". \" + taskList.get(i - 1) + \"\\n\";","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":157,"author":{"gitId":"tanyyyming"},"content":"        result +\u003d taskCount + \". \" + taskList.get(taskCount - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":158,"author":{"gitId":"tanyyyming"},"content":"        return result;","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":160,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":160}},{"path":"src/main/java/services/tasklist/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    public Deadline(String description, String endTime) throws InvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"            this.endTime \u003d LocalDateTime.parse(endTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(\"deadline\");","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + endTime.format(outputFormatter) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":31}},{"path":"src/main/java/services/tasklist/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    public Event(String description, String startTime, String endTime) throws InvalidArgumentException {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"            this.startTime \u003d LocalDateTime.parse(startTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"            this.endTime \u003d LocalDateTime.parse(endTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + startTime + \" | \" + endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"                + \" (from: \" + startTime.format(outputFormatter)","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"                + \" to: \" + endTime.format(outputFormatter) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":35}},{"path":"src/main/java/services/tasklist/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"    protected String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    /** The status of task completion. */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    /** The checkbox to indicate the status of task completion. */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    protected String checkBox;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"     * Constructor for Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * The task is not done by default.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * @param description the content of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[ ]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    public void setDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[X]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    public void setUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[ ]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"     * Encodes the task into a string that can be saved to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"     * @return the encoded string.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"    public abstract String encode();","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"        return checkBox + \" \" + this.description;","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"tanyyyming":47}},{"path":"src/main/java/services/tasklist/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":18}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"            fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":24}},{"path":"src/test/java/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.extension.ExtendWith;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.InjectMocks;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.Mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.junit.jupiter.MockitoExtension;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.when;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"@ExtendWith(MockitoExtension.class)","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    @Mock","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    protected TaskList taskListMock;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    @InjectMocks","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    protected Parser parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    public ParserTest() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"        taskListMock \u003d mock(TaskList.class);","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        parser \u003d new Parser(taskListMock);","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    public void execute_validInput_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.add(\"test\", CommandType.TODO))","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"                    .thenReturn(\"add method called with todo task\");","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.add(\"test\", CommandType.DEADLINE, \"2020-08-25 00:00\"))","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"                    .thenReturn(\"add method called with deadline task\");","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.delete(1)).thenReturn(\"delete method called\");","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"add method called with todo task\", parser.execute(\"todo\", \"test\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"add method called with deadline task\",","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"                    parser.execute(\"deadline\", \"test      /by   2020-08-25 00:00\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"delete method called\", parser.execute(\"delete\", \"1\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"invalid_command\", \"test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sorry, sir. Executing this command (invalid_command) is beyond my capabilities.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"    public void execute_invalidArgument_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        // when the number of argument provided is incorrect.","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"event\", \"no time specified\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (event).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        // when the argument cannot be parsed into an integer.","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"mark\", \"string instead of integer\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (mark).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"    public void execute_emptyArgument_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"mark\", \"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, I did not catch what you say after the command (mark).\\nI beg your pardon.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":83}},{"path":"src/test/java/services/tasklist/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.extension.ExtendWith;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.InjectMocks;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.Mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.internal.matchers.Any;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.junit.jupiter.MockitoExtension;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.TextUi;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.ArgumentMatchers.any;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.when;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"@ExtendWith(MockitoExtension.class)","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    // the following three test cases are testing the add method in TaskList.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    @Mock","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    protected Storage repoMock;","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    @InjectMocks","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    public TaskListTest() {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"        repoMock \u003d mock(Storage.class);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"        taskList \u003d new TaskList(repoMock);","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    public void add_todoTask_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            taskList.add(\"test\", CommandType.TODO);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(1, taskList.taskCount);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"            assertTrue(taskList.taskList.get(0) instanceof Todo);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    public void add_deadlineTask_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"            taskList.add(\"test\", CommandType.DEADLINE, \"2020-08-25 00:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(1, taskList.taskCount);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"            assertTrue(taskList.taskList.get(0) instanceof Deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"    public void add_eventTask_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            taskList.add(\"test\", CommandType.EVENT, \"invalid time format\", \"2020-08-25 01:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (event).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":67}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"todo task one","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"deadline task 2 /by time 1","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"event task 3 /from time 2 /to time 3","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"unmark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"exit","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"REM Note that the chatbot name has changed from Duke to jarvis.jarvis","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"java -classpath ..\\bin jarvis.jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":2,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"# Note that the chatbot name has changed from Duke to Jarvis.Jarvis","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":2,"-":37}}]
