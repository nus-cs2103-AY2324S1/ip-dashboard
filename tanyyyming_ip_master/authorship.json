[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    implementation \u0027com.google.guava:guava:30.1.1-jre\u0027","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    testImplementation \u0027org.mockito:mockito-inline:4.0.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    testImplementation \u0027org.mockito:mockito-junit-jupiter:4.0.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"//javafx {","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"//    version \u003d \"17\"","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"//}","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"    mainClass.set(\"jarvis.Launcher\")","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"    archiveBaseName \u003d \"jarvis\"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"    archiveVersion \u003d \"0.2\"","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":33,"-":40}},{"path":"data/jarvislist.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"T | 0 |  | snap da finger","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"tanyyyming":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"# J.A.R.V.I.S.","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"\u003e A personal chatbot assistant to help you with your daily tasks.","lastModifiedDate":"2023-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"\u003cimg src\u003d\"Ui.png\" width\u003d\"300\"\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"## Types of Tasks","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"Jarvis supports 3 types of tasks: Todo, Deadline and Event.","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"1. Todo: Tasks that need to be done but have no deadline or time limit.","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"2. Deadline: Tasks that need to be done before a specific date and time.","lastModifiedDate":"2023-09-21"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"3. Event: Tasks that start and end at a specific date and time. It spans over a period of time.","lastModifiedDate":"2023-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"## Method of interaction","lastModifiedDate":"2023-09-21"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"You can interact with Jarvis with a pre-defined set of commands following the format `command (optional arguments)`.","lastModifiedDate":"2023-09-21"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"The list of all the commands that Jarvis supports is listed below.","lastModifiedDate":"2023-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"- Add a task to the task list: `todo`, `deadline`, `event`","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"- Delete a task from the task list: `delete`","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"- Mark a task as done/undone: `mark`, `unmark`","lastModifiedDate":"2023-09-21"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"- List all the tasks in the task list: `list`","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"- Find all tasks in the task list with a keyword: `find`","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"- Tag/untag a task: `tag`, `untag`","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"- Exit the program: `exit`","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"More details on the usage of each command can be found in the [Features](#features) section.","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"## Features ","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"\u003e Note:","lastModifiedDate":"2023-09-21"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"\u003e 1. Words in \u003c\u003e represent compulsory arguments. ","lastModifiedDate":"2023-09-21"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"\u003e 2. Words in [] are optional arguments. They can be omitted.","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"\u003e 3. Arguments with ... after them can be used multiple times, including zero times.","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"\u003e 4. Commands like `mark`, `delete`, etc. require the index of the task in the task list as arguments. ","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"     The index starts from 1.","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"### Add a Task","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"- Todo task: `todo \u003ctask description\u003e`. The task description cannot be empty.","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"- Deadline task: `deadline \u003ctask description\u003e /by \u003cdatetime\u003e`. The datetime must be in the format `yyyy-MM-dd HH:mm`.","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `deadline return book /by 2020-09-18 23:59`.","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"- Event task: `event \u003ctask description\u003e /from \u003cstart datetime\u003e /to \u003cend datetime\u003e`. The datetime must be in the same","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"  format as the deadline command. ","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `event project meeting /from 2020-09-18 14:00 /to 2020-09-18 16:00`.","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"### Mark a Task as Done/Undone","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"- Mark a task as done: `mark \u003ctask index\u003e`.","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `mark 1` marks the first task in the task list as done.","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"- Mark a task as undone: `unmark \u003ctask index\u003e`.","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `unmark 3` marks the third task in the task list as done.","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"If you try to mark or unmark a task index that is not in the task list, an error message will be shown to you.","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"### Delete a Task","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"- Delete a task: `delete \u003ctask index\u003e`.","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `delete 2` deletes the second task in the task list. The task indices of the tasks after the","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"  deleted task will be updated accordingly.","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"### Find Tasks","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"- Find all tasks containing the keyword: `find \u003ckeyword\u003e`. The keyword cannot be empty, and the matching tasks will ","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"  be listed in the order they were added to the task list.","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"### List All Tasks","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"- List all tasks in the task list: `list`. Do not provide any arguments for this command.","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"### Tagging","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"- Tag a task: `tag \u003ctask index\u003e \u003ctag name 1\u003e [tag name 2]...`. The tag name cannot be empty. Multiple tags can ","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"  be added to a task.","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `tag 1 urgent school cs2103t` tags the first task in the task list with three tags: `urgent`,","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"  `school` and `cs2103t`.","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"- Untag a task: `untag \u003ctask index\u003e \u003ctag name 1\u003e [tag name 2]...`. The same restrictions apply as the `tag` command.  ","lastModifiedDate":"2023-09-21"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"  Note that when the task is not tagged by some tag names provided, the command will just ignore those tag names.","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"  \u003cbr/\u003e For example, `untag 1 urgent drama cs2103t` removes the tags `urgent` and `cs2103t` from the first task. The ","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"  `drama` tag is simply ignored.","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"### Exit","lastModifiedDate":"2023-09-21"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"- Exit Jarvis: `exit`. Do not provide any arguments for this command.","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"tanyyyming":60,"-":15}},{"path":"src/main/java/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"public enum CommandType {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"    LIST, FIND,","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"    MARK, UNMARK,","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"    TODO, DEADLINE, EVENT,","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    DELETE,","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"    TAG, UNTAG,","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    EXIT","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.EmptyArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidCommandException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.ITaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" * Represents a parser that parses the user input and executes the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    protected ITaskList taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new Command Parser object with the given TaskList object.","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     * @param taskList the TaskList object that stores the list of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    public Parser(ITaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     * Parses the user input and executes the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     * @param userInput the user input with the command and arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the command is invalid or the arguments are invalid/empty or","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"     *                         there are exceptions during execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    public String parseAndExecute(String userInput) throws JarvisException {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"        String command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"        String arguments \u003d userInput.replaceFirst(command, \"\").strip();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        return execute(command, arguments);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"     * Executes the command with the given arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"     * This is a helper method for parseAndExecute.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"     * @param command the command to be executed.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"     * @param args    the argument list for the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the command is invalid or the arguments are invalid/empty or","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"     *                         there are exceptions during execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"    protected String execute(String command, String args) throws JarvisException {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            CommandType commandType \u003d CommandType.valueOf(command.toUpperCase());","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"            // go through commands without any arguments.","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"                return executeCommandWithoutArgs(commandType);","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"            // go through commands with arguments.","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"            switch (commandType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"            case FIND:","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"                return executeFindCommand(args);","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"            case MARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"            case UNMARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"            case DELETE:","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"                // explicit fall-through","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"                return executeCommandWithIntegerArgs(commandType, args);","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"            case TAG:","lastModifiedDate":"2023-09-15"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"            case UNTAG:","lastModifiedDate":"2023-09-15"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"                // explicit fall-through","lastModifiedDate":"2023-09-15"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"                return executeTagCommand(commandType, args);","lastModifiedDate":"2023-09-15"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"            case TODO:","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"            case DEADLINE:","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"            case EVENT:","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"                // explicit fall-through","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"                return executeAddTaskCommand(commandType, args);","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"            default:","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"                // the program should never reach this point since all the invalid commands","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"                // are caught by the first line of this method and thrown as exceptions.","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"                return null;","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"    /** Executes the command without any arguments. */","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"    private String executeCommandWithoutArgs(CommandType command) throws JarvisException {","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"        switch (command) {","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"        case LIST:","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"            return taskList.showAllTasks();","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"        case EXIT:","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"            return \"Goodbye, sir.\\n\" + \"Shutting down...\";","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"        default:","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"            // An exception is thrown if the command is not a standalone command.","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"            throw new EmptyArgumentException(command.name());","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"    /** Executes the find command with the given keyword. */","lastModifiedDate":"2023-09-13"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"    private String executeFindCommand(String keyword) {","lastModifiedDate":"2023-09-13"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"        return taskList.findTask(keyword);","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"    /** Executes the command with the given integer argument. This includes mark, unmark, and delete. */","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"    private String executeCommandWithIntegerArgs(CommandType command, String args) throws JarvisException {","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"            int taskNumber \u003d Integer.parseInt(args);","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"tanyyyming"},"content":"            switch (command) {","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"tanyyyming"},"content":"            case MARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"tanyyyming"},"content":"                return taskList.markDone(taskNumber);","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"tanyyyming"},"content":"            case UNMARK:","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"tanyyyming"},"content":"                return taskList.markUndone(taskNumber);","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"tanyyyming"},"content":"            case DELETE:","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"tanyyyming"},"content":"                return taskList.deleteTask(taskNumber);","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"tanyyyming"},"content":"            default:","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"tanyyyming"},"content":"                // the program should never reach this point.","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"tanyyyming"},"content":"                return null;","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":120,"author":{"gitId":"tanyyyming"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"tanyyyming"},"content":"            // An exception is thrown if the argument is not an integer.","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(command.name());","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"tanyyyming"},"content":"    /** Executes the add task command with the given description and optional arguments. */","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"tanyyyming"},"content":"    private String executeAddTaskCommand(CommandType command, String args) throws JarvisException {","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"tanyyyming"},"content":"            switch (command) {","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"tanyyyming"},"content":"            case TODO: {","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"tanyyyming"},"content":"                return taskList.addTask(args, CommandType.TODO);","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"tanyyyming"},"content":"            case DEADLINE: {","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"tanyyyming"},"content":"                String[] varargs \u003d args.split(\"\\\\s+/by\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"tanyyyming"},"content":"                String description \u003d varargs[0], by \u003d varargs[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"tanyyyming"},"content":"                return taskList.addTask(description, CommandType.DEADLINE, by);","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"tanyyyming"},"content":"            case EVENT: {","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"tanyyyming"},"content":"                String[] varargs \u003d args.split(\"\\\\s+/from\\\\s+|\\\\s+/to\\\\s+\");","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"tanyyyming"},"content":"                String description \u003d varargs[0], from \u003d varargs[1], to \u003d varargs[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"tanyyyming"},"content":"                return taskList.addTask(description, CommandType.EVENT, from, to);","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"tanyyyming"},"content":"            default:","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"tanyyyming"},"content":"                // the program should never reach this point.","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"tanyyyming"},"content":"                return null;","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"tanyyyming"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"tanyyyming"},"content":"            // An exception is thrown if the argument number does not match the command.","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(command.name());","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":153,"author":{"gitId":"tanyyyming"},"content":"    /** Executes the tag command with the given description and optional arguments. */","lastModifiedDate":"2023-09-15"},{"lineNumber":154,"author":{"gitId":"tanyyyming"},"content":"    private String executeTagCommand(CommandType command, String args) throws JarvisException {","lastModifiedDate":"2023-09-15"},{"lineNumber":155,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":156,"author":{"gitId":"tanyyyming"},"content":"            String[] varargs \u003d args.split(\" \", 2);","lastModifiedDate":"2023-09-15"},{"lineNumber":157,"author":{"gitId":"tanyyyming"},"content":"            int taskNumber \u003d Integer.parseInt(varargs[0]);","lastModifiedDate":"2023-09-15"},{"lineNumber":158,"author":{"gitId":"tanyyyming"},"content":"            String[] tags \u003d varargs[1].split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":159,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":160,"author":{"gitId":"tanyyyming"},"content":"            switch (command) {","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"tanyyyming"},"content":"            case TAG:","lastModifiedDate":"2023-09-15"},{"lineNumber":162,"author":{"gitId":"tanyyyming"},"content":"                return taskList.addTagsToTask(taskNumber, tags);","lastModifiedDate":"2023-09-15"},{"lineNumber":163,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":164,"author":{"gitId":"tanyyyming"},"content":"            case UNTAG:","lastModifiedDate":"2023-09-15"},{"lineNumber":165,"author":{"gitId":"tanyyyming"},"content":"                return taskList.deleteTagsFromTask(taskNumber, tags);","lastModifiedDate":"2023-09-15"},{"lineNumber":166,"author":{"gitId":"tanyyyming"},"content":"            default:","lastModifiedDate":"2023-09-15"},{"lineNumber":167,"author":{"gitId":"tanyyyming"},"content":"                // the program should never reach this point.","lastModifiedDate":"2023-09-15"},{"lineNumber":168,"author":{"gitId":"tanyyyming"},"content":"                return null;","lastModifiedDate":"2023-09-15"},{"lineNumber":169,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":170,"author":{"gitId":"tanyyyming"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":171,"author":{"gitId":"tanyyyming"},"content":"            // An exception is thrown if the argument number does not match the command.","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(command.name());","lastModifiedDate":"2023-09-15"},{"lineNumber":173,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":174,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":175,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":175}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // @@author tanyyyming-reused","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private DialogBox(String text, Image img, boolean isUser) {","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (isUser) {","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            dialog.getStyleClass().add(\"grey-background\");","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            dialog.getStyleClass().add(\"blue-background\");","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private void flip() {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img, true);","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static DialogBox getJarvisDialog(String text, Image img) {","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img, false);","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        db.flip();","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return db;","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    // @@ author","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":22,"-":48}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import jarvis.Jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":" * A GUI for Jarvis using FXML.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    private Jarvis jarvis \u003d new Jarvis(\"data/jarvislist.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // @@author tanyyyming-reused","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setJarvis(jarvis);","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            stage.setTitle(\"Jarvis\");","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            stage.show();","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setGreetingMessage(jarvis.greet());","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // @@ author","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":18,"-":20}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package gui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import jarvis.Jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // @@author tanyyyming-reused","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Jarvis jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Image jarvisImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.jpg\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the Jarvis instance for the MainWindow.","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param j Jarvis instance.","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setJarvis(Jarvis j) {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        jarvis \u003d j;","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the greeting message to be displayed in the MainWindow.","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param message Greeting message.","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGreetingMessage(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getJarvisDialog(message, jarvisImage));","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Jarvis\u0027s reply and then appends them to","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String response \u003d jarvis.respond(input);","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                DialogBox.getJarvisDialog(response, jarvisImage)","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (input.equals(\"exit\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            // Exit after 2 seconds.","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            pause.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            pause.play();","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // @@ author","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":18,"-":62}},{"path":"src/main/java/jarvis/Jarvis.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package jarvis;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.Parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.TaskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":" * Represents a personal assistant chatbot that helps the user keep track of different types of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"public class Jarvis {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    private Parser parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new Jarvis object with the given data file path to store the list of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * @param dataFilePath the path of the data file.","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    public Jarvis(String dataFilePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"            taskList \u003d new TaskList(new Storage(dataFilePath));","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"            parser \u003d new Parser(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"     * Gets the response from Jarvis based on the user input.","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     * @param userInput the user input.","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"     * @return the response from Jarvis.","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"    public String respond(String userInput) {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            return parser.parseAndExecute(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            // the errors caught are business errors to be shown to the user.","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"            return e.toString();","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    public String greet() {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"        return \"At your service, sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"tanyyyming":48}},{"path":"src/main/java/jarvis/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package jarvis;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import gui.Main;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":" * The entry point for the Jarvis application.","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"public class Launcher {","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":13}},{"path":"src/main/java/services/bizerrors/CreateNewFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when Jarvis is unable to create a new file.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class CreateNewFileException extends JarvisException {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public CreateNewFileException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to create a new file.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/services/bizerrors/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when the user does not provide any argument after a command.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class EmptyArgumentException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public EmptyArgumentException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, I did not catch what you say after the command (%s).\\nI beg your pardon.\",","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"                command.toLowerCase()));","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":11}},{"path":"src/main/java/services/bizerrors/IndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when the user provides a task index that is out of range.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class IndexOutOfRangeException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public IndexOutOfRangeException(int index, int taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, your calendar does not contain this task index (%d).\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"                + \"It currently has %d tasks.\", index, taskCount));","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":11}},{"path":"src/main/java/services/bizerrors/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when the user provides invalid arguments after a command.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class InvalidArgumentException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public InvalidArgumentException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sir, please check again to ensure \"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"                + \"you provide the correct arguments for command (%s).\", command.toLowerCase()));","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":11}},{"path":"src/main/java/services/bizerrors/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when the user provides an invalid command.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class InvalidCommandException extends JarvisException {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public InvalidCommandException(String command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(String.format(\"Sorry, sir. Executing this command (%s) is beyond my capabilities.\", command));","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/services/bizerrors/JarvisException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents any business error that occurs during the execution of Jarvis.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class JarvisException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public JarvisException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        // Prepend a newline to the message to make it more readable.","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"        super(\"\\n\" + message);","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":11}},{"path":"src/main/java/services/bizerrors/ReadFromFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when Jarvis is unable to read from file.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class ReadFromFileException extends JarvisException {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public ReadFromFileException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to read your tasks from file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/services/bizerrors/SaveToFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.bizerrors;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an exception when Jarvis is unable to save to file.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class SaveToFileException extends JarvisException {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    public SaveToFileException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"        super(\"Sorry, sir. I am unable to save your tasks to file.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":10}},{"path":"src/main/java/services/tagging/Tag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tagging;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"/** Represents a tag. */","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class Tag {","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    private static HashMap\u003cString, Tag\u003e allTags \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"    private String tagName;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"     * Constructor for Tag.","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"     * @param tagName the name of the tag.","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        allTags.put(tagName, this);","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    public static Tag getTag(String tagName) {","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"        if (allTags.get(tagName) \u003d\u003d null) {","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"            return new Tag(tagName);","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"        } else {","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"            return allTags.get(tagName);","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"            // same object","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            return true;","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"        } else if (obj instanceof Tag) {","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            // null instanceof obj will always return false, so there is no need for a null check.","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            Tag otherTag \u003d (Tag) obj;","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            return this.tagName.equals(otherTag.tagName);","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"        return false;","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"        return \"#\" + tagName;","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"tanyyyming":45}},{"path":"src/main/java/services/tagging/Taggable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tagging;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents an object that can be tagged.","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public interface Taggable {","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"     * Adds tags to the object.","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"     * @param tagName The list of names of the tags to be added.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    void addTags(String[] tagName);","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"     * Deletes tags from the object.","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * @param tagName The list of names of the tags to be deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    void deleteTags(String[] tagName);","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"     * Shows all tags of the object.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     * @return A string representation of all tags of the object.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    String showAllTags();","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"tanyyyming":27}},{"path":"src/main/java/services/tasklist/IStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.ReadFromFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":" * Represents a storage that stores the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":" * The storage is responsible for reading and writing the list of tasks to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"public interface IStorage {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * Saves the given list of tasks to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * The tasks are written to the file in string obtained","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * from calling encode() method of each task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"     * @param taskList the list of tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException if there is an error writing to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"     * @see Task#encode()","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    void save(List\u003cTask\u003e taskList) throws SaveToFileException;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * Loads the list of tasks from the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     * The returned task list is empty if the data file is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"     * @return the list of tasks loaded from the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"     * @throws ReadFromFileException    if there is an error reading from the file, e,g. file not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     * @throws InvalidArgumentException if the data file contains invalid data format that cannot be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    List\u003cTask\u003e load() throws ReadFromFileException, InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":35}},{"path":"src/main/java/services/tasklist/ITaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":" * Represents a task list manager.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":" * It is responsible for adding, deleting, marking tasks as done/undone, and printing the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"public interface ITaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"     * @param description the content of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"     * @param taskType    the type of the task. See {@link CommandType}.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"     * @param args        the argument list of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task added and the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    String addTask(String description, CommandType taskType, String... args) throws JarvisException;","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     * Deletes a task from the task list with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task deleted and the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    String deleteTask(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"     * Finds tasks that contain the given keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"     * @param keyword the keyword to be searched.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"     * @return the list of tasks that contain the given keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    String findTask(String keyword);","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"     * Marks a task as done with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"    String markDone(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"     * Marks a task as undone with the given task number.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task marked as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"    String markUndone(int taskNumber) throws JarvisException;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"     * Prints the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"     * @return the task list and each task\u0027s description.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"    String showAllTasks();","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"     * Adds tags to a task with the given task number.","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be added tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"     * @param tagNames   the list of tag names to be added.","lastModifiedDate":"2023-09-15"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task added tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be added tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"    String addTagsToTask(int taskNumber, String[] tagNames) throws JarvisException;","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"     * Deletes tags from a task with the given task number.","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber the task number of the task to be deleted tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"     * @param tagNames   the list of tag names to be deleted.","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"     * @return the description of the task deleted tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"     * @throws JarvisException if the task cannot be deleted tags.","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"    String deleteTagsFromTask(int taskNumber, String[] tagNames) throws JarvisException;","lastModifiedDate":"2023-09-15"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":83}},{"path":"src/main/java/services/tasklist/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.CreateNewFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.ReadFromFileException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Event;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"/** This class implements the {@link IStorage} interface. */","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"public class Storage implements IStorage {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    /** The file that stores the list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    private File dataFile;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new Storage object with the data file at the given path.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * If the file does not exist, a new file is created.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"     * @param dataFilePath the path of the file that stores the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"     * @throws CreateNewFileException if there is an error creating a new file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"    public Storage(String dataFilePath) throws CreateNewFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            File file \u003d new File(dataFilePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            File parentDir \u003d file.getParentFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            if (!parentDir.exists() \u0026\u0026 !parentDir.mkdirs()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"                throw new CreateNewFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"            dataFile \u003d file;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"            assert dataFile.exists() : \"data file should exist\";","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"            throw new CreateNewFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    public void save(List\u003cTask\u003e tasks) throws SaveToFileException {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"            FileWriter fileWriter \u003d new FileWriter(dataFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"                fileWriter.write(task.encode() + \"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"            throw new SaveToFileException();","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"    public List\u003cTask\u003e load() throws ReadFromFileException, InvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"            Scanner scanner \u003d new Scanner(dataFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"                String encodedTask \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"                assert encodedTask.length() \u003e 0 : \"encoded task should not be empty\";","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"                Task task \u003d decode(encodedTask);","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"                tasks.add(task);","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"            }","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"            scanner.close();","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"            return tasks;","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"            throw new ReadFromFileException();","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"    private static Task decode(String encodedTask) throws InvalidArgumentException {","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"        String[] varargs \u003d encodedTask.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"        assert varargs.length \u003e\u003d 4 : \"encoded task should have at least 3 parts \"","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"                + \"(type, isDone, tags, description)\";","lastModifiedDate":"2023-09-15"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"        Task task;","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"        // decode the task type.","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"        String taskType \u003d varargs[0];","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"        assert taskType.equals(\"T\") || taskType.equals(\"D\") || taskType.equals(\"E\")","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"                : \"encoded task should start with T, D or E\";","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"        switch (taskType) {","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"        case \"T\":","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"            task \u003d new Todo(varargs[3]);","lastModifiedDate":"2023-09-15"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"        case \"D\":","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"            task \u003d new Deadline(varargs[3], varargs[4]);","lastModifiedDate":"2023-09-15"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"        case \"E\":","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"            task \u003d new Event(varargs[3], varargs[4], varargs[5]);","lastModifiedDate":"2023-09-15"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"            // the program should never reach this point.","lastModifiedDate":"2023-09-13"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"            return null;","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"        // decode whether the task is done.","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"        String isDone \u003d varargs[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"        if (isDone.equals(\"1\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"            task.setDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"tanyyyming"},"content":"        // decode the tags associated with the task.","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"tanyyyming"},"content":"        String stringOfTags \u003d varargs[2];","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"tanyyyming"},"content":"        if (!stringOfTags.equals(\"\")) {","lastModifiedDate":"2023-09-22"},{"lineNumber":112,"author":{"gitId":"tanyyyming"},"content":"            // the tags currently have a leading \"#\" character.","lastModifiedDate":"2023-09-15"},{"lineNumber":113,"author":{"gitId":"tanyyyming"},"content":"            String[] tagsWithHashes \u003d stringOfTags.split(\" \");","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"tanyyyming"},"content":"            // remove the leading \"#\" character.","lastModifiedDate":"2023-09-15"},{"lineNumber":115,"author":{"gitId":"tanyyyming"},"content":"            String[] tags \u003d Arrays.stream(tagsWithHashes).map(s -\u003e s.substring(1)).toArray(String[]::new);","lastModifiedDate":"2023-09-15"},{"lineNumber":116,"author":{"gitId":"tanyyyming"},"content":"            task.addTags(tags);","lastModifiedDate":"2023-09-15"},{"lineNumber":117,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":118,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":119,"author":{"gitId":"tanyyyming"},"content":"        return task;","lastModifiedDate":"2023-09-22"},{"lineNumber":120,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tanyyyming":121}},{"path":"src/main/java/services/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import java.util.List;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.IndexOutOfRangeException;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.JarvisException;","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.SaveToFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Event;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Task;","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"/** This class implements the {@link ITaskList} interface. */","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"public class TaskList implements ITaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    /** The list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    protected List\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    protected IStorage repo;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    /** The number of tasks in the list. */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    protected int taskCount;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     * Creates a new TaskList object with the given Storage object and Ui object.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"     * @param repo   the Storage object that stores the list of tasks in a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    public TaskList(IStorage repo) {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        this.repo \u003d repo;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            tasks \u003d repo.load();","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            taskCount \u003d tasks.size();","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"        } catch (JarvisException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"    public String addTask(String description, CommandType taskType, String... args) throws JarvisException {","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"        assert !description.isEmpty() : \"description should not be empty\";","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"        Task newTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"        case TODO:","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Todo(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Deadline(description, args[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"        case EVENT:","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"            newTask \u003d new Event(description, args[0], args[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        default:","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            // the program should never reach this point.","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"            throw new JarvisException(\"Unknown task type.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"        tasks.add(newTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"        taskCount++;","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        return \"added: \" + newTask + \"\\n\" + taskCount + \" more tasks to do, Sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task deletion operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"    public String deleteTask(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"        Task deletedTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"        tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"        taskCount--;","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"        return \"removed: \" + deletedTask + \"\\n\" + taskCount + \" tasks left, Sir.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"    public String addTagsToTask(int taskNumber, String[] tagNames) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-09-15"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"        Task taskToTag \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"        taskToTag.addTags(tagNames);","lastModifiedDate":"2023-09-15"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-15"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"        return \"added tags \" + taskToTag.showAllTags() + \" to the task:\\n\\t\" + taskToTag;","lastModifiedDate":"2023-09-15"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"    public String deleteTagsFromTask(int taskNumber, String[] tagNames) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-09-15"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-09-15"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"        Task taskToTag \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"        taskToTag.deleteTags(tagNames);","lastModifiedDate":"2023-09-15"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-15"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"        return \"deleted tags from the task:\\n\\t\" + taskToTag;","lastModifiedDate":"2023-09-15"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"    public String findTask(String keyword) {","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"        List\u003cTask\u003e matchingTasks \u003d tasks.stream()","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"                .filter(task -\u003e task.toString().contains(keyword))","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"tanyyyming"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"tanyyyming"},"content":"        int count \u003d matchingTasks.size();","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"tanyyyming"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"tanyyyming"},"content":"            return \"Sir, there are no matching tasks on your calendar.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"tanyyyming"},"content":"        String result \u003d \"Sir, there are \" + count + \" matching tasks on your calendar:\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"tanyyyming"},"content":"        result +\u003d IntStream.range(1, count + 1)","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"tanyyyming"},"content":"                .mapToObj(i -\u003e i + \". \" + matchingTasks.get(i - 1))","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"tanyyyming"},"content":"                .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"tanyyyming"},"content":"        return result;","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task marking operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"tanyyyming"},"content":"    public String markDone(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":134,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":135,"author":{"gitId":"tanyyyming"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"tanyyyming"},"content":"        task.setDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":137,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":138,"author":{"gitId":"tanyyyming"},"content":"        return \"Check.\\n\\t\" + taskNumber + \". \" + task + \"\\nWay to go, sir.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":139,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"tanyyyming"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"tanyyyming"},"content":"     * @param taskNumber {@inheritDoc}","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"tanyyyming"},"content":"     * @return {@inheritDoc}","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"tanyyyming"},"content":"     * @throws SaveToFileException      if the task unmarking operation cannot be saved to the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"tanyyyming"},"content":"     * @throws IndexOutOfRangeException if the task number is out of range.","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"tanyyyming"},"content":"    public String markUndone(int taskNumber) throws SaveToFileException, IndexOutOfRangeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"tanyyyming"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e taskCount) {","lastModifiedDate":"2023-08-22"},{"lineNumber":152,"author":{"gitId":"tanyyyming"},"content":"            throw new IndexOutOfRangeException(taskNumber, taskCount);","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":154,"author":{"gitId":"tanyyyming"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"tanyyyming"},"content":"        task.setUndone();","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"tanyyyming"},"content":"        repo.save(tasks);","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"tanyyyming"},"content":"        return \"As you wish, sir.\\n\\t\" + taskNumber + \". \" + task;","lastModifiedDate":"2023-09-14"},{"lineNumber":158,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":159,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":160,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"tanyyyming"},"content":"    public String showAllTasks() {","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"tanyyyming"},"content":"        if (taskCount \u003d\u003d 0) {","lastModifiedDate":"2023-08-22"},{"lineNumber":163,"author":{"gitId":"tanyyyming"},"content":"            return \"Sir, there are no tasks on your calendar.\";","lastModifiedDate":"2023-09-02"},{"lineNumber":164,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":165,"author":{"gitId":"tanyyyming"},"content":"        String result \u003d \"Sir, there are \" + taskCount + \" tasks on your calendar:\\n\";","lastModifiedDate":"2023-08-22"},{"lineNumber":166,"author":{"gitId":"tanyyyming"},"content":"        result +\u003d IntStream.range(1, taskCount + 1)","lastModifiedDate":"2023-09-13"},{"lineNumber":167,"author":{"gitId":"tanyyyming"},"content":"                .mapToObj(i -\u003e i + \". \" + tasks.get(i - 1))","lastModifiedDate":"2023-09-14"},{"lineNumber":168,"author":{"gitId":"tanyyyming"},"content":"                .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"tanyyyming"},"content":"        return result;","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":171,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":171}},{"path":"src/main/java/services/tasklist/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    public Deadline(String description, String endTime) throws InvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"            this.endTime \u003d LocalDateTime.parse(endTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(\"deadline\");","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + showAllTags() + \" | \" + description + \" | \" + endTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"        return \"[D]\" + super.toString() + \"\\n(by: \" + endTime.format(outputFormatter) + \")\";","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":34}},{"path":"src/main/java/services/tasklist/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.bizerrors.InvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":" * Represents a task with a start time and end time.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    private DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    public Event(String description, String startTime, String endTime) throws InvalidArgumentException {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"            this.startTime \u003d LocalDateTime.parse(startTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"            this.endTime \u003d LocalDateTime.parse(endTime, inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"            throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + showAllTags() + \" | \" + description + \" | \"","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"                + startTime + \" | \" + endTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"                + \"\\n(from: \" + startTime.format(outputFormatter)","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"                + \" to: \" + endTime.format(outputFormatter) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":39}},{"path":"src/main/java/services/tasklist/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import services.tagging.Tag;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import services.tagging.Taggable;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":" * Represents a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"public abstract class Task implements Taggable {","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    protected String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    /** The status of task completion. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    /** The checkbox to indicate the status of task completion. */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    protected String checkBox;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    protected HashSet\u003cTag\u003e tags;","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"     * Constructor for Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"     * The task is not done by default.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"     * @param description the content of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[ ]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        this.tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"    public void setDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[X]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    public void setUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"        this.checkBox \u003d \"[ ]\";","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    public void addTags(String[] tagNames) {","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"        for (String tagName : tagNames) {","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"            tags.add(Tag.getTag(tagName));","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"    public void deleteTags(String[] tagNames) {","lastModifiedDate":"2023-09-15"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"        for (String tagName : tagNames) {","lastModifiedDate":"2023-09-15"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"            tags.remove(Tag.getTag(tagName));","lastModifiedDate":"2023-09-15"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"    public String showAllTags() {","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        return tags.stream().map(Tag::toString).collect(Collectors.joining(\" \"));","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"     * Encodes the task into a string that can be saved to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"     * @return the encoded string.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"    public abstract String encode();","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"        return checkBox + \" \" + this.description + \" \" + showAllTags();","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"tanyyyming":74}},{"path":"src/main/java/services/tasklist/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist.tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":" * Represents a task without any date/time attached to it.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    public String encode() {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + showAllTags() + \" | \" + description;","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":21}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"    \u003cLabel fx:id\u003d\"dialog\" prefWidth\u003d\"350.0\" text\u003d\"Label with long text that should wrap to the next line when needed.\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        \u003cfont\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"            \u003cFont name\u003d\"Segoe UI\" size\u003d\"14.0\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        \u003c/font\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"            \u003cInsets bottom\u003d\"15\" top\u003d\"15\" left\u003d\"20\" right\u003d\"20\" /\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    \u003c/Label\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"72.0\" fitWidth\u003d\"72.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"        \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"        \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    \u003c/ImageView\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":27}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"            fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" stylesheets\u003d\"@/view/styles.css\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"555.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"                prefHeight\u003d\"45.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" stylesheets\u003d\"@/view/styles.css\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"                    vvalue\u003d\"1.0\" stylesheets\u003d\"@/view/styles.css\"\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"tanyyyming":24}},{"path":"src/test/java/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.extension.ExtendWith;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.InjectMocks;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.Mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.junit.jupiter.MockitoExtension;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.when;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"@ExtendWith(MockitoExtension.class)","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"    @Mock","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    protected TaskList taskListMock;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    @InjectMocks","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    protected Parser parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"    public ParserTest() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"        // creating a mock TaskList object and injecting it into a Parser object.","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        taskListMock \u003d mock(TaskList.class);","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"        parser \u003d new Parser(taskListMock);","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"    // the following three test cases are testing the execute method in Parser.","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    public void execute_validInput_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.addTask(\"test\", CommandType.TODO))","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"                    .thenReturn(\"add method called with todo task\");","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.addTask(\"test\", CommandType.DEADLINE, \"2020-08-25 00:00\"))","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"                    .thenReturn(\"add method called with deadline task\");","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"            when(taskListMock.deleteTask(1)).thenReturn(\"delete method called\");","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"add method called with todo task\", parser.execute(\"todo\", \"test\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"add method called with deadline task\",","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"                    parser.execute(\"deadline\", \"test      /by   2020-08-25 00:00\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"delete method called\", parser.execute(\"delete\", \"1\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"invalid_command\", \"test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sorry, sir. Executing this command (invalid_command) is beyond my capabilities.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"    public void execute_invalidArgument_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        // when the number of argument provided is incorrect.","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"event\", \"no time specified\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (event).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"        // when the argument cannot be parsed into an integer.","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"mark\", \"string instead of integer\");","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (mark).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"    public void execute_emptyArgument_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"            parser.execute(\"mark\", \"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, I did not catch what you say after the command (mark).\\nI beg your pardon.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":85}},{"path":"src/test/java/services/tasklist/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"package services.tasklist;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"import command.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"import org.junit.jupiter.api.extension.ExtendWith;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.InjectMocks;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.Mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"tanyyyming"},"content":"import org.mockito.junit.jupiter.MockitoExtension;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"tanyyyming"},"content":"import services.tasklist.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"tanyyyming"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"tanyyyming"},"content":"import static org.mockito.Mockito.mock;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"tanyyyming"},"content":"@ExtendWith(MockitoExtension.class)","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"tanyyyming"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"    @Mock","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"    protected Storage repoMock;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"tanyyyming"},"content":"    @InjectMocks","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"tanyyyming"},"content":"    protected TaskList taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"    public TaskListTest() {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"        // creating a mock Storage object and injecting it into a TaskList object.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"tanyyyming"},"content":"        repoMock \u003d mock(Storage.class);","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"tanyyyming"},"content":"        taskList \u003d new TaskList(repoMock);","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"tanyyyming"},"content":"    // the following three test cases are testing the add method in TaskList.","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"tanyyyming"},"content":"    public void add_todoTask_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"tanyyyming"},"content":"            taskList.addTask(\"test\", CommandType.TODO);","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(1, taskList.taskCount);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"tanyyyming"},"content":"            assertTrue(taskList.tasks.get(0) instanceof Todo);","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"tanyyyming"},"content":"    public void add_deadlineTask_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"tanyyyming"},"content":"            taskList.addTask(\"test\", CommandType.DEADLINE, \"2020-08-25 00:00\");","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(1, taskList.taskCount);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"tanyyyming"},"content":"            assertTrue(taskList.tasks.get(0) instanceof Deadline);","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"tanyyyming"},"content":"    public void add_eventTask_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"tanyyyming"},"content":"            taskList.addTask(\"test\", CommandType.EVENT, \"invalid time format\", \"2020-08-25 01:00\");","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, please check again to ensure you provide \"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"tanyyyming"},"content":"                    + \"the correct arguments for command (event).\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"tanyyyming"},"content":"    // the following three test cases are testing the delete method in TaskList.","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"tanyyyming"},"content":"    public void delete_existingTask_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"tanyyyming"},"content":"            taskList.tasks.add(new Todo(\"test\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"tanyyyming"},"content":"            taskList.tasks.add(new Deadline(\"test\", \"2020-08-25 00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"tanyyyming"},"content":"            taskList.taskCount \u003d 2;","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"tanyyyming"},"content":"            // delete the first task in the list. Only the deadline task should remain.","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"tanyyyming"},"content":"            taskList.deleteTask(1);","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(1, taskList.taskCount);","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"tanyyyming"},"content":"            assertTrue(taskList.tasks.get(0) instanceof Deadline);","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"tanyyyming"},"content":"            // all tasks should be deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"tanyyyming"},"content":"            taskList.deleteTask(1);","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(0, taskList.taskCount);","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"tanyyyming"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"tanyyyming"},"content":"    public void delete_emptyTaskList_exceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"tanyyyming"},"content":"            taskList.deleteTask(1);","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, your calendar does not contain this task index (1).\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"tanyyyming"},"content":"                    + \"It currently has 0 tasks.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"tanyyyming"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"tanyyyming"},"content":"    public void delete_invalidTaskIndex_exceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"tanyyyming"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"tanyyyming"},"content":"            taskList.tasks.add(new Todo(\"test\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"tanyyyming"},"content":"            taskList.tasks.add(new Deadline(\"test\", \"2020-08-25 00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"tanyyyming"},"content":"            taskList.taskCount \u003d 2;","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"tanyyyming"},"content":"            // delete the third task in the list, which does not exist.","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"tanyyyming"},"content":"            taskList.deleteTask(3);","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"tanyyyming"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"tanyyyming"},"content":"            assertEquals(\"Sir, your calendar does not contain this task index (3).\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"tanyyyming"},"content":"                    + \"It currently has 2 tasks.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"tanyyyming"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"tanyyyming"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"tanyyyming"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"tanyyyming"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"tanyyyming":108}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyyyming"},"content":"todo task one","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"tanyyyming"},"content":"deadline task 2 /by time 1","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"tanyyyming"},"content":"event task 3 /from time 2 /to time 3","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"tanyyyming"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"tanyyyming"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"tanyyyming"},"content":"unmark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"tanyyyming"},"content":"exit","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"tanyyyming":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tanyyyming"},"content":"REM Note that the chatbot name has changed from Duke to jarvis.jarvis","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"tanyyyming"},"content":"java -classpath ..\\bin jarvis.jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":2,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"tanyyyming"},"content":"# Note that the chatbot name has changed from Duke to Jarvis.Jarvis","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tanyyyming"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanyyyming":2,"-":37}}]
