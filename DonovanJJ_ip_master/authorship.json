[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DonovanJJ":2,"-":22}},{"path":"Users/donovan/Documents/Modules/CS2103T/ip/data/ipOutput.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"T|0|borrow book","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"D|0|return book|Sunday","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"D|0|return book|2 Dec 2019","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":3}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DonovanJJ":20,"-":40}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"    private DialogBox(String text, Image img, String color) {","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"        dialog.setStyle(\"-fx-text-fill: \" + color);","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"    private void flip() {","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"        return new DialogBox(text, img, \"#259911\");","lastModifiedDate":"2023-09-15"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"        var db \u003d new DialogBox(text, img, \"black\");","lastModifiedDate":"2023-09-15"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"        db.flip();","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"        return db;","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the bot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"public class Duke {","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"    private String outputPath;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    private Storage data;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs the bot object.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     * @param filePath String represetation of the relative path","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"        this.data \u003d new Storage(filePath);","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"        this.outputPath \u003d filePath;","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"            this.tasks \u003d new TaskList(this.data.loadOutputFile());","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"     * Obtains the response by notDuke based on the user input.","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"     * @param input The string that the user has entered","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"     * @return String response of the string input","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"        if (!Parser.parsable(input)) {","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"            return this.ui.exit();","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"        if (this.outputPath.equals(\"\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"            this.ui.emptyFilePath();","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"        return Parser.parse(input, ui, this.tasks, this.data);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":48}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":" * Class that encapsulates the starting point of the program.","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"public class Launcher {","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"     * Launches the chat application.","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"     * @param args","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":17}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"    private Duke duke \u003d new Duke(\"./ipOutput.txt\");","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     * Starts up the application.","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     * @param stage the primary stage for this application, onto which the application scene can be set.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"            stage.show();","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IllegalStateException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":38}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"import javafx.util.Duration;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/babyYoda.jpeg\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/yoda.jpeg\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"                DialogBox.getDukeDialog(\"Hello I\u0027m notDuke! What can I do for you?\", dukeImage)","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"        );","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"     * Sets the Duke instance.","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"     * @param d duke instance","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"    @FXML","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"        );","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"        if (response.equals(\"Bye. Hope to see you again soon!\")) {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"            delay.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"            delay.play();","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":68}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the logic of analysing the user\u0027s String input.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":" * Decides on what should be done next based on it","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"public class Parser {","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if input string is parsable or not.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     * @param input The input string to check","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"     * @return {@code true} if the input string is not equal to \"bye\"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    public static boolean parsable(String input) {","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"        return !input.equals(\"bye\");","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"     * Creates the tasks based on String input.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"     * @param input String input by user","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"     * @return A task object of the appropriate subclass (Deadlines, Events, Todos)","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"     * @throws Exception If the input string is not valid","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"    public static Task createTask(String input) throws Exception {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        // Splits based on white spaces, identifies based on the relevant /...","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"        String[] arrStrings \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"        String command \u003d arrStrings[0];","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"        if (command.equals(\"deadline\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"            return createDeadline(arrStrings);","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"        } else if (command.equals(\"todo\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"            return createTodo(arrStrings);","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"        } else if (command.equals(\"event\")) {","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"            return createEvent(arrStrings);","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"        } else {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"            throw new Exception(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"    private static Event createEvent (String[] arrStrings) throws Exception {","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"        String name \u003d \"\";","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"        String from \u003d \"\";","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"        String to \u003d \"\";","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"        boolean completedName \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        boolean completedFrom \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"        for (int i \u003d 1; i \u003c arrStrings.length; i++) {","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"            if (arrStrings[i].equals(\"/from\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"                completedName \u003d true;","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"            } else if (arrStrings[i].equals(\"/to\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"                completedFrom \u003d true;","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"            } else if (!completedFrom \u0026\u0026 completedName) {","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"                from +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"            } else if (completedFrom \u0026\u0026 completedName) {","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"                to +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"            } else {","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"                name +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"        name \u003d name.substring(0, name.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"        from \u003d from.substring(0, from.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"        to \u003d to.substring(0, to.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"        return new Event(name, from, to);","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"    private static Todo createTodo(String[] arrStrings) throws Exception {","lastModifiedDate":"2023-09-10"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"        String name \u003d \"\";","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"        if (arrStrings.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"            throw new Exception(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"        for (int i \u003d 1; i \u003c arrStrings.length; i++) {","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"            name +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"        name \u003d name.substring(0, name.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"        return new Todo(name);","lastModifiedDate":"2023-09-10"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"     * Create a new Deadline object based on the String input which has been split into parts.","lastModifiedDate":"2023-09-10"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"     * @param arrStrings Array of String which has been split from the user input","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"     * @return new Deadline Object","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"     * @throws Exception When the user did not input any name for the task","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"DonovanJJ"},"content":"    private static Deadline createDeadline(String[] arrStrings) throws Exception {","lastModifiedDate":"2023-09-10"},{"lineNumber":95,"author":{"gitId":"DonovanJJ"},"content":"        String name \u003d \"\";","lastModifiedDate":"2023-09-10"},{"lineNumber":96,"author":{"gitId":"DonovanJJ"},"content":"        String deadline \u003d \"\";","lastModifiedDate":"2023-09-10"},{"lineNumber":97,"author":{"gitId":"DonovanJJ"},"content":"        boolean completedName \u003d false;","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"DonovanJJ"},"content":"        for (int i \u003d 1; i \u003c arrStrings.length; i++) {","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"DonovanJJ"},"content":"            if (arrStrings[i].equals(\"/by\")) {","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"DonovanJJ"},"content":"                completedName \u003d true;","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"DonovanJJ"},"content":"                continue;","lastModifiedDate":"2023-09-10"},{"lineNumber":102,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":103,"author":{"gitId":"DonovanJJ"},"content":"            if (completedName) {","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"DonovanJJ"},"content":"                deadline +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-09-10"},{"lineNumber":105,"author":{"gitId":"DonovanJJ"},"content":"                continue;","lastModifiedDate":"2023-09-10"},{"lineNumber":106,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"DonovanJJ"},"content":"            name +\u003d arrStrings[i] + \" \";","lastModifiedDate":"2023-09-10"},{"lineNumber":108,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":109,"author":{"gitId":"DonovanJJ"},"content":"        if (!completedName) {","lastModifiedDate":"2023-09-10"},{"lineNumber":110,"author":{"gitId":"DonovanJJ"},"content":"            throw new Exception(\"Invalid deadline task!\");","lastModifiedDate":"2023-09-10"},{"lineNumber":111,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":112,"author":{"gitId":"DonovanJJ"},"content":"        name \u003d name.substring(0, name.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":113,"author":{"gitId":"DonovanJJ"},"content":"        deadline \u003d deadline.substring(0, deadline.length() - 1);","lastModifiedDate":"2023-09-10"},{"lineNumber":114,"author":{"gitId":"DonovanJJ"},"content":"        return new Deadline(name, deadline);","lastModifiedDate":"2023-09-10"},{"lineNumber":115,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"DonovanJJ"},"content":"     * Parse the input string by splitting based on whtiespaces.","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"DonovanJJ"},"content":"     * Sorts the string based on its command","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"DonovanJJ"},"content":"     * @param input The input string representing the task given by user","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"DonovanJJ"},"content":"     * @param ui The user interface responsible for sending outputs to the screen","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"DonovanJJ"},"content":"     * @param taskList ArrayList that stores the tasks loaded from memory","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"DonovanJJ"},"content":"     * @param storage Storage that can be written to or read from","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"DonovanJJ"},"content":"    public static String parse(String input, Ui ui, TaskList taskList, Storage storage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":127,"author":{"gitId":"DonovanJJ"},"content":"        assert taskList !\u003d null : \"Should not parse without a taskList!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"DonovanJJ"},"content":"        assert storage !\u003d null : \"Should not parse without a storage!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"DonovanJJ"},"content":"        assert ui !\u003d null : \"Should not parse without a ui!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"DonovanJJ"},"content":"        // Splits the input based on whitespaces.","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"DonovanJJ"},"content":"        String command \u003d input.split(\"\\\\s+\")[0];","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage \u003d getResponseMessage(input, ui, taskList, command);","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"DonovanJJ"},"content":"        storage.updateTasks(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"DonovanJJ"},"content":"        assert responseMessage.equals(\"\") : \"Message returned should never be nothing!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":136,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":137,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":138,"author":{"gitId":"DonovanJJ"},"content":"    private static String getResponseMessage(String input, Ui ui, TaskList taskList, String command) {","lastModifiedDate":"2023-09-10"},{"lineNumber":139,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage \u003d \"\";","lastModifiedDate":"2023-09-10"},{"lineNumber":140,"author":{"gitId":"DonovanJJ"},"content":"        switch (command) {","lastModifiedDate":"2023-08-26"},{"lineNumber":141,"author":{"gitId":"DonovanJJ"},"content":"        case \"list\":","lastModifiedDate":"2023-08-26"},{"lineNumber":142,"author":{"gitId":"DonovanJJ"},"content":"            responseMessage \u003d ui.listTask(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":143,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":144,"author":{"gitId":"DonovanJJ"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-26"},{"lineNumber":145,"author":{"gitId":"DonovanJJ"},"content":"            responseMessage \u003d markTask(input, ui, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":146,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":147,"author":{"gitId":"DonovanJJ"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-26"},{"lineNumber":148,"author":{"gitId":"DonovanJJ"},"content":"            responseMessage \u003d unmarkTask(input, ui, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":149,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":150,"author":{"gitId":"DonovanJJ"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-26"},{"lineNumber":151,"author":{"gitId":"DonovanJJ"},"content":"            responseMessage \u003d deleteTask(input, ui, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":152,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":153,"author":{"gitId":"DonovanJJ"},"content":"        case \"find\":","lastModifiedDate":"2023-08-27"},{"lineNumber":154,"author":{"gitId":"DonovanJJ"},"content":"            responseMessage \u003d findTask(input, ui, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":155,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-27"},{"lineNumber":156,"author":{"gitId":"DonovanJJ"},"content":"        default:","lastModifiedDate":"2023-08-26"},{"lineNumber":157,"author":{"gitId":"DonovanJJ"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":158,"author":{"gitId":"DonovanJJ"},"content":"                Task task \u003d createTask(input);","lastModifiedDate":"2023-09-10"},{"lineNumber":159,"author":{"gitId":"DonovanJJ"},"content":"                boolean isDuplicate \u003d taskList.isDuplicateTask(task);","lastModifiedDate":"2023-09-10"},{"lineNumber":160,"author":{"gitId":"DonovanJJ"},"content":"                if (task !\u003d null \u0026\u0026 !isDuplicate) {","lastModifiedDate":"2023-09-10"},{"lineNumber":161,"author":{"gitId":"DonovanJJ"},"content":"                    taskList.add(task);","lastModifiedDate":"2023-08-26"},{"lineNumber":162,"author":{"gitId":"DonovanJJ"},"content":"                    responseMessage \u003d ui.displayAddTask(task, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":163,"author":{"gitId":"DonovanJJ"},"content":"                } else {","lastModifiedDate":"2023-09-10"},{"lineNumber":164,"author":{"gitId":"DonovanJJ"},"content":"                    responseMessage \u003d ui.displayDuplicateTask();","lastModifiedDate":"2023-09-10"},{"lineNumber":165,"author":{"gitId":"DonovanJJ"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":166,"author":{"gitId":"DonovanJJ"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":167,"author":{"gitId":"DonovanJJ"},"content":"                responseMessage \u003d ui.showExceptionError(e);","lastModifiedDate":"2023-09-10"},{"lineNumber":168,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":169,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":170,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":171,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":172,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":173,"author":{"gitId":"DonovanJJ"},"content":"    private static String findTask(String input, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":174,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":175,"author":{"gitId":"DonovanJJ"},"content":"        String word \u003d input.split(\"\\\\s+\")[1];","lastModifiedDate":"2023-09-10"},{"lineNumber":176,"author":{"gitId":"DonovanJJ"},"content":"        ArrayList\u003cTask\u003e matchingList \u003d taskList.find(word);","lastModifiedDate":"2023-09-10"},{"lineNumber":177,"author":{"gitId":"DonovanJJ"},"content":"        responseMessage \u003d ui.displayMatchingTask(matchingList);","lastModifiedDate":"2023-09-10"},{"lineNumber":178,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":179,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":180,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":181,"author":{"gitId":"DonovanJJ"},"content":"    private static String markTask(String input, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":182,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":183,"author":{"gitId":"DonovanJJ"},"content":"        int choice;","lastModifiedDate":"2023-09-10"},{"lineNumber":184,"author":{"gitId":"DonovanJJ"},"content":"        choice \u003d getChoice(input);","lastModifiedDate":"2023-09-10"},{"lineNumber":185,"author":{"gitId":"DonovanJJ"},"content":"        taskList.mark(choice);","lastModifiedDate":"2023-09-10"},{"lineNumber":186,"author":{"gitId":"DonovanJJ"},"content":"        responseMessage \u003d ui.displayMarkTask(taskList, choice);","lastModifiedDate":"2023-09-10"},{"lineNumber":187,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":188,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":189,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":190,"author":{"gitId":"DonovanJJ"},"content":"    private static String unmarkTask(String input, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":191,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":192,"author":{"gitId":"DonovanJJ"},"content":"        int choice;","lastModifiedDate":"2023-09-10"},{"lineNumber":193,"author":{"gitId":"DonovanJJ"},"content":"        choice \u003d getChoice(input);","lastModifiedDate":"2023-09-10"},{"lineNumber":194,"author":{"gitId":"DonovanJJ"},"content":"        taskList.unmark(choice);","lastModifiedDate":"2023-09-10"},{"lineNumber":195,"author":{"gitId":"DonovanJJ"},"content":"        responseMessage \u003d ui.displayUnmarkTask(taskList, choice);","lastModifiedDate":"2023-09-10"},{"lineNumber":196,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":197,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":198,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":199,"author":{"gitId":"DonovanJJ"},"content":"    private static String deleteTask(String input, Ui ui, TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":200,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":201,"author":{"gitId":"DonovanJJ"},"content":"        int choice;","lastModifiedDate":"2023-09-10"},{"lineNumber":202,"author":{"gitId":"DonovanJJ"},"content":"        choice \u003d getChoice(input);","lastModifiedDate":"2023-09-10"},{"lineNumber":203,"author":{"gitId":"DonovanJJ"},"content":"        Task removedTask \u003d taskList.delete(choice);","lastModifiedDate":"2023-09-10"},{"lineNumber":204,"author":{"gitId":"DonovanJJ"},"content":"        responseMessage \u003d ui.displayDeleteTask(removedTask, taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":205,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":206,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":207,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":208,"author":{"gitId":"DonovanJJ"},"content":"    private static int getChoice(String input) {","lastModifiedDate":"2023-09-10"},{"lineNumber":209,"author":{"gitId":"DonovanJJ"},"content":"        int choice;","lastModifiedDate":"2023-09-10"},{"lineNumber":210,"author":{"gitId":"DonovanJJ"},"content":"        choice \u003d Integer.parseInt(input.split(\"\\\\s+\")[1]);","lastModifiedDate":"2023-09-10"},{"lineNumber":211,"author":{"gitId":"DonovanJJ"},"content":"        return choice;","lastModifiedDate":"2023-09-10"},{"lineNumber":212,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":213,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":213}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the Persistent data storage of the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":" * Data is stored in a text file for convenience","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"public class Storage {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    private String outputPath;","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"        this.outputPath \u003d filePath;","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"     * Creates the output file if does not exist. Also creates directories that are missing.","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"     * @return File filePointer to output file","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"    public File createOutputFile() {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"        File filePointer \u003d new File(this.outputPath);","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        if (filePointer.exists()) {","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"            return filePointer;","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"        createOutputDirFile(filePointer);","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"        return filePointer;","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"     * Creates the output directory and file if they do not exist.","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"     * @param filePointer Pointer to the preferred output location","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"    private void createOutputDirFile(File filePointer) {","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"        File directory \u003d new File(new File(this.outputPath).getParent());","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"            filePointer.createNewFile();","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"     * Loads the data from the Storage memory to the temporary Tasklist.","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"     * @return ArrayList Contains the list of Task objects loaded from memory","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"     * @throws FileNotFoundException If no file is found at the filepath specified","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"    public ArrayList\u003cTask\u003e loadOutputFile() throws FileNotFoundException {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"        File filePointer \u003d this.createOutputFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"        Scanner storageScanner \u003d new Scanner(filePointer);","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"        ArrayList\u003cTask\u003e arrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"        loadStorageByLine(storageScanner, arrList);","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"        storageScanner.close();","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"        assert arrList !\u003d null : \"Array list read from storage can be empty but NOT NULL!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"        return arrList;","lastModifiedDate":"2023-09-10"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"     * Reads and insert task into the array list line by line from storage.","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"     * @param storageScanner Scanner that reads in input line by line","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"     * @param arrList Array list to insert tasks into","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"    private static void loadStorageByLine(Scanner storageScanner, ArrayList\u003cTask\u003e arrList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"        while (storageScanner.hasNext()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"            String item \u003d storageScanner.nextLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"            if (!item.equals(\"\")) {","lastModifiedDate":"2023-09-10"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"                // process the item","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"                // T|1|read book","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"                String[] itemParts \u003d item.split(\"\\\\|\");","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"                insertTask(arrList, itemParts);","lastModifiedDate":"2023-09-10"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":95,"author":{"gitId":"DonovanJJ"},"content":"     * Creates respective tasks based on the user input split into parts.","lastModifiedDate":"2023-09-10"},{"lineNumber":96,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":97,"author":{"gitId":"DonovanJJ"},"content":"     * @param arrList arraylist to add the task to","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"DonovanJJ"},"content":"     * @param itemParts Parts of the String representation of task in the storage","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"DonovanJJ"},"content":"    private static void insertTask(ArrayList\u003cTask\u003e arrList, String[] itemParts) {","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"DonovanJJ"},"content":"        boolean itemComplete \u003d itemParts[1].equals(\"0\");","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"DonovanJJ"},"content":"        String name \u003d itemParts[2];","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"DonovanJJ"},"content":"        switch (itemParts[0]) {","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"DonovanJJ"},"content":"        case \"T\":","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"DonovanJJ"},"content":"            arrList.add(new Todo(name, itemComplete));","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"DonovanJJ"},"content":"        case \"D\":","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"DonovanJJ"},"content":"            String deadline \u003d itemParts[3];","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"DonovanJJ"},"content":"            arrList.add(new Deadline(name, deadline, itemComplete));","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"DonovanJJ"},"content":"            break;","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"DonovanJJ"},"content":"        case \"E\":","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"DonovanJJ"},"content":"            String from \u003d itemParts[3];","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"DonovanJJ"},"content":"            String to \u003d itemParts[4];","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"DonovanJJ"},"content":"            try {","lastModifiedDate":"2023-09-15"},{"lineNumber":116,"author":{"gitId":"DonovanJJ"},"content":"                arrList.add(new Event(name, from, to, itemComplete));","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"DonovanJJ"},"content":"                break;","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"DonovanJJ"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":119,"author":{"gitId":"DonovanJJ"},"content":"                System.out.println(\"Invalid Event format in storage!\");","lastModifiedDate":"2023-09-15"},{"lineNumber":120,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":121,"author":{"gitId":"DonovanJJ"},"content":"        default:","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"DonovanJJ"},"content":"            System.out.println(\"Error when reading file\");","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":125,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":126,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"DonovanJJ"},"content":"     * Writes the data from TaskList to permanent storage at the file output location.","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"DonovanJJ"},"content":"     * @param taskList TaskList object that encapsulates the arraylist data structure, contains the updated tasks","lastModifiedDate":"2023-08-27"},{"lineNumber":130,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"DonovanJJ"},"content":"    public void updateTasks(TaskList taskList) {","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"DonovanJJ"},"content":"            FileWriter writer \u003d new FileWriter(outputPath, false);","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"DonovanJJ"},"content":"            Consumer\u003cTask\u003e storeTask \u003d task -\u003e task.writeToFile(writer);","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"DonovanJJ"},"content":"            taskList.getArrList().forEach(storeTask);","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"DonovanJJ"},"content":"            writer.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":138,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":139,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":140,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":141,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":141}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":" * Represents the temporary storage used when running the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"public class TaskList {","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"    private ArrayList\u003cTask\u003e arrList;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs TaskList instance to store list of Task.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     * @param arrList ArrayList containing Tasks of the user","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"    public TaskList(ArrayList\u003cTask\u003e arrList) {","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"        this.arrList \u003d arrList;","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"     * Returns the encapsulated ArrayList.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"     * @return ArrayList Containing the Task objects","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"    public ArrayList\u003cTask\u003e getArrList() {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"        return this.arrList;","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"     * Returnst he size of the list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"     * @return int Size of list of tasks from the ArrayList","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"    public int size() {","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"        return this.arrList.size();","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"     * Marks and updates the tasklist.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"     * @param choice Number input from the user, deciding which task index to mark (Note that choice starts from 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"    public void mark(int choice) {","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"        this.arrList.get(choice - 1).markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"     * Un-marks and updates the tasklist.","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"     * @param choice Number input from the user, deciding which task index to un-mark (Note that choice starts from 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"    public void unmark(int choice) {","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"        this.arrList.get(choice - 1).markUndone();","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"     * Add task to the tasklist.","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"     * @param task Task object to be added to the tasklist","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"        this.arrList.add(task);","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"     * Delete task of particular choice from the tasklist.","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"     * @param choice int representing the choice of task to be removed from tasklist (Note that choice starts from 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"     * @return Task that has been deleted","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"    public Task delete(int choice) {","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"        return this.arrList.remove(choice - 1);","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"     * Returns a list of tasks that contain the word as the name.","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"     * @param word String input by user representing the task name to correspond to","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"     * @return ArrayList of tasks that corresponds to the word input","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"    public ArrayList\u003cTask\u003e find(String word) {","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"        Predicate\u003cTask\u003e findName \u003d task -\u003e task.containsName(word);","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"        ArrayList\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"        for (Task task : this.arrList) {","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"            if (findName.test(task)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"                tempList.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"DonovanJJ"},"content":"        return tempList;","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if there is a duplicate existing task.","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"DonovanJJ"},"content":"     * @param task Task to check with in the taskList","lastModifiedDate":"2023-09-10"},{"lineNumber":102,"author":{"gitId":"DonovanJJ"},"content":"     * @return booleam, true if there is a equal task is found, else false","lastModifiedDate":"2023-09-10"},{"lineNumber":103,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"DonovanJJ"},"content":"    public boolean isDuplicateTask(Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":105,"author":{"gitId":"DonovanJJ"},"content":"        for (Task existingTask : this.arrList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":106,"author":{"gitId":"DonovanJJ"},"content":"            if (existingTask.equals(task)) {","lastModifiedDate":"2023-09-10"},{"lineNumber":107,"author":{"gitId":"DonovanJJ"},"content":"                return true;","lastModifiedDate":"2023-09-10"},{"lineNumber":108,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":109,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":110,"author":{"gitId":"DonovanJJ"},"content":"        return false;","lastModifiedDate":"2023-09-10"},{"lineNumber":111,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":112,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":113,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":114,"author":{"gitId":"DonovanJJ"},"content":"    * Returns the String representation of the selected Task choice that is shown when listed.","lastModifiedDate":"2023-08-27"},{"lineNumber":115,"author":{"gitId":"DonovanJJ"},"content":"    *","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"DonovanJJ"},"content":"    * @param choice int representing the choice of task to represent from tasklist (Note that choice starts from 1)","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"DonovanJJ"},"content":"    * @return String representation of the Task in the tasklist","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"DonovanJJ"},"content":"    */","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"DonovanJJ"},"content":"    public String taskToString(int choice) {","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"DonovanJJ"},"content":"        return this.arrList.get(choice - 1).toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":122}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the response and User Interface of the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"public class Ui {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    private final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"     * UI constructor.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    public Ui() {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the error message in an exception.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"     * @param e Exception which message should be printed out","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"    public String showExceptionError(Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(e.getMessage());","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"     * Print that the file path is empty.","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"     * */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"    public void emptyFilePath() {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"        System.out.println(\"File path is empty!\");","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"     * Prints out the exit message when user exits the program.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"    public String exit() {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"        return this.EXIT_MESSAGE;","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the String representation of tasks in the given tasklist with numbering for choice.","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"     * @param taskList Tasklist to be listed from","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"    public String listTask(TaskList taskList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"        ArrayList\u003cTask\u003e arrList \u003d taskList.getArrList();","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"        String message \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"        message \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        for (Task task : arrList) {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"            counter++;","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"            message +\u003d String.format(\"%d.%s\\n\", counter, task.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"        return message;","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the display when user marks a task.","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"     * @param tasks Tasklist containing the task to be marked.","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"     * @param choice int representing the user\u0027s choice of task to mark","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"    public String displayMarkTask(TaskList tasks, int choice) {","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"                + tasks.taskToString(choice);","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the display when user unmarks a task.","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"     * @param tasks Tasklist containing the task to be unmarked","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"     * @param choice int representing the user\u0027s choice of task to mark","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"    public String displayUnmarkTask(TaskList tasks, int choice) {","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"                + tasks.taskToString(choice);","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the display when a user deletes a task.","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"     * @param removedTask Task that is removed","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"     * @param tasks The list of tasks that the task was removed from","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"    public String displayDeleteTask(Task removedTask, TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"                        + \"  %s\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"                        + \"Now you have %d tasks in the list.\\n\",","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"DonovanJJ"},"content":"                removedTask.toString(), tasks.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the display when a user adds a task.","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"DonovanJJ"},"content":"     * @param addedTask Task that is added","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"DonovanJJ"},"content":"     * @param tasks The list of tasks that the task was removed from","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"DonovanJJ"},"content":"    public String displayAddTask(Task addedTask, TaskList tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"DonovanJJ"},"content":"                + \"  %s\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"DonovanJJ"},"content":"                + \"Now you have %d tasks in the list.\\n\", addedTask.toString(), tasks.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"DonovanJJ"},"content":"     * Prints the Task that is found using the Find function.","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"DonovanJJ"},"content":"     * @param arrList List of tasks to display","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"DonovanJJ"},"content":"    public String displayMatchingTask(ArrayList\u003cTask\u003e arrList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"DonovanJJ"},"content":"        int size \u003d arrList.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":116,"author":{"gitId":"DonovanJJ"},"content":"        String msg \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"DonovanJJ"},"content":"        if (size \u003e 0) {","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"DonovanJJ"},"content":"            msg +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"DonovanJJ"},"content":"            for (int i \u003d 1; i \u003c\u003d size; i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"DonovanJJ"},"content":"                msg +\u003d String.format(\"%d.%s\\n\", i, arrList.get(i - 1).toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":122,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":123,"author":{"gitId":"DonovanJJ"},"content":"        return msg;","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":126,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":127,"author":{"gitId":"DonovanJJ"},"content":"     * Returns a string to tell user that the duplicate task is rejected.","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"DonovanJJ"},"content":"     * @return String response message to duplicate task","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":131,"author":{"gitId":"DonovanJJ"},"content":"    public String displayDuplicateTask() {","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"DonovanJJ"},"content":"        String responseMessage \u003d \"This is a duplicate task!\\nTask was not added\";","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"DonovanJJ"},"content":"        return responseMessage;","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":135}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke.task;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the Deadline Task.","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"    private String deadline;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs a Deadline object.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     * @param name String representation for the name of the Deadline Object","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     * @param deadline String representaiton for the deadline of the Deadline Object","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"        super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"        this.deadline \u003d Deadline.processStringDeadline(deadline);","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs a Deadline Object.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"     * @param name String representation for the name of the Deadline Object","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"     * @param deadline String representaiton for the deadline of the Deadline Object","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"     * @param isComplete Boolean value for when the Deadline task is completed","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"    public Deadline(String name, String deadline, boolean isComplete) {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        this.deadline \u003d Deadline.processStringDeadline(deadline);","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"    private static String processStringDeadline(String deadline) {","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(deadline, formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"            DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"            deadline \u003d dateTime.format(outputFormatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"            return deadline;","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"        return deadline;","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if task and another object are equal.","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"     * @param task Task to be compared against","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"     * @return {@code true} if both tasks are equal","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"    public boolean equals(Object task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"        if (this \u003d\u003d task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"            return true;","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"            Deadline temp \u003d (Deadline) task;","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"            return temp.deadline.equals(this.deadline) \u0026\u0026 this.getName().equals(temp.getName());","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"     * Write the Deadline object to the storage file in its format.","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"     * @param fileWriter Filewriter that writes to a specific output file","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"    public void writeToFile(FileWriter fileWriter) {","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"        String marking \u003d super.isComplete() ? \"0\" : \"1\";","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(\"D\" + \"|\" + marking + \"|\" + super.getName() + \"|\" + this.deadline);","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.flush();","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"     * Retrieves the String representation of the Deadline object.","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"     * @return String","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(\"[D]%s %s (by: %s)\", super.getMarking(), super.name, this.deadline);","lastModifiedDate":"2023-08-20"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"DonovanJJ":93}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke.task;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the task.Events Task.","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"    private String from;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    private String to;","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs Event Object.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     * @param name String representation for the name of the event","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     * @param from String representation for when the event starts","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"     * @param to String representation for when the event ends","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    public Event(String name, String from, String to) throws Exception {","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"        super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"        if (!Event.isValidDates(from, to)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"            throw new Exception(\"Event start date should be before the end date!\");","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"        };","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs Event Object.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"     * @param name name String representation for the name of the event","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"     * @param from String representation for when the event starts","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"     * @param to String representation for when the event ends","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"     * @param isComplete Boolean value to show if Event has been marked as complete","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"    public Event(String name, String from, String to, boolean isComplete) throws Exception {","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"        if (!Event.isValidDates(from, to)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"            throw new Exception(\"Event start date should be before the end date!\");","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"        };","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"    private String getTo() {","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"        return this.to;","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"    private String getFrom() {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        return this.from;","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"     * Verifies if the dates, from is before to.","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"     * Dates not in \"d/M/yyyy HHmm\" format are accepted automatically","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"     * @param from String representation of the Event start datetime","lastModifiedDate":"2023-09-15"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"     * @param to String representation of the Event end datetime","lastModifiedDate":"2023-09-15"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"     * @return true if valid start and end datetime, otherwise false","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"    private static boolean isValidDates(String from, String to) {","lastModifiedDate":"2023-09-15"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-09-15"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"            LocalDateTime fromDate \u003d LocalDateTime.parse(from, formatter);","lastModifiedDate":"2023-09-15"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"            LocalDateTime toDate \u003d LocalDateTime.parse(to, formatter);","lastModifiedDate":"2023-09-15"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"            if (fromDate.isBefore(toDate)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"                return true;","lastModifiedDate":"2023-09-15"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"            // The dates are not of the date format","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"            return true;","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"        return false;","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if both objects are equal.","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"     * @param task Task object to be compared agianst","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"     * @return {@code true} if both objects are equal","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"DonovanJJ"},"content":"    public boolean equals(Object task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"DonovanJJ"},"content":"        if (this \u003d\u003d task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"DonovanJJ"},"content":"            return true;","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"DonovanJJ"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"DonovanJJ"},"content":"            Event eventTask \u003d (Event) task;","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"DonovanJJ"},"content":"            return this.to.equals(eventTask.getTo()) \u0026\u0026 this.getName().equals(eventTask.getName())","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"DonovanJJ"},"content":"                    \u0026\u0026 this.from.equals(eventTask.getFrom());","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"DonovanJJ"},"content":"        return false;","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"DonovanJJ"},"content":"     * Write the Event object to the storage file in its format.","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"DonovanJJ"},"content":"     * @param fileWriter Filewriter that writes to a specific output file","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"DonovanJJ"},"content":"    public void writeToFile(FileWriter fileWriter) {","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"DonovanJJ"},"content":"        String marking \u003d super.isComplete() ? \"0\" : \"1\";","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(\"E\" + \"|\" + marking + \"|\" + super.getName() + \"|\" + this.from + \"|\" + this.to);","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.flush();","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"DonovanJJ"},"content":"     * Retrieves the String representation of the task.Events object.","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"DonovanJJ"},"content":"     * @return String","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":121,"author":{"gitId":"DonovanJJ"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":122,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(\"[E]%s %s (from: %s to: %s)\", super.getMarking(), super.name, this.from, this.to);","lastModifiedDate":"2023-08-20"},{"lineNumber":123,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":124,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"DonovanJJ":124}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke.task;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":" * Encapsulates the abstract concept of a Task.","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"    protected boolean isComplete;","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"    protected String name;","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs the Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"     * @param name String representation for the name of the Task","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    protected Task(String name) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"     * Constructs the Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"     * @param name String represetnationf or the name of the Task","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"     * @param isComplete Boolean value representing if the Task has been marked as complete","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    public Task(String name, boolean isComplete) {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"        this.isComplete \u003d isComplete;","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"     * Check if task is complete.","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"     * @return boolean. True if completed","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"    public boolean isComplete() {","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"        return this.isComplete;","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"     * Marks the task to be completed.","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"        this.isComplete \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"     * Marks the task to be incomplete.","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"     * Obtains the String representation of whether task is completed.","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"     * @return String. Symbol of completion","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"    public String getMarking() {","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"        if (isComplete()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"            return \"[X]\";","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"        return \"[ ]\";","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"     * Returns the name of the Task Object.","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"     * @return String representation of its name","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"DonovanJJ"},"content":"    public String getName() {","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"DonovanJJ"},"content":"        return this.name;","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if given word String is a substring of its name.","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"DonovanJJ"},"content":"     * @param word String repreentingt the name substring they are looking for","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"DonovanJJ"},"content":"     * @return {@code true} if word is a substring of the name","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"DonovanJJ"},"content":"    public Boolean containsName(String word) {","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"DonovanJJ"},"content":"        return this.name.contains(word);","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"DonovanJJ"},"content":"    abstract public void writeToFile(FileWriter fileWriter);","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"DonovanJJ":87}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke.task;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":" * Emcapsulates a Todo task","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":" * @author Donovan Chan Jia Jun","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"    public Todo(String name) {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"        super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    public Todo(String name, boolean isComplete) {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"     * Checks if both objects are equal.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"     * @param o Object to be compared against","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"     * @return {@code true} if both objects are equal","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"            return true;","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"        if (o instanceof Todo) {","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"            Todo task \u003d (Todo) o;","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"            return super.getName().equals(task.getName());","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"        return false;","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"     * Write the Todo object to the storage file in its format.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"     * @param fileWriter Filewriter that writes to a specific output file","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"    public void writeToFile(FileWriter fileWriter) {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"        String marking \u003d super.isComplete() ? \"0\" : \"1\";","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(\"T\" + \"|\" + marking + \"|\" + super.getName());","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.write(System.lineSeparator());","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"            fileWriter.flush();","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"     * Retrieves the string representation of the Todo Object.","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"     *","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"     * @return String Represents the Todo","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"        return String.format(\"[T]%s %s\", super.getMarking(), super.name);","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"DonovanJJ":62}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"DonovanJJ":19}},{"path":"src/test/java/duke/DeadlinesTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"public class DeadlinesTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"    public void stringRepresentation_validDayDeadline_repTest() {","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"        Deadline task \u003d new Deadline(\"Testname1\", \"Tuesday\");","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"        assertEquals(\"[D][ ] Testname1 (by: Tuesday)\", task.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"    public void stringRepresentation_validDateDeadline_repTest() {","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"        Deadline task \u003d new Deadline(\"Testname1\", \"2/12/2019 1800\");","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"        assertEquals(\"[D][ ] Testname1 (by: 2 Dec 2019)\", task.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":22}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-15"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-15"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"public class EventTest {","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_fromBeforeToAfter_validDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-15"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"            new Event(\"event1\", \"12/4/2022 1500\", \"12/6/2022 1500\");","lastModifiedDate":"2023-09-15"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"        });","lastModifiedDate":"2023-09-15"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_fromBeforeToAfterSameDay_validDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"        assertDoesNotThrow(() -\u003e new Event(\"event1\", \"12/2/2022 1500\", \"12/2/2022 1600\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_fromAfterToBeforeSameDay_invalidDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"        assertThrows(Exception.class, () -\u003e new Event(\"event1\", \"12/2/2022 1600\", \"12/2/2022 1300\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_fromToEqual_invalidDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"        assertThrows(Exception.class, () -\u003e new Event(\"event1\", \"12/2/2022 1300\", \"12/2/2022 1300\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_fromAfterToBefore_invalidDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"        assertThrows(Exception.class, () -\u003e new Event(\"event1\", \"12/6/2022 1500\", \"12/2/2022 1500\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_nonDateFormat_validDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"        assertDoesNotThrow(() -\u003e new Event(\"event1\", \"Mon 12dec\", \"Tuesday 11nov\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"    public void verifyDatesInputEventCreation_singleNonDateFormat_validDate() {","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"        assertDoesNotThrow(() -\u003e new Event(\"event1\", \"Mon 12dec\", \"12/2/2022 1500\"));","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"DonovanJJ":48}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_invalidTodoArgument_exceptionThrown() {","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"todo\";","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"DonovanJJ"},"content":"            Parser.createTask(input);","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_validTodo_successfulToDoCreation() {","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"todo read book\";","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(new Todo(\"read book\"), Parser.createTask(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_validDeadline_successfulDeadlineCreation() {","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"deadline return book /by Sunday\";","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(new Deadline(\"return book\", \"Sunday\"), Parser.createTask(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_missingByClauseDeadline_invalidExceptionThrown() {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"deadline return book Sunday\";","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(new Deadline(\"return book Sunday\", \"Sunday\"), Parser.createTask(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"Invalid deadline task!\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_validDate_successfulDeadlineDatCreation() {","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"deadline return book /by 2/12/2019 1800\";","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(new Deadline(\"return book\", \"2 Dec 2019\"), Parser.createTask(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"Invalid deadline task!\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"DonovanJJ"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"DonovanJJ"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"DonovanJJ"},"content":"    public void createTask_validEvent_successfulEventCreation() {","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"DonovanJJ"},"content":"        String input \u003d \"event project meeting /from Mon 2pm /to 4pm\";","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"DonovanJJ"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(new Event(\"project meeting\", \"Mon 2pm\", \"4pm\"), Parser.createTask(input));","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"DonovanJJ"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"DonovanJJ"},"content":"            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"DonovanJJ"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"DonovanJJ"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"DonovanJJ"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"DonovanJJ":71}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DonovanJJ"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"DonovanJJ"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"DonovanJJ"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"DonovanJJ"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"DonovanJJ"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"DonovanJJ"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"DonovanJJ"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"DonovanJJ"},"content":"task","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"DonovanJJ"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"DonovanJJ"},"content":"delete 3","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"DonovanJJ"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"DonovanJJ"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"DonovanJJ"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"DonovanJJ":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"DonovanJJ"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DonovanJJ":1,"-":20}}]
