[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"    mainClassName \u003d \u0027seedu.duke.Main\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tiongjjyi":2,"-":42}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"T | 1 | eat","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"E | 1 | project meeting | Mon 2pm | 4pm","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"D | 1 | do homework | 2020-02-20","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"D | 0 | assignment | Mar 23 2022","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"T | 0 | play game","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"D | 0 | submission | Feb 23 2022","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"T | 0 | copy homework","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"D | 0 | sing | Mar 29 2022","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tiongjjyi":8}},{"path":"src/main/java/duke/taskmanagement/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"    protected String by;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"    public Deadline(String description, String by, boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"     * Return the status icon of whether the task is done or nor","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"     * @return A string that represent of status of the task, [X] if done,","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"     * [ ] if not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the indication of status of the task by using","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"     * \"1\" and \"0\" to store it in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"     * @return \"1\" if the task is done and \"0\" if the task is not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"    public String convertIsDone() {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"        return super.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the string with the correct format to store in duke.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"     * @return String representation of the task to store in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"    public String saveToFileString() {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"        return \"D | \" +  convertIsDone() + \" | \" + description + \" | \" + this.by+\"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"tiongjjyi":37}},{"path":"src/main/java/duke/taskmanagement/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    String PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"    private Storage storage \u003d new Storage(PATH);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"    public void run() {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"        ui.greet();","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"        tasks \u003d new TaskList(this.ui, storage.loadData(), storage);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"        String cmd \u003d this.ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"        Parser parser \u003d new Parser(this.ui, this.tasks);","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"        parser.readCmd(this.tasks, cmd);","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"        new Duke().run();","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"tiongjjyi":25,"-":4}},{"path":"src/main/java/duke/taskmanagement/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"public class DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"    protected String typeOfTask;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"     * Create new duke exception to handle","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"     * the exception when running Duke.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"     * @param str indicate the type of task when handling this exception","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    public DukeException(String str){","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"        this.typeOfTask \u003d str;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"     * Return the String that shows the error","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"     * message, which is when empty description","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"     * is entered.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"     * @return the intended error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"        return \" ☹ OOPS!!! The description of a \" + typeOfTask + \" cannot be empty.\";","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"     * Return the String that shows the error","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"     * message, a more general method to","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"     * generate error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"     * @param str","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"     * @return the error messsage.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"    public String errorMessage(String str) {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"        return \" ☹ OOPS!!!\" + str;","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"     * Return the String that indicates","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"     * an invalid input.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"     * @return the error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"    public String nothing(){","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"tiongjjyi":45}},{"path":"src/main/java/duke/taskmanagement/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"    protected String from;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"    protected String till;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"    public Event(String description, String from, String till, boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"        this.till \u003d till;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"     * Return the status icon of whether the task is done or nor","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"     * @return A string that represent of status of the task, [X] if done,","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"     * [ ] if not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + till + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the indication of status of the task by using","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"     * \"1\" and \"0\" to store it in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"     * @return \"1\" if the task is done and \"0\" if the task is not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"    public String convertIsDone() {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"        return super.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the string with the correct format to store in duke.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"     * @return String representation of the task to store in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"    public String saveToFileString() {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"        return \"E | \" +  convertIsDone() + \" | \" + description + \" | \" + this.from + \" | \" + this.till +\"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"tiongjjyi":39}},{"path":"src/main/java/duke/taskmanagement/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"public class Parser {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"    public Ui ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"    public TaskList ls;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor for Parser class.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"     * @param ui The ui object.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"     * @param ls The TaskList object.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    public Parser(Ui ui, TaskList ls){","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"        this.ls \u003d ls;","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"     * To read the command from user input and","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"     * parse it to Ui object to print statement.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"     * @param ls The tasklist object to handle the tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"     * @param cmd The string input by user.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"    public void readCmd(TaskList ls, String cmd) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"        while (true) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"            if (cmd.equals(\"bye\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"                ui.closeScanner();","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"                ui.bye();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"                System.exit(0);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.equals(\"list\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"                int size \u003d ls.getListSize();","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"                ui.printList(size, ls.getList());","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"unmark\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"                int index \u003d Integer.parseInt(cmd.substring(7, 8));","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"                ls.unmark(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"mark\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"                int index \u003d Integer.parseInt(cmd.substring(5, 6));","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"                ls.mark(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"delete\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"                int index \u003d Integer.parseInt(cmd.substring(7, 8));","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"tiongjjyi"},"content":"                ls.deleteTask(index);","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"deadline\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d cmd.split(\"/by\");","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"tiongjjyi"},"content":"                if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"tiongjjyi"},"content":"                    String description \u003d parts[0].replace(\"deadline\", \"\").trim(); // Remove \"deadline\"","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"tiongjjyi"},"content":"                    String deadline \u003d parts[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"tiongjjyi"},"content":"                    LocalDate d1 \u003d LocalDate.parse(deadline);","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"tiongjjyi"},"content":"                    String formattedDate \u003d d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"tiongjjyi"},"content":"                    Task task \u003d new Deadline(description, formattedDate, false);","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tiongjjyi"},"content":"                    ls.addDeadlineTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"tiongjjyi"},"content":"                } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"tiongjjyi"},"content":"                    DukeException exp \u003d new DukeException(\"deadline\");","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"tiongjjyi"},"content":"                    System.out.println(exp.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"todo\")){","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d cmd.split(\" \", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"tiongjjyi"},"content":"                if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"tiongjjyi"},"content":"                    String desc \u003d parts[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"tiongjjyi"},"content":"                    Task task \u003d new ToDo(desc, false);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tiongjjyi"},"content":"                    ls.addToDoTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"tiongjjyi"},"content":"                } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"tiongjjyi"},"content":"                    DukeException exp \u003d new DukeException(\"todo\");","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"tiongjjyi"},"content":"                    System.out.println(exp.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"event\")) {","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d cmd.split(\"/from\");","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"tiongjjyi"},"content":"                if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"tiongjjyi"},"content":"                    String desc \u003d parts[0].replace(\"event\", \"\").trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"tiongjjyi"},"content":"                    String rest \u003d parts[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"tiongjjyi"},"content":"                    String[] restParts \u003d rest.split(\"/to\");","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"tiongjjyi"},"content":"                    String from \u003d restParts[0].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"tiongjjyi"},"content":"                    String till \u003d restParts[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"tiongjjyi"},"content":"                    Task task \u003d new Event(desc, from, till, false);","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tiongjjyi"},"content":"                    ls.addEventTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"tiongjjyi"},"content":"                } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"tiongjjyi"},"content":"                    DukeException exp \u003d new DukeException(\"event\");","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"tiongjjyi"},"content":"                    System.out.println(exp.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"tiongjjyi"},"content":"            } else if (cmd.contains(\"find\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d cmd.split(\" \");","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"tiongjjyi"},"content":"                String keyword \u003d parts[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"tiongjjyi"},"content":"                ui.printFilterList(ls.find(keyword));","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"tiongjjyi"},"content":"            } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"tiongjjyi"},"content":"                DukeException exp \u003d new DukeException(\"\");","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"tiongjjyi"},"content":"                System.out.println(exp.nothing());","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"tiongjjyi"},"content":"                cmd \u003d ui.readInCmd();","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"tiongjjyi":101}},{"path":"src/main/java/duke/taskmanagement/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    private String filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"    private List\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"     * @param filePath The path where you wish to store the text.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"     * To write string into file","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"     * @param filePath The path of the file where you wish to write into.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"     * @param textToAdd The String you wish to write into the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"     * @throws IOException If the path is not available.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"    public void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"        fw.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"     * To handle the exception when using writeToFile method.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"     * @param filePath The path of the file where you wish to write into.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"     * @param textToAdd The String you wish to write into the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"    public void writeToFile_exceptionThrown(String filePath, String textToAdd) {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"            writeToFile(filePath, textToAdd);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"tiongjjyi"},"content":"     * To load the text line by line from the file","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"tiongjjyi"},"content":"     * and store it into a List\u003cTask\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tiongjjyi"},"content":"     * @return The List\u003cTask\u003e which each element is loaded from the text file.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tiongjjyi"},"content":"    public List\u003cTask\u003e loadData(){","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tiongjjyi"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tiongjjyi"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tiongjjyi"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tiongjjyi"},"content":"            while ((line\u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"tiongjjyi"},"content":"                String type \u003d parts[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tiongjjyi"},"content":"                boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"tiongjjyi"},"content":"                //System.out.println(isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"tiongjjyi"},"content":"                String description \u003d parts[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"tiongjjyi"},"content":"                Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"tiongjjyi"},"content":"                if (type.equals(\"T\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tiongjjyi"},"content":"                    task \u003d new ToDo(description, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tiongjjyi"},"content":"                } else if (type.equals(\"E\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"tiongjjyi"},"content":"                    String from \u003d parts[3];","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tiongjjyi"},"content":"                    String till \u003d parts[4];","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tiongjjyi"},"content":"                    task \u003d new Event(description, from, till, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"tiongjjyi"},"content":"                } else if (type.equals(\"D\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"tiongjjyi"},"content":"                    String deadline \u003d parts[3];","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"tiongjjyi"},"content":"                    task \u003d new Deadline(description, deadline, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"tiongjjyi"},"content":"                } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"tiongjjyi"},"content":"                    continue;","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"tiongjjyi"},"content":"                ls.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"tiongjjyi"},"content":"            reader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tiongjjyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"tiongjjyi"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"tiongjjyi"},"content":"        return ls;","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"tiongjjyi"},"content":"     * To delete a certain line in the text file","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"tiongjjyi"},"content":"     * @param lineIndexToDelete The index of the line (task) you","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tiongjjyi"},"content":"     *                          want to delete.","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"tiongjjyi"},"content":"    public void deleteLine(int lineIndexToDelete) {","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tiongjjyi"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"tiongjjyi"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"tiongjjyi"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"tiongjjyi"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"tiongjjyi"},"content":"            while((line\u003dreader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"tiongjjyi"},"content":"                lines.add(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"tiongjjyi"},"content":"            reader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"tiongjjyi"},"content":"            if (lineIndexToDelete \u003e\u003d 0 \u0026\u0026 lineIndexToDelete-1 \u003c lines.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"tiongjjyi"},"content":"                lines.remove(lineIndexToDelete-1);","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"tiongjjyi"},"content":"                BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"tiongjjyi"},"content":"                for(String updatedLine : lines) {","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"tiongjjyi"},"content":"                    writer.write(updatedLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"tiongjjyi"},"content":"                    writer.newLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tiongjjyi"},"content":"                writer.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"tiongjjyi"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"tiongjjyi"},"content":"                System.out.println(\"invalid index\");","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"tiongjjyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"tiongjjyi"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"tiongjjyi"},"content":"     * To modify the text file as the user modify the","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"tiongjjyi"},"content":"     * status of the task to \u0027done\u0027.","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"tiongjjyi"},"content":"     * @param index The index of task you wish to","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"tiongjjyi"},"content":"     *              change the status to done.","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"tiongjjyi"},"content":"    public void changeToDone(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"tiongjjyi"},"content":"                List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"tiongjjyi"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"tiongjjyi"},"content":"                    BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"tiongjjyi"},"content":"                    String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"tiongjjyi"},"content":"                    while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"tiongjjyi"},"content":"                        lines.add(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"tiongjjyi"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"tiongjjyi"},"content":"                    reader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"tiongjjyi"},"content":"                    if (index \u003e\u003d 0 \u0026\u0026 index-1 \u003c lines.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"tiongjjyi"},"content":"                        String lineToModify \u003d lines.get(index-1);","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"tiongjjyi"},"content":"                        String[] parts \u003d lineToModify.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"tiongjjyi"},"content":"                        if (parts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"tiongjjyi"},"content":"                            parts[1] \u003d \"1\"; // Change \"0\" to \"1\" for isDone status","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"tiongjjyi"},"content":"                            lineToModify \u003d String.join(\" | \", parts);","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"tiongjjyi"},"content":"                            lines.set(index-1, lineToModify);","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"tiongjjyi"},"content":"                            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"tiongjjyi"},"content":"                            for (String updatedLine : lines) {","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"tiongjjyi"},"content":"                                writer.write(updatedLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"tiongjjyi"},"content":"                                writer.newLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"tiongjjyi"},"content":"                            }","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"tiongjjyi"},"content":"                            writer.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"tiongjjyi"},"content":"                        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"tiongjjyi"},"content":"                            System.out.println(\"Invalid line format.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"tiongjjyi"},"content":"                        }","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"tiongjjyi"},"content":"                    } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"tiongjjyi"},"content":"                        System.out.println(\"Invalid line index.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"tiongjjyi"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"tiongjjyi"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"tiongjjyi"},"content":"                    e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"tiongjjyi"},"content":"     * To modify the text file as the user modify the","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"tiongjjyi"},"content":"     * status of the task to \u0027undone\u0027.","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"tiongjjyi"},"content":"     * @param index The index of task you wish to","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"tiongjjyi"},"content":"     *              change the status to undone.","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"tiongjjyi"},"content":"    public void changeToUnDone(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"tiongjjyi"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"tiongjjyi"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"tiongjjyi"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"tiongjjyi"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"tiongjjyi"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"tiongjjyi"},"content":"                lines.add(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"tiongjjyi"},"content":"            reader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"tiongjjyi"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index-1 \u003c lines.size()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"tiongjjyi"},"content":"                String lineToModify \u003d lines.get(index-1);","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"tiongjjyi"},"content":"                String[] parts \u003d lineToModify.split(\" \\\\| \");","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"tiongjjyi"},"content":"                if (parts.length \u003e\u003d 2) {","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"tiongjjyi"},"content":"                    parts[1] \u003d \"0\"; // Change \"0\" to \"1\" for isDone status","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"tiongjjyi"},"content":"                    lineToModify \u003d String.join(\" | \", parts);","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"tiongjjyi"},"content":"                    lines.set(index-1, lineToModify);","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"tiongjjyi"},"content":"                    BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"tiongjjyi"},"content":"                    for (String updatedLine : lines) {","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"tiongjjyi"},"content":"                        writer.write(updatedLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"tiongjjyi"},"content":"                        writer.newLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"tiongjjyi"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"tiongjjyi"},"content":"                    writer.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"tiongjjyi"},"content":"                } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"tiongjjyi"},"content":"                    System.out.println(\"Invalid line format.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"tiongjjyi"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"tiongjjyi"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"tiongjjyi"},"content":"                System.out.println(\"Invalid line index.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"tiongjjyi"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"tiongjjyi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":204,"author":{"gitId":"tiongjjyi"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":206,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"tiongjjyi":207}},{"path":"src/main/java/duke/taskmanagement/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor for Task class","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"     * @param isDone Indication whether this task is done,","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"     *               true if done and vice versa.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    public Task(String description, boolean isDone){","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"     * Return the status icon of whether the task is done or nor","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"     * @return A string that represent of status of the task, [X] if done,","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"     * [ ] if not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"     * To mark the status as the task as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"    public void markAsDone(){","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"     * To mark the status of the task as not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"     * Return the String of the task as shown in list","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"     * @return String that consists of status of task and its description.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"tiongjjyi"},"content":"        return getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"tiongjjyi"},"content":"     * Return the String of the task as shown in duke.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tiongjjyi"},"content":"     * @return String that consists of status of task and its description.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tiongjjyi"},"content":"    public String saveToFileString() {","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"tiongjjyi"},"content":"        return getStatusIcon() + \" | \" + this.isDone + \" | \" + this.description;","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tiongjjyi"},"content":"    public boolean contains(String str) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"tiongjjyi"},"content":"        return this.description.contains(str);","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"tiongjjyi":60}},{"path":"src/main/java/duke/taskmanagement/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import java.util.List;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"public class TaskList {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"    final String PATH \u003d \"/Users/jjtiong/Desktop/ip/data/duke.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"    private List\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor for TaskList class","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"     * @param ui The Ui object","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"     * @param ls The list of task","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"     * @param storage The Storage object","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    public TaskList(Ui ui, List\u003cTask\u003e ls, Storage storage) {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"        this.ls \u003d ls;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"     * To delete a certain task in both the","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"     * list and text file when the user asks to","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"     * @param index The index of task to delete in both","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"     *              text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"        Task task \u003d ls.get(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"        ls.remove(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"        int size \u003d ls.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"        ui.printRemoveTask(task.toString(), size);","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"        storage.deleteLine(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"     * To add a todo task in both the","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"     * list and text file when the user asks to","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"     * @param task The todo task to add in both","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"     *              text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"    public void addToDoTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"        ls.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"tiongjjyi"},"content":"        int size \u003d ls.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"tiongjjyi"},"content":"        ui.printAddTask(task.toString(), size);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"tiongjjyi"},"content":"        storage.writeToFile_exceptionThrown(PATH, task.saveToFileString());","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tiongjjyi"},"content":"     * To add a deadline task in both the","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tiongjjyi"},"content":"     * list and text file when the user asks to","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tiongjjyi"},"content":"     * @param task The deadline task to add in both","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tiongjjyi"},"content":"     *              text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"tiongjjyi"},"content":"    public void addDeadlineTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"tiongjjyi"},"content":"        ls.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"tiongjjyi"},"content":"        int size \u003d ls.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"tiongjjyi"},"content":"        ui.printAddTask(task.toString(), size);","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"tiongjjyi"},"content":"        storage.writeToFile_exceptionThrown(PATH, task.saveToFileString());","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"tiongjjyi"},"content":"     * To add an event task in both the","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"tiongjjyi"},"content":"     * list and text file when the user asks to","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"tiongjjyi"},"content":"     * @param task The event task to add in both","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"tiongjjyi"},"content":"     *              text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tiongjjyi"},"content":"    public void addEventTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"tiongjjyi"},"content":"        ls.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"tiongjjyi"},"content":"        int size \u003d ls.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"tiongjjyi"},"content":"        ui.printAddTask(task.toString(), size);","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"tiongjjyi"},"content":"        storage.writeToFile_exceptionThrown(PATH, task.saveToFileString());","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"tiongjjyi"},"content":"     * To mark a task to undone in","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"tiongjjyi"},"content":"     * both text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tiongjjyi"},"content":"     * @param index The index of task to mark as undone.","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tiongjjyi"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"tiongjjyi"},"content":"        Task task \u003d ls.get(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"tiongjjyi"},"content":"        ls.remove(index - 1);","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"tiongjjyi"},"content":"        task.unmark();","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"tiongjjyi"},"content":"        ls.add(index-1, task);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"tiongjjyi"},"content":"        ui.printMarkUndone(task.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"tiongjjyi"},"content":"        storage.changeToUnDone(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tiongjjyi"},"content":"     * To mark a task to done in","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"tiongjjyi"},"content":"     * both text file and list.","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"tiongjjyi"},"content":"     * @param index The index of task to mark as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"tiongjjyi"},"content":"    public void mark(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"tiongjjyi"},"content":"        Task task \u003d ls.get(index-1);","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tiongjjyi"},"content":"        ls.remove(index-1);","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"tiongjjyi"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"tiongjjyi"},"content":"        ls.add(index-1, task);","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"tiongjjyi"},"content":"        ui.printMarkDone(task.toString());","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"tiongjjyi"},"content":"        storage.changeToDone(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"tiongjjyi"},"content":"    public List\u003cTask\u003e find(String str) {","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"tiongjjyi"},"content":"        List\u003cTask\u003e tmpList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"tiongjjyi"},"content":"        tmpList \u003d ls;","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"tiongjjyi"},"content":"        tmpList \u003d tmpList.stream().filter(string -\u003e string.contains(str)).collect(Collectors.toList());","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"tiongjjyi"},"content":"        return tmpList;","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the list of task.","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"tiongjjyi"},"content":"     * @return A list of task.","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"tiongjjyi"},"content":"    public List\u003cTask\u003e getList() {","lastModifiedDate":"2023-08-27"},{"lineNumber":117,"author":{"gitId":"tiongjjyi"},"content":"        return this.ls;","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":119,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":120,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the size of the list of task.","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"tiongjjyi"},"content":"     * @return The size of the list of task.","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"tiongjjyi"},"content":"    public int getListSize() {","lastModifiedDate":"2023-08-27"},{"lineNumber":125,"author":{"gitId":"tiongjjyi"},"content":"        return this.ls.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"tiongjjyi":128}},{"path":"src/main/java/duke/taskmanagement/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor to create a ToDo task object","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"     * @param description The description of this todo task","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"     * @param isDone Indication of the status of this todo task,","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"     *               true if done and vice versa.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the status icon of whether the task is done or nor","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"     * @return A string that represent of status of the task, [X] if done,","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"     * [ ] if not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"    public String toString(){","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the indication of status of the task by using","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"     * \"1\" and \"0\" to store it in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"     * @return \"1\" if the task is done and \"0\" if the task is not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"    public String convertIsDone() {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"        return super.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the string with the correct format to store in duke.txt","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"     * @return String representation of the task to store in duke.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"    public String saveToFileString() {","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"        return \"T | \" +  convertIsDone() + \" | \" + description + \"\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"tiongjjyi":42}},{"path":"src/main/java/duke/taskmanagement/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"import java.util.List;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"public class Ui {","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"    public Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"     * Constructor to create a Ui object.","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"    public Ui() {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"     * Returns the String that the scanner read in from user inputs.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"     * @return User input as string.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    public String readInCmd() {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"            return sc.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"tiongjjyi"},"content":"     * To print the greeting to user when running this program.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"tiongjjyi"},"content":"    public void greet(){","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Hello! I\u0027m JJ\\n\" +","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"tiongjjyi"},"content":"                \"What can I do for you?\\n\" + \"\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"tiongjjyi"},"content":"     * To say goodbye to the user when the program ends.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"tiongjjyi"},"content":"    public void bye(){","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"tiongjjyi"},"content":"     * To print every element in the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"tiongjjyi"},"content":"     * @param size The size of the list you wish to print.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"tiongjjyi"},"content":"     * @param ls The List\u003cTask\u003e you wish to print.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"tiongjjyi"},"content":"    public void printList(int size, List\u003cTask\u003e ls){","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Here are the tasks in your list: \");","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"tiongjjyi"},"content":"        for(int i \u003d 0; i \u003c size;i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"tiongjjyi"},"content":"            int j \u003d i + 1;","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"tiongjjyi"},"content":"            System.out.println(j + \".\" + ls.get(i));","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"tiongjjyi"},"content":"     * Print a statement to inform the user that","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"tiongjjyi"},"content":"     * the task has been marked as undone.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"tiongjjyi"},"content":"     * @param task The line of task to be marked as undone.","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"tiongjjyi"},"content":"    public void printMarkUndone(String task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"tiongjjyi"},"content":"     * Print a statement to inform the user that","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"tiongjjyi"},"content":"     * the task has been marked as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"tiongjjyi"},"content":"     * @param str The line of task to be marked as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"tiongjjyi"},"content":"    public void printMarkDone(String str) {","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + str);","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"tiongjjyi"},"content":"     * Print a statement to inform the user that","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"tiongjjyi"},"content":"     * the task has been removed and the number of tasks left.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"tiongjjyi"},"content":"     * @param str The line of task to be removed.","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"tiongjjyi"},"content":"     * @param size The size of the list, which is the number of tasks left.","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"tiongjjyi"},"content":"    public void printRemoveTask(String str, int size) {","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + str + \"\\n\" + \"Now you have \" + size + \" tasks in the list.\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"tiongjjyi"},"content":"     * Print a statement to inform the user that","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"tiongjjyi"},"content":"     * the task has been added and the number of tasks left.","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"tiongjjyi"},"content":"     * @param str The line of task to be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"tiongjjyi"},"content":"     * @param size The size of the list, which is the number of tasks left.","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"tiongjjyi"},"content":"    public void printAddTask(String str, int size) {","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + str + \"\\n\" + \"Now you have \" + size + \" tasks in the list.\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"tiongjjyi"},"content":"    public void printFilterList(List\u003cTask\u003e filteredList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"tiongjjyi"},"content":"        System.out.println(\"Here are the matching tasks in your list: \");","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"tiongjjyi"},"content":"        for(int i \u003d 0; i \u003c filteredList.size() ;i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"tiongjjyi"},"content":"            int j \u003d i + 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"tiongjjyi"},"content":"            System.out.println(j + \".\" + filteredList.get(i));","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"tiongjjyi"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"tiongjjyi"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"tiongjjyi"},"content":"     * To close the scanner.","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"tiongjjyi"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"tiongjjyi"},"content":"    public void closeScanner() {","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"tiongjjyi"},"content":"        sc.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"tiongjjyi":102}},{"path":"src/test/java/duke/taskmanagement/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"    public void todoTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"        Task todo \u003d new Deadline(\"eat\", \"2022-03-23\",  false);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"        assertEquals(todo.toString(),\"[D][ ] eat (by: 2022-03-23)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    public void todoTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"        Deadline todo \u003d new Deadline(\"test\", \"2022-03-23\",false);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"        assertEquals(todo.convertIsDone(), \"0\");","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tiongjjyi":19}},{"path":"src/test/java/duke/taskmanagement/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"package duke.taskmanagement;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"public class ToDoTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"tiongjjyi"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"tiongjjyi"},"content":"    public void todoTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"tiongjjyi"},"content":"        Task todo \u003d new ToDo(\"eat\", false);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"tiongjjyi"},"content":"        assertEquals(todo.toString(),\"[T][ ] eat\");","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"tiongjjyi"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"tiongjjyi"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"tiongjjyi"},"content":"    public void todoTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"tiongjjyi"},"content":"        ToDo todo \u003d new ToDo(\"test\", false);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"tiongjjyi"},"content":"        assertEquals(todo.convertIsDone(), \"0\");","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"tiongjjyi"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"tiongjjyi"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"tiongjjyi":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tiongjjyi"},"content":"deadline return book /by 2022-02-23","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"tiongjjyi"},"content":"todo borrow book","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"tiongjjyi"},"content":"list","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"tiongjjyi"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"tiongjjyi"},"content":"deadline do homework /by 2022-03-23","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"tiongjjyi"},"content":"todo","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"tiongjjyi"},"content":"bye","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"tiongjjyi":7}}]
