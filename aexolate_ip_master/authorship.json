[{"path":"src/main/java/CarbonBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"import java.util.List;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"public class CarbonBot {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"    private static final String saveFilePath \u003d \"./data/tasks.txt\";","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"        List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"            taskList \u003d deserializeTasks();","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"        } catch (DukeException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"aexolate"},"content":"            System.out.println(\"Something is wrong with your save file :/\");","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"aexolate"},"content":"            return;","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"aexolate"},"content":"        // Greeting Message","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"aexolate"},"content":"        printDivider();","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"aexolate"},"content":"        System.out.println(\"Hello! I\u0027m CarbonBot\");","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"aexolate"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"aexolate"},"content":"        printDivider();","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"aexolate"},"content":"        // Keep fetching for user\u0027s input","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"aexolate"},"content":"        while(true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"aexolate"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"aexolate"},"content":"            // Ignore if the input was empty","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"aexolate"},"content":"            if (input.isBlank()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"aexolate"},"content":"                continue;","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"aexolate"},"content":"            // Fetches the first word as the command string","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"aexolate"},"content":"            String cmd \u003d input.split(\" \")[0];","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"aexolate"},"content":"            int taskIdx;","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"aexolate"},"content":"            String desc;","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"aexolate"},"content":"            printDivider();","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"aexolate"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"aexolate"},"content":"                switch (cmd) {","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"aexolate"},"content":"                    case \"bye\":","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"aexolate"},"content":"                        // bye: Exits the program after bidding farewell!","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"aexolate"},"content":"                        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"aexolate"},"content":"                        printDivider();","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"aexolate"},"content":"                        sc.close();","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"aexolate"},"content":"                        return;","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"aexolate"},"content":"                    case \"list\":","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"aexolate"},"content":"                        // list: Prints out the list of tasks (and their status)","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"aexolate"},"content":"                        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"aexolate"},"content":"                        printList(taskList);","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"aexolate"},"content":"                    case \"todo\":","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"aexolate"},"content":"                        // todo: Adds a TODO Task to the list","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"aexolate"},"content":"                        // Get the description from all the characters after \"todo\"","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"aexolate"},"content":"                        desc \u003d input.substring(\"todo\".length()).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"aexolate"},"content":"                        // Validates if the description is empty (or only whitespaces)","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"aexolate"},"content":"                        if (desc.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"aexolate"},"content":"                        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"aexolate"},"content":"                            addTask(taskList, new Todo(desc));","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"aexolate"},"content":"                    case \"deadline\":","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"aexolate"},"content":"                        // deadline: Adds a deadline Task to the list","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"aexolate"},"content":"                        int indexOfBy \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"aexolate"},"content":"                        // Validates the existence of /by syntax","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"aexolate"},"content":"                        if (indexOfBy \u003d\u003d -1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! Please specify the deadline using /by.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"aexolate"},"content":"                        desc \u003d input.substring(\"deadline\".length(), indexOfBy).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"aexolate"},"content":"                        String by \u003d input.substring(indexOfBy + \"/by\".length()).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"aexolate"},"content":"                        if (desc.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"aexolate"},"content":"                        if (by.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027by\u0027 of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"aexolate"},"content":"                        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime byDt \u003d parseDateTimeString(by);","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"aexolate"},"content":"                            addTask(taskList, new Deadline(desc, byDt));","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"aexolate"},"content":"                        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027by\u0027 datetime was not in a valid format.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"aexolate"},"content":"                    case \"event\":","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"aexolate"},"content":"                        // event: Adds a event Task to the list","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"aexolate"},"content":"                        int indexOfFrom \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"aexolate"},"content":"                        int indexOfTo \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"aexolate"},"content":"                        if (indexOfFrom \u003d\u003d -1 || indexOfTo \u003d\u003d -1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! Please specify the start and end of the\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"aexolate"},"content":"                                    \" event using /from and /to.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"aexolate"},"content":"                        if (indexOfFrom \u003e indexOfTo) {","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! Please specify the /from before the /to!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"aexolate"},"content":"                        desc \u003d input.substring(\"event \".length(), indexOfFrom).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"aexolate"},"content":"                        String from \u003d input.substring(indexOfFrom + \"/from\".length(), indexOfTo).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":114,"author":{"gitId":"aexolate"},"content":"                        String to \u003d input.substring(indexOfTo + \"/to\".length()).trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":115,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"aexolate"},"content":"                        if (desc.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"aexolate"},"content":"                        if (from.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027from\u0027 of an event cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"aexolate"},"content":"                        if (to.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027to\u0027 of an event cannot be empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"aexolate"},"content":"                        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":127,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime fromDt \u003d parseDateTimeString(from);","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime toDt \u003d parseDateTimeString(to);","lastModifiedDate":"2023-08-26"},{"lineNumber":129,"author":{"gitId":"aexolate"},"content":"                            addTask(taskList, new Event(desc, fromDt, toDt));","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"aexolate"},"content":"                        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The given datetime was not in a valid format.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-21"},{"lineNumber":134,"author":{"gitId":"aexolate"},"content":"                    case \"delete\":","lastModifiedDate":"2023-08-22"},{"lineNumber":135,"author":{"gitId":"aexolate"},"content":"                        deleteTask(taskList, input);","lastModifiedDate":"2023-08-22"},{"lineNumber":136,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":137,"author":{"gitId":"aexolate"},"content":"                    case \"mark\":","lastModifiedDate":"2023-08-21"},{"lineNumber":138,"author":{"gitId":"aexolate"},"content":"                        updateTaskStatus(taskList, input, true);","lastModifiedDate":"2023-08-21"},{"lineNumber":139,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-21"},{"lineNumber":140,"author":{"gitId":"aexolate"},"content":"                    case \"unmark\":","lastModifiedDate":"2023-08-21"},{"lineNumber":141,"author":{"gitId":"aexolate"},"content":"                        updateTaskStatus(taskList, input, false);","lastModifiedDate":"2023-08-21"},{"lineNumber":142,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-21"},{"lineNumber":143,"author":{"gitId":"aexolate"},"content":"                    default:","lastModifiedDate":"2023-08-21"},{"lineNumber":144,"author":{"gitId":"aexolate"},"content":"                        // Unrecognised Command","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"aexolate"},"content":"                        throw new DukeException(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":146,"author":{"gitId":"aexolate"},"content":"                                \"\\nMy supported commands are: list, mark, unmark, todo, deadline, event, bye.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"aexolate"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"aexolate"},"content":"            } catch (DukeException ex) {","lastModifiedDate":"2023-08-22"},{"lineNumber":149,"author":{"gitId":"aexolate"},"content":"                // Prints the error message if a DukeException is encountered","lastModifiedDate":"2023-08-23"},{"lineNumber":150,"author":{"gitId":"aexolate"},"content":"                System.out.println(ex.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":152,"author":{"gitId":"aexolate"},"content":"            printDivider();","lastModifiedDate":"2023-08-23"},{"lineNumber":153,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":154,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":155,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":156,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":157,"author":{"gitId":"aexolate"},"content":"    private static void printDivider() {","lastModifiedDate":"2023-08-23"},{"lineNumber":158,"author":{"gitId":"aexolate"},"content":"        String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-23"},{"lineNumber":159,"author":{"gitId":"aexolate"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-23"},{"lineNumber":160,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":161,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":162,"author":{"gitId":"aexolate"},"content":"    private static LocalDateTime parseDateTimeString(String dateTime) throws DateTimeParseException {","lastModifiedDate":"2023-08-26"},{"lineNumber":163,"author":{"gitId":"aexolate"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-26"},{"lineNumber":164,"author":{"gitId":"aexolate"},"content":"        return LocalDateTime.parse(dateTime, formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":165,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":166,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":167,"author":{"gitId":"aexolate"},"content":"    private static void deleteTask(List\u003cTask\u003e tasks, String input) throws DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":168,"author":{"gitId":"aexolate"},"content":"        // Validates if the user has specified the index to be updated","lastModifiedDate":"2023-08-22"},{"lineNumber":169,"author":{"gitId":"aexolate"},"content":"        if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":170,"author":{"gitId":"aexolate"},"content":"            throw new DukeException(\"No index was provided. Please enter the task index to be updated.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":171,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":172,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":173,"author":{"gitId":"aexolate"},"content":"        // -1, due to 0-indexing of the List","lastModifiedDate":"2023-08-22"},{"lineNumber":174,"author":{"gitId":"aexolate"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":175,"author":{"gitId":"aexolate"},"content":"            int taskIdx \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"aexolate"},"content":"            if (taskIdx \u003c 0 || taskIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":177,"author":{"gitId":"aexolate"},"content":"                throw new DukeException(\"Index provided was out-of-bounds. Use the index number\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"aexolate"},"content":"                        \" labelled for the task in the command \u0027list\u0027!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":179,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":180,"author":{"gitId":"aexolate"},"content":"            Task task \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"aexolate"},"content":"            tasks.remove(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":182,"author":{"gitId":"aexolate"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":183,"author":{"gitId":"aexolate"},"content":"            System.out.println(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":184,"author":{"gitId":"aexolate"},"content":"            System.out.println(getListSize(tasks));","lastModifiedDate":"2023-08-22"},{"lineNumber":185,"author":{"gitId":"aexolate"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2023-08-22"},{"lineNumber":186,"author":{"gitId":"aexolate"},"content":"            throw new DukeException(\"Please provide a valid integer for the index.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":187,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":188,"author":{"gitId":"aexolate"},"content":"        saveTasks(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":189,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":190,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":191,"author":{"gitId":"aexolate"},"content":"    // Adds a todo task to the list","lastModifiedDate":"2023-08-22"},{"lineNumber":192,"author":{"gitId":"aexolate"},"content":"    private static void addTask(List\u003cTask\u003e tasks, Task task) {","lastModifiedDate":"2023-08-22"},{"lineNumber":193,"author":{"gitId":"aexolate"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":194,"author":{"gitId":"aexolate"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":195,"author":{"gitId":"aexolate"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":196,"author":{"gitId":"aexolate"},"content":"        System.out.println(getListSize(tasks));","lastModifiedDate":"2023-08-22"},{"lineNumber":197,"author":{"gitId":"aexolate"},"content":"        saveTasks(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":198,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":199,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":200,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":201,"author":{"gitId":"aexolate"},"content":"    private static void saveTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":202,"author":{"gitId":"aexolate"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":203,"author":{"gitId":"aexolate"},"content":"            File file \u003d new File(saveFilePath);","lastModifiedDate":"2023-08-26"},{"lineNumber":204,"author":{"gitId":"aexolate"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":205,"author":{"gitId":"aexolate"},"content":"                try {","lastModifiedDate":"2023-08-26"},{"lineNumber":206,"author":{"gitId":"aexolate"},"content":"                    file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-26"},{"lineNumber":207,"author":{"gitId":"aexolate"},"content":"                    file.createNewFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":208,"author":{"gitId":"aexolate"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":209,"author":{"gitId":"aexolate"},"content":"                    System.out.println(\"OH NO..., \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":210,"author":{"gitId":"aexolate"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":211,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":212,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":213,"author":{"gitId":"aexolate"},"content":"            FileWriter fw \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2023-08-26"},{"lineNumber":214,"author":{"gitId":"aexolate"},"content":"            fw.write(serializeTasks(tasks));","lastModifiedDate":"2023-08-26"},{"lineNumber":215,"author":{"gitId":"aexolate"},"content":"            fw.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":216,"author":{"gitId":"aexolate"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":217,"author":{"gitId":"aexolate"},"content":"            System.out.println(\"OH NO..., \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":218,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":219,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":220,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":221,"author":{"gitId":"aexolate"},"content":"    private static String serializeTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":222,"author":{"gitId":"aexolate"},"content":"        String s \u003d \"\";      //TODO: Replace with StringBuilder","lastModifiedDate":"2023-08-26"},{"lineNumber":223,"author":{"gitId":"aexolate"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":224,"author":{"gitId":"aexolate"},"content":"            s +\u003d task.serialize() + \"\\n\";","lastModifiedDate":"2023-08-26"},{"lineNumber":225,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":226,"author":{"gitId":"aexolate"},"content":"        return s;","lastModifiedDate":"2023-08-26"},{"lineNumber":227,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":228,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":229,"author":{"gitId":"aexolate"},"content":"    private static List\u003cTask\u003e deserializeTasks() throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":230,"author":{"gitId":"aexolate"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":231,"author":{"gitId":"aexolate"},"content":"        File f \u003d new File(saveFilePath); // create a File for the given file path","lastModifiedDate":"2023-08-26"},{"lineNumber":232,"author":{"gitId":"aexolate"},"content":"        Scanner s \u003d null; // create a Scanner using the File as the source","lastModifiedDate":"2023-08-26"},{"lineNumber":233,"author":{"gitId":"aexolate"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":234,"author":{"gitId":"aexolate"},"content":"            s \u003d new Scanner(f);","lastModifiedDate":"2023-08-26"},{"lineNumber":235,"author":{"gitId":"aexolate"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":236,"author":{"gitId":"aexolate"},"content":"            // No existing save-file","lastModifiedDate":"2023-08-26"},{"lineNumber":237,"author":{"gitId":"aexolate"},"content":"            return taskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":238,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":239,"author":{"gitId":"aexolate"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":240,"author":{"gitId":"aexolate"},"content":"            String line \u003d s.nextLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":241,"author":{"gitId":"aexolate"},"content":"            String[] cols \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-26"},{"lineNumber":242,"author":{"gitId":"aexolate"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":243,"author":{"gitId":"aexolate"},"content":"                Task task;","lastModifiedDate":"2023-08-26"},{"lineNumber":244,"author":{"gitId":"aexolate"},"content":"                switch (cols[0]) {","lastModifiedDate":"2023-08-26"},{"lineNumber":245,"author":{"gitId":"aexolate"},"content":"                    case \"T\":","lastModifiedDate":"2023-08-26"},{"lineNumber":246,"author":{"gitId":"aexolate"},"content":"                        task \u003d new Todo(cols[2]);","lastModifiedDate":"2023-08-26"},{"lineNumber":247,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":248,"author":{"gitId":"aexolate"},"content":"                    case \"D\":","lastModifiedDate":"2023-08-26"},{"lineNumber":249,"author":{"gitId":"aexolate"},"content":"                        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":250,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime byDt \u003d parseDateTimeString(cols[3]);","lastModifiedDate":"2023-08-26"},{"lineNumber":251,"author":{"gitId":"aexolate"},"content":"                            task \u003d new Deadline(cols[2], byDt);","lastModifiedDate":"2023-08-26"},{"lineNumber":252,"author":{"gitId":"aexolate"},"content":"                        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":253,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027by\u0027 datetime was not in a valid format.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":254,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-26"},{"lineNumber":255,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":256,"author":{"gitId":"aexolate"},"content":"                    case \"E\":","lastModifiedDate":"2023-08-26"},{"lineNumber":257,"author":{"gitId":"aexolate"},"content":"                        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":258,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime fromDt \u003d parseDateTimeString(cols[3]);","lastModifiedDate":"2023-08-26"},{"lineNumber":259,"author":{"gitId":"aexolate"},"content":"                            LocalDateTime toDt \u003d parseDateTimeString(cols[4]);","lastModifiedDate":"2023-08-26"},{"lineNumber":260,"author":{"gitId":"aexolate"},"content":"                            task \u003d new Event(cols[2], fromDt, toDt);","lastModifiedDate":"2023-08-26"},{"lineNumber":261,"author":{"gitId":"aexolate"},"content":"                        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":262,"author":{"gitId":"aexolate"},"content":"                            throw new DukeException(\"â˜¹ OOPS!!! The \u0027by\u0027 datetime was not in a valid format.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":263,"author":{"gitId":"aexolate"},"content":"                        }","lastModifiedDate":"2023-08-26"},{"lineNumber":264,"author":{"gitId":"aexolate"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":265,"author":{"gitId":"aexolate"},"content":"                    default:","lastModifiedDate":"2023-08-26"},{"lineNumber":266,"author":{"gitId":"aexolate"},"content":"                        throw new DukeException(\"Invalid File Format\");","lastModifiedDate":"2023-08-26"},{"lineNumber":267,"author":{"gitId":"aexolate"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":268,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":269,"author":{"gitId":"aexolate"},"content":"                if (cols[1].equals(\"1\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":270,"author":{"gitId":"aexolate"},"content":"                    task.markAsDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":271,"author":{"gitId":"aexolate"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":272,"author":{"gitId":"aexolate"},"content":"                taskList.add(task);","lastModifiedDate":"2023-08-26"},{"lineNumber":273,"author":{"gitId":"aexolate"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {","lastModifiedDate":"2023-08-26"},{"lineNumber":274,"author":{"gitId":"aexolate"},"content":"                throw new DukeException(\"Invalid File Format\");","lastModifiedDate":"2023-08-26"},{"lineNumber":275,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":276,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":277,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":278,"author":{"gitId":"aexolate"},"content":"        return taskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":279,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":280,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":281,"author":{"gitId":"aexolate"},"content":"    // Get number of tasks in the list","lastModifiedDate":"2023-08-22"},{"lineNumber":282,"author":{"gitId":"aexolate"},"content":"    private static String getListSize(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-22"},{"lineNumber":283,"author":{"gitId":"aexolate"},"content":"        return \"Now you have \" + tasks.size() + \" tasks in the list.\";","lastModifiedDate":"2023-08-22"},{"lineNumber":284,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":285,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":286,"author":{"gitId":"aexolate"},"content":"    // Lists all the commands saved in the arraylist","lastModifiedDate":"2023-08-22"},{"lineNumber":287,"author":{"gitId":"aexolate"},"content":"    private static void printList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-22"},{"lineNumber":288,"author":{"gitId":"aexolate"},"content":"        int idx \u003d 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":289,"author":{"gitId":"aexolate"},"content":"        for(Task t : tasks) {","lastModifiedDate":"2023-08-22"},{"lineNumber":290,"author":{"gitId":"aexolate"},"content":"            System.out.println(String.format(\"%d.%s\", idx, t));","lastModifiedDate":"2023-08-22"},{"lineNumber":291,"author":{"gitId":"aexolate"},"content":"            idx++;","lastModifiedDate":"2023-08-22"},{"lineNumber":292,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":293,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":294,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":295,"author":{"gitId":"aexolate"},"content":"    // Marks the Task as Done or Not Done","lastModifiedDate":"2023-08-22"},{"lineNumber":296,"author":{"gitId":"aexolate"},"content":"    private static void updateTaskStatus(List\u003cTask\u003e tasks, String input, boolean isDone) throws DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":297,"author":{"gitId":"aexolate"},"content":"        // Validates if the user has specified the index to be updated","lastModifiedDate":"2023-08-22"},{"lineNumber":298,"author":{"gitId":"aexolate"},"content":"        if (input.split(\" \").length \u003c 2) {","lastModifiedDate":"2023-08-21"},{"lineNumber":299,"author":{"gitId":"aexolate"},"content":"            throw new DukeException(\"No index was provided. Please enter the task index to be updated.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":300,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":301,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":302,"author":{"gitId":"aexolate"},"content":"        try {","lastModifiedDate":"2023-08-21"},{"lineNumber":303,"author":{"gitId":"aexolate"},"content":"            int taskIdx \u003d Integer.parseInt(input.split(\" \")[1]);","lastModifiedDate":"2023-08-21"},{"lineNumber":304,"author":{"gitId":"aexolate"},"content":"            if (taskIdx \u003e 0 \u0026\u0026 taskIdx \u003c\u003d tasks.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":305,"author":{"gitId":"aexolate"},"content":"                // The -1 is because of the list 0-indexing","lastModifiedDate":"2023-08-21"},{"lineNumber":306,"author":{"gitId":"aexolate"},"content":"                Task t \u003d tasks.get(taskIdx - 1);","lastModifiedDate":"2023-08-21"},{"lineNumber":307,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":308,"author":{"gitId":"aexolate"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-21"},{"lineNumber":309,"author":{"gitId":"aexolate"},"content":"                    // Mark task as done","lastModifiedDate":"2023-08-21"},{"lineNumber":310,"author":{"gitId":"aexolate"},"content":"                    t.markAsDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":311,"author":{"gitId":"aexolate"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":312,"author":{"gitId":"aexolate"},"content":"                } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":313,"author":{"gitId":"aexolate"},"content":"                    // Mark task as not done","lastModifiedDate":"2023-08-21"},{"lineNumber":314,"author":{"gitId":"aexolate"},"content":"                    t.markAsUndone();","lastModifiedDate":"2023-08-21"},{"lineNumber":315,"author":{"gitId":"aexolate"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-21"},{"lineNumber":316,"author":{"gitId":"aexolate"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":317,"author":{"gitId":"aexolate"},"content":"                System.out.println(t);","lastModifiedDate":"2023-08-21"},{"lineNumber":318,"author":{"gitId":"aexolate"},"content":"            } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":319,"author":{"gitId":"aexolate"},"content":"                // Do not process the command if the index was out of bounds","lastModifiedDate":"2023-08-21"},{"lineNumber":320,"author":{"gitId":"aexolate"},"content":"                throw new DukeException(\"Index provided was out-of-bounds. Use the index number\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":321,"author":{"gitId":"aexolate"},"content":"                        \" labelled for the task in the command \u0027list\u0027!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":322,"author":{"gitId":"aexolate"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":323,"author":{"gitId":"aexolate"},"content":"        } catch (NumberFormatException ex) {","lastModifiedDate":"2023-08-21"},{"lineNumber":324,"author":{"gitId":"aexolate"},"content":"            // Ensure the index is integer","lastModifiedDate":"2023-08-21"},{"lineNumber":325,"author":{"gitId":"aexolate"},"content":"            throw new DukeException(\"Please provide a valid integer for the index.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":326,"author":{"gitId":"aexolate"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":327,"author":{"gitId":"aexolate"},"content":"        saveTasks(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":328,"author":{"gitId":"aexolate"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":329,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":330,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"aexolate":330}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"\tprotected LocalDateTime by;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"\t * Represents task that need to be done before a specific date/time","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"\t * @param description \tDescription of the task","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"\t * @param by\t\t\tDue date / time","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"\tpublic Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"\t\tsuper(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"\t\tthis.by \u003d by;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"\tpublic String serialize() {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"\t\treturn String.format(\"D | %d | %s | %s\",","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"\t\t\t\tsuper.isDone ? 1 : 0,","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"aexolate"},"content":"\t\t\t\tsuper.description,","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"aexolate"},"content":"\t\t\t\tthis.by.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"aexolate"},"content":"\tpublic String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"aexolate"},"content":"\t\treturn \"[D]\" + super.toString() +","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"aexolate"},"content":"\t\t\t\t\" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"aexolate":30}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"\tpublic DukeException(String errorMessage) {","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"\t\tsuper(errorMessage);","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"aexolate":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"\tprotected LocalDateTime from;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"\tprotected LocalDateTime to;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"\t * Represents task that start at a specific date/time and ends at a specific date/time","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"\t * @param description \tDescription of the task","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"\t * @param from\t\t\tStart date / time","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"\t * @param to\t\t\tEnd date / time","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"\tpublic Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"\t\tsuper(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"\t\tthis.from \u003d from;","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"\t\tthis.to \u003d to;","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"aexolate"},"content":"\tpublic String serialize() {","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"aexolate"},"content":"\t\treturn String.format(\"E | %d | %s | %s | %s\",","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"\t\t\t\tsuper.isDone ? 1 : 0,","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"aexolate"},"content":"\t\t\t\tsuper.description,","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"aexolate"},"content":"\t\t\t\tthis.from.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")),","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"aexolate"},"content":"\t\t\t\tthis.to.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"aexolate"},"content":"\tpublic String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"aexolate"},"content":"\t\treturn \"[E]\" + super.toString()","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"aexolate"},"content":"\t\t\t\t+ \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\"))","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"aexolate"},"content":"\t\t\t\t+ \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"aexolate":35}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"\tprotected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"\tprotected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"\t * Represents a task that has a completion status","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"\t * @param description Description of the task","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"\tpublic Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"\t\tthis.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"\t\tthis.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"\tprivate String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"\t\t// mark done task with X","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"\t\treturn (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"\t * Marks the task as done.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"aexolate"},"content":"\tpublic void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"\t\tthis.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"aexolate"},"content":"\t * Marks the task as undone.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"aexolate"},"content":"\tpublic void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"aexolate"},"content":"\t\tthis.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"aexolate"},"content":"\t * Serializes the task in a file friendly format","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"aexolate"},"content":"\t * @return String representation of the task","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"aexolate"},"content":"\tpublic abstract String serialize();","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"aexolate"},"content":"\tpublic String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"aexolate"},"content":"\t\treturn getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"aexolate":44}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"\t/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"\t * Represents task without any date/time attached to it","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"\t * @param description Description of the task","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"\t */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"\tpublic Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"\t\tsuper(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"\tpublic String serialize() {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"\t\treturn String.format(\"T | %d | %s\", super.isDone ? 1 : 0, super.description);","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"\t@Override","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"\tpublic String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"\t\treturn \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"\t}","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"aexolate":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aexolate"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"aexolate"},"content":"deadline return book /by Sunday 3pm","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"aexolate"},"content":"event project meeting /from Mon 2pm /to Thurs 8pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"aexolate"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"aexolate"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"aexolate"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"aexolate"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"aexolate"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"aexolate"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"aexolate"},"content":"deadline do homework","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"aexolate"},"content":"deadline do homework /by","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"aexolate"},"content":"deadline /by Today","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"aexolate"},"content":"event lecture","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"aexolate"},"content":"event lecture /from","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"event lecture /from /to","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"aexolate"},"content":"event lecture /from wed 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"aexolate"},"content":"event lecture /to thurs 2pm","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"aexolate"},"content":"event /from wed 5pm /to wed 6pm","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"delete 2","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"aexolate"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"aexolate"},"content":"delete 3","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"aexolate"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"aexolate"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"aexolate"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"aexolate"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"aexolate":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"aexolate"},"content":"java -classpath ..\\bin CarbonBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aexolate":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"aexolate"},"content":"java -classpath ../bin CarbonBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"aexolate":1,"-":37}}]
