[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"brein62":6}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"T | 1 | do something","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"D | 0 | something | 2023-09-12T06:30","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"E | 0 | do something | 2023-09-12T12:06:53 | 2023-09-13T13:30","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"D | 1 | more | 2023-09-12T12:50","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"T | 1 | studsy","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"T | 1 | something","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"T | 0 | s","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":7}},{"path":"data/duke1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"T | 0 | b","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"T | 0 | c","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"D | 0 | d | 12pm","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"brein62":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" * The primary Duke class. Contains the main function to run the Duke chatbot Bob.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"public class Duke {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /** The TaskList to use in the chatbot. */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    /** The Storage object handling file read/save. */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    /** The Ui object handling interaction with the user in the chatbot. */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Creates a new Duke chatbot object.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param filePath The file path of the file that will contain all tasks within the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * Runs the Duke chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"                String message \u003d ui.readCommand(sc);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"                Command c \u003d Parser.parse(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            } finally {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"        Path path \u003d Paths.get(\"data\", \"duke.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        new Duke(path).run();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"brein62":61,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":" * Represents an exception that happens when an invalid input is entered into the program.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"     * Creates the DukeException with the given message msg.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"     * @param msg The exception message for the DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        return \"\\t____________________________________________________________\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                + \"\\t ☹ OOPS!!! \" + this.getMessage() + \"\\n\"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"                + \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"brein62":22}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":" * Represents a parser to process commands entered into the chatbot and returns the corresponding Command.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into a Command, then returns that Command.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * @param message The message to be parsed.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     * @return The Command parsed from the given message.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public static Command parse(String message) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        if (message.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"        } else if (message.equals(\"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"You need to specify the index of the task to mark.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"                return new MarkCommand(Integer.parseInt(message.substring(5)));","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The index of the task to mark is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 7) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"You need to specify the index of the task to unmark.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"                return new UnmarkCommand(Integer.parseInt(message.substring(7)));","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The index of the task to unmark is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"find\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"You need to specify the keyword to find the tasks.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"            return new FindCommand(message.substring(5));","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 7) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"You need to specify the index of the task to delete.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"                return new DeleteCommand(Integer.parseInt(message.substring(7)));","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The index of the task to delete is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"            return new AddCommand(message.substring(5));","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 9) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"            String[] deadline \u003d message.substring(9).split(\" /by \");","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"            if (deadline.length !\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"A deadline requires exactly 1 due date.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            return new AddCommand(deadline[0], deadline[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"        } else if (message.startsWith(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"            if (message.length() \u003c\u003d 6) {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"            String[] event \u003d message.substring(6).split(\" /to | /from \");","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"            if (event.length !\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"An event requires exactly 2 from/to dates.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"            return new AddCommand(event[0], event[1], event[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":88}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import java.util.Objects;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":" * Represents a file storage where all tasks will be saved into and retrieved from when the chatbot is run.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /** The file path to store, read and save all tasks within the program. */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    private Path filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * Creates a new Storage object with the given filePath.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @param filePath The file path to store, read and save all tasks within the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * Processes a line of the file retrieved from the hard disk, and adds the corresponding task into a specified","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * TaskList if the line is valid.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"     * @param line The line of the file to be parsed and added into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     * @param tasks The TaskList to store any new Task parsed into.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    public void processLine(String line, TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"        String[] lineSeq \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            boolean isValidCompletion \u003d (lineSeq.length \u003c 2)","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"                ? false","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"                : (Objects.equals(lineSeq[1], \"1\") || Objects.equals(lineSeq[1], \"0\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"            boolean isValidTodo \u003d (line.startsWith(\"T\") \u0026\u0026 lineSeq.length \u003d\u003d 3);","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"            boolean isValidDeadline \u003d (line.startsWith(\"D\") \u0026\u0026 lineSeq.length \u003d\u003d 4);","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            boolean isValidEvent \u003d (line.startsWith(\"E\") \u0026\u0026 lineSeq.length \u003d\u003d 5);","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"            if (isValidTodo \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Todo(lineSeq[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"            } else if (isValidDeadline \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Deadline(lineSeq[2], LocalDateTime.parse(lineSeq[3]));","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"            } else if (isValidEvent \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Event(lineSeq[2], LocalDateTime.parse(lineSeq[3]), LocalDateTime.parse(lineSeq[4]));","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"                // else do nothing, specifying that the task is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"                System.out.println(\"The task \" + line + \" is invalid and is ignored!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"            // do nothing, specifying that the task is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            System.out.println(\"The task \" + line + \" is invalid and is ignored!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"     * Loads all tasks from the file in the hard disk, and returns the TaskList containing all tasks processed from the","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"     * file.","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"     * @return TaskList containing all valid tasks processed from the file; else empty TaskList if any error in reading","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"     *         the file occurs.","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"    public TaskList load() {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"        boolean fileExists \u003d Files.exists(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"            if (!fileExists) {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"                List\u003cString\u003e contents \u003d Files.readAllLines(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"                for (String line : contents) {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"                    processLine(line, tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"            return tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"            System.err.println(\"Cannot read initial tasks from file!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            return new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"     * Saves all tasks in the chatbot into the file in the hard disk.","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"     * @param tasks The list of tasks to be saved into the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    public void saveTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"        boolean fileExists \u003d Files.exists(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"            if (!fileExists) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"                ArrayList\u003cString\u003e lines \u003d tasks.getSavedStrings();","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"                Files.write(filePath, lines);","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"            System.err.println(\"Cannot write tasks to file!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":127}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":" * Represents a user interface for the user to input their commands and the bot to reply a message.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    /** A divider string. */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    private static final String DIVIDER \u003d \"\\t____________________________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * Prints a welcome message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        String introMessage \u003d \"\\t____________________________________________________________\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"                + \"\\t Hello! I\u0027m Bob the Chatbot!\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                + \"\\t What can I do for you?\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"                + \"\\t____________________________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        System.out.println(introMessage);","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * Prints a line containing a divider.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     * Reads the next line from the specified Scanner.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * @param sc The scanner to read the next line from.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * @return The next line read from the Scanner, as a String.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    public String readCommand(Scanner sc) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     * Prints an error message, formatted for the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * @param errorMsg The error message to be printed.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    public void showError(String errorMsg) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        print(\"☹ OOPS!!! \" + errorMsg);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * Prints a message, formatted for the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    public void print(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"        System.out.println(\"\\t \" + message);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":59}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":" * Represents a command to add tasks (todos, deadlines, and events) into the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    enum CommandType {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        TODO,","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        EVENT","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    private CommandType type;","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    private String message;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    private String deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    private String from;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    private String to;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for todos.","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * @param message The description for the to-do in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.TODO;","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        this.from \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        this.to \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for deadlines.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     * @param message The description for the deadline in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * @param deadline The deadline as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message, String deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.DEADLINE;","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        this.from \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"        this.to \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for events.","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     * @param message The description for the event in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"     * @param from The starting date for the event as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"     * @param to The ending date for the event as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message, String from, String to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.EVENT;","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"     * Executes the given AddCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to run the command on.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print any output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save tasks to.","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If task type is invalid; or date Strings cannot be parsed (for deadlines and events).","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"            Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"            switch (this.type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"            case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Todo(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Deadline(message, LocalDateTime.parse(deadline));","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"            case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Event(message, LocalDateTime.parse(from), LocalDateTime.parse(to));","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"Task type is invalid!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"                // break not needed as exception is thrown","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"            ui.print(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            ui.print(\"  \" + newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"            ui.print(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Dates should be formatted yyyy-mm-ddThh:mm:ss,\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"                    + \"\\t e.g. 2023-09-12T12:06:53\");","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the specific AddCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"     * @return \"Add Todo\" if AddCommand adds a to-do; \"Add Deadline\" if AddCommand adds a deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"     *         \"Add Event\" if AddCommand adds an event; \"Add \" otherwise.","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"        String typeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"        switch (this.type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"        case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Todo\";","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"        case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"        return \"Add \" + typeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":136}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" * Represents a specific command to be executed.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * Returns whether the Command should exit the program when run.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public abstract String getCommandType();","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":25}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" * Represents a command to delete tasks from the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * Initialises a DeleteCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to delete.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * Executes the given DeleteCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to delete a task on.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print any output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            Task deletedTask \u003d tasks.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            ui.print(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            ui.print(\"  \" + deletedTask.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            ui.print(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot delete a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the DeleteCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * @return Delete.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        return \"Delete\";","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":55}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to quit the chatbot program.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     * Executes the given ExitCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to run the command on (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print any output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        ui.print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Returns whether the ExitCommand should exit the program when run, which is true.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @return True.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        return true;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the ExitCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * @return Exit.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        return \"Exit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":43}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to find tasks within the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /** The String to search for. */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    private String findStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * Creates a FindCommand with a specified search string.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @param findStr The search string to search the TaskList for.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public FindCommand(String findStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        this.findStr \u003d findStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Finds tasks in the TaskList with the given search string, and prints the matching tasks. Prints a message if no","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * matching tasks are found.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to search using the search keyword.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print the output onto.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        TaskList foundTasks \u003d tasks.find(findStr);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        if (foundTasks.getSize() \u003e 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            ui.print(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            for (int i \u003d 0; i \u003c foundTasks.getSize(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"                System.out.println(\"\\t \" + (i + 1) + \".\" + foundTasks.getTaskString(i + 1));","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            ui.print(\"There are no tasks with the given keyword!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the FindCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     * @return Find.","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        return \"Find\";","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"brein62":54}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to list all tasks within the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     * Executes the given ListCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print the output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        ui.print(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"            ui.print((i + 1) + \".\" + tasks.getTaskString(i + 1));","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the ListCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @return List.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        return \"List\";","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":36}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" * Represents a command to mark tasks as completed in the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * Initialises a MarkCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to mark as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Executes the given MarkCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to mark a task in.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print any output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            tasks.markAsDone(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            ui.print(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            ui.print(\"  \" + tasks.getTaskString(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot mark a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the MarkCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * @return Mark.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        return \"Mark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":53}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" * Represents a command to mark tasks as not completed in the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * Initialises an UnmarkCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to unmark.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * Executes the given UnmarkCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to unmark a task in.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param ui The UI to print any output onto.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"            tasks.unmarkAsDone(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            ui.print(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            ui.print(\"  \" + tasks.getTaskString(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot unmark a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the UnmarkCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     * @return Unmark.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        return \"Unmark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":54}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * Represents a deadline task, containing a description and a deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * Returns a new Deadline task containing the message and the deadline date.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @param message The description for the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param deadline The deadline, as a LocalDateTime.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public Deadline(String message, LocalDateTime deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Deadline task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @return The deadline, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        return \"D | \" + this.getStatusNumber() + \" | \" + this.message + \" | \" + deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Deadline task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * @return The deadline, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        return \"[D]\" + this.getStatusIcon() + \" \" + this.message","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"                + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm:ss\")) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * Represents an event task, containing a description, from date and to date.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * Returns a new Event task containing the message and the from and to dates.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param message The description for the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @param from The starting date of the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     * @param to The ending date of the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    public Event(String message, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Event task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @return The event, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        return \"E | \" + this.getStatusNumber() + \" | \" + this.message + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Event task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"     * @return The event, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        return \"[E]\" + this.getStatusIcon() + \" \" + this.message","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"                + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm:ss\"))","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"                + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm:ss\")) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":46}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":" * Represents a task, containing a message and whether it is completed or not.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"    /** The message or description of the task. */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"    protected String message;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    /** Whether the task is done or not. */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * Creates a new Task object with the specified message.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @param message The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    public Task(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * Returns the status icon of the task, dependent on whether the task is done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * @return [X] if task is done; [ ] if task is not done.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     * Returns the status number of the task as a String, dependent on whether the task is done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * @return 1 if task is done; 0 if task is not done.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    public String getStatusNumber() {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        return isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"     * Marks the given task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * Marks the given task as undone.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"     * Checks whether the Task message contains a substring.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"     * @param substring The substring to search for within the Task message","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * @return true if Task message contains the substring; false otherwise","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"    public boolean contains(String substring) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"        return this.message.contains(substring);","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    public abstract String toSaveFormatString();","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"    public abstract String toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":67}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":" * Represents a list of tasks (todos/deadlines/events).","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    /** The list of tasks present in the TaskList. */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * Creates a new empty TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     * Adds a new Task into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     * @param task The task to be added into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * Returns the number of tasks in the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"     * Removes a Task with a specified index from the TaskList, then returns the removed Task.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"     * @param i The task index to be removed from the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"     * @return The Task that was removed from the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    public Task remove(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        return this.tasks.remove(i - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * Returns the String representation of the Task with the specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"     * @param i The task index to be accessed within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * @return String representation of the Task with the specified index within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    public String getTaskString(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        return this.tasks.get(i - 1).toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * Gets the alternate String representation of every Task within the TaskList (to be saved) and stores them into an","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     * ArrayList, in order.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     * @return The ArrayList containing all the save-file String representation of the Tasks within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    public ArrayList\u003cString\u003e getSavedStrings() {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            lines.add(task.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"        return lines;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"     * Marks a Task with a specified index as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to mark as done within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"    public void markAsDone(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"        this.tasks.get(i - 1).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"     * Marks a Task with a specified index as undone.","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to mark as undone within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"    public void unmarkAsDone(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"        this.tasks.get(i - 1).unmarkAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"     * Finds all tasks with description containing the search string, and returns the list of tasks as a TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"     * @param findStr The search string to search for the tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"     * @return TaskList containing all tasks with description containing the search string; an empty TaskList if no","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"     *         matching tasks are found.","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"    public TaskList find(String findStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"        TaskList foundTasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            if (task.contains(findStr)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"        return foundTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":106}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":" * Represents a todo task, containing a description.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"     * Returns a new Todo task containing the message.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"     * @param message The description for the to-do.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    public Todo(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Todo task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * @return The to-do task, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        return \"T | \" + this.getStatusNumber() + \" | \" + this.message;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Todo task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @return The to-do task, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        return \"[T]\" + this.getStatusIcon() + \" \" + this.message;","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":34}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    public void parse_otherMessage_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"nonsense\");","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public void parse_badEventParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event /from Jan 2023 /to FSJsf\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"            assertEquals(\"An event requires exactly 2 from/to dates.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    public void parse_emptyEventParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event \");","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of an event cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    public void parse_badDeadlineParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"deadline /by asdk 2023\");","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            assertEquals(\"A deadline requires exactly 1 due date.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    public void parse_emptyDeadlineParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"deadline \");","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of a deadline cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    public void parse_emptyTodoParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"todo \");","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"    public void parse_emptyMarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"mark \");","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to mark.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"    public void parse_badMarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"mark test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to mark is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"    public void parse_emptyUnmarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"unmark \");","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to unmark.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"    public void parse_badUnmarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"unmark test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to unmark is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"    public void parse_emptyDeleteParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"delete \");","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to delete.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"    public void parse_badDeleteParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"delete test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to delete is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"    public void parse_exitCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"        assertTrue(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Exit\");","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"    public void parse_listCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"List\");","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"    public void parse_markCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"mark 4\");","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Mark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"    public void parse_unmarkCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"unmark 4\");","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Unmark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"    public void parse_deleteCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"delete 6\");","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Delete\");","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"    public void parse_todoCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"todo something\");","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Todo\");","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"    public void parse_deadlineCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"deadline sth /by 2023-11-11T12:30:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Deadline\");","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"brein62"},"content":"    public void parse_eventCommand_success() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"event some event /from 2023-11-11T12:30:00 /to 2023-11-12T12:00:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Event\");","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":185}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"public class UiTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    public void test1() {","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"        assertEquals(1, 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":12}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void getCommandType_todo_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\");","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Todo\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void getCommandType_deadline_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\", \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Deadline\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public void getCommandType_event_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\",","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"                \"2023-10-10T12:34:56\", \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Event\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\");","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        AddCommand b \u003d new AddCommand(\"Hello\", \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        AddCommand c \u003d new AddCommand(\"Hello\",","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"                \"2023-10-10T12:34:56\", \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        assertFalse(a.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        assertFalse(b.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":38}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        DeleteCommand d \u003d new DeleteCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(d.getCommandType(), \"Delete\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        DeleteCommand d \u003d new DeleteCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(d.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class ExitCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        ExitCommand e \u003d new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(e.getCommandType(), \"Exit\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        ExitCommand e \u003d new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertTrue(e.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class FindCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        FindCommand f \u003d new FindCommand(\"something\");","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(f.getCommandType(), \"Find\");","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        FindCommand f \u003d new FindCommand(\"something\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(f.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class ListCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        ListCommand l \u003d new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(l.getCommandType(), \"List\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        ListCommand l \u003d new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(l.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class MarkCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        MarkCommand m \u003d new MarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(m.getCommandType(), \"Mark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        MarkCommand m \u003d new MarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(m.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/UnmarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class UnmarkCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        UnmarkCommand um \u003d new UnmarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(um.getCommandType(), \"Unmark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        UnmarkCommand um \u003d new UnmarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(um.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public void testCreate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Message\", d.message);","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        assertEquals(\"D | 0 | Message | 2023-10-10T12:00\", d.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        d.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        assertEquals(\"D | 1 | Message | 2023-10-10T12:00\", d.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-12-13T12:45:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[D][ ] Message (by: Dec 13 2023, 12:45:00)\", d.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        d.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[D][X] Message (by: Dec 13 2023, 12:45:00)\", d.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":35}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class EventTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public void testCreate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"        Event e \u003d new Event(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Message\", e.message);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        Event e \u003d new Event(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:30:45\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-11T13:01:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        assertEquals(\"E | 0 | Message | 2023-10-10T12:30:45 | 2023-10-11T13:01\", e.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        e.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        assertEquals(\"E | 1 | Message | 2023-10-10T12:30:45 | 2023-10-11T13:01\", e.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        Event e \u003d new Event(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:15:00\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[E][ ] Message (from: Oct 10 2023, 12:15:00 to: Oct 11 2023, 13:30:45)\", e.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        e.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[E][X] Message (from: Oct 10 2023, 12:15:00 to: Oct 11 2023, 13:30:45)\", e.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":38}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public void testGetSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getSize(), 0);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    public void testAddTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getSize(), 3);","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    public void testRemoveTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getSize(), 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    public void testGetSavedStrings() {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"        tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        ArrayList\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(0), \"T | 0 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(2), \"D | 0 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    public void testGetTaskString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(1), \"[T][ ] First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(2),","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"                \"[D][ ] Second task (by: Oct 10 2023, 12:34:56)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(3),","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"                \"[E][ ] Third task (from: Oct 10 2023, 12:34:56 to: Oct 10 2023, 12:34:57)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(4),","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"                \"[D][ ] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"        tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        tl.markAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"        ArrayList\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(0), \"T | 0 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(2), \"D | 1 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(3), \"[D][X] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"    public void testUnmarkAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"        tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"        tl.markAsDone(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"        tl.markAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"        tl.unmarkAsDone(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        tl.unmarkAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        ArrayList\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(0), \"T | 1 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(2), \"D | 0 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(1), \"[T][X] First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getTaskString(3), \"[D][ ] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":108}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testCreate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Todo 1\");","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Todo 1\", t.message);","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Todo 2\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertEquals(\"T | 0 | Todo 2\", t.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"        t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        assertEquals(\"T | 1 | Todo 2\", t.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Message\");","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[T][ ] Message\", t.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"        t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[T][X] Message\", t.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"todo join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"todo borrow book","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"event some event /from 2023-09-11T08:00:00 /to 2023-09-11T16:00:00","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"deadline return book /by 2023-09-01T09:30:00","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"deadline return book /by 12 dec 2023","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"blah","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"find book","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"delete 149","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"find blablablablabla","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"brein62":22}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"brein62":1}}]
